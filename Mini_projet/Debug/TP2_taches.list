
TP2_taches.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041dd0  0800d140  0800d140  0001d140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ef10  0804ef10  000600b0  2**0
                  CONTENTS
  4 .ARM          00000008  0804ef10  0804ef10  0005ef10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ef18  0804ef18  000600b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804ef18  0804ef18  0005ef18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804ef1c  0804ef1c  0005ef1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0804ef20  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004998  200000b0  0804efd0  000600b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a48  0804efd0  00064a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000600b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032466  00000000  00000000  000600e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006baa  00000000  00000000  00092546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  000990f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002368  00000000  00000000  0009b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030665  00000000  00000000  0009dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003210f  00000000  00000000  000ce12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117430  00000000  00000000  0010023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021766c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4a4  00000000  00000000  002176bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d128 	.word	0x0800d128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800d128 	.word	0x0800d128

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f004 fb87 	bl	8004d28 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f001 fed6 	bl	80023d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f004 fd21 	bl	800507c <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f001 fec6 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000cc 	.word	0x200000cc
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC3_Init+0x98>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_ADC3_Init+0x9c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC3_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ADC3_Init+0x98>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_ADC3_Init+0xa0>)
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006ba:	f004 fb35 	bl	8004d28 <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006c4:	f001 fe84 	bl	80023d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006c8:	2306      	movs	r3, #6
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006da:	f004 fccf 	bl	800507c <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006e4:	f001 fe74 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000114 	.word	0x20000114
 80006f4:	40012200 	.word	0x40012200
 80006f8:	0f000001 	.word	0x0f000001

080006fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <HAL_ADC_MspInit+0xc8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d124      	bne.n	8000768 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	481a      	ldr	r0, [pc, #104]	; (80007cc <HAL_ADC_MspInit+0xd0>)
 8000762:	f005 fdf7 	bl	8006354 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000766:	e029      	b.n	80007bc <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <HAL_ADC_MspInit+0xd4>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d124      	bne.n	80007bc <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80007a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <HAL_ADC_MspInit+0xd8>)
 80007b8:	f005 fdcc 	bl	8006354 <HAL_GPIO_Init>
}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40012000 	.word	0x40012000
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40012200 	.word	0x40012200
 80007d4:	40021400 	.word	0x40021400

080007d8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_DAC_Init+0x4c>)
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_DAC_Init+0x50>)
 80007ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_DAC_Init+0x4c>)
 80007ee:	f004 ff77 	bl	80056e0 <HAL_DAC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007f8:	f001 fdea 	bl	80023d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_DAC_Init+0x4c>)
 800080c:	f004 ffee 	bl	80057ec <HAL_DAC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000816:	f001 fddb 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000015c 	.word	0x2000015c
 8000828:	40007400 	.word	0x40007400

0800082c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_DAC_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12b      	bne.n	80008a6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800087e:	2310      	movs	r3, #16
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	2303      	movs	r3, #3
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <HAL_DAC_MspInit+0x8c>)
 8000892:	f005 fd5f 	bl	8006354 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	2036      	movs	r0, #54	; 0x36
 800089c:	f004 fef6 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	f004 ff0f 	bl	80056c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40007400 	.word	0x40007400
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000

080008bc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DMA2D_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008f2:	f005 f993 	bl	8005c1c <HAL_DMA2D_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008fc:	f001 fd68 	bl	80023d0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000900:	2101      	movs	r1, #1
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_DMA2D_Init+0x5c>)
 8000904:	f005 fbf8 	bl	80060f8 <HAL_DMA2D_ConfigLayer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090e:	f001 fd5f 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000170 	.word	0x20000170
 800091c:	4002b000 	.word	0x4002b000

08000920 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_DMA2D_MspInit+0x44>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 8000938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	205a      	movs	r0, #90	; 0x5a
 8000950:	f004 fe9c 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000954:	205a      	movs	r0, #90	; 0x5a
 8000956:	f004 feb5 	bl	80056c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	4002b000 	.word	0x4002b000
 8000968:	40023800 	.word	0x40023800

0800096c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_FMC_Init+0x98>)
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_FMC_Init+0x9c>)
 8000988:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_FMC_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_FMC_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_FMC_Init+0x98>)
 8000998:	2204      	movs	r2, #4
 800099a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_FMC_Init+0x98>)
 800099e:	2210      	movs	r2, #16
 80009a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_FMC_Init+0x98>)
 80009a4:	2240      	movs	r2, #64	; 0x40
 80009a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_FMC_Init+0x98>)
 80009aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_FMC_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_FMC_Init+0x98>)
 80009b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_FMC_Init+0x98>)
 80009c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_FMC_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009dc:	2303      	movs	r3, #3
 80009de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_FMC_Init+0x98>)
 80009ee:	f008 feef 	bl	80097d0 <HAL_SDRAM_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009f8:	f001 fcea 	bl	80023d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001b0 	.word	0x200001b0
 8000a08:	a0000140 	.word	0xa0000140

08000a0c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_FMC_MspInit+0x100>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d16d      	bne.n	8000b04 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_FMC_MspInit+0x100>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <HAL_FMC_MspInit+0x104>)
 8000a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a32:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <HAL_FMC_MspInit+0x104>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6393      	str	r3, [r2, #56]	; 0x38
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <HAL_FMC_MspInit+0x104>)
 8000a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a46:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a4a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482c      	ldr	r0, [pc, #176]	; (8000b14 <HAL_FMC_MspInit+0x108>)
 8000a62:	f005 fc77 	bl	8006354 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a66:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a6a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <HAL_FMC_MspInit+0x10c>)
 8000a82:	f005 fc67 	bl	8006354 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a86:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a8a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481e      	ldr	r0, [pc, #120]	; (8000b1c <HAL_FMC_MspInit+0x110>)
 8000aa2:	f005 fc57 	bl	8006354 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000aa6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000aaa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <HAL_FMC_MspInit+0x114>)
 8000ac2:	f005 fc47 	bl	8006354 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <HAL_FMC_MspInit+0x118>)
 8000ae0:	f005 fc38 	bl	8006354 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af4:	230c      	movs	r3, #12
 8000af6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <HAL_FMC_MspInit+0x11c>)
 8000afe:	f005 fc29 	bl	8006354 <HAL_GPIO_Init>
 8000b02:	e000      	b.n	8000b06 <HAL_FMC_MspInit+0xfa>
    return;
 8000b04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200001e4 	.word	0x200001e4
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021400 	.word	0x40021400
 8000b24:	40021c00 	.word	0x40021c00
 8000b28:	40020800 	.word	0x40020800

08000b2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b34:	f7ff ff6a 	bl	8000a0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <vApplicationGetIdleTaskMemory+0x30>)
 8000b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200001f8 	.word	0x200001f8
 8000b70:	200002ac 	.word	0x200002ac

08000b74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b09c      	sub	sp, #112	; 0x70
 8000b78:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_FREERTOS_Init+0xa4>)
 8000b7c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b80:	461d      	mov	r5, r3
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00a fada 	bl	800b14e <osThreadCreate>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <MX_FREERTOS_Init+0xa8>)
 8000b9e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, led15, osPriorityNormal, 0, 128);
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_FREERTOS_Init+0xac>)
 8000ba2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00a fac7 	bl	800b14e <osThreadCreate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <MX_FREERTOS_Init+0xb0>)
 8000bc4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, leds, osPriorityBelowNormal, 0, 128);
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_FREERTOS_Init+0xb4>)
 8000bc8:	f107 041c 	add.w	r4, r7, #28
 8000bcc:	461d      	mov	r5, r3
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00a fab4 	bl	800b14e <osThreadCreate>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <MX_FREERTOS_Init+0xb8>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, heure, osPriorityNormal, 0, 1024);
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_FREERTOS_Init+0xbc>)
 8000bee:	463c      	mov	r4, r7
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a faa3 	bl	800b14e <osThreadCreate>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <MX_FREERTOS_Init+0xc0>)
 8000c0c:	6013      	str	r3, [r2, #0]



  /* USER CODE END RTOS_THREADS */

}
 8000c0e:	bf00      	nop
 8000c10:	3770      	adds	r7, #112	; 0x70
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdb0      	pop	{r4, r5, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	0800d170 	.word	0x0800d170
 8000c1c:	200001e8 	.word	0x200001e8
 8000c20:	0800d18c 	.word	0x0800d18c
 8000c24:	200001ec 	.word	0x200001ec
 8000c28:	0800d1a8 	.word	0x0800d1a8
 8000c2c:	200001f0 	.word	0x200001f0
 8000c30:	0800d1c4 	.word	0x0800d1c4
 8000c34:	200001f4 	.word	0x200001f4

08000c38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f00a facf 	bl	800b1e6 <osDelay>
 8000c48:	e7fa      	b.n	8000c40 <StartDefaultTask+0x8>
	...

08000c4c <led15>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led15 */
void led15(void const * argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led15 */
  /* Infinite loop */

	TickType_t LastCall=xTaskGetTickCount();
 8000c54:	f00a ff16 	bl	800ba84 <xTaskGetTickCount>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
	TickType_t value=250;
 8000c5c:	23fa      	movs	r3, #250	; 0xfa
 8000c5e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  //HAL_GPIO_WritePin(LED15_GPIO_Port,LED15_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
	  HAL_GPIO_WritePin(LED15_GPIO_Port,LED15_Pin,0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <led15+0x44>)
 8000c66:	f005 fe45 	bl	80068f4 <HAL_GPIO_WritePin>
	  vTaskDelayUntil(&LastCall,value);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f00a fd33 	bl	800b6dc <vTaskDelayUntil>
	  HAL_GPIO_WritePin(LED15_GPIO_Port,LED15_Pin,1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <led15+0x44>)
 8000c7c:	f005 fe3a 	bl	80068f4 <HAL_GPIO_WritePin>
	  vTaskDelayUntil(&LastCall,value);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00a fd28 	bl	800b6dc <vTaskDelayUntil>
	  HAL_GPIO_WritePin(LED15_GPIO_Port,LED15_Pin,0);
 8000c8c:	e7e8      	b.n	8000c60 <led15+0x14>
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <leds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leds */
void leds(void const * argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leds */
	TickType_t LastCall=xTaskGetTickCount();
 8000c9c:	f00a fef2 	bl	800ba84 <xTaskGetTickCount>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60bb      	str	r3, [r7, #8]
	TickType_t value=250;
 8000ca4:	23fa      	movs	r3, #250	; 0xfa
 8000ca6:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED17_GPIO_Port,LED17_Pin,1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <leds+0x5c>)
 8000cb0:	f005 fe20 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED16_GPIO_Port,LED16_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <leds+0x60>)
 8000cba:	f005 fe03 	bl	80068c4 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <leds+0x64>)
 8000cc6:	f005 fe15 	bl	80068f4 <HAL_GPIO_WritePin>
	  	vTaskDelayUntil(&LastCall,value);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00a fd03 	bl	800b6dc <vTaskDelayUntil>
	  	HAL_GPIO_WritePin(LED17_GPIO_Port,LED17_Pin,0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <leds+0x5c>)
 8000cde:	f005 fe09 	bl	80068f4 <HAL_GPIO_WritePin>
	  	vTaskDelayUntil(&LastCall,value);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	68f9      	ldr	r1, [r7, #12]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00a fcf7 	bl	800b6dc <vTaskDelayUntil>
	  HAL_GPIO_WritePin(LED17_GPIO_Port,LED17_Pin,1);
 8000cee:	e7db      	b.n	8000ca8 <leds+0x14>
 8000cf0:	40021c00 	.word	0x40021c00
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <heure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_heure */
void heure(void const * argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b09a      	sub	sp, #104	; 0x68
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN heure */
  /* Infinite loop */
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	char msg[50]={};
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	222e      	movs	r2, #46	; 0x2e
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00b fd39 	bl	800c788 <memset>

	TickType_t LastCall=xTaskGetTickCount();
 8000d16:	f00a feb5 	bl	800ba84 <xTaskGetTickCount>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60fb      	str	r3, [r7, #12]
	TickType_t value=80;
 8000d1e:	2350      	movs	r3, #80	; 0x50
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(;;){

		HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d28:	4819      	ldr	r0, [pc, #100]	; (8000d90 <heure+0x94>)
 8000d2a:	f005 fde3 	bl	80068f4 <HAL_GPIO_WritePin>

		HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	4817      	ldr	r0, [pc, #92]	; (8000d94 <heure+0x98>)
 8000d38:	f008 f9c6 	bl	80090c8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000d3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <heure+0x98>)
 8000d46:	f008 faa1 	bl	800928c <HAL_RTC_GetDate>

		sprintf(msg,"il est : %d h %d m %d s",time.Hours,time.Minutes,time.Seconds);
 8000d4a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000d54:	4619      	mov	r1, r3
 8000d56:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000d5a:	f107 0010 	add.w	r0, r7, #16
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	460b      	mov	r3, r1
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <heure+0x9c>)
 8000d64:	f00b fe26 	bl	800c9b4 <siprintf>
		BSP_LCD_DisplayStringAtLine(15,(uint8_t*) msg);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f002 f8e8 	bl	8002f44 <BSP_LCD_DisplayStringAtLine>
		HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <heure+0x94>)
 8000d7c:	f005 fdba 	bl	80068f4 <HAL_GPIO_WritePin>
		vTaskDelayUntil(&LastCall,value);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00a fca8 	bl	800b6dc <vTaskDelayUntil>
		HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8000d8c:	e7c9      	b.n	8000d22 <heure+0x26>
 8000d8e:	bf00      	nop
 8000d90:	40021c00 	.word	0x40021c00
 8000d94:	20000630 	.word	0x20000630
 8000d98:	0800d1e0 	.word	0x0800d1e0

08000d9c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000da6:	20c8      	movs	r0, #200	; 0xc8
 8000da8:	f001 fe22 	bl	80029f0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000dac:	f000 fa7a 	bl	80012a4 <ft5336_I2C_InitializeIfRequired>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000de0:	2300      	movs	r3, #0
 8000de2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000de4:	f000 fa5e 	bl	80012a4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e010      	b.n	8000e10 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	21a8      	movs	r1, #168	; 0xa8
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fddd 	bl	80029b4 <TS_IO_Read>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000dfe:	7b7b      	ldrb	r3, [r7, #13]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b51      	cmp	r3, #81	; 0x51
 8000e04:	d101      	bne.n	8000e0a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d802      	bhi.n	8000e1c <ft5336_ReadID+0x4e>
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0e8      	beq.n	8000dee <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	b29b      	uxth	r3, r3
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fa44 	bl	80012c4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f932 	bl	80010a8 <ft5336_TS_DisableIT>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fda7 	bl	80029b4 <TS_IO_Read>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d901      	bls.n	8000e82 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <ft5336_TS_DetectTouch+0x50>)
 8000e88:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <ft5336_TS_DetectTouch+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	b2db      	uxtb	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200004ac 	.word	0x200004ac

08000ea0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000ec2:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <ft5336_TS_GetXY+0x1d8>)
 8000ec4:	789a      	ldrb	r2, [r3, #2]
 8000ec6:	4b6c      	ldr	r3, [pc, #432]	; (8001078 <ft5336_TS_GetXY+0x1d8>)
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	f080 80cf 	bcs.w	800106e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000ed0:	4b69      	ldr	r3, [pc, #420]	; (8001078 <ft5336_TS_GetXY+0x1d8>)
 8000ed2:	789b      	ldrb	r3, [r3, #2]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d871      	bhi.n	8000fbc <ft5336_TS_GetXY+0x11c>
 8000ed8:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <ft5336_TS_GetXY+0x40>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000f09 	.word	0x08000f09
 8000ee4:	08000f1b 	.word	0x08000f1b
 8000ee8:	08000f2d 	.word	0x08000f2d
 8000eec:	08000f3f 	.word	0x08000f3f
 8000ef0:	08000f51 	.word	0x08000f51
 8000ef4:	08000f63 	.word	0x08000f63
 8000ef8:	08000f75 	.word	0x08000f75
 8000efc:	08000f87 	.word	0x08000f87
 8000f00:	08000f99 	.word	0x08000f99
 8000f04:	08000fab 	.word	0x08000fab
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000f10:	2306      	movs	r3, #6
 8000f12:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000f14:	2305      	movs	r3, #5
 8000f16:	753b      	strb	r3, [r7, #20]
      break;
 8000f18:	e051      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000f1e:	2309      	movs	r3, #9
 8000f20:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000f22:	230c      	movs	r3, #12
 8000f24:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000f26:	230b      	movs	r3, #11
 8000f28:	753b      	strb	r3, [r7, #20]
      break;
 8000f2a:	e048      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000f30:	230f      	movs	r3, #15
 8000f32:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000f34:	2312      	movs	r3, #18
 8000f36:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000f38:	2311      	movs	r3, #17
 8000f3a:	753b      	strb	r3, [r7, #20]
      break;
 8000f3c:	e03f      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000f3e:	2316      	movs	r3, #22
 8000f40:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000f42:	2315      	movs	r3, #21
 8000f44:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000f46:	2318      	movs	r3, #24
 8000f48:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000f4a:	2317      	movs	r3, #23
 8000f4c:	753b      	strb	r3, [r7, #20]
      break;
 8000f4e:	e036      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000f50:	231c      	movs	r3, #28
 8000f52:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000f54:	231b      	movs	r3, #27
 8000f56:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000f58:	231e      	movs	r3, #30
 8000f5a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000f5c:	231d      	movs	r3, #29
 8000f5e:	753b      	strb	r3, [r7, #20]
      break;
 8000f60:	e02d      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000f62:	2322      	movs	r3, #34	; 0x22
 8000f64:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000f66:	2321      	movs	r3, #33	; 0x21
 8000f68:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000f6a:	2324      	movs	r3, #36	; 0x24
 8000f6c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000f6e:	2323      	movs	r3, #35	; 0x23
 8000f70:	753b      	strb	r3, [r7, #20]
      break;
 8000f72:	e024      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000f74:	2328      	movs	r3, #40	; 0x28
 8000f76:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000f78:	2327      	movs	r3, #39	; 0x27
 8000f7a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000f7c:	232a      	movs	r3, #42	; 0x2a
 8000f7e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000f80:	2329      	movs	r3, #41	; 0x29
 8000f82:	753b      	strb	r3, [r7, #20]
      break;
 8000f84:	e01b      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000f86:	232e      	movs	r3, #46	; 0x2e
 8000f88:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000f8a:	232d      	movs	r3, #45	; 0x2d
 8000f8c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000f8e:	2330      	movs	r3, #48	; 0x30
 8000f90:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000f92:	232f      	movs	r3, #47	; 0x2f
 8000f94:	753b      	strb	r3, [r7, #20]
      break;
 8000f96:	e012      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000f98:	2334      	movs	r3, #52	; 0x34
 8000f9a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000f9c:	2333      	movs	r3, #51	; 0x33
 8000f9e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000fa0:	2336      	movs	r3, #54	; 0x36
 8000fa2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000fa4:	2335      	movs	r3, #53	; 0x35
 8000fa6:	753b      	strb	r3, [r7, #20]
      break;
 8000fa8:	e009      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000faa:	233a      	movs	r3, #58	; 0x3a
 8000fac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000fae:	2339      	movs	r3, #57	; 0x39
 8000fb0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000fb2:	233c      	movs	r3, #60	; 0x3c
 8000fb4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000fb6:	233b      	movs	r3, #59	; 0x3b
 8000fb8:	753b      	strb	r3, [r7, #20]
      break;
 8000fba:	e000      	b.n	8000fbe <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000fbc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	7dfa      	ldrb	r2, [r7, #23]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fcf4 	bl	80029b4 <TS_IO_Read>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000fd0:	7cfb      	ldrb	r3, [r7, #19]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 8000fd8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	7dba      	ldrb	r2, [r7, #22]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fce6 	bl	80029b4 <TS_IO_Read>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 8001006:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	7d7a      	ldrb	r2, [r7, #21]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fccb 	bl	80029b4 <TS_IO_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 800102a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	7d3a      	ldrb	r2, [r7, #20]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fcbd 	bl	80029b4 <TS_IO_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800103e:	7cfb      	ldrb	r3, [r7, #19]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 8001058:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <ft5336_TS_GetXY+0x1dc>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <ft5336_TS_GetXY+0x1d8>)
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	3301      	adds	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <ft5336_TS_GetXY+0x1d8>)
 800106c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200004ac 	.word	0x200004ac
 800107c:	200004b0 	.word	0x200004b0

08001080 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	21a4      	movs	r1, #164	; 0xa4
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fc70 	bl	8002980 <TS_IO_Write>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	21a4      	movs	r1, #164	; 0xa4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fc5c 	bl	8002980 <TS_IO_Write>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	6039      	str	r1, [r7, #0]
 8001108:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fc4d 	bl	80029b4 <TS_IO_Read>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	4603      	mov	r3, r0
 800113e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001150:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <ft5336_TS_GetTouchInfo+0x158>)
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	461a      	mov	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	4293      	cmp	r3, r2
 800115a:	f080 8090 	bcs.w	800127e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d85d      	bhi.n	8001220 <ft5336_TS_GetTouchInfo+0xf0>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <ft5336_TS_GetTouchInfo+0x3c>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	08001195 	.word	0x08001195
 8001170:	080011a3 	.word	0x080011a3
 8001174:	080011b1 	.word	0x080011b1
 8001178:	080011bf 	.word	0x080011bf
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011db 	.word	0x080011db
 8001184:	080011e9 	.word	0x080011e9
 8001188:	080011f7 	.word	0x080011f7
 800118c:	08001205 	.word	0x08001205
 8001190:	08001213 	.word	0x08001213
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001194:	2303      	movs	r3, #3
 8001196:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001198:	2307      	movs	r3, #7
 800119a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800119c:	2308      	movs	r3, #8
 800119e:	757b      	strb	r3, [r7, #21]
      break;
 80011a0:	e03f      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80011a2:	2309      	movs	r3, #9
 80011a4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80011a6:	230d      	movs	r3, #13
 80011a8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80011aa:	230e      	movs	r3, #14
 80011ac:	757b      	strb	r3, [r7, #21]
      break;
 80011ae:	e038      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80011b0:	230f      	movs	r3, #15
 80011b2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80011b4:	2313      	movs	r3, #19
 80011b6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80011b8:	2314      	movs	r3, #20
 80011ba:	757b      	strb	r3, [r7, #21]
      break;
 80011bc:	e031      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80011be:	2315      	movs	r3, #21
 80011c0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80011c2:	2319      	movs	r3, #25
 80011c4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80011c6:	231a      	movs	r3, #26
 80011c8:	757b      	strb	r3, [r7, #21]
      break;
 80011ca:	e02a      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80011cc:	231b      	movs	r3, #27
 80011ce:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80011d0:	231f      	movs	r3, #31
 80011d2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80011d4:	2320      	movs	r3, #32
 80011d6:	757b      	strb	r3, [r7, #21]
      break;
 80011d8:	e023      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80011da:	2321      	movs	r3, #33	; 0x21
 80011dc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80011de:	2325      	movs	r3, #37	; 0x25
 80011e0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80011e2:	2326      	movs	r3, #38	; 0x26
 80011e4:	757b      	strb	r3, [r7, #21]
      break;
 80011e6:	e01c      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80011e8:	2327      	movs	r3, #39	; 0x27
 80011ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80011ec:	232b      	movs	r3, #43	; 0x2b
 80011ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80011f0:	232c      	movs	r3, #44	; 0x2c
 80011f2:	757b      	strb	r3, [r7, #21]
      break;
 80011f4:	e015      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80011f6:	232d      	movs	r3, #45	; 0x2d
 80011f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80011fa:	2331      	movs	r3, #49	; 0x31
 80011fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80011fe:	2332      	movs	r3, #50	; 0x32
 8001200:	757b      	strb	r3, [r7, #21]
      break;
 8001202:	e00e      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001204:	2333      	movs	r3, #51	; 0x33
 8001206:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001208:	2337      	movs	r3, #55	; 0x37
 800120a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800120c:	2338      	movs	r3, #56	; 0x38
 800120e:	757b      	strb	r3, [r7, #21]
      break;
 8001210:	e007      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001212:	2339      	movs	r3, #57	; 0x39
 8001214:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001216:	233d      	movs	r3, #61	; 0x3d
 8001218:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800121a:	233e      	movs	r3, #62	; 0x3e
 800121c:	757b      	strb	r3, [r7, #21]
      break;
 800121e:	e000      	b.n	8001222 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001220:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	7dfa      	ldrb	r2, [r7, #23]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fbc2 	bl	80029b4 <TS_IO_Read>
 8001230:	4603      	mov	r3, r0
 8001232:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001234:	7d3b      	ldrb	r3, [r7, #20]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	119b      	asrs	r3, r3, #6
 800123a:	f003 0203 	and.w	r2, r3, #3
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	7dba      	ldrb	r2, [r7, #22]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fbb2 	bl	80029b4 <TS_IO_Read>
 8001250:	4603      	mov	r3, r0
 8001252:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001254:	7d3b      	ldrb	r3, [r7, #20]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	7d7a      	ldrb	r2, [r7, #21]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fba4 	bl	80029b4 <TS_IO_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001270:	7d3b      	ldrb	r3, [r7, #20]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	111b      	asrs	r3, r3, #4
 8001276:	f003 0204 	and.w	r2, r3, #4
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004ac 	.word	0x200004ac

0800128c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200004ac 	.word	0x200004ac

080012a4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80012a8:	f7ff fff0 	bl	800128c <ft5336_Get_I2C_InitializedStatus>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d104      	bne.n	80012bc <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80012b2:	f001 fb5b 	bl	800296c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80012b6:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
  }
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200004ac 	.word	0x200004ac

080012c4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f6:	4baf      	ldr	r3, [pc, #700]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4aae      	ldr	r2, [pc, #696]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4bac      	ldr	r3, [pc, #688]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800130e:	4ba9      	ldr	r3, [pc, #676]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4aa8      	ldr	r2, [pc, #672]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4ba3      	ldr	r3, [pc, #652]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4aa2      	ldr	r2, [pc, #648]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4ba0      	ldr	r3, [pc, #640]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b9d      	ldr	r3, [pc, #628]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a9c      	ldr	r2, [pc, #624]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b9a      	ldr	r3, [pc, #616]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b97      	ldr	r3, [pc, #604]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a96      	ldr	r2, [pc, #600]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b94      	ldr	r3, [pc, #592]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b91      	ldr	r3, [pc, #580]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a90      	ldr	r2, [pc, #576]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b8e      	ldr	r3, [pc, #568]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001386:	4b8b      	ldr	r3, [pc, #556]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a8a      	ldr	r2, [pc, #552]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 800138c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a84      	ldr	r2, [pc, #528]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a7e      	ldr	r2, [pc, #504]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	4b79      	ldr	r3, [pc, #484]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a78      	ldr	r2, [pc, #480]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a72      	ldr	r2, [pc, #456]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <MX_GPIO_Init+0x2d4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2160      	movs	r1, #96	; 0x60
 8001402:	486d      	ldr	r0, [pc, #436]	; (80015b8 <MX_GPIO_Init+0x2d8>)
 8001404:	f005 fa76 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2120      	movs	r1, #32
 800140c:	486b      	ldr	r0, [pc, #428]	; (80015bc <MX_GPIO_Init+0x2dc>)
 800140e:	f005 fa71 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2108      	movs	r1, #8
 8001416:	4869      	ldr	r0, [pc, #420]	; (80015bc <MX_GPIO_Init+0x2dc>)
 8001418:	f005 fa6c 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2108      	movs	r1, #8
 8001420:	4867      	ldr	r0, [pc, #412]	; (80015c0 <MX_GPIO_Init+0x2e0>)
 8001422:	f005 fa67 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <MX_GPIO_Init+0x2e4>)
 800142e:	f005 fa61 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001432:	2200      	movs	r2, #0
 8001434:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001438:	4863      	ldr	r0, [pc, #396]	; (80015c8 <MX_GPIO_Init+0x2e8>)
 800143a:	f005 fa5b 	bl	80068f4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	21c8      	movs	r1, #200	; 0xc8
 8001442:	4862      	ldr	r0, [pc, #392]	; (80015cc <MX_GPIO_Init+0x2ec>)
 8001444:	f005 fa56 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001448:	2308      	movs	r3, #8
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001458:	4619      	mov	r1, r3
 800145a:	4857      	ldr	r0, [pc, #348]	; (80015b8 <MX_GPIO_Init+0x2d8>)
 800145c:	f004 ff7a 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001460:	2304      	movs	r3, #4
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001470:	2309      	movs	r3, #9
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001478:	4619      	mov	r1, r3
 800147a:	484f      	ldr	r0, [pc, #316]	; (80015b8 <MX_GPIO_Init+0x2d8>)
 800147c:	f004 ff6a 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001480:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001492:	230b      	movs	r3, #11
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149a:	4619      	mov	r1, r3
 800149c:	484b      	ldr	r0, [pc, #300]	; (80015cc <MX_GPIO_Init+0x2ec>)
 800149e:	f004 ff59 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80014a2:	f643 0323 	movw	r3, #14371	; 0x3823
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014b4:	230a      	movs	r3, #10
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014bc:	4619      	mov	r1, r3
 80014be:	4844      	ldr	r0, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x2f0>)
 80014c0:	f004 ff48 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80014d4:	2308      	movs	r3, #8
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	4837      	ldr	r0, [pc, #220]	; (80015bc <MX_GPIO_Init+0x2dc>)
 80014e0:	f004 ff38 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80014e4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014f6:	230c      	movs	r3, #12
 80014f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fe:	4619      	mov	r1, r3
 8001500:	4834      	ldr	r0, [pc, #208]	; (80015d4 <MX_GPIO_Init+0x2f4>)
 8001502:	f004 ff27 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001506:	f248 1340 	movw	r3, #33088	; 0x8140
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	482f      	ldr	r0, [pc, #188]	; (80015d8 <MX_GPIO_Init+0x2f8>)
 800151c:	f004 ff1a 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001520:	2360      	movs	r3, #96	; 0x60
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001534:	4619      	mov	r1, r3
 8001536:	4820      	ldr	r0, [pc, #128]	; (80015b8 <MX_GPIO_Init+0x2d8>)
 8001538:	f004 ff0c 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800154c:	230a      	movs	r3, #10
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <MX_GPIO_Init+0x2f0>)
 8001558:	f004 fefc 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	4619      	mov	r1, r3
 8001570:	481a      	ldr	r0, [pc, #104]	; (80015dc <MX_GPIO_Init+0x2fc>)
 8001572:	f004 feef 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800157a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001588:	4619      	mov	r1, r3
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_GPIO_Init+0x2dc>)
 800158c:	f004 fee2 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001590:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015a2:	230a      	movs	r3, #10
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <MX_GPIO_Init+0x2f8>)
 80015ae:	f004 fed1 	bl	8006354 <HAL_GPIO_Init>
 80015b2:	e015      	b.n	80015e0 <MX_GPIO_Init+0x300>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40022800 	.word	0x40022800
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40021c00 	.word	0x40021c00
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80015e0:	23f0      	movs	r3, #240	; 0xf0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015f0:	230a      	movs	r3, #10
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f8:	4619      	mov	r1, r3
 80015fa:	4891      	ldr	r0, [pc, #580]	; (8001840 <MX_GPIO_Init+0x560>)
 80015fc:	f004 feaa 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001612:	230a      	movs	r3, #10
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	4889      	ldr	r0, [pc, #548]	; (8001844 <MX_GPIO_Init+0x564>)
 800161e:	f004 fe99 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001622:	2328      	movs	r3, #40	; 0x28
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001636:	4619      	mov	r1, r3
 8001638:	4883      	ldr	r0, [pc, #524]	; (8001848 <MX_GPIO_Init+0x568>)
 800163a:	f004 fe8b 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001650:	4619      	mov	r1, r3
 8001652:	487e      	ldr	r0, [pc, #504]	; (800184c <MX_GPIO_Init+0x56c>)
 8001654:	f004 fe7e 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001658:	2308      	movs	r3, #8
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166c:	4619      	mov	r1, r3
 800166e:	4878      	ldr	r0, [pc, #480]	; (8001850 <MX_GPIO_Init+0x570>)
 8001670:	f004 fe70 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001674:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	4619      	mov	r1, r3
 8001688:	486e      	ldr	r0, [pc, #440]	; (8001844 <MX_GPIO_Init+0x564>)
 800168a:	f004 fe63 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800168e:	2310      	movs	r3, #16
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	4869      	ldr	r0, [pc, #420]	; (8001848 <MX_GPIO_Init+0x568>)
 80016a2:	f004 fe57 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80016a6:	2304      	movs	r3, #4
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016b6:	230c      	movs	r3, #12
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016be:	4619      	mov	r1, r3
 80016c0:	4861      	ldr	r0, [pc, #388]	; (8001848 <MX_GPIO_Init+0x568>)
 80016c2:	f004 fe47 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80016c6:	f24a 0304 	movw	r3, #40964	; 0xa004
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d8:	4619      	mov	r1, r3
 80016da:	485e      	ldr	r0, [pc, #376]	; (8001854 <MX_GPIO_Init+0x574>)
 80016dc:	f004 fe3a 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4851      	ldr	r0, [pc, #324]	; (8001840 <MX_GPIO_Init+0x560>)
 80016fa:	f004 fe2b 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80016fe:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001714:	4619      	mov	r1, r3
 8001716:	484f      	ldr	r0, [pc, #316]	; (8001854 <MX_GPIO_Init+0x574>)
 8001718:	f004 fe1c 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001722:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001730:	4619      	mov	r1, r3
 8001732:	4843      	ldr	r0, [pc, #268]	; (8001840 <MX_GPIO_Init+0x560>)
 8001734:	f004 fe0e 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001738:	2310      	movs	r3, #16
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001748:	230a      	movs	r3, #10
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001750:	4619      	mov	r1, r3
 8001752:	4840      	ldr	r0, [pc, #256]	; (8001854 <MX_GPIO_Init+0x574>)
 8001754:	f004 fdfe 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001758:	23c8      	movs	r3, #200	; 0xc8
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176c:	4619      	mov	r1, r3
 800176e:	4835      	ldr	r0, [pc, #212]	; (8001844 <MX_GPIO_Init+0x564>)
 8001770:	f004 fdf0 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001774:	2305      	movs	r3, #5
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001784:	230a      	movs	r3, #10
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178c:	4619      	mov	r1, r3
 800178e:	482f      	ldr	r0, [pc, #188]	; (800184c <MX_GPIO_Init+0x56c>)
 8001790:	f004 fde0 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001794:	2332      	movs	r3, #50	; 0x32
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a4:	230b      	movs	r3, #11
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4827      	ldr	r0, [pc, #156]	; (800184c <MX_GPIO_Init+0x56c>)
 80017b0:	f004 fdd0 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017b4:	2304      	movs	r3, #4
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017c4:	2309      	movs	r3, #9
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4822      	ldr	r0, [pc, #136]	; (8001858 <MX_GPIO_Init+0x578>)
 80017d0:	f004 fdc0 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80017d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017e6:	2309      	movs	r3, #9
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	4815      	ldr	r0, [pc, #84]	; (8001848 <MX_GPIO_Init+0x568>)
 80017f2:	f004 fdaf 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017f6:	2386      	movs	r3, #134	; 0x86
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001806:	230b      	movs	r3, #11
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_GPIO_Init+0x57c>)
 8001812:	f004 fd9f 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001816:	2328      	movs	r3, #40	; 0x28
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001826:	230a      	movs	r3, #10
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <MX_GPIO_Init+0x57c>)
 8001832:	f004 fd8f 	bl	8006354 <HAL_GPIO_Init>

}
 8001836:	bf00      	nop
 8001838:	3740      	adds	r7, #64	; 0x40
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40022000 	.word	0x40022000
 8001844:	40021800 	.word	0x40021800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40020800 	.word	0x40020800
 8001850:	40022800 	.word	0x40022800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40020400 	.word	0x40020400
 800185c:	40020000 	.word	0x40020000

08001860 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <MX_I2C1_Init+0x78>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_I2C1_Init+0x74>)
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <MX_I2C1_Init+0x7c>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001878:	2201      	movs	r2, #1
 800187a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_I2C1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x74>)
 800189c:	f005 f844 	bl	8006928 <HAL_I2C_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018a6:	f000 fd93 	bl	80023d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018aa:	2100      	movs	r1, #0
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x74>)
 80018ae:	f005 fdd1 	bl	8007454 <HAL_I2CEx_ConfigAnalogFilter>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f000 fd8a 	bl	80023d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_I2C1_Init+0x74>)
 80018c0:	f005 fe13 	bl	80074ea <HAL_I2CEx_ConfigDigitalFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f000 fd81 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200004b4 	.word	0x200004b4
 80018d8:	40005400 	.word	0x40005400
 80018dc:	00c0eaff 	.word	0x00c0eaff

080018e0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_I2C3_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <MX_I2C3_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_I2C3_Init+0x74>)
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <MX_I2C3_Init+0x7c>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_I2C3_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_I2C3_Init+0x74>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_I2C3_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_I2C3_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C3_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C3_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C3_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <MX_I2C3_Init+0x74>)
 800191c:	f005 f804 	bl	8006928 <HAL_I2C_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001926:	f000 fd53 	bl	80023d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <MX_I2C3_Init+0x74>)
 800192e:	f005 fd91 	bl	8007454 <HAL_I2CEx_ConfigAnalogFilter>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001938:	f000 fd4a 	bl	80023d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_I2C3_Init+0x74>)
 8001940:	f005 fdd3 	bl	80074ea <HAL_I2CEx_ConfigDigitalFilter>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800194a:	f000 fd41 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000508 	.word	0x20000508
 8001958:	40005c00 	.word	0x40005c00
 800195c:	00c0eaff 	.word	0x00c0eaff

08001960 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0ac      	sub	sp, #176	; 0xb0
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	2284      	movs	r2, #132	; 0x84
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f00a ff01 	bl	800c788 <memset>
  if(i2cHandle->Instance==I2C1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a44      	ldr	r2, [pc, #272]	; (8001a9c <HAL_I2C_MspInit+0x13c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d13d      	bne.n	8001a0c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001996:	2300      	movs	r3, #0
 8001998:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 fe84 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019aa:	f000 fd11 	bl	80023d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a3b      	ldr	r2, [pc, #236]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ce:	2312      	movs	r3, #18
 80019d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e0:	2304      	movs	r3, #4
 80019e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ea:	4619      	mov	r1, r3
 80019ec:	482d      	ldr	r0, [pc, #180]	; (8001aa4 <HAL_I2C_MspInit+0x144>)
 80019ee:	f004 fcb1 	bl	8006354 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a0a:	e042      	b.n	8001a92 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <HAL_I2C_MspInit+0x148>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d13d      	bne.n	8001a92 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 fe40 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001a32:	f000 fccd 	bl	80023d0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a56:	2312      	movs	r3, #18
 8001a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a72:	4619      	mov	r1, r3
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <HAL_I2C_MspInit+0x14c>)
 8001a76:	f004 fc6d 	bl	8006354 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_I2C_MspInit+0x140>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
}
 8001a92:	bf00      	nop
 8001a94:	37b0      	adds	r7, #176	; 0xb0
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40005c00 	.word	0x40005c00
 8001aac:	40021c00 	.word	0x40021c00

08001ab0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <HAL_I2C_MspDeInit+0x64>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d110      	bne.n	8001ae4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_I2C_MspDeInit+0x68>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_I2C_MspDeInit+0x68>)
 8001ac8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad2:	4812      	ldr	r0, [pc, #72]	; (8001b1c <HAL_I2C_MspDeInit+0x6c>)
 8001ad4:	f004 fdea 	bl	80066ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001adc:	480f      	ldr	r0, [pc, #60]	; (8001b1c <HAL_I2C_MspDeInit+0x6c>)
 8001ade:	f004 fde5 	bl	80066ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001ae2:	e013      	b.n	8001b0c <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_I2C_MspDeInit+0x70>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10e      	bne.n	8001b0c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_I2C_MspDeInit+0x68>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_I2C_MspDeInit+0x68>)
 8001af4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <HAL_I2C_MspDeInit+0x74>)
 8001afe:	f004 fdd5 	bl	80066ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <HAL_I2C_MspDeInit+0x74>)
 8001b08:	f004 fdd0 	bl	80066ac <HAL_GPIO_DeInit>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40005400 	.word	0x40005400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40005c00 	.word	0x40005c00
 8001b24:	40021c00 	.word	0x40021c00

08001b28 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2234      	movs	r2, #52	; 0x34
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00a fe27 	bl	800c788 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b3c:	4a3a      	ldr	r2, [pc, #232]	; (8001c28 <MX_LTDC_Init+0x100>)
 8001b3e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b5a:	2228      	movs	r2, #40	; 0x28
 8001b5c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b60:	2209      	movs	r2, #9
 8001b62:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b64:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b66:	2235      	movs	r2, #53	; 0x35
 8001b68:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b6c:	220b      	movs	r2, #11
 8001b6e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b70:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b72:	f240 2215 	movw	r2, #533	; 0x215
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b7a:	f240 121b 	movw	r2, #283	; 0x11b
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b82:	f240 2235 	movw	r2, #565	; 0x235
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b8a:	f240 121d 	movw	r2, #285	; 0x11d
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ba0:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ba8:	481e      	ldr	r0, [pc, #120]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001baa:	f005 fceb 	bl	8007584 <HAL_LTDC_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001bb4:	f000 fc0c 	bl	80023d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001bbc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bc0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001bc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001bca:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001bd0:	23ff      	movs	r3, #255	; 0xff
 8001bd2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bdc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bde:	2307      	movs	r3, #7
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001be2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001be8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001bee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_LTDC_Init+0xfc>)
 8001c0e:	f005 fe4b 	bl	80078a8 <HAL_LTDC_ConfigLayer>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001c18:	f000 fbda 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3738      	adds	r7, #56	; 0x38
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000055c 	.word	0x2000055c
 8001c28:	40016800 	.word	0x40016800

08001c2c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0ae      	sub	sp, #184	; 0xb8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	2284      	movs	r2, #132	; 0x84
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00a fd9b 	bl	800c788 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6f      	ldr	r2, [pc, #444]	; (8001e14 <HAL_LTDC_MspInit+0x1e8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	f040 80d6 	bne.w	8001e0a <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001c62:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001c68:	2305      	movs	r3, #5
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001c70:	2303      	movs	r3, #3
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fd12 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001c8e:	f000 fb9f 	bl	80023d0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a60      	ldr	r2, [pc, #384]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a5a      	ldr	r2, [pc, #360]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cc2:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a54      	ldr	r2, [pc, #336]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cda:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a42      	ldr	r2, [pc, #264]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_LTDC_MspInit+0x1ec>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001d22:	2310      	movs	r3, #16
 8001d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d3a:	230e      	movs	r3, #14
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4835      	ldr	r0, [pc, #212]	; (8001e1c <HAL_LTDC_MspInit+0x1f0>)
 8001d48:	f004 fb04 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001d4c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d66:	230e      	movs	r3, #14
 8001d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001d6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d70:	4619      	mov	r1, r3
 8001d72:	482b      	ldr	r0, [pc, #172]	; (8001e20 <HAL_LTDC_MspInit+0x1f4>)
 8001d74:	f004 faee 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001d78:	23f7      	movs	r3, #247	; 0xf7
 8001d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d90:	230e      	movs	r3, #14
 8001d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4821      	ldr	r0, [pc, #132]	; (8001e24 <HAL_LTDC_MspInit+0x1f8>)
 8001d9e:	f004 fad9 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001dbc:	2309      	movs	r3, #9
 8001dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4817      	ldr	r0, [pc, #92]	; (8001e28 <HAL_LTDC_MspInit+0x1fc>)
 8001dca:	f004 fac3 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001dce:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001de8:	230e      	movs	r3, #14
 8001dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df2:	4619      	mov	r1, r3
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <HAL_LTDC_MspInit+0x200>)
 8001df6:	f004 faad 	bl	8006354 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2105      	movs	r1, #5
 8001dfe:	2058      	movs	r0, #88	; 0x58
 8001e00:	f003 fc44 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e04:	2058      	movs	r0, #88	; 0x58
 8001e06:	f003 fc5d 	bl	80056c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	37b8      	adds	r7, #184	; 0xb8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40016800 	.word	0x40016800
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40022400 	.word	0x40022400
 8001e24:	40022800 	.word	0x40022800
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40022000 	.word	0x40022000

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b0d1      	sub	sp, #324	; 0x144
 8001e34:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50]={};
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e40:	222e      	movs	r2, #46	; 0x2e
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00a fc9f 	bl	800c788 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001e4a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/*CODE TP1*/
	char msg[50]={};
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001e6a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e6e:	222e      	movs	r2, #46	; 0x2e
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00a fc88 	bl	800c788 <memset>
	char recep[50] ;
	char retour[50]={};
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e80:	222e      	movs	r2, #46	; 0x2e
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00a fc7f 	bl	800c788 <memset>

	uint8_t time[3]={};
 8001e8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e92:	4aa6      	ldr	r2, [pc, #664]	; (800212c <main+0x2fc>)
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	801a      	strh	r2, [r3, #0]
	uint8_t date[3]={};
 8001e9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ea6:	4aa1      	ldr	r2, [pc, #644]	; (800212c <main+0x2fc>)
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	2200      	movs	r2, #0
 8001eb0:	801a      	strh	r2, [r3, #0]

	uint16_t pos_v=130;
 8001eb2:	2382      	movs	r3, #130	; 0x82
 8001eb4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t pos_h=240;
 8001eb8:	23f0      	movs	r3, #240	; 0xf0
 8001eba:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134

	int16_t vit_v=0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	int16_t vit_h=0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eca:	f002 fedc 	bl	8004c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ece:	f000 f9fb 	bl	80022c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed2:	f7ff fa05 	bl	80012e0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001ed6:	f7fe fbbf 	bl	8000658 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001eda:	f7fe fcef 	bl	80008bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8001ede:	f7fe fd45 	bl	800096c <MX_FMC_Init>
  MX_I2C1_Init();
 8001ee2:	f7ff fcbd 	bl	8001860 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001ee6:	f7ff fcfb 	bl	80018e0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001eea:	f7ff fe1d 	bl	8001b28 <MX_LTDC_Init>
  MX_RTC_Init();
 8001eee:	f000 fa75 	bl	80023dc <MX_RTC_Init>
  MX_SPI2_Init();
 8001ef2:	f000 fb45 	bl	8002580 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001ef6:	f002 fad5 	bl	80044a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001efa:	f002 fb27 	bl	800454c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001efe:	f002 fb73 	bl	80045e8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001f02:	f002 fbbf 	bl	8004684 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001f06:	f002 fc0b 	bl	8004720 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001f0a:	f002 fd1f 	bl	800494c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001f0e:	f002 fd51 	bl	80049b4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001f12:	f7fe fb4f 	bl	80005b4 <MX_ADC1_Init>
  MX_DAC_Init();
 8001f16:	f7fe fc5f 	bl	80007d8 <MX_DAC_Init>
  MX_UART7_Init();
 8001f1a:	f002 fce7 	bl	80048ec <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001f1e:	f000 fd73 	bl	8002a08 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001f22:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 fe06 	bl	8002b38 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001f2c:	f000 fddc 	bl	8002ae8 <BSP_LCD_GetXSize>
 8001f30:	4604      	mov	r4, r0
 8001f32:	f000 fded 	bl	8002b10 <BSP_LCD_GetYSize>
 8001f36:	4603      	mov	r3, r0
 8001f38:	fb04 f303 	mul.w	r3, r4, r3
 8001f3c:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4619      	mov	r1, r3
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 fdf7 	bl	8002b38 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001f4a:	f001 faf5 	bl	8003538 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 fe52 	bl	8002bf8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001f54:	4876      	ldr	r0, [pc, #472]	; (8002130 <main+0x300>)
 8001f56:	f000 fec1 	bl	8002cdc <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0,0,(uint8_t*)Background_bmp);
 8001f5a:	4a76      	ldr	r2, [pc, #472]	; (8002134 <main+0x304>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f001 f998 	bl	8003294 <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f000 fe47 	bl	8002bf8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 feb6 	bl	8002cdc <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8001f70:	4871      	ldr	r0, [pc, #452]	; (8002138 <main+0x308>)
 8001f72:	f000 fe83 	bl	8002c7c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f76:	4871      	ldr	r0, [pc, #452]	; (800213c <main+0x30c>)
 8001f78:	f000 fe4e 	bl	8002c18 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 fe63 	bl	8002c48 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001f82:	f000 fdb1 	bl	8002ae8 <BSP_LCD_GetXSize>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29c      	uxth	r4, r3
 8001f8a:	f000 fdc1 	bl	8002b10 <BSP_LCD_GetYSize>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	4620      	mov	r0, r4
 8001f96:	f001 fee1 	bl	8003d5c <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f9a:	f7fe fdeb 	bl	8000b74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f9e:	f009 f8cf 	bl	800b140 <osKernelStart>



  while (1)
  {
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa6:	4866      	ldr	r0, [pc, #408]	; (8002140 <main+0x310>)
 8001fa8:	f004 fc8c 	bl	80068c4 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb4:	4863      	ldr	r0, [pc, #396]	; (8002144 <main+0x314>)
 8001fb6:	f004 fc9d 	bl	80068f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	4860      	ldr	r0, [pc, #384]	; (8002140 <main+0x310>)
 8001fc0:	f004 fc80 	bl	80068c4 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2120      	movs	r1, #32
 8001fca:	485f      	ldr	r0, [pc, #380]	; (8002148 <main+0x318>)
 8001fcc:	f004 fc92 	bl	80068f4 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd4:	485a      	ldr	r0, [pc, #360]	; (8002140 <main+0x310>)
 8001fd6:	f004 fc75 	bl	80068c4 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fe2:	495a      	ldr	r1, [pc, #360]	; (800214c <main+0x31c>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00a fce5 	bl	800c9b4 <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001fea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fee:	4619      	mov	r1, r3
 8001ff0:	2005      	movs	r0, #5
 8001ff2:	f000 ffa7 	bl	8002f44 <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001ffc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002000:	4619      	mov	r1, r3
 8002002:	4853      	ldr	r0, [pc, #332]	; (8002150 <main+0x320>)
 8002004:	f003 f83a 	bl	800507c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8002008:	4851      	ldr	r0, [pc, #324]	; (8002150 <main+0x320>)
 800200a:	f002 fed1 	bl	8004db0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 800200e:	bf00      	nop
 8002010:	2164      	movs	r1, #100	; 0x64
 8002012:	484f      	ldr	r0, [pc, #316]	; (8002150 <main+0x320>)
 8002014:	f002 ff9a 	bl	8004f4c <HAL_ADC_PollForConversion>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f8      	bne.n	8002010 <main+0x1e0>
		potr = HAL_ADC_GetValue(&hadc3);
 800201e:	484c      	ldr	r0, [pc, #304]	; (8002150 <main+0x320>)
 8002020:	f003 f81f 	bl	8005062 <HAL_ADC_GetValue>
 8002024:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

		sConfig.Channel = ADC_CHANNEL_7;
 8002028:	2307      	movs	r3, #7
 800202a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800202e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002032:	4619      	mov	r1, r3
 8002034:	4846      	ldr	r0, [pc, #280]	; (8002150 <main+0x320>)
 8002036:	f003 f821 	bl	800507c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 800203a:	4845      	ldr	r0, [pc, #276]	; (8002150 <main+0x320>)
 800203c:	f002 feb8 	bl	8004db0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002040:	bf00      	nop
 8002042:	2164      	movs	r1, #100	; 0x64
 8002044:	4842      	ldr	r0, [pc, #264]	; (8002150 <main+0x320>)
 8002046:	f002 ff81 	bl	8004f4c <HAL_ADC_PollForConversion>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f8      	bne.n	8002042 <main+0x212>
		potl = HAL_ADC_GetValue(&hadc3);
 8002050:	483f      	ldr	r0, [pc, #252]	; (8002150 <main+0x320>)
 8002052:	f003 f806 	bl	8005062 <HAL_ADC_GetValue>
 8002056:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

		sConfig.Channel = ADC_CHANNEL_8;
 800205a:	2308      	movs	r3, #8
 800205c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002060:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002064:	4619      	mov	r1, r3
 8002066:	483a      	ldr	r0, [pc, #232]	; (8002150 <main+0x320>)
 8002068:	f003 f808 	bl	800507c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 800206c:	4838      	ldr	r0, [pc, #224]	; (8002150 <main+0x320>)
 800206e:	f002 fe9f 	bl	8004db0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002072:	bf00      	nop
 8002074:	2164      	movs	r1, #100	; 0x64
 8002076:	4836      	ldr	r0, [pc, #216]	; (8002150 <main+0x320>)
 8002078:	f002 ff68 	bl	8004f4c <HAL_ADC_PollForConversion>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f8      	bne.n	8002074 <main+0x244>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8002082:	4833      	ldr	r0, [pc, #204]	; (8002150 <main+0x320>)
 8002084:	f002 ffed 	bl	8005062 <HAL_ADC_GetValue>
 8002088:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

		HAL_ADC_Start(&hadc1);
 800208c:	4831      	ldr	r0, [pc, #196]	; (8002154 <main+0x324>)
 800208e:	f002 fe8f 	bl	8004db0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8002092:	bf00      	nop
 8002094:	2164      	movs	r1, #100	; 0x64
 8002096:	482f      	ldr	r0, [pc, #188]	; (8002154 <main+0x324>)
 8002098:	f002 ff58 	bl	8004f4c <HAL_ADC_PollForConversion>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f8      	bne.n	8002094 <main+0x264>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 80020a2:	482c      	ldr	r0, [pc, #176]	; (8002154 <main+0x324>)
 80020a4:	f002 ffdd 	bl	8005062 <HAL_ADC_GetValue>
 80020a8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 80020ac:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80020b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80020c4:	4924      	ldr	r1, [pc, #144]	; (8002158 <main+0x328>)
 80020c6:	f00a fc75 	bl	800c9b4 <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 80020ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020ce:	4619      	mov	r1, r3
 80020d0:	2009      	movs	r0, #9
 80020d2:	f000 ff37 	bl	8002f44 <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 80020d6:	4821      	ldr	r0, [pc, #132]	; (800215c <main+0x32c>)
 80020d8:	f001 fe80 	bl	8003ddc <BSP_TS_GetState>
		if(TS_State.touchDetected){
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <main+0x32c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <main+0x2cc>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <main+0x32c>)
 80020e6:	885b      	ldrh	r3, [r3, #2]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <main+0x32c>)
 80020ea:	8991      	ldrh	r1, [r2, #12]
 80020ec:	2204      	movs	r2, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 f982 	bl	80033f8 <BSP_LCD_FillCircle>
		  //pour recevoir lorsque on appuie
		  //recevoir PC
		  HAL_Delay(3000);
 80020f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020f8:	f002 fdf2 	bl	8004ce0 <HAL_Delay>

		/*CODE DU TP 07/02*/


		//Envoyer au pc la valeur des potentiometres
		HAL_Delay(10);
 80020fc:	200a      	movs	r0, #10
 80020fe:	f002 fdef 	bl	8004ce0 <HAL_Delay>
		sprintf(msg,"valeurs : %4u à doite et %4u à gauche \n\r",(uint)potr,(uint)potl);
 8002102:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8002106:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800210a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800210e:	4914      	ldr	r1, [pc, #80]	; (8002160 <main+0x330>)
 8002110:	f00a fc50 	bl	800c9b4 <siprintf>
		HAL_UART_Transmit(&huart1,msg,50,200);
 8002114:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002118:	23c8      	movs	r3, #200	; 0xc8
 800211a:	2232      	movs	r2, #50	; 0x32
 800211c:	4811      	ldr	r0, [pc, #68]	; (8002164 <main+0x334>)
 800211e:	f008 f9a9 	bl	800a474 <HAL_UART_Transmit>


		//afficher à une ligne libre
		for(int i=0;i<50;i++){
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002128:	e02a      	b.n	8002180 <main+0x350>
 800212a:	bf00      	nop
 800212c:	0800d298 	.word	0x0800d298
 8002130:	ffff0000 	.word	0xffff0000
 8002134:	0800d2a4 	.word	0x0800d2a4
 8002138:	20000030 	.word	0x20000030
 800213c:	ff0000ff 	.word	0xff0000ff
 8002140:	40020000 	.word	0x40020000
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40021000 	.word	0x40021000
 800214c:	0800d1f8 	.word	0x0800d1f8
 8002150:	20000114 	.word	0x20000114
 8002154:	200000cc 	.word	0x200000cc
 8002158:	0800d204 	.word	0x0800d204
 800215c:	20000604 	.word	0x20000604
 8002160:	0800d234 	.word	0x0800d234
 8002164:	20000bd8 	.word	0x20000bd8
			recep[i]=0;
 8002168:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800216c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002170:	4413      	add	r3, r2
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<50;i++){
 8002176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800217a:	3301      	adds	r3, #1
 800217c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002180:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002184:	2b31      	cmp	r3, #49	; 0x31
 8002186:	ddef      	ble.n	8002168 <main+0x338>
		}
		if(HAL_UART_Receive(&huart1,(uint8_t*)recep,49,200)){
 8002188:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800218c:	23c8      	movs	r3, #200	; 0xc8
 800218e:	2231      	movs	r2, #49	; 0x31
 8002190:	4848      	ldr	r0, [pc, #288]	; (80022b4 <main+0x484>)
 8002192:	f008 f9f2 	bl	800a57a <HAL_UART_Receive>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <main+0x388>
		sprintf(retour,"Ce que j'ai entendu : %s",recep);
 800219c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80021a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a4:	4944      	ldr	r1, [pc, #272]	; (80022b8 <main+0x488>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00a fc04 	bl	800c9b4 <siprintf>
		BSP_LCD_DisplayStringAtLine(3,(char*) retour);
 80021ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021b0:	4619      	mov	r1, r3
 80021b2:	2003      	movs	r0, #3
 80021b4:	f000 fec6 	bl	8002f44 <BSP_LCD_DisplayStringAtLine>
		}
		  /*CODE TP1 HORLOGE*/

		  //pas necessaire seulement pour une option
		  HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80021b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	483e      	ldr	r0, [pc, #248]	; (80022bc <main+0x48c>)
 80021c2:	f006 ff81 	bl	80090c8 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80021c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	483b      	ldr	r0, [pc, #236]	; (80022bc <main+0x48c>)
 80021d0:	f007 f85c 	bl	800928c <HAL_RTC_GetDate>

		  sprintf(msg,"il est : %d h %d m %d s \n\r",(uint)time[0],(uint)time[1],(uint)time[2]);
 80021d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80021d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80021e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	4619      	mov	r1, r3
 80021ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80021f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021f4:	789b      	ldrb	r3, [r3, #2]
 80021f6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	4930      	ldr	r1, [pc, #192]	; (80022c0 <main+0x490>)
 8002200:	f00a fbd8 	bl	800c9b4 <siprintf>
		  BSP_LCD_DisplayStringAtLine(15,(uint8_t*) msg);
 8002204:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002208:	4619      	mov	r1, r3
 800220a:	200f      	movs	r0, #15
 800220c:	f000 fe9a 	bl	8002f44 <BSP_LCD_DisplayStringAtLine>
		  //On utilise l'écran pour redémarrer
		  //on draw circle là ou pos pointera,
		  //joystick/2000 indique la vitesse, h et v
		  //PC sert à rien?

		  vit_v=((int16_t)joystick_v-2048)/1900;
 8002210:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002214:	b21b      	sxth	r3, r3
 8002216:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800221a:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <main+0x494>)
 800221c:	fb82 1203 	smull	r1, r2, r2, r3
 8002220:	1252      	asrs	r2, r2, #9
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		  vit_h=((int16_t)joystick_h-2048)/1900;
 800222a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800222e:	b21b      	sxth	r3, r3
 8002230:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002234:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <main+0x494>)
 8002236:	fb82 1203 	smull	r1, r2, r2, r3
 800223a:	1252      	asrs	r2, r2, #9
 800223c:	17db      	asrs	r3, r3, #31
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c


		  pos_v+=vit_v;
 8002244:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 8002248:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800224c:	4413      	add	r3, r2
 800224e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		  if (pos_v<3) pos_v=4;
 8002252:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8002256:	2b02      	cmp	r3, #2
 8002258:	d802      	bhi.n	8002260 <main+0x430>
 800225a:	2304      	movs	r3, #4
 800225c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		  if (pos_v>268) pos_v=268;
 8002260:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8002264:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8002268:	d903      	bls.n	8002272 <main+0x442>
 800226a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800226e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		  pos_h+=vit_h;
 8002272:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8002276:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800227a:	4413      	add	r3, r2
 800227c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		  if (pos_h<3) pos_h=3;
 8002280:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002284:	2b02      	cmp	r3, #2
 8002286:	d802      	bhi.n	800228e <main+0x45e>
 8002288:	2303      	movs	r3, #3
 800228a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		  if (pos_h>477) pos_h=477;
 800228e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002292:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8002296:	d303      	bcc.n	80022a0 <main+0x470>
 8002298:	f240 13dd 	movw	r3, #477	; 0x1dd
 800229c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		  BSP_LCD_FillCircle(pos_h,pos_v,3);
 80022a0:	f8b7 1136 	ldrh.w	r1, [r7, #310]	; 0x136
 80022a4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80022a8:	2203      	movs	r2, #3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 f8a4 	bl	80033f8 <BSP_LCD_FillCircle>
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 80022b0:	e677      	b.n	8001fa2 <main+0x172>
 80022b2:	bf00      	nop
 80022b4:	20000bd8 	.word	0x20000bd8
 80022b8:	0800d260 	.word	0x0800d260
 80022bc:	20000630 	.word	0x20000630
 80022c0:	0800d27c 	.word	0x0800d27c
 80022c4:	44fc3a35 	.word	0x44fc3a35

080022c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b094      	sub	sp, #80	; 0x50
 80022cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ce:	f107 0320 	add.w	r3, r7, #32
 80022d2:	2230      	movs	r2, #48	; 0x30
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00a fa56 	bl	800c788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022ec:	f005 fcc2 	bl	8007c74 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <SystemClock_Config+0xdc>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <SystemClock_Config+0xdc>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <SystemClock_Config+0xdc>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <SystemClock_Config+0xe0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <SystemClock_Config+0xe0>)
 800230e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <SystemClock_Config+0xe0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002320:	2309      	movs	r3, #9
 8002322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800232a:	2301      	movs	r3, #1
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232e:	2302      	movs	r3, #2
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002338:	2319      	movs	r3, #25
 800233a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800233c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002342:	2302      	movs	r3, #2
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002346:	2309      	movs	r3, #9
 8002348:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	4618      	mov	r0, r3
 8002350:	f005 fcf0 	bl	8007d34 <HAL_RCC_OscConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800235a:	f000 f839 	bl	80023d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800235e:	f005 fc99 	bl	8007c94 <HAL_PWREx_EnableOverDrive>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002368:	f000 f832 	bl	80023d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236c:	230f      	movs	r3, #15
 800236e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002370:	2302      	movs	r3, #2
 8002372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002378:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800237c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002382:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2106      	movs	r1, #6
 800238a:	4618      	mov	r0, r3
 800238c:	f005 ff76 	bl	800827c <HAL_RCC_ClockConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002396:	f000 f81b 	bl	80023d0 <Error_Handler>
  }
}
 800239a:	bf00      	nop
 800239c:	3750      	adds	r7, #80	; 0x50
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000

080023ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023be:	f002 fc6f 	bl	8004ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40001000 	.word	0x40001000

080023d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
}
 80023d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <Error_Handler+0x8>
	...

080023dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b090      	sub	sp, #64	; 0x40
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80023f6:	463b      	mov	r3, r7
 80023f8:	2228      	movs	r2, #40	; 0x28
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00a f9c3 	bl	800c788 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <MX_RTC_Init+0x140>)
 8002404:	4a46      	ldr	r2, [pc, #280]	; (8002520 <MX_RTC_Init+0x144>)
 8002406:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002408:	4b44      	ldr	r3, [pc, #272]	; (800251c <MX_RTC_Init+0x140>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <MX_RTC_Init+0x140>)
 8002410:	227f      	movs	r2, #127	; 0x7f
 8002412:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <MX_RTC_Init+0x140>)
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <MX_RTC_Init+0x140>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <MX_RTC_Init+0x140>)
 8002422:	2200      	movs	r2, #0
 8002424:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <MX_RTC_Init+0x140>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800242c:	483b      	ldr	r0, [pc, #236]	; (800251c <MX_RTC_Init+0x140>)
 800242e:	f006 fd2d 	bl	8008e8c <HAL_RTC_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002438:	f7ff ffca 	bl	80023d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002442:	2300      	movs	r3, #0
 8002444:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245a:	2201      	movs	r2, #1
 800245c:	4619      	mov	r1, r3
 800245e:	482f      	ldr	r0, [pc, #188]	; (800251c <MX_RTC_Init+0x140>)
 8002460:	f006 fd98 	bl	8008f94 <HAL_RTC_SetTime>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800246a:	f7ff ffb1 	bl	80023d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248a:	2201      	movs	r2, #1
 800248c:	4619      	mov	r1, r3
 800248e:	4823      	ldr	r0, [pc, #140]	; (800251c <MX_RTC_Init+0x140>)
 8002490:	f006 fe78 	bl	8009184 <HAL_RTC_SetDate>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800249a:	f7ff ff99 	bl	80023d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800249e:	2300      	movs	r3, #0
 80024a0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80024c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024ce:	463b      	mov	r3, r7
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <MX_RTC_Init+0x140>)
 80024d6:	f006 ff29 	bl	800932c <HAL_RTC_SetAlarm>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80024e0:	f7ff ff76 	bl	80023d0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024ea:	463b      	mov	r3, r7
 80024ec:	2201      	movs	r2, #1
 80024ee:	4619      	mov	r1, r3
 80024f0:	480a      	ldr	r0, [pc, #40]	; (800251c <MX_RTC_Init+0x140>)
 80024f2:	f006 ff1b 	bl	800932c <HAL_RTC_SetAlarm>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80024fc:	f7ff ff68 	bl	80023d0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002500:	2202      	movs	r2, #2
 8002502:	2100      	movs	r1, #0
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_RTC_Init+0x140>)
 8002506:	f007 f8fb 	bl	8009700 <HAL_RTCEx_SetTimeStamp>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002510:	f7ff ff5e 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	3740      	adds	r7, #64	; 0x40
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000630 	.word	0x20000630
 8002520:	40002800 	.word	0x40002800

08002524 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0a4      	sub	sp, #144	; 0x90
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	2284      	movs	r2, #132	; 0x84
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f00a f927 	bl	800c788 <memset>
  if(rtcHandle->Instance==RTC)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_RTC_MspInit+0x54>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d114      	bne.n	800256e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002544:	2320      	movs	r3, #32
 8002546:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	4618      	mov	r0, r3
 8002554:	f006 f8aa 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800255e:	f7ff ff37 	bl	80023d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RTC_MspInit+0x58>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_RTC_MspInit+0x58>)
 8002568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800256e:	bf00      	nop
 8002570:	3790      	adds	r7, #144	; 0x90
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40002800 	.word	0x40002800
 800257c:	40023800 	.word	0x40023800

08002580 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <MX_SPI2_Init+0x74>)
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <MX_SPI2_Init+0x78>)
 8002588:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <MX_SPI2_Init+0x74>)
 800258c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002590:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <MX_SPI2_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <MX_SPI2_Init+0x74>)
 800259a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800259e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025ce:	2207      	movs	r2, #7
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025da:	2208      	movs	r2, #8
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_SPI2_Init+0x74>)
 80025e0:	f007 f987 	bl	80098f2 <HAL_SPI_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025ea:	f7ff fef1 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000650 	.word	0x20000650
 80025f8:	40003800 	.word	0x40003800

080025fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <HAL_SPI_MspInit+0xb4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d144      	bne.n	80026a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800261e:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_SPI_MspInit+0xb8>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002666:	2303      	movs	r3, #3
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002676:	2305      	movs	r3, #5
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <HAL_SPI_MspInit+0xbc>)
 8002682:	f003 fe67 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002686:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002698:	2305      	movs	r3, #5
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <HAL_SPI_MspInit+0xc0>)
 80026a4:	f003 fe56 	bl	8006354 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80026a8:	bf00      	nop
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40003800 	.word	0x40003800
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40020400 	.word	0x40020400

080026c0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a51      	ldr	r2, [pc, #324]	; (8002810 <I2Cx_MspInit+0x150>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d14d      	bne.n	800276c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <I2Cx_MspInit+0x154>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <I2Cx_MspInit+0x154>)
 80026d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <I2Cx_MspInit+0x154>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80026ec:	2312      	movs	r3, #18
 80026ee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80026f4:	2302      	movs	r3, #2
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80026f8:	2304      	movs	r3, #4
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	4845      	ldr	r0, [pc, #276]	; (8002818 <I2Cx_MspInit+0x158>)
 8002704:	f003 fe26 	bl	8006354 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	4840      	ldr	r0, [pc, #256]	; (8002818 <I2Cx_MspInit+0x158>)
 8002716:	f003 fe1d 	bl	8006354 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <I2Cx_MspInit+0x154>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <I2Cx_MspInit+0x154>)
 8002720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <I2Cx_MspInit+0x154>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <I2Cx_MspInit+0x154>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a37      	ldr	r2, [pc, #220]	; (8002814 <I2Cx_MspInit+0x154>)
 8002738:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800273c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <I2Cx_MspInit+0x154>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <I2Cx_MspInit+0x154>)
 8002744:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002748:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	210f      	movs	r1, #15
 800274e:	2048      	movs	r0, #72	; 0x48
 8002750:	f002 ff9c 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002754:	2048      	movs	r0, #72	; 0x48
 8002756:	f002 ffb5 	bl	80056c4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	210f      	movs	r1, #15
 800275e:	2049      	movs	r0, #73	; 0x49
 8002760:	f002 ff94 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002764:	2049      	movs	r0, #73	; 0x49
 8002766:	f002 ffad 	bl	80056c4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800276a:	e04d      	b.n	8002808 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <I2Cx_MspInit+0x154>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <I2Cx_MspInit+0x154>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	6313      	str	r3, [r2, #48]	; 0x30
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <I2Cx_MspInit+0x154>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002788:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800278a:	2312      	movs	r3, #18
 800278c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002792:	2302      	movs	r3, #2
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002796:	2304      	movs	r3, #4
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800279a:	f107 031c 	add.w	r3, r7, #28
 800279e:	4619      	mov	r1, r3
 80027a0:	481e      	ldr	r0, [pc, #120]	; (800281c <I2Cx_MspInit+0x15c>)
 80027a2:	f003 fdd7 	bl	8006354 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80027a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	4619      	mov	r1, r3
 80027b2:	481a      	ldr	r0, [pc, #104]	; (800281c <I2Cx_MspInit+0x15c>)
 80027b4:	f003 fdce 	bl	8006354 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <I2Cx_MspInit+0x154>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4a15      	ldr	r2, [pc, #84]	; (8002814 <I2Cx_MspInit+0x154>)
 80027be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c2:	6413      	str	r3, [r2, #64]	; 0x40
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <I2Cx_MspInit+0x154>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <I2Cx_MspInit+0x154>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <I2Cx_MspInit+0x154>)
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027da:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <I2Cx_MspInit+0x154>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <I2Cx_MspInit+0x154>)
 80027e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027e6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	210f      	movs	r1, #15
 80027ec:	201f      	movs	r0, #31
 80027ee:	f002 ff4d 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80027f2:	201f      	movs	r0, #31
 80027f4:	f002 ff66 	bl	80056c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	210f      	movs	r1, #15
 80027fc:	2020      	movs	r0, #32
 80027fe:	f002 ff45 	bl	800568c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002802:	2020      	movs	r0, #32
 8002804:	f002 ff5e 	bl	80056c4 <HAL_NVIC_EnableIRQ>
}
 8002808:	bf00      	nop
 800280a:	3730      	adds	r7, #48	; 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200006b4 	.word	0x200006b4
 8002814:	40023800 	.word	0x40023800
 8002818:	40021c00 	.word	0x40021c00
 800281c:	40020400 	.word	0x40020400

08002820 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f004 fb6b 	bl	8006f04 <HAL_I2C_GetState>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d125      	bne.n	8002880 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <I2Cx_Init+0x68>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <I2Cx_Init+0x6c>)
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e002      	b.n	800284a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <I2Cx_Init+0x70>)
 8002848:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <I2Cx_Init+0x74>)
 800284e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff23 	bl	80026c0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f004 f854 	bl	8006928 <HAL_I2C_Init>
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200006b4 	.word	0x200006b4
 800288c:	40005c00 	.word	0x40005c00
 8002890:	40005400 	.word	0x40005400
 8002894:	40912732 	.word	0x40912732

08002898 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af04      	add	r7, sp, #16
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	72fb      	strb	r3, [r7, #11]
 80028aa:	460b      	mov	r3, r1
 80028ac:	813b      	strh	r3, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	b299      	uxth	r1, r3
 80028ba:	88f8      	ldrh	r0, [r7, #6]
 80028bc:	893a      	ldrh	r2, [r7, #8]
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4603      	mov	r3, r0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f004 f9fe 	bl	8006cd0 <HAL_I2C_Mem_Read>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	4619      	mov	r1, r3
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f832 	bl	800294c <I2Cx_Error>
  }
  return status;    
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	; 0x28
 80028f6:	af04      	add	r7, sp, #16
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	4603      	mov	r3, r0
 8002902:	72fb      	strb	r3, [r7, #11]
 8002904:	460b      	mov	r3, r1
 8002906:	813b      	strh	r3, [r7, #8]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b299      	uxth	r1, r3
 8002914:	88f8      	ldrh	r0, [r7, #6]
 8002916:	893a      	ldrh	r2, [r7, #8]
 8002918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291c:	9302      	str	r3, [sp, #8]
 800291e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f004 f8bd 	bl	8006aa8 <HAL_I2C_Mem_Write>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	4619      	mov	r1, r3
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f805 	bl	800294c <I2Cx_Error>
  }
  return status;
 8002942:	7dfb      	ldrb	r3, [r7, #23]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f004 f875 	bl	8006a48 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff5e 	bl	8002820 <I2Cx_Init>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <TS_IO_Init+0x10>)
 8002972:	f7ff ff55 	bl	8002820 <I2Cx_Init>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200006b4 	.word	0x200006b4

08002980 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af02      	add	r7, sp, #8
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	460b      	mov	r3, r1
 800298c:	71bb      	strb	r3, [r7, #6]
 800298e:	4613      	mov	r3, r2
 8002990:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	b29a      	uxth	r2, r3
 8002996:	79f9      	ldrb	r1, [r7, #7]
 8002998:	2301      	movs	r3, #1
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	1d7b      	adds	r3, r7, #5
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <TS_IO_Write+0x30>)
 80029a4:	f7ff ffa5 	bl	80028f2 <I2Cx_WriteMultiple>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200006b4 	.word	0x200006b4

080029b4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	4603      	mov	r3, r0
 80029bc:	460a      	mov	r2, r1
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80029c8:	79bb      	ldrb	r3, [r7, #6]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	79f9      	ldrb	r1, [r7, #7]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f107 030f 	add.w	r3, r7, #15
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <TS_IO_Read+0x38>)
 80029dc:	f7ff ff5c 	bl	8002898 <I2Cx_ReadMultiple>

  return read_value;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200006b4 	.word	0x200006b4

080029f0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f002 f971 	bl	8004ce0 <HAL_Delay>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a0e:	2228      	movs	r2, #40	; 0x28
 8002a10:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002a12:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a14:	2209      	movs	r2, #9
 8002a16:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002a18:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a1a:	2235      	movs	r2, #53	; 0x35
 8002a1c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a20:	220b      	movs	r2, #11
 8002a22:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a26:	f240 121b 	movw	r2, #283	; 0x11b
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a2e:	f240 2215 	movw	r2, #533	; 0x215
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a36:	f240 121d 	movw	r2, #285	; 0x11d
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002a3c:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a3e:	f240 2235 	movw	r2, #565	; 0x235
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002a44:	2100      	movs	r1, #0
 8002a46:	4823      	ldr	r0, [pc, #140]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a48:	f000 fe6e 	bl	8003728 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a52:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002a54:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a56:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <BSP_LCD_Init+0xd0>)
 8002a90:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002a92:	4810      	ldr	r0, [pc, #64]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002a94:	f004 ff46 	bl	8007924 <HAL_LTDC_GetState>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002aa2:	f000 fd67 	bl	8003574 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002aa6:	480b      	ldr	r0, [pc, #44]	; (8002ad4 <BSP_LCD_Init+0xcc>)
 8002aa8:	f004 fd6c 	bl	8007584 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab2:	480a      	ldr	r0, [pc, #40]	; (8002adc <BSP_LCD_Init+0xd4>)
 8002ab4:	f003 ff1e 	bl	80068f4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2108      	movs	r1, #8
 8002abc:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <BSP_LCD_Init+0xd8>)
 8002abe:	f003 ff19 	bl	80068f4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002ac2:	f000 ff95 	bl	80039f0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ac6:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <BSP_LCD_Init+0xdc>)
 8002ac8:	f000 f8d8 	bl	8002c7c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000708 	.word	0x20000708
 8002ad8:	40016800 	.word	0x40016800
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022800 	.word	0x40022800
 8002ae4:	20000028 	.word	0x20000028

08002ae8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <BSP_LCD_GetXSize+0x20>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <BSP_LCD_GetXSize+0x24>)
 8002af2:	2134      	movs	r1, #52	; 0x34
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3360      	adds	r3, #96	; 0x60
 8002afc:	681b      	ldr	r3, [r3, #0]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	200007f0 	.word	0x200007f0
 8002b0c:	20000708 	.word	0x20000708

08002b10 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <BSP_LCD_GetYSize+0x20>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <BSP_LCD_GetYSize+0x24>)
 8002b1a:	2134      	movs	r1, #52	; 0x34
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3364      	adds	r3, #100	; 0x64
 8002b24:	681b      	ldr	r3, [r3, #0]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	200007f0 	.word	0x200007f0
 8002b34:	20000708 	.word	0x20000708

08002b38 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b090      	sub	sp, #64	; 0x40
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002b48:	f7ff ffce 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b54:	f7ff ffdc 	bl	8002b10 <BSP_LCD_GetYSize>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002b64:	23ff      	movs	r3, #255	; 0xff
 8002b66:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002b7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b84:	2307      	movs	r3, #7
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002b88:	f7ff ffae 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002b90:	f7ff ffbe 	bl	8002b10 <BSP_LCD_GetYSize>
 8002b94:	4603      	mov	r3, r0
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	f107 030c 	add.w	r3, r7, #12
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4812      	ldr	r0, [pc, #72]	; (8002bec <BSP_LCD_LayerDefaultInit+0xb4>)
 8002ba2:	f004 fe81 	bl	80078a8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	4911      	ldr	r1, [pc, #68]	; (8002bf0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3308      	adds	r3, #8
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	4907      	ldr	r1, [pc, #28]	; (8002bf0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	3740      	adds	r7, #64	; 0x40
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000708 	.word	0x20000708
 8002bf0:	200007f4 	.word	0x200007f4
 8002bf4:	20000028 	.word	0x20000028

08002bf8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <BSP_LCD_SelectLayer+0x1c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
} 
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	200007f0 	.word	0x200007f0

08002c18 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <BSP_LCD_SetTextColor+0x28>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <BSP_LCD_SetTextColor+0x2c>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	200007f0 	.word	0x200007f0
 8002c44:	200007f4 	.word	0x200007f4

08002c48 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <BSP_LCD_SetBackColor+0x2c>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4908      	ldr	r1, [pc, #32]	; (8002c78 <BSP_LCD_SetBackColor+0x30>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3304      	adds	r3, #4
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200007f0 	.word	0x200007f0
 8002c78:	200007f4 	.word	0x200007f4

08002c7c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <BSP_LCD_SetFont+0x2c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4908      	ldr	r1, [pc, #32]	; (8002cac <BSP_LCD_SetFont+0x30>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3308      	adds	r3, #8
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	200007f0 	.word	0x200007f0
 8002cac:	200007f4 	.word	0x200007f4

08002cb0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <BSP_LCD_GetFont+0x24>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <BSP_LCD_GetFont+0x28>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	200007f0 	.word	0x200007f0
 8002cd8:	200007f4 	.word	0x200007f4

08002cdc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <BSP_LCD_Clear+0x48>)
 8002ce6:	681c      	ldr	r4, [r3, #0]
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <BSP_LCD_Clear+0x48>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <BSP_LCD_Clear+0x4c>)
 8002cee:	2134      	movs	r1, #52	; 0x34
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461e      	mov	r6, r3
 8002cfc:	f7ff fef4 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002d00:	4605      	mov	r5, r0
 8002d02:	f7ff ff05 	bl	8002b10 <BSP_LCD_GetYSize>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	462a      	mov	r2, r5
 8002d14:	4631      	mov	r1, r6
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 fdda 	bl	80038d0 <LL_FillBuffer>
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	200007f0 	.word	0x200007f0
 8002d28:	20000708 	.word	0x20000708

08002d2c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
 8002d36:	460b      	mov	r3, r1
 8002d38:	80bb      	strh	r3, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <BSP_LCD_DisplayChar+0x80>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	491b      	ldr	r1, [pc, #108]	; (8002db0 <BSP_LCD_DisplayChar+0x84>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3308      	adds	r3, #8
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <BSP_LCD_DisplayChar+0x80>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4c14      	ldr	r4, [pc, #80]	; (8002db0 <BSP_LCD_DisplayChar+0x84>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4423      	add	r3, r4
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d70:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <BSP_LCD_DisplayChar+0x80>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4c0d      	ldr	r4, [pc, #52]	; (8002db0 <BSP_LCD_DisplayChar+0x84>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4423      	add	r3, r4
 8002d84:	3308      	adds	r3, #8
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	889b      	ldrh	r3, [r3, #4]
 8002d8a:	3307      	adds	r3, #7
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	da00      	bge.n	8002d92 <BSP_LCD_DisplayChar+0x66>
 8002d90:	3307      	adds	r3, #7
 8002d92:	10db      	asrs	r3, r3, #3
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d98:	18ca      	adds	r2, r1, r3
 8002d9a:	88b9      	ldrh	r1, [r7, #4]
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fcde 	bl	8003760 <DrawChar>
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	200007f0 	.word	0x200007f0
 8002db0:	200007f4 	.word	0x200007f4

08002db4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60ba      	str	r2, [r7, #8]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	81fb      	strh	r3, [r7, #14]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	81bb      	strh	r3, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	83fb      	strh	r3, [r7, #30]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002dde:	e002      	b.n	8002de6 <BSP_LCD_DisplayStringAt+0x32>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	617a      	str	r2, [r7, #20]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f6      	bne.n	8002de0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002df2:	f7ff fe79 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <BSP_LCD_DisplayStringAt+0x188>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4850      	ldr	r0, [pc, #320]	; (8002f40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4403      	add	r3, r0
 8002e08:	3308      	adds	r3, #8
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	889b      	ldrh	r3, [r3, #4]
 8002e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e12:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d01c      	beq.n	8002e54 <BSP_LCD_DisplayStringAt+0xa0>
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	dc33      	bgt.n	8002e86 <BSP_LCD_DisplayStringAt+0xd2>
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d002      	beq.n	8002e28 <BSP_LCD_DisplayStringAt+0x74>
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d019      	beq.n	8002e5a <BSP_LCD_DisplayStringAt+0xa6>
 8002e26:	e02e      	b.n	8002e86 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1ad1      	subs	r1, r2, r3
 8002e2e:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <BSP_LCD_DisplayStringAt+0x188>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4843      	ldr	r0, [pc, #268]	; (8002f40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4403      	add	r3, r0
 8002e3e:	3308      	adds	r3, #8
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	889b      	ldrh	r3, [r3, #4]
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	4413      	add	r3, r2
 8002e50:	83fb      	strh	r3, [r7, #30]
      break;
 8002e52:	e01b      	b.n	8002e8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	83fb      	strh	r3, [r7, #30]
      break;
 8002e58:	e018      	b.n	8002e8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b299      	uxth	r1, r3
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <BSP_LCD_DisplayStringAt+0x188>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4836      	ldr	r0, [pc, #216]	; (8002f40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4403      	add	r3, r0
 8002e72:	3308      	adds	r3, #8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	889b      	ldrh	r3, [r3, #4]
 8002e78:	fb11 f303 	smulbb	r3, r1, r3
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	89fb      	ldrh	r3, [r7, #14]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	83fb      	strh	r3, [r7, #30]
      break;
 8002e84:	e002      	b.n	8002e8c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	83fb      	strh	r3, [r7, #30]
      break;
 8002e8a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002e8c:	8bfb      	ldrh	r3, [r7, #30]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <BSP_LCD_DisplayStringAt+0xe6>
 8002e92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da1d      	bge.n	8002ed6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e9e:	e01a      	b.n	8002ed6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	89b9      	ldrh	r1, [r7, #12]
 8002ea6:	8bfb      	ldrh	r3, [r7, #30]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff3f 	bl	8002d2c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <BSP_LCD_DisplayStringAt+0x188>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4923      	ldr	r1, [pc, #140]	; (8002f40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	889a      	ldrh	r2, [r3, #4]
 8002ec4:	8bfb      	ldrh	r3, [r7, #30]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
    i++;
 8002ed0:	8bbb      	ldrh	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf14      	ite	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	2300      	moveq	r3, #0
 8002ee2:	b2dc      	uxtb	r4, r3
 8002ee4:	f7ff fe00 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002ee8:	8bb9      	ldrh	r1, [r7, #28]
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <BSP_LCD_DisplayStringAt+0x188>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4d14      	ldr	r5, [pc, #80]	; (8002f40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	442b      	add	r3, r5
 8002efa:	3308      	adds	r3, #8
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	889b      	ldrh	r3, [r3, #4]
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ac3      	subs	r3, r0, r3
 8002f06:	b299      	uxth	r1, r3
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <BSP_LCD_DisplayStringAt+0x188>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <BSP_LCD_DisplayStringAt+0x18c>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4403      	add	r3, r0
 8002f18:	3308      	adds	r3, #8
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	889b      	ldrh	r3, [r3, #4]
 8002f1e:	4299      	cmp	r1, r3
 8002f20:	bf2c      	ite	cs
 8002f22:	2301      	movcs	r3, #1
 8002f24:	2300      	movcc	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4023      	ands	r3, r4
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1b7      	bne.n	8002ea0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200007f0 	.word	0x200007f0
 8002f40:	200007f4 	.word	0x200007f4

08002f44 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002f50:	f7ff feae 	bl	8002cb0 <BSP_LCD_GetFont>
 8002f54:	4603      	mov	r3, r0
 8002f56:	88db      	ldrh	r3, [r3, #6]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	fb12 f303 	smulbb	r3, r2, r3
 8002f5e:	b299      	uxth	r1, r3
 8002f60:	2303      	movs	r3, #3
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7ff ff25 	bl	8002db4 <BSP_LCD_DisplayStringAt>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	80bb      	strh	r3, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <BSP_LCD_DrawHLine+0xb0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <BSP_LCD_DrawHLine+0xb4>)
 8002f90:	2134      	movs	r1, #52	; 0x34
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3348      	adds	r3, #72	; 0x48
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d114      	bne.n	8002fca <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fa0:	4b20      	ldr	r3, [pc, #128]	; (8003024 <BSP_LCD_DrawHLine+0xb0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <BSP_LCD_DrawHLine+0xb4>)
 8002fa6:	2134      	movs	r1, #52	; 0x34
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	335c      	adds	r3, #92	; 0x5c
 8002fb0:	681c      	ldr	r4, [r3, #0]
 8002fb2:	f7ff fd99 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4423      	add	r3, r4
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e013      	b.n	8002ff2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <BSP_LCD_DrawHLine+0xb0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	; (8003028 <BSP_LCD_DrawHLine+0xb4>)
 8002fd0:	2134      	movs	r1, #52	; 0x34
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	335c      	adds	r3, #92	; 0x5c
 8002fda:	681c      	ldr	r4, [r3, #0]
 8002fdc:	f7ff fd84 	bl	8002ae8 <BSP_LCD_GetXSize>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	fb03 f202 	mul.w	r2, r3, r2
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4423      	add	r3, r4
 8002ff0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <BSP_LCD_DrawHLine+0xb0>)
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	887c      	ldrh	r4, [r7, #2]
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <BSP_LCD_DrawHLine+0xb0>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4d0b      	ldr	r5, [pc, #44]	; (800302c <BSP_LCD_DrawHLine+0xb8>)
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	442b      	add	r3, r5
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2301      	movs	r3, #1
 8003014:	4622      	mov	r2, r4
 8003016:	f000 fc5b 	bl	80038d0 <LL_FillBuffer>
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bdb0      	pop	{r4, r5, r7, pc}
 8003022:	bf00      	nop
 8003024:	200007f0 	.word	0x200007f0
 8003028:	20000708 	.word	0x20000708
 800302c:	200007f4 	.word	0x200007f4

08003030 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
 800303a:	460b      	mov	r3, r1
 800303c:	80bb      	strh	r3, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	f1c3 0303 	rsb	r3, r3, #3
 800304a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003054:	e0c7      	b.n	80031e6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	b29a      	uxth	r2, r3
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4413      	add	r3, r2
 800305e:	b298      	uxth	r0, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	b29b      	uxth	r3, r3
 8003064:	88ba      	ldrh	r2, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	b299      	uxth	r1, r3
 800306a:	4b64      	ldr	r3, [pc, #400]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4c64      	ldr	r4, [pc, #400]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4423      	add	r3, r4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 f8c1 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	b29b      	uxth	r3, r3
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b298      	uxth	r0, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	88ba      	ldrh	r2, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b299      	uxth	r1, r3
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4c59      	ldr	r4, [pc, #356]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4423      	add	r3, r4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 f8ab 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	4413      	add	r3, r2
 80030b6:	b298      	uxth	r0, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	88ba      	ldrh	r2, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	b299      	uxth	r1, r3
 80030c2:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4c4e      	ldr	r4, [pc, #312]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4423      	add	r3, r4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 f895 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	b298      	uxth	r0, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	88ba      	ldrh	r2, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	b299      	uxth	r1, r3
 80030ee:	4b43      	ldr	r3, [pc, #268]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4c43      	ldr	r4, [pc, #268]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4423      	add	r3, r4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f000 f87f 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	b29a      	uxth	r2, r3
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4413      	add	r3, r2
 800310e:	b298      	uxth	r0, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	b29a      	uxth	r2, r3
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	b299      	uxth	r1, r3
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4c38      	ldr	r4, [pc, #224]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4423      	add	r3, r4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 f869 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	b29b      	uxth	r3, r3
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	b298      	uxth	r0, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	b29a      	uxth	r2, r3
 8003140:	88bb      	ldrh	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	b299      	uxth	r1, r3
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4c2d      	ldr	r4, [pc, #180]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4423      	add	r3, r4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	f000 f853 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b29a      	uxth	r2, r3
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4413      	add	r3, r2
 8003166:	b298      	uxth	r0, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b29a      	uxth	r2, r3
 800316c:	88bb      	ldrh	r3, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	b299      	uxth	r1, r3
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4c22      	ldr	r4, [pc, #136]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4423      	add	r3, r4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f83d 	bl	8003204 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	b29b      	uxth	r3, r3
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b298      	uxth	r0, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	b29a      	uxth	r2, r3
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	b299      	uxth	r1, r3
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4c17      	ldr	r4, [pc, #92]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4423      	add	r3, r4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f000 f827 	bl	8003204 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da06      	bge.n	80031ca <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4413      	add	r3, r2
 80031c4:	3306      	adds	r3, #6
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e00a      	b.n	80031e0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4413      	add	r3, r2
 80031d6:	330a      	adds	r3, #10
 80031d8:	617b      	str	r3, [r7, #20]
      current_y--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3b01      	subs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f67f af33 	bls.w	8003056 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200007f0 	.word	0x200007f0
 8003200:	200007f4 	.word	0x200007f4

08003204 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003204:	b5b0      	push	{r4, r5, r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	603a      	str	r2, [r7, #0]
 800320e:	80fb      	strh	r3, [r7, #6]
 8003210:	460b      	mov	r3, r1
 8003212:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <BSP_LCD_DrawPixel+0x88>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <BSP_LCD_DrawPixel+0x8c>)
 800321a:	2134      	movs	r1, #52	; 0x34
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3348      	adds	r3, #72	; 0x48
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d116      	bne.n	8003258 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <BSP_LCD_DrawPixel+0x88>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <BSP_LCD_DrawPixel+0x8c>)
 8003230:	2134      	movs	r1, #52	; 0x34
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	335c      	adds	r3, #92	; 0x5c
 800323a:	681c      	ldr	r4, [r3, #0]
 800323c:	88bd      	ldrh	r5, [r7, #4]
 800323e:	f7ff fc53 	bl	8002ae8 <BSP_LCD_GetXSize>
 8003242:	4603      	mov	r3, r0
 8003244:	fb03 f205 	mul.w	r2, r3, r5
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4423      	add	r3, r4
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	b292      	uxth	r2, r2
 8003254:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003256:	e015      	b.n	8003284 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <BSP_LCD_DrawPixel+0x88>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <BSP_LCD_DrawPixel+0x8c>)
 800325e:	2134      	movs	r1, #52	; 0x34
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	335c      	adds	r3, #92	; 0x5c
 8003268:	681c      	ldr	r4, [r3, #0]
 800326a:	88bd      	ldrh	r5, [r7, #4]
 800326c:	f7ff fc3c 	bl	8002ae8 <BSP_LCD_GetXSize>
 8003270:	4603      	mov	r3, r0
 8003272:	fb03 f205 	mul.w	r2, r3, r5
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4423      	add	r3, r4
 800327e:	461a      	mov	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	200007f0 	.word	0x200007f0
 8003290:	20000708 	.word	0x20000708

08003294 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b08b      	sub	sp, #44	; 0x2c
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	330a      	adds	r3, #10
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	330b      	adds	r3, #11
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	330c      	adds	r3, #12
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	330d      	adds	r3, #13
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	4413      	add	r3, r2
 80032da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3312      	adds	r3, #18
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3313      	adds	r3, #19
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3314      	adds	r3, #20
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	441a      	add	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3315      	adds	r3, #21
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	4413      	add	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3316      	adds	r3, #22
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3317      	adds	r3, #23
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3318      	adds	r3, #24
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3319      	adds	r3, #25
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	4413      	add	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	331c      	adds	r3, #28
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	331d      	adds	r3, #29
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	4413      	add	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <BSP_LCD_DrawBitmap+0x15c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <BSP_LCD_DrawBitmap+0x160>)
 8003346:	2134      	movs	r1, #52	; 0x34
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	681c      	ldr	r4, [r3, #0]
 8003352:	f7ff fbc9 	bl	8002ae8 <BSP_LCD_GetXSize>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	fb03 f202 	mul.w	r2, r3, r2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4423      	add	r3, r4
 8003366:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	3b20      	subs	r3, #32
 800336c:	2b07      	cmp	r3, #7
 800336e:	d802      	bhi.n	8003376 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e008      	b.n	8003388 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	3b10      	subs	r3, #16
 800337a:	2b07      	cmp	r3, #7
 800337c:	d802      	bhi.n	8003384 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800337e:	2302      	movs	r3, #2
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e001      	b.n	8003388 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003384:	2301      	movs	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3b01      	subs	r3, #1
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	08d2      	lsrs	r2, r2, #3
 8003396:	fb03 f202 	mul.w	r2, r3, r2
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	4413      	add	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e018      	b.n	80033dc <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80033aa:	6a39      	ldr	r1, [r7, #32]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fad9 	bl	8003968 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80033b6:	f7ff fb97 	bl	8002ae8 <BSP_LCD_GetXSize>
 80033ba:	4603      	mov	r3, r0
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	6a3a      	ldr	r2, [r7, #32]
 80033c0:	4413      	add	r3, r2
 80033c2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	08db      	lsrs	r3, r3, #3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	425b      	negs	r3, r3
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	3301      	adds	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
 80033dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3e2      	bcc.n	80033aa <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	372c      	adds	r7, #44	; 0x2c
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200007f0 	.word	0x200007f0
 80033f4:	20000708 	.word	0x20000708

080033f8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
 8003402:	460b      	mov	r3, r1
 8003404:	80bb      	strh	r3, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	f1c3 0303 	rsb	r3, r3, #3
 8003412:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800341c:	4b44      	ldr	r3, [pc, #272]	; (8003530 <BSP_LCD_FillCircle+0x138>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4944      	ldr	r1, [pc, #272]	; (8003534 <BSP_LCD_FillCircle+0x13c>)
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fbf2 	bl	8002c18 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003434:	e061      	b.n	80034fa <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	b29b      	uxth	r3, r3
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	b298      	uxth	r0, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	b29a      	uxth	r2, r3
 800344a:	88bb      	ldrh	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	b299      	uxth	r1, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	b29b      	uxth	r3, r3
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	b29b      	uxth	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	f7ff fd8b 	bl	8002f74 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	b29b      	uxth	r3, r3
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b298      	uxth	r0, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	b29b      	uxth	r3, r3
 800346c:	88ba      	ldrh	r2, [r7, #4]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	b299      	uxth	r1, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	b29b      	uxth	r3, r3
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	f7ff fd7a 	bl	8002f74 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d021      	beq.n	80034ca <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	b29b      	uxth	r3, r3
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b298      	uxth	r0, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	b29b      	uxth	r3, r3
 8003494:	88ba      	ldrh	r2, [r7, #4]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	b299      	uxth	r1, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	b29b      	uxth	r3, r3
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7ff fd66 	bl	8002f74 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	b298      	uxth	r0, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	88bb      	ldrh	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	b299      	uxth	r1, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	f7ff fd55 	bl	8002f74 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da06      	bge.n	80034de <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4413      	add	r3, r2
 80034d8:	3306      	adds	r3, #6
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e00a      	b.n	80034f4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	009a      	lsls	r2, r3, #2
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4413      	add	r3, r2
 80034ea:	330a      	adds	r3, #10
 80034ec:	617b      	str	r3, [r7, #20]
      current_y--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	3301      	adds	r3, #1
 80034f8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d999      	bls.n	8003436 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <BSP_LCD_FillCircle+0x138>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	490b      	ldr	r1, [pc, #44]	; (8003534 <BSP_LCD_FillCircle+0x13c>)
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fb7f 	bl	8002c18 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	88b9      	ldrh	r1, [r7, #4]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd85 	bl	8003030 <BSP_LCD_DrawCircle>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200007f0 	.word	0x200007f0
 8003534:	200007f4 	.word	0x200007f4

08003538 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <BSP_LCD_DisplayOn+0x30>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <BSP_LCD_DisplayOn+0x30>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800354c:	2201      	movs	r2, #1
 800354e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <BSP_LCD_DisplayOn+0x34>)
 8003554:	f003 f9ce 	bl	80068f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003558:	2201      	movs	r2, #1
 800355a:	2108      	movs	r1, #8
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <BSP_LCD_DisplayOn+0x38>)
 800355e:	f003 f9c9 	bl	80068f4 <HAL_GPIO_WritePin>
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000708 	.word	0x20000708
 800356c:	40022000 	.word	0x40022000
 8003570:	40022800 	.word	0x40022800

08003574 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b090      	sub	sp, #64	; 0x40
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800357e:	4b64      	ldr	r3, [pc, #400]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a63      	ldr	r2, [pc, #396]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003584:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b61      	ldr	r3, [pc, #388]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003596:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a5d      	ldr	r2, [pc, #372]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 800359c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a57      	ldr	r2, [pc, #348]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035b4:	f043 0310 	orr.w	r3, r3, #16
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b55      	ldr	r3, [pc, #340]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035c6:	4b52      	ldr	r3, [pc, #328]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a51      	ldr	r2, [pc, #324]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035de:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035f6:	4b46      	ldr	r3, [pc, #280]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a45      	ldr	r2, [pc, #276]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 80035fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b43      	ldr	r3, [pc, #268]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a3f      	ldr	r2, [pc, #252]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003626:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a39      	ldr	r2, [pc, #228]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a33      	ldr	r2, [pc, #204]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 8003644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <BSP_LCD_MspInit+0x19c>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003656:	2310      	movs	r3, #16
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003662:	2302      	movs	r3, #2
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003666:	230e      	movs	r3, #14
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800366a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800366e:	4619      	mov	r1, r3
 8003670:	4828      	ldr	r0, [pc, #160]	; (8003714 <BSP_LCD_MspInit+0x1a0>)
 8003672:	f002 fe6f 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003680:	2309      	movs	r3, #9
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003688:	4619      	mov	r1, r3
 800368a:	4823      	ldr	r0, [pc, #140]	; (8003718 <BSP_LCD_MspInit+0x1a4>)
 800368c:	f002 fe62 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003690:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800369a:	230e      	movs	r3, #14
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800369e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a2:	4619      	mov	r1, r3
 80036a4:	481d      	ldr	r0, [pc, #116]	; (800371c <BSP_LCD_MspInit+0x1a8>)
 80036a6:	f002 fe55 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80036aa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036b4:	230e      	movs	r3, #14
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80036b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036bc:	4619      	mov	r1, r3
 80036be:	4818      	ldr	r0, [pc, #96]	; (8003720 <BSP_LCD_MspInit+0x1ac>)
 80036c0:	f002 fe48 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80036c4:	23f7      	movs	r3, #247	; 0xf7
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036cc:	230e      	movs	r3, #14
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80036d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d4:	4619      	mov	r1, r3
 80036d6:	4813      	ldr	r0, [pc, #76]	; (8003724 <BSP_LCD_MspInit+0x1b0>)
 80036d8:	f002 fe3c 	bl	8006354 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80036dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036e2:	2301      	movs	r3, #1
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80036e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ea:	4619      	mov	r1, r3
 80036ec:	480b      	ldr	r0, [pc, #44]	; (800371c <BSP_LCD_MspInit+0x1a8>)
 80036ee:	f002 fe31 	bl	8006354 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80036f2:	2308      	movs	r3, #8
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036f6:	2301      	movs	r3, #1
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80036fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036fe:	4619      	mov	r1, r3
 8003700:	4808      	ldr	r0, [pc, #32]	; (8003724 <BSP_LCD_MspInit+0x1b0>)
 8003702:	f002 fe27 	bl	8006354 <HAL_GPIO_Init>
}
 8003706:	bf00      	nop
 8003708:	3740      	adds	r7, #64	; 0x40
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40021000 	.word	0x40021000
 8003718:	40021800 	.word	0x40021800
 800371c:	40022000 	.word	0x40022000
 8003720:	40022400 	.word	0x40022400
 8003724:	40022800 	.word	0x40022800

08003728 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <BSP_LCD_ClockConfig+0x34>)
 8003734:	2208      	movs	r2, #8
 8003736:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <BSP_LCD_ClockConfig+0x34>)
 800373a:	22c0      	movs	r2, #192	; 0xc0
 800373c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <BSP_LCD_ClockConfig+0x34>)
 8003740:	2205      	movs	r2, #5
 8003742:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <BSP_LCD_ClockConfig+0x34>)
 8003746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <BSP_LCD_ClockConfig+0x34>)
 800374e:	f004 ffad 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000080c 	.word	0x2000080c

08003760 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	603a      	str	r2, [r7, #0]
 800376a:	80fb      	strh	r3, [r7, #6]
 800376c:	460b      	mov	r3, r1
 800376e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <DrawChar+0x168>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4953      	ldr	r1, [pc, #332]	; (80038cc <DrawChar+0x16c>)
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3308      	adds	r3, #8
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	88db      	ldrh	r3, [r3, #6]
 800378e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003790:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <DrawChar+0x168>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	494d      	ldr	r1, [pc, #308]	; (80038cc <DrawChar+0x16c>)
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3308      	adds	r3, #8
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	889b      	ldrh	r3, [r3, #4]
 80037a6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80037a8:	8a3b      	ldrh	r3, [r7, #16]
 80037aa:	3307      	adds	r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da00      	bge.n	80037b2 <DrawChar+0x52>
 80037b0:	3307      	adds	r3, #7
 80037b2:	10db      	asrs	r3, r3, #3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8a3b      	ldrh	r3, [r7, #16]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e076      	b.n	80038b6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80037c8:	8a3b      	ldrh	r3, [r7, #16]
 80037ca:	3307      	adds	r3, #7
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da00      	bge.n	80037d2 <DrawChar+0x72>
 80037d0:	3307      	adds	r3, #7
 80037d2:	10db      	asrs	r3, r3, #3
 80037d4:	461a      	mov	r2, r3
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80037e2:	8a3b      	ldrh	r3, [r7, #16]
 80037e4:	3307      	adds	r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da00      	bge.n	80037ec <DrawChar+0x8c>
 80037ea:	3307      	adds	r3, #7
 80037ec:	10db      	asrs	r3, r3, #3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d002      	beq.n	80037f8 <DrawChar+0x98>
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d004      	beq.n	8003800 <DrawChar+0xa0>
 80037f6:	e00c      	b.n	8003812 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	617b      	str	r3, [r7, #20]
      break;
 80037fe:	e016      	b.n	800382e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	3201      	adds	r2, #1
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
      break;
 8003810:	e00d      	b.n	800382e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	041a      	lsls	r2, r3, #16
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3301      	adds	r3, #1
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	4313      	orrs	r3, r2
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	3202      	adds	r2, #2
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
      break;
 800382c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e036      	b.n	80038a2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003834:	8a3a      	ldrh	r2, [r7, #16]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	4413      	add	r3, r2
 800383e:	3b01      	subs	r3, #1
 8003840:	2201      	movs	r2, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	461a      	mov	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d012      	beq.n	8003876 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	b29a      	uxth	r2, r3
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	4413      	add	r3, r2
 8003858:	b298      	uxth	r0, r3
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <DrawChar+0x168>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <DrawChar+0x16c>)
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	88bb      	ldrh	r3, [r7, #4]
 800386e:	4619      	mov	r1, r3
 8003870:	f7ff fcc8 	bl	8003204 <BSP_LCD_DrawPixel>
 8003874:	e012      	b.n	800389c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	b29a      	uxth	r2, r3
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	4413      	add	r3, r2
 800387e:	b298      	uxth	r0, r3
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <DrawChar+0x168>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4911      	ldr	r1, [pc, #68]	; (80038cc <DrawChar+0x16c>)
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3304      	adds	r3, #4
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	88bb      	ldrh	r3, [r7, #4]
 8003896:	4619      	mov	r1, r3
 8003898:	f7ff fcb4 	bl	8003204 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	3301      	adds	r3, #1
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	8a3b      	ldrh	r3, [r7, #16]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3c4      	bcc.n	8003834 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	3301      	adds	r3, #1
 80038ae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	8a7b      	ldrh	r3, [r7, #18]
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d384      	bcc.n	80037c8 <DrawChar+0x68>
  }
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200007f0 	.word	0x200007f0
 80038cc:	200007f4 	.word	0x200007f4

080038d0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <LL_FillBuffer+0x88>)
 80038e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038e4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <LL_FillBuffer+0x8c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <LL_FillBuffer+0x90>)
 80038ec:	2134      	movs	r1, #52	; 0x34
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3348      	adds	r3, #72	; 0x48
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d103      	bne.n	8003904 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80038fc:	4b16      	ldr	r3, [pc, #88]	; (8003958 <LL_FillBuffer+0x88>)
 80038fe:	2202      	movs	r2, #2
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	e002      	b.n	800390a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <LL_FillBuffer+0x88>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800390a:	4a13      	ldr	r2, [pc, #76]	; (8003958 <LL_FillBuffer+0x88>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <LL_FillBuffer+0x88>)
 8003912:	4a14      	ldr	r2, [pc, #80]	; (8003964 <LL_FillBuffer+0x94>)
 8003914:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003916:	4810      	ldr	r0, [pc, #64]	; (8003958 <LL_FillBuffer+0x88>)
 8003918:	f002 f980 	bl	8005c1c <HAL_DMA2D_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d115      	bne.n	800394e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	480c      	ldr	r0, [pc, #48]	; (8003958 <LL_FillBuffer+0x88>)
 8003926:	f002 fbe7 	bl	80060f8 <HAL_DMA2D_ConfigLayer>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10e      	bne.n	800394e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69f9      	ldr	r1, [r7, #28]
 800393a:	4807      	ldr	r0, [pc, #28]	; (8003958 <LL_FillBuffer+0x88>)
 800393c:	f002 f9b8 	bl	8005cb0 <HAL_DMA2D_Start>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003946:	210a      	movs	r1, #10
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <LL_FillBuffer+0x88>)
 800394a:	f002 f9dc 	bl	8005d06 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200007b0 	.word	0x200007b0
 800395c:	200007f0 	.word	0x200007f0
 8003960:	20000708 	.word	0x20000708
 8003964:	4002b000 	.word	0x4002b000

08003968 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 8003978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800397c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003984:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003990:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 8003992:	22ff      	movs	r2, #255	; 0xff
 8003994:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003996:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 800399e:	2200      	movs	r2, #0
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <LL_ConvertLineToARGB8888+0x84>)
 80039a6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80039a8:	480f      	ldr	r0, [pc, #60]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 80039aa:	f002 f937 	bl	8005c1c <HAL_DMA2D_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d115      	bne.n	80039e0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80039b4:	2101      	movs	r1, #1
 80039b6:	480c      	ldr	r0, [pc, #48]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 80039b8:	f002 fb9e 	bl	80060f8 <HAL_DMA2D_ConfigLayer>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10e      	bne.n	80039e0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	2301      	movs	r3, #1
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4806      	ldr	r0, [pc, #24]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 80039ce:	f002 f96f 	bl	8005cb0 <HAL_DMA2D_Start>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80039d8:	210a      	movs	r1, #10
 80039da:	4803      	ldr	r0, [pc, #12]	; (80039e8 <LL_ConvertLineToARGB8888+0x80>)
 80039dc:	f002 f993 	bl	8005d06 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200007b0 	.word	0x200007b0
 80039ec:	4002b000 	.word	0x4002b000

080039f0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 80039f6:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <BSP_SDRAM_Init+0xb0>)
 80039f8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80039fa:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 80039fc:	2202      	movs	r2, #2
 80039fe:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003a00:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a02:	2207      	movs	r2, #7
 8003a04:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a08:	2204      	movs	r2, #4
 8003a0a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a0e:	2207      	movs	r2, #7
 8003a10:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a14:	2202      	movs	r2, #2
 8003a16:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a32:	2204      	movs	r2, #4
 8003a34:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a38:	2210      	movs	r2, #16
 8003a3a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a48:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a4a:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a56:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003a66:	2100      	movs	r1, #0
 8003a68:	480c      	ldr	r0, [pc, #48]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a6a:	f000 f87f 	bl	8003b6c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003a6e:	490d      	ldr	r1, [pc, #52]	; (8003aa4 <BSP_SDRAM_Init+0xb4>)
 8003a70:	480a      	ldr	r0, [pc, #40]	; (8003a9c <BSP_SDRAM_Init+0xac>)
 8003a72:	f005 fead 	bl	80097d0 <HAL_SDRAM_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <BSP_SDRAM_Init+0xb8>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e002      	b.n	8003a8a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <BSP_SDRAM_Init+0xb8>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003a8a:	f240 6003 	movw	r0, #1539	; 0x603
 8003a8e:	f000 f80d 	bl	8003aac <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <BSP_SDRAM_Init+0xb8>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000890 	.word	0x20000890
 8003aa0:	a0000140 	.word	0xa0000140
 8003aa4:	200008c4 	.word	0x200008c4
 8003aa8:	20000038 	.word	0x20000038

08003aac <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad4:	4923      	ldr	r1, [pc, #140]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ad6:	4824      	ldr	r0, [pc, #144]	; (8003b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ad8:	f005 feae 	bl	8009838 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003adc:	2001      	movs	r0, #1
 8003ade:	f001 f8ff 	bl	8004ce0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aea:	2210      	movs	r2, #16
 8003aec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003afe:	4919      	ldr	r1, [pc, #100]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b00:	4819      	ldr	r0, [pc, #100]	; (8003b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b02:	f005 fe99 	bl	8009838 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003b06:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b08:	2203      	movs	r2, #3
 8003b0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b0e:	2210      	movs	r2, #16
 8003b10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b14:	2208      	movs	r2, #8
 8003b16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b22:	4910      	ldr	r1, [pc, #64]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b24:	4810      	ldr	r0, [pc, #64]	; (8003b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b26:	f005 fe87 	bl	8009838 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003b2a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003b2e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b32:	2204      	movs	r2, #4
 8003b34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b38:	2210      	movs	r2, #16
 8003b3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b46:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4c:	4905      	ldr	r1, [pc, #20]	; (8003b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b4e:	4806      	ldr	r0, [pc, #24]	; (8003b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b50:	f005 fe72 	bl	8009838 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4804      	ldr	r0, [pc, #16]	; (8003b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b58:	f005 fea3 	bl	80098a2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200008e0 	.word	0x200008e0
 8003b68:	20000890 	.word	0x20000890

08003b6c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b090      	sub	sp, #64	; 0x40
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b76:	4b70      	ldr	r3, [pc, #448]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	4a6f      	ldr	r2, [pc, #444]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6393      	str	r3, [r2, #56]	; 0x38
 8003b82:	4b6d      	ldr	r3, [pc, #436]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003b8e:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a69      	ldr	r2, [pc, #420]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba6:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a63      	ldr	r2, [pc, #396]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bbe:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a5d      	ldr	r2, [pc, #372]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bd6:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bdc:	f043 0310 	orr.w	r3, r3, #16
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bee:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a51      	ldr	r2, [pc, #324]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bf4:	f043 0320 	orr.w	r3, r3, #32
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c06:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a45      	ldr	r2, [pc, #276]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b43      	ldr	r3, [pc, #268]	; (8003d38 <BSP_SDRAM_MspInit+0x1cc>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003c42:	230c      	movs	r3, #12
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003c46:	2308      	movs	r3, #8
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c4e:	4619      	mov	r1, r3
 8003c50:	483a      	ldr	r0, [pc, #232]	; (8003d3c <BSP_SDRAM_MspInit+0x1d0>)
 8003c52:	f002 fb7f 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003c56:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c60:	4619      	mov	r1, r3
 8003c62:	4837      	ldr	r0, [pc, #220]	; (8003d40 <BSP_SDRAM_MspInit+0x1d4>)
 8003c64:	f002 fb76 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003c68:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c72:	4619      	mov	r1, r3
 8003c74:	4833      	ldr	r0, [pc, #204]	; (8003d44 <BSP_SDRAM_MspInit+0x1d8>)
 8003c76:	f002 fb6d 	bl	8006354 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003c7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c84:	4619      	mov	r1, r3
 8003c86:	4830      	ldr	r0, [pc, #192]	; (8003d48 <BSP_SDRAM_MspInit+0x1dc>)
 8003c88:	f002 fb64 	bl	8006354 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003c8c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c96:	4619      	mov	r1, r3
 8003c98:	482c      	ldr	r0, [pc, #176]	; (8003d4c <BSP_SDRAM_MspInit+0x1e0>)
 8003c9a:	f002 fb5b 	bl	8006354 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003c9e:	2328      	movs	r3, #40	; 0x28
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4829      	ldr	r0, [pc, #164]	; (8003d50 <BSP_SDRAM_MspInit+0x1e4>)
 8003caa:	f002 fb53 	bl	8006354 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cd0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cd8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ce6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <BSP_SDRAM_MspInit+0x1ec>)
 8003d04:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d0c:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003d12:	4810      	ldr	r0, [pc, #64]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003d14:	f001 fe72 	bl	80059fc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003d18:	480e      	ldr	r0, [pc, #56]	; (8003d54 <BSP_SDRAM_MspInit+0x1e8>)
 8003d1a:	f001 fdc1 	bl	80058a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	210f      	movs	r1, #15
 8003d22:	2038      	movs	r0, #56	; 0x38
 8003d24:	f001 fcb2 	bl	800568c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003d28:	2038      	movs	r0, #56	; 0x38
 8003d2a:	f001 fccb 	bl	80056c4 <HAL_NVIC_EnableIRQ>
}
 8003d2e:	bf00      	nop
 8003d30:	3740      	adds	r7, #64	; 0x40
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40021400 	.word	0x40021400
 8003d4c:	40021800 	.word	0x40021800
 8003d50:	40021c00 	.word	0x40021c00
 8003d54:	200008f0 	.word	0x200008f0
 8003d58:	40026410 	.word	0x40026410

08003d5c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	460a      	mov	r2, r1
 8003d66:	80fb      	strh	r3, [r7, #6]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <BSP_TS_Init+0x68>)
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <BSP_TS_Init+0x6c>)
 8003d78:	88bb      	ldrh	r3, [r7, #4]
 8003d7a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <BSP_TS_Init+0x70>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2070      	movs	r0, #112	; 0x70
 8003d82:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <BSP_TS_Init+0x70>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2070      	movs	r0, #112	; 0x70
 8003d8a:	4798      	blx	r3
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b51      	cmp	r3, #81	; 0x51
 8003d90:	d111      	bne.n	8003db6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <BSP_TS_Init+0x74>)
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <BSP_TS_Init+0x70>)
 8003d96:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <BSP_TS_Init+0x78>)
 8003d9a:	2270      	movs	r2, #112	; 0x70
 8003d9c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <BSP_TS_Init+0x7c>)
 8003da0:	2208      	movs	r2, #8
 8003da2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <BSP_TS_Init+0x74>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <BSP_TS_Init+0x78>)
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	b292      	uxth	r2, r2
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
 8003db4:	e001      	b.n	8003dba <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003db6:	2303      	movs	r3, #3
 8003db8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000954 	.word	0x20000954
 8003dc8:	20000956 	.word	0x20000956
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000950 	.word	0x20000950
 8003dd4:	20000959 	.word	0x20000959
 8003dd8:	20000958 	.word	0x20000958

08003ddc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b097      	sub	sp, #92	; 0x5c
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003df6:	4bb4      	ldr	r3, [pc, #720]	; (80040c8 <BSP_TS_GetState+0x2ec>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	4ab3      	ldr	r2, [pc, #716]	; (80040cc <BSP_TS_GetState+0x2f0>)
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	b292      	uxth	r2, r2
 8003e02:	4610      	mov	r0, r2
 8003e04:	4798      	blx	r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8196 	beq.w	8004144 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	e185      	b.n	800412a <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003e1e:	4baa      	ldr	r3, [pc, #680]	; (80040c8 <BSP_TS_GetState+0x2ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	4aa9      	ldr	r2, [pc, #676]	; (80040cc <BSP_TS_GetState+0x2f0>)
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	b290      	uxth	r0, r2
 8003e2a:	f107 0120 	add.w	r1, r7, #32
 8003e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e30:	0052      	lsls	r2, r2, #1
 8003e32:	188c      	adds	r4, r1, r2
 8003e34:	f107 0114 	add.w	r1, r7, #20
 8003e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3a:	0052      	lsls	r2, r2, #1
 8003e3c:	440a      	add	r2, r1
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003e42:	4ba3      	ldr	r3, [pc, #652]	; (80040d0 <BSP_TS_GetState+0x2f4>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d117      	bne.n	8003e7a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	3350      	adds	r3, #80	; 0x50
 8003e50:	443b      	add	r3, r7
 8003e52:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	3350      	adds	r3, #80	; 0x50
 8003e5c:	443b      	add	r3, r7
 8003e5e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	3350      	adds	r3, #80	; 0x50
 8003e68:	443b      	add	r3, r7
 8003e6a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	3350      	adds	r3, #80	; 0x50
 8003e74:	443b      	add	r3, r7
 8003e76:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003e7a:	4b95      	ldr	r3, [pc, #596]	; (80040d0 <BSP_TS_GetState+0x2f4>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	3350      	adds	r3, #80	; 0x50
 8003e8c:	443b      	add	r3, r7
 8003e8e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003e92:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	3350      	adds	r3, #80	; 0x50
 8003e9e:	443b      	add	r3, r7
 8003ea0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003ea4:	4b8a      	ldr	r3, [pc, #552]	; (80040d0 <BSP_TS_GetState+0x2f4>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	3350      	adds	r3, #80	; 0x50
 8003eb6:	443b      	add	r3, r7
 8003eb8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003ebc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	3350      	adds	r3, #80	; 0x50
 8003ec8:	443b      	add	r3, r7
 8003eca:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003ece:	4b80      	ldr	r3, [pc, #512]	; (80040d0 <BSP_TS_GetState+0x2f4>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d017      	beq.n	8003f0a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	3350      	adds	r3, #80	; 0x50
 8003ee0:	443b      	add	r3, r7
 8003ee2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	3350      	adds	r3, #80	; 0x50
 8003eec:	443b      	add	r3, r7
 8003eee:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	3350      	adds	r3, #80	; 0x50
 8003ef8:	443b      	add	r3, r7
 8003efa:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	3350      	adds	r3, #80	; 0x50
 8003f04:	443b      	add	r3, r7
 8003f06:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	3350      	adds	r3, #80	; 0x50
 8003f10:	443b      	add	r3, r7
 8003f12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4a6e      	ldr	r2, [pc, #440]	; (80040d4 <BSP_TS_GetState+0x2f8>)
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f20:	4299      	cmp	r1, r3
 8003f22:	d90d      	bls.n	8003f40 <BSP_TS_GetState+0x164>
 8003f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	3350      	adds	r3, #80	; 0x50
 8003f2a:	443b      	add	r3, r7
 8003f2c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003f30:	4968      	ldr	r1, [pc, #416]	; (80040d4 <BSP_TS_GetState+0x2f8>)
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	e00c      	b.n	8003f5a <BSP_TS_GetState+0x17e>
 8003f40:	4a64      	ldr	r2, [pc, #400]	; (80040d4 <BSP_TS_GetState+0x2f8>)
 8003f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	3350      	adds	r3, #80	; 0x50
 8003f50:	443b      	add	r3, r7
 8003f52:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	3350      	adds	r3, #80	; 0x50
 8003f64:	443b      	add	r3, r7
 8003f66:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <BSP_TS_GetState+0x2fc>)
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	4299      	cmp	r1, r3
 8003f76:	d90d      	bls.n	8003f94 <BSP_TS_GetState+0x1b8>
 8003f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	3350      	adds	r3, #80	; 0x50
 8003f7e:	443b      	add	r3, r7
 8003f80:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003f84:	4954      	ldr	r1, [pc, #336]	; (80040d8 <BSP_TS_GetState+0x2fc>)
 8003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	e00c      	b.n	8003fae <BSP_TS_GetState+0x1d2>
 8003f94:	4a50      	ldr	r2, [pc, #320]	; (80040d8 <BSP_TS_GetState+0x2fc>)
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	3350      	adds	r3, #80	; 0x50
 8003fa4:	443b      	add	r3, r7
 8003fa6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003fb2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fba:	4413      	add	r3, r2
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	dd15      	ble.n	8003fec <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	3350      	adds	r3, #80	; 0x50
 8003fc6:	443b      	add	r3, r7
 8003fc8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4a41      	ldr	r2, [pc, #260]	; (80040d4 <BSP_TS_GetState+0x2f8>)
 8003fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	3350      	adds	r3, #80	; 0x50
 8003fdc:	443b      	add	r3, r7
 8003fde:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <BSP_TS_GetState+0x2fc>)
 8003fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003fec:	4b37      	ldr	r3, [pc, #220]	; (80040cc <BSP_TS_GetState+0x2f0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b70      	cmp	r3, #112	; 0x70
 8003ff2:	d119      	bne.n	8004028 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	3350      	adds	r3, #80	; 0x50
 8003ffa:	443b      	add	r3, r7
 8003ffc:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	460a      	mov	r2, r1
 800400a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800400c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	3350      	adds	r3, #80	; 0x50
 8004012:	443b      	add	r3, r7
 8004014:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401c:	3304      	adds	r3, #4
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	460a      	mov	r2, r1
 8004024:	809a      	strh	r2, [r3, #4]
 8004026:	e022      	b.n	800406e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004028:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <BSP_TS_GetState+0x300>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	4a29      	ldr	r2, [pc, #164]	; (80040d4 <BSP_TS_GetState+0x2f8>)
 8004030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	0b1b      	lsrs	r3, r3, #12
 800403c:	b299      	uxth	r1, r3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	460a      	mov	r2, r1
 8004048:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800404a:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <BSP_TS_GetState+0x304>)
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	4619      	mov	r1, r3
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <BSP_TS_GetState+0x2fc>)
 8004052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	0b1b      	lsrs	r3, r3, #12
 800405e:	b299      	uxth	r1, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	3304      	adds	r3, #4
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4413      	add	r3, r2
 800406a:	460a      	mov	r2, r1
 800406c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <BSP_TS_GetState+0x2f0>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	b298      	uxth	r0, r3
 8004074:	f107 010c 	add.w	r1, r7, #12
 8004078:	f107 0210 	add.w	r2, r7, #16
 800407c:	f107 0308 	add.w	r3, r7, #8
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	460b      	mov	r3, r1
 8004084:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004086:	f7fd f853 	bl	8001130 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004092:	4413      	add	r3, r2
 8004094:	3316      	adds	r3, #22
 8004096:	460a      	mov	r2, r1
 8004098:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	b2d9      	uxtb	r1, r3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a2:	4413      	add	r3, r2
 80040a4:	3320      	adds	r3, #32
 80040a6:	460a      	mov	r2, r1
 80040a8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d835      	bhi.n	800411c <BSP_TS_GetState+0x340>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <BSP_TS_GetState+0x2dc>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	08004101 	.word	0x08004101
 80040c4:	0800410f 	.word	0x0800410f
 80040c8:	20000950 	.word	0x20000950
 80040cc:	20000959 	.word	0x20000959
 80040d0:	20000958 	.word	0x20000958
 80040d4:	2000095c 	.word	0x2000095c
 80040d8:	20000970 	.word	0x20000970
 80040dc:	20000954 	.word	0x20000954
 80040e0:	20000956 	.word	0x20000956
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e8:	4413      	add	r3, r2
 80040ea:	331b      	adds	r3, #27
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
          break;
 80040f0:	e018      	b.n	8004124 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f6:	4413      	add	r3, r2
 80040f8:	331b      	adds	r3, #27
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]
          break;
 80040fe:	e011      	b.n	8004124 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	4413      	add	r3, r2
 8004106:	331b      	adds	r3, #27
 8004108:	2203      	movs	r2, #3
 800410a:	701a      	strb	r2, [r3, #0]
          break;
 800410c:	e00a      	b.n	8004124 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004112:	4413      	add	r3, r2
 8004114:	331b      	adds	r3, #27
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
          break;
 800411a:	e003      	b.n	8004124 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004122:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004126:	3301      	adds	r3, #1
 8004128:	64bb      	str	r3, [r7, #72]	; 0x48
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004132:	4293      	cmp	r3, r2
 8004134:	f4ff ae73 	bcc.w	8003e1e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f809 	bl	8004150 <BSP_TS_Get_GestureId>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004144:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004148:	4618      	mov	r0, r3
 800414a:	3754      	adds	r7, #84	; 0x54
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004160:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <BSP_TS_Get_GestureId+0x100>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f107 0208 	add.w	r2, r7, #8
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f7fc ffc6 	bl	80010fe <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b49      	cmp	r3, #73	; 0x49
 8004176:	d05e      	beq.n	8004236 <BSP_TS_Get_GestureId+0xe6>
 8004178:	2b49      	cmp	r3, #73	; 0x49
 800417a:	d860      	bhi.n	800423e <BSP_TS_Get_GestureId+0xee>
 800417c:	2b1c      	cmp	r3, #28
 800417e:	d83f      	bhi.n	8004200 <BSP_TS_Get_GestureId+0xb0>
 8004180:	2b1c      	cmp	r3, #28
 8004182:	d85c      	bhi.n	800423e <BSP_TS_Get_GestureId+0xee>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <BSP_TS_Get_GestureId+0x3c>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	08004207 	.word	0x08004207
 8004190:	0800423f 	.word	0x0800423f
 8004194:	0800423f 	.word	0x0800423f
 8004198:	0800423f 	.word	0x0800423f
 800419c:	0800423f 	.word	0x0800423f
 80041a0:	0800423f 	.word	0x0800423f
 80041a4:	0800423f 	.word	0x0800423f
 80041a8:	0800423f 	.word	0x0800423f
 80041ac:	0800423f 	.word	0x0800423f
 80041b0:	0800423f 	.word	0x0800423f
 80041b4:	0800423f 	.word	0x0800423f
 80041b8:	0800423f 	.word	0x0800423f
 80041bc:	0800423f 	.word	0x0800423f
 80041c0:	0800423f 	.word	0x0800423f
 80041c4:	0800423f 	.word	0x0800423f
 80041c8:	0800423f 	.word	0x0800423f
 80041cc:	0800420f 	.word	0x0800420f
 80041d0:	0800423f 	.word	0x0800423f
 80041d4:	0800423f 	.word	0x0800423f
 80041d8:	0800423f 	.word	0x0800423f
 80041dc:	08004217 	.word	0x08004217
 80041e0:	0800423f 	.word	0x0800423f
 80041e4:	0800423f 	.word	0x0800423f
 80041e8:	0800423f 	.word	0x0800423f
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	0800423f 	.word	0x0800423f
 80041f4:	0800423f 	.word	0x0800423f
 80041f8:	0800423f 	.word	0x0800423f
 80041fc:	08004227 	.word	0x08004227
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d014      	beq.n	800422e <BSP_TS_Get_GestureId+0xde>
 8004204:	e01b      	b.n	800423e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800420c:	e01a      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004214:	e016      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800421c:	e012      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2203      	movs	r2, #3
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004224:	e00e      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800422c:	e00a      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2205      	movs	r2, #5
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004234:	e006      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2206      	movs	r2, #6
 800423a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800423c:	e002      	b.n	8004244 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
      break;
 8004242:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000959 	.word	0x20000959

08004254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_MspInit+0x4c>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_MspInit+0x4c>)
 8004260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004264:	6413      	str	r3, [r2, #64]	; 0x40
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_MspInit+0x4c>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_MspInit+0x4c>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <HAL_MspInit+0x4c>)
 8004278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_MspInit+0x4c>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800428a:	2200      	movs	r2, #0
 800428c:	210f      	movs	r1, #15
 800428e:	f06f 0001 	mvn.w	r0, #1
 8004292:	f001 f9fb 	bl	800568c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800

080042a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08e      	sub	sp, #56	; 0x38
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042b4:	4b33      	ldr	r3, [pc, #204]	; (8004384 <HAL_InitTick+0xe0>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <HAL_InitTick+0xe0>)
 80042ba:	f043 0310 	orr.w	r3, r3, #16
 80042be:	6413      	str	r3, [r2, #64]	; 0x40
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_InitTick+0xe0>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042cc:	f107 0210 	add.w	r2, r7, #16
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f004 f9b6 	bl	8008648 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042e6:	f004 f987 	bl	80085f8 <HAL_RCC_GetPCLK1Freq>
 80042ea:	6378      	str	r0, [r7, #52]	; 0x34
 80042ec:	e004      	b.n	80042f8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042ee:	f004 f983 	bl	80085f8 <HAL_RCC_GetPCLK1Freq>
 80042f2:	4603      	mov	r3, r0
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	4a23      	ldr	r2, [pc, #140]	; (8004388 <HAL_InitTick+0xe4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	0c9b      	lsrs	r3, r3, #18
 8004302:	3b01      	subs	r3, #1
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_InitTick+0xe8>)
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <HAL_InitTick+0xec>)
 800430a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <HAL_InitTick+0xe8>)
 800430e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004312:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004314:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_InitTick+0xe8>)
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800431a:	4b1c      	ldr	r3, [pc, #112]	; (800438c <HAL_InitTick+0xe8>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <HAL_InitTick+0xe8>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_InitTick+0xe8>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800432c:	4817      	ldr	r0, [pc, #92]	; (800438c <HAL_InitTick+0xe8>)
 800432e:	f005 fb8b 	bl	8009a48 <HAL_TIM_Base_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11b      	bne.n	8004378 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004340:	4812      	ldr	r0, [pc, #72]	; (800438c <HAL_InitTick+0xe8>)
 8004342:	f005 fbd9 	bl	8009af8 <HAL_TIM_Base_Start_IT>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800434c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004354:	2036      	movs	r0, #54	; 0x36
 8004356:	f001 f9b5 	bl	80056c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b0f      	cmp	r3, #15
 800435e:	d808      	bhi.n	8004372 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004360:	2200      	movs	r2, #0
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	2036      	movs	r0, #54	; 0x36
 8004366:	f001 f991 	bl	800568c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <HAL_InitTick+0xf0>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e002      	b.n	8004378 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004378:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800437c:	4618      	mov	r0, r3
 800437e:	3738      	adds	r7, #56	; 0x38
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	431bde83 	.word	0x431bde83
 800438c:	20000984 	.word	0x20000984
 8004390:	40001000 	.word	0x40001000
 8004394:	20000040 	.word	0x20000040

08004398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800439c:	e7fe      	b.n	800439c <NMI_Handler+0x4>

0800439e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043a2:	e7fe      	b.n	80043a2 <HardFault_Handler+0x4>

080043a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043a8:	e7fe      	b.n	80043a8 <MemManage_Handler+0x4>

080043aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ae:	e7fe      	b.n	80043ae <BusFault_Handler+0x4>

080043b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043b4:	e7fe      	b.n	80043b4 <UsageFault_Handler+0x4>

080043b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <TIM6_DAC_IRQHandler+0x20>)
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80043d2:	4804      	ldr	r0, [pc, #16]	; (80043e4 <TIM6_DAC_IRQHandler+0x20>)
 80043d4:	f001 f9a6 	bl	8005724 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80043d8:	4803      	ldr	r0, [pc, #12]	; (80043e8 <TIM6_DAC_IRQHandler+0x24>)
 80043da:	f005 fc05 	bl	8009be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000015c 	.word	0x2000015c
 80043e8:	20000984 	.word	0x20000984

080043ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043f0:	4802      	ldr	r0, [pc, #8]	; (80043fc <LTDC_IRQHandler+0x10>)
 80043f2:	f003 f997 	bl	8007724 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000055c 	.word	0x2000055c

08004400 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004404:	4802      	ldr	r0, [pc, #8]	; (8004410 <DMA2D_IRQHandler+0x10>)
 8004406:	f001 fd67 	bl	8005ed8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000170 	.word	0x20000170

08004414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <_sbrk+0x5c>)
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <_sbrk+0x60>)
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004428:	4b13      	ldr	r3, [pc, #76]	; (8004478 <_sbrk+0x64>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <_sbrk+0x64>)
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <_sbrk+0x68>)
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <_sbrk+0x64>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d207      	bcs.n	8004454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004444:	f008 f966 	bl	800c714 <__errno>
 8004448:	4603      	mov	r3, r0
 800444a:	220c      	movs	r2, #12
 800444c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	e009      	b.n	8004468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <_sbrk+0x64>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <_sbrk+0x64>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <_sbrk+0x64>)
 8004464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20050000 	.word	0x20050000
 8004474:	00000400 	.word	0x00000400
 8004478:	200009d0 	.word	0x200009d0
 800447c:	20004a48 	.word	0x20004a48

08004480 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <SystemInit+0x20>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <SystemInit+0x20>)
 800448c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044aa:	f107 0310 	add.w	r3, r7, #16
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <MX_TIM1_Init+0xa4>)
 80044c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044ee:	4815      	ldr	r0, [pc, #84]	; (8004544 <MX_TIM1_Init+0xa0>)
 80044f0:	f005 faaa 	bl	8009a48 <HAL_TIM_Base_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80044fa:	f7fd ff69 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	4619      	mov	r1, r3
 800450a:	480e      	ldr	r0, [pc, #56]	; (8004544 <MX_TIM1_Init+0xa0>)
 800450c:	f005 fc8c 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004516:	f7fd ff5b 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4806      	ldr	r0, [pc, #24]	; (8004544 <MX_TIM1_Init+0xa0>)
 800452c:	f005 fea8 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004536:	f7fd ff4b 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200009d4 	.word	0x200009d4
 8004548:	40010000 	.word	0x40010000

0800454c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004552:	f107 0310 	add.w	r3, r7, #16
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <MX_TIM2_Init+0x98>)
 800456c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004572:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <MX_TIM2_Init+0x98>)
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <MX_TIM2_Init+0x98>)
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <MX_TIM2_Init+0x98>)
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004586:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <MX_TIM2_Init+0x98>)
 8004588:	2200      	movs	r2, #0
 800458a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <MX_TIM2_Init+0x98>)
 800458e:	2200      	movs	r2, #0
 8004590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004592:	4814      	ldr	r0, [pc, #80]	; (80045e4 <MX_TIM2_Init+0x98>)
 8004594:	f005 fa58 	bl	8009a48 <HAL_TIM_Base_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800459e:	f7fd ff17 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	4619      	mov	r1, r3
 80045ae:	480d      	ldr	r0, [pc, #52]	; (80045e4 <MX_TIM2_Init+0x98>)
 80045b0:	f005 fc3a 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80045ba:	f7fd ff09 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4806      	ldr	r0, [pc, #24]	; (80045e4 <MX_TIM2_Init+0x98>)
 80045cc:	f005 fe58 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80045d6:	f7fd fefb 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80045da:	bf00      	nop
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000a20 	.word	0x20000a20

080045e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ee:	f107 0310 	add.w	r3, r7, #16
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <MX_TIM3_Init+0x94>)
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <MX_TIM3_Init+0x98>)
 800460a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <MX_TIM3_Init+0x94>)
 800460e:	2200      	movs	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <MX_TIM3_Init+0x94>)
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <MX_TIM3_Init+0x94>)
 800461a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800461e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <MX_TIM3_Init+0x94>)
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <MX_TIM3_Init+0x94>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800462c:	4813      	ldr	r0, [pc, #76]	; (800467c <MX_TIM3_Init+0x94>)
 800462e:	f005 fa0b 	bl	8009a48 <HAL_TIM_Base_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004638:	f7fd feca 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800463c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004642:	f107 0310 	add.w	r3, r7, #16
 8004646:	4619      	mov	r1, r3
 8004648:	480c      	ldr	r0, [pc, #48]	; (800467c <MX_TIM3_Init+0x94>)
 800464a:	f005 fbed 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004654:	f7fd febc 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004658:	2300      	movs	r3, #0
 800465a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4805      	ldr	r0, [pc, #20]	; (800467c <MX_TIM3_Init+0x94>)
 8004666:	f005 fe0b 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004670:	f7fd feae 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004674:	bf00      	nop
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000a6c 	.word	0x20000a6c
 8004680:	40000400 	.word	0x40000400

08004684 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800468a:	f107 0310 	add.w	r3, r7, #16
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004698:	1d3b      	adds	r3, r7, #4
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80046a2:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <MX_TIM5_Init+0x94>)
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <MX_TIM5_Init+0x98>)
 80046a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <MX_TIM5_Init+0x94>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <MX_TIM5_Init+0x94>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <MX_TIM5_Init+0x94>)
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <MX_TIM5_Init+0x94>)
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <MX_TIM5_Init+0x94>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80046c8:	4813      	ldr	r0, [pc, #76]	; (8004718 <MX_TIM5_Init+0x94>)
 80046ca:	f005 f9bd 	bl	8009a48 <HAL_TIM_Base_Init>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80046d4:	f7fd fe7c 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80046de:	f107 0310 	add.w	r3, r7, #16
 80046e2:	4619      	mov	r1, r3
 80046e4:	480c      	ldr	r0, [pc, #48]	; (8004718 <MX_TIM5_Init+0x94>)
 80046e6:	f005 fb9f 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80046f0:	f7fd fe6e 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f4:	2300      	movs	r3, #0
 80046f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	4805      	ldr	r0, [pc, #20]	; (8004718 <MX_TIM5_Init+0x94>)
 8004702:	f005 fdbd 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800470c:	f7fd fe60 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004710:	bf00      	nop
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000ab8 	.word	0x20000ab8
 800471c:	40000c00 	.word	0x40000c00

08004720 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004726:	f107 0310 	add.w	r3, r7, #16
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	609a      	str	r2, [r3, #8]
 8004732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <MX_TIM8_Init+0xa0>)
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <MX_TIM8_Init+0xa4>)
 8004742:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <MX_TIM8_Init+0xa0>)
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <MX_TIM8_Init+0xa0>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <MX_TIM8_Init+0xa0>)
 8004752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004756:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <MX_TIM8_Init+0xa0>)
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800475e:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <MX_TIM8_Init+0xa0>)
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <MX_TIM8_Init+0xa0>)
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800476a:	4815      	ldr	r0, [pc, #84]	; (80047c0 <MX_TIM8_Init+0xa0>)
 800476c:	f005 f96c 	bl	8009a48 <HAL_TIM_Base_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8004776:	f7fd fe2b 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800477a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004780:	f107 0310 	add.w	r3, r7, #16
 8004784:	4619      	mov	r1, r3
 8004786:	480e      	ldr	r0, [pc, #56]	; (80047c0 <MX_TIM8_Init+0xa0>)
 8004788:	f005 fb4e 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004792:	f7fd fe1d 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4806      	ldr	r0, [pc, #24]	; (80047c0 <MX_TIM8_Init+0xa0>)
 80047a8:	f005 fd6a 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80047b2:	f7fd fe0d 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80047b6:	bf00      	nop
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000b04 	.word	0x20000b04
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08e      	sub	sp, #56	; 0x38
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3b      	ldr	r2, [pc, #236]	; (80048d4 <HAL_TIM_Base_MspInit+0x10c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	4a3a      	ldr	r2, [pc, #232]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6453      	str	r3, [r2, #68]	; 0x44
 80047f6:	4b38      	ldr	r3, [pc, #224]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004802:	e062      	b.n	80048ca <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d10c      	bne.n	8004828 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	4a31      	ldr	r2, [pc, #196]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	69fb      	ldr	r3, [r7, #28]
}
 8004826:	e050      	b.n	80048ca <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_TIM_Base_MspInit+0x114>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	69bb      	ldr	r3, [r7, #24]
}
 800484a:	e03e      	b.n	80048ca <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <HAL_TIM_Base_MspInit+0x118>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d10c      	bne.n	8004870 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 800485c:	f043 0308 	orr.w	r3, r3, #8
 8004860:	6413      	str	r3, [r2, #64]	; 0x40
 8004862:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697b      	ldr	r3, [r7, #20]
}
 800486e:	e02c      	b.n	80048ca <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <HAL_TIM_Base_MspInit+0x11c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d127      	bne.n	80048ca <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6313      	str	r3, [r2, #48]	; 0x30
 800489e:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <HAL_TIM_Base_MspInit+0x110>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048aa:	2304      	movs	r3, #4
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	2302      	movs	r3, #2
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b6:	2300      	movs	r3, #0
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80048ba:	2303      	movs	r3, #3
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c2:	4619      	mov	r1, r3
 80048c4:	4808      	ldr	r0, [pc, #32]	; (80048e8 <HAL_TIM_Base_MspInit+0x120>)
 80048c6:	f001 fd45 	bl	8006354 <HAL_GPIO_Init>
}
 80048ca:	bf00      	nop
 80048cc:	3738      	adds	r7, #56	; 0x38
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40010400 	.word	0x40010400
 80048e8:	40022000 	.word	0x40022000

080048ec <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <MX_UART7_Init+0x58>)
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <MX_UART7_Init+0x5c>)
 80048f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <MX_UART7_Init+0x58>)
 80048f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048fc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <MX_UART7_Init+0x58>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <MX_UART7_Init+0x58>)
 8004906:	2200      	movs	r2, #0
 8004908:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <MX_UART7_Init+0x58>)
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <MX_UART7_Init+0x58>)
 8004912:	220c      	movs	r2, #12
 8004914:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <MX_UART7_Init+0x58>)
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <MX_UART7_Init+0x58>)
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <MX_UART7_Init+0x58>)
 8004924:	2200      	movs	r2, #0
 8004926:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <MX_UART7_Init+0x58>)
 800492a:	2200      	movs	r2, #0
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800492e:	4805      	ldr	r0, [pc, #20]	; (8004944 <MX_UART7_Init+0x58>)
 8004930:	f005 fd52 	bl	800a3d8 <HAL_UART_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800493a:	f7fd fd49 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000b50 	.word	0x20000b50
 8004948:	40007800 	.word	0x40007800

0800494c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004950:	4b16      	ldr	r3, [pc, #88]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004952:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <MX_USART1_UART_Init+0x64>)
 8004954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800495c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004966:	2200      	movs	r2, #0
 8004968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <MX_USART1_UART_Init+0x60>)
 800496c:	2200      	movs	r2, #0
 800496e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004972:	220c      	movs	r2, #12
 8004974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004978:	2200      	movs	r2, #0
 800497a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <MX_USART1_UART_Init+0x60>)
 800497e:	2200      	movs	r2, #0
 8004980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004984:	2200      	movs	r2, #0
 8004986:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <MX_USART1_UART_Init+0x60>)
 800498a:	2210      	movs	r2, #16
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004996:	4805      	ldr	r0, [pc, #20]	; (80049ac <MX_USART1_UART_Init+0x60>)
 8004998:	f005 fd1e 	bl	800a3d8 <HAL_UART_Init>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80049a2:	f7fd fd15 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000bd8 	.word	0x20000bd8
 80049b0:	40011000 	.word	0x40011000

080049b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80049b8:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <MX_USART6_UART_Init+0x5c>)
 80049bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049da:	220c      	movs	r2, #12
 80049dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049de:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80049f6:	4805      	ldr	r0, [pc, #20]	; (8004a0c <MX_USART6_UART_Init+0x58>)
 80049f8:	f005 fcee 	bl	800a3d8 <HAL_UART_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004a02:	f7fd fce5 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000c60 	.word	0x20000c60
 8004a10:	40011400 	.word	0x40011400

08004a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b0b0      	sub	sp, #192	; 0xc0
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a30:	2284      	movs	r2, #132	; 0x84
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f007 fea7 	bl	800c788 <memset>
  if(uartHandle->Instance==UART7)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a75      	ldr	r2, [pc, #468]	; (8004c14 <HAL_UART_MspInit+0x200>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d13d      	bne.n	8004ac0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a54:	4618      	mov	r0, r3
 8004a56:	f003 fe29 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004a60:	f7fd fcb6 	bl	80023d0 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004a64:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	4a6b      	ldr	r2, [pc, #428]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a70:	4b69      	ldr	r3, [pc, #420]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a7c:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	4a65      	ldr	r2, [pc, #404]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004a82:	f043 0320 	orr.w	r3, r3, #32
 8004a86:	6313      	str	r3, [r2, #48]	; 0x30
 8004a88:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004a94:	23c0      	movs	r3, #192	; 0xc0
 8004a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004aac:	2308      	movs	r3, #8
 8004aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ab2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4858      	ldr	r0, [pc, #352]	; (8004c1c <HAL_UART_MspInit+0x208>)
 8004aba:	f001 fc4b 	bl	8006354 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004abe:	e0a4      	b.n	8004c0a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a56      	ldr	r2, [pc, #344]	; (8004c20 <HAL_UART_MspInit+0x20c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d15d      	bne.n	8004b86 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004aca:	2340      	movs	r3, #64	; 0x40
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 fde8 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004ae2:	f7fd fc75 	bl	80023d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ae6:	4b4c      	ldr	r3, [pc, #304]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	4a4b      	ldr	r2, [pc, #300]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004aec:	f043 0310 	orr.w	r3, r3, #16
 8004af0:	6453      	str	r3, [r2, #68]	; 0x44
 8004af2:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afe:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	4a45      	ldr	r2, [pc, #276]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0a:	4b43      	ldr	r3, [pc, #268]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b34:	2302      	movs	r3, #2
 8004b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b46:	2307      	movs	r3, #7
 8004b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004b4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b50:	4619      	mov	r1, r3
 8004b52:	4834      	ldr	r0, [pc, #208]	; (8004c24 <HAL_UART_MspInit+0x210>)
 8004b54:	f001 fbfe 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b60:	2302      	movs	r3, #2
 8004b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b72:	2307      	movs	r3, #7
 8004b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004b78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	482a      	ldr	r0, [pc, #168]	; (8004c28 <HAL_UART_MspInit+0x214>)
 8004b80:	f001 fbe8 	bl	8006354 <HAL_GPIO_Init>
}
 8004b84:	e041      	b.n	8004c0a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <HAL_UART_MspInit+0x218>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d13c      	bne.n	8004c0a <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f003 fd83 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004bac:	f7fd fc10 	bl	80023d0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	6453      	str	r3, [r2, #68]	; 0x44
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004bce:	f043 0304 	orr.w	r3, r3, #4
 8004bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd4:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004be0:	23c0      	movs	r3, #192	; 0xc0
 8004be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be6:	2302      	movs	r3, #2
 8004be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c02:	4619      	mov	r1, r3
 8004c04:	480a      	ldr	r0, [pc, #40]	; (8004c30 <HAL_UART_MspInit+0x21c>)
 8004c06:	f001 fba5 	bl	8006354 <HAL_GPIO_Init>
}
 8004c0a:	bf00      	nop
 8004c0c:	37c0      	adds	r7, #192	; 0xc0
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40007800 	.word	0x40007800
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40021400 	.word	0x40021400
 8004c20:	40011000 	.word	0x40011000
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020000 	.word	0x40020000
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	40020800 	.word	0x40020800

08004c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c38:	480d      	ldr	r0, [pc, #52]	; (8004c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c3a:	490e      	ldr	r1, [pc, #56]	; (8004c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c40:	e002      	b.n	8004c48 <LoopCopyDataInit>

08004c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c46:	3304      	adds	r3, #4

08004c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c4c:	d3f9      	bcc.n	8004c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c50:	4c0b      	ldr	r4, [pc, #44]	; (8004c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c54:	e001      	b.n	8004c5a <LoopFillZerobss>

08004c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c58:	3204      	adds	r2, #4

08004c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c5c:	d3fb      	bcc.n	8004c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c5e:	f7ff fc0f 	bl	8004480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c62:	f007 fd5d 	bl	800c720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c66:	f7fd f8e3 	bl	8001e30 <main>
  bx  lr    
 8004c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c74:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004c78:	0804ef20 	.word	0x0804ef20
  ldr r2, =_sbss
 8004c7c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004c80:	20004a48 	.word	0x20004a48

08004c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c84:	e7fe      	b.n	8004c84 <ADC_IRQHandler>

08004c86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	f000 fcf3 	bl	8005676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c90:	200f      	movs	r0, #15
 8004c92:	f7ff fb07 	bl	80042a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c96:	f7ff fadd 	bl	8004254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_IncTick+0x20>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_IncTick+0x24>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <HAL_IncTick+0x24>)
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000044 	.word	0x20000044
 8004cc4:	20000ce8 	.word	0x20000ce8

08004cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return uwTick;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <HAL_GetTick+0x14>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000ce8 	.word	0x20000ce8

08004ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ce8:	f7ff ffee 	bl	8004cc8 <HAL_GetTick>
 8004cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d005      	beq.n	8004d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_Delay+0x44>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d06:	bf00      	nop
 8004d08:	f7ff ffde 	bl	8004cc8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d8f7      	bhi.n	8004d08 <HAL_Delay+0x28>
  {
  }
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000044 	.word	0x20000044

08004d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e031      	b.n	8004da2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fb fcd8 	bl	80006fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_ADC_Init+0x84>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	f043 0202 	orr.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fad6 	bl	8005328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	f043 0201 	orr.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
 8004d92:	e001      	b.n	8004d98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	ffffeefd 	.word	0xffffeefd

08004db0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_Start+0x1a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0ad      	b.n	8004f26 <HAL_ADC_Start+0x176>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d018      	beq.n	8004e12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_ADC_Start+0x184>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_ADC_Start+0x188>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0c9a      	lsrs	r2, r3, #18
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004e04:	e002      	b.n	8004e0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f9      	bne.n	8004e06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d175      	bne.n	8004f0c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e24:	4b45      	ldr	r3, [pc, #276]	; (8004f3c <HAL_ADC_Start+0x18c>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d106      	bne.n	8004e6a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	f023 0206 	bic.w	r2, r3, #6
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	645a      	str	r2, [r3, #68]	; 0x44
 8004e68:	e002      	b.n	8004e70 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004e82:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <HAL_ADC_Start+0x190>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d143      	bne.n	8004f24 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	e03a      	b.n	8004f24 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <HAL_ADC_Start+0x194>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_ADC_Start+0x126>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ed4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_ADC_Start+0x190>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d120      	bne.n	8004f24 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_ADC_Start+0x198>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d11b      	bne.n	8004f24 <HAL_ADC_Start+0x174>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d114      	bne.n	8004f24 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f08:	609a      	str	r2, [r3, #8]
 8004f0a:	e00b      	b.n	8004f24 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f043 0210 	orr.w	r2, r3, #16
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	f043 0201 	orr.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000003c 	.word	0x2000003c
 8004f38:	431bde83 	.word	0x431bde83
 8004f3c:	fffff8fe 	.word	0xfffff8fe
 8004f40:	40012300 	.word	0x40012300
 8004f44:	40012000 	.word	0x40012000
 8004f48:	40012200 	.word	0x40012200

08004f4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f68:	d113      	bne.n	8004f92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f78:	d10b      	bne.n	8004f92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e063      	b.n	800505a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f92:	f7ff fe99 	bl	8004cc8 <HAL_GetTick>
 8004f96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f98:	e021      	b.n	8004fde <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d01d      	beq.n	8004fde <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_ADC_PollForConversion+0x6c>
 8004fa8:	f7ff fe8e 	bl	8004cc8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d212      	bcs.n	8004fde <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d00b      	beq.n	8004fde <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e03d      	b.n	800505a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d1d6      	bne.n	8004f9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0212 	mvn.w	r2, #18
 8004ff4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d123      	bne.n	8005058 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11f      	bne.n	8005058 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005022:	2b00      	cmp	r3, #0
 8005024:	d006      	beq.n	8005034 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005030:	2b00      	cmp	r3, #0
 8005032:	d111      	bne.n	8005058 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x1c>
 8005094:	2302      	movs	r3, #2
 8005096:	e136      	b.n	8005306 <HAL_ADC_ConfigChannel+0x28a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b09      	cmp	r3, #9
 80050a6:	d93a      	bls.n	800511e <HAL_ADC_ConfigChannel+0xa2>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b0:	d035      	beq.n	800511e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	3b1e      	subs	r3, #30
 80050c8:	2207      	movs	r2, #7
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43da      	mvns	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	400a      	ands	r2, r1
 80050d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a8d      	ldr	r2, [pc, #564]	; (8005314 <HAL_ADC_ConfigChannel+0x298>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10a      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68d9      	ldr	r1, [r3, #12]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	061a      	lsls	r2, r3, #24
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050f6:	e035      	b.n	8005164 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	4618      	mov	r0, r3
 800510a:	4603      	mov	r3, r0
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4403      	add	r3, r0
 8005110:	3b1e      	subs	r3, #30
 8005112:	409a      	lsls	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800511c:	e022      	b.n	8005164 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6919      	ldr	r1, [r3, #16]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	2207      	movs	r2, #7
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43da      	mvns	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	400a      	ands	r2, r1
 8005140:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6919      	ldr	r1, [r3, #16]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	4618      	mov	r0, r3
 8005154:	4603      	mov	r3, r0
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4403      	add	r3, r0
 800515a:	409a      	lsls	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d824      	bhi.n	80051b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	3b05      	subs	r3, #5
 800517e:	221f      	movs	r2, #31
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43da      	mvns	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	400a      	ands	r2, r1
 800518c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	4618      	mov	r0, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	3b05      	subs	r3, #5
 80051a8:	fa00 f203 	lsl.w	r2, r0, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	635a      	str	r2, [r3, #52]	; 0x34
 80051b4:	e04c      	b.n	8005250 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d824      	bhi.n	8005208 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	3b23      	subs	r3, #35	; 0x23
 80051d0:	221f      	movs	r2, #31
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	400a      	ands	r2, r1
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4618      	mov	r0, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	3b23      	subs	r3, #35	; 0x23
 80051fa:	fa00 f203 	lsl.w	r2, r0, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
 8005206:	e023      	b.n	8005250 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	3b41      	subs	r3, #65	; 0x41
 800521a:	221f      	movs	r2, #31
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43da      	mvns	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	400a      	ands	r2, r1
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	4618      	mov	r0, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	3b41      	subs	r3, #65	; 0x41
 8005244:	fa00 f203 	lsl.w	r2, r0, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a30      	ldr	r2, [pc, #192]	; (8005318 <HAL_ADC_ConfigChannel+0x29c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10a      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x1f4>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005262:	d105      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005264:	4b2d      	ldr	r3, [pc, #180]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a2c      	ldr	r2, [pc, #176]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 800526a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800526e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <HAL_ADC_ConfigChannel+0x29c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10f      	bne.n	800529a <HAL_ADC_ConfigChannel+0x21e>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b12      	cmp	r3, #18
 8005280:	d10b      	bne.n	800529a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4a25      	ldr	r2, [pc, #148]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 8005288:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800528c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800528e:	4b23      	ldr	r3, [pc, #140]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 8005294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005298:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_ADC_ConfigChannel+0x29c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d12b      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x280>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1a      	ldr	r2, [pc, #104]	; (8005314 <HAL_ADC_ConfigChannel+0x298>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x23a>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b11      	cmp	r3, #17
 80052b4:	d122      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 80052bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80052c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_ADC_ConfigChannel+0x2a0>)
 80052c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <HAL_ADC_ConfigChannel+0x298>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d111      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <HAL_ADC_ConfigChannel+0x2a4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a11      	ldr	r2, [pc, #68]	; (8005324 <HAL_ADC_ConfigChannel+0x2a8>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	0c9a      	lsrs	r2, r3, #18
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052ee:	e002      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f9      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	10000012 	.word	0x10000012
 8005318:	40012000 	.word	0x40012000
 800531c:	40012300 	.word	0x40012300
 8005320:	2000003c 	.word	0x2000003c
 8005324:	431bde83 	.word	0x431bde83

08005328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005330:	4b78      	ldr	r3, [pc, #480]	; (8005514 <ADC_Init+0x1ec>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a77      	ldr	r2, [pc, #476]	; (8005514 <ADC_Init+0x1ec>)
 8005336:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800533a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800533c:	4b75      	ldr	r3, [pc, #468]	; (8005514 <ADC_Init+0x1ec>)
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4973      	ldr	r1, [pc, #460]	; (8005514 <ADC_Init+0x1ec>)
 8005346:	4313      	orrs	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800537c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6899      	ldr	r1, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	4a58      	ldr	r2, [pc, #352]	; (8005518 <ADC_Init+0x1f0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	e00f      	b.n	8005422 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005420:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0202 	bic.w	r2, r2, #2
 8005430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6899      	ldr	r1, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	005a      	lsls	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800546e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	3b01      	subs	r3, #1
 800547c:	035a      	lsls	r2, r3, #13
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	e007      	b.n	8005498 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005496:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	051a      	lsls	r2, r3, #20
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6899      	ldr	r1, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054da:	025a      	lsls	r2, r3, #9
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	029a      	lsls	r2, r3, #10
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40012300 	.word	0x40012300
 8005518:	0f000001 	.word	0x0f000001

0800551c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <__NVIC_SetPriorityGrouping+0x40>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005538:	4013      	ands	r3, r2
 800553a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <__NVIC_SetPriorityGrouping+0x44>)
 8005546:	4313      	orrs	r3, r2
 8005548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554a:	4a04      	ldr	r2, [pc, #16]	; (800555c <__NVIC_SetPriorityGrouping+0x40>)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	60d3      	str	r3, [r2, #12]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00
 8005560:	05fa0000 	.word	0x05fa0000

08005564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <__NVIC_GetPriorityGrouping+0x18>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 0307 	and.w	r3, r3, #7
}
 8005572:	4618      	mov	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	2b00      	cmp	r3, #0
 8005590:	db0b      	blt.n	80055aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	f003 021f 	and.w	r2, r3, #31
 8005598:	4907      	ldr	r1, [pc, #28]	; (80055b8 <__NVIC_EnableIRQ+0x38>)
 800559a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	2001      	movs	r0, #1
 80055a2:	fa00 f202 	lsl.w	r2, r0, r2
 80055a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000e100 	.word	0xe000e100

080055bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	6039      	str	r1, [r7, #0]
 80055c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db0a      	blt.n	80055e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	490c      	ldr	r1, [pc, #48]	; (8005608 <__NVIC_SetPriority+0x4c>)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	440b      	add	r3, r1
 80055e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e4:	e00a      	b.n	80055fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4908      	ldr	r1, [pc, #32]	; (800560c <__NVIC_SetPriority+0x50>)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	3b04      	subs	r3, #4
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	440b      	add	r3, r1
 80055fa:	761a      	strb	r2, [r3, #24]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000e100 	.word	0xe000e100
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f1c3 0307 	rsb	r3, r3, #7
 800562a:	2b04      	cmp	r3, #4
 800562c:	bf28      	it	cs
 800562e:	2304      	movcs	r3, #4
 8005630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3304      	adds	r3, #4
 8005636:	2b06      	cmp	r3, #6
 8005638:	d902      	bls.n	8005640 <NVIC_EncodePriority+0x30>
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3b03      	subs	r3, #3
 800563e:	e000      	b.n	8005642 <NVIC_EncodePriority+0x32>
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43da      	mvns	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	401a      	ands	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005658:	f04f 31ff 	mov.w	r1, #4294967295
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	43d9      	mvns	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005668:	4313      	orrs	r3, r2
         );
}
 800566a:	4618      	mov	r0, r3
 800566c:	3724      	adds	r7, #36	; 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff4c 	bl	800551c <__NVIC_SetPriorityGrouping>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800569e:	f7ff ff61 	bl	8005564 <__NVIC_GetPriorityGrouping>
 80056a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	6978      	ldr	r0, [r7, #20]
 80056aa:	f7ff ffb1 	bl	8005610 <NVIC_EncodePriority>
 80056ae:	4602      	mov	r2, r0
 80056b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff ff80 	bl	80055bc <__NVIC_SetPriority>
}
 80056bc:	bf00      	nop
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ff54 	bl	8005580 <__NVIC_EnableIRQ>
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e014      	b.n	800571c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	791b      	ldrb	r3, [r3, #4]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fb f892 	bl	800082c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	d120      	bne.n	800577e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574a:	d118      	bne.n	800577e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2204      	movs	r2, #4
 8005750:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005776:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f82d 	bl	80057d8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578c:	d120      	bne.n	80057d0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579c:	d118      	bne.n	80057d0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f043 0202 	orr.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80057b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80057c8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f85d 	bl	800588a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	795b      	ldrb	r3, [r3, #5]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_DAC_ConfigChannel+0x18>
 8005800:	2302      	movs	r3, #2
 8005802:	e03c      	b.n	800587e <HAL_DAC_ConfigChannel+0x92>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2202      	movs	r2, #2
 800580e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4013      	ands	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	22c0      	movs	r2, #192	; 0xc0
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43da      	mvns	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	400a      	ands	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058ac:	f7ff fa0c 	bl	8004cc8 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e099      	b.n	80059f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058dc:	e00f      	b.n	80058fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058de:	f7ff f9f3 	bl	8004cc8 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d908      	bls.n	80058fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e078      	b.n	80059f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e8      	bne.n	80058de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4b38      	ldr	r3, [pc, #224]	; (80059f8 <HAL_DMA_Init+0x158>)
 8005918:	4013      	ands	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b04      	cmp	r3, #4
 8005956:	d107      	bne.n	8005968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	4313      	orrs	r3, r2
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b04      	cmp	r3, #4
 8005990:	d117      	bne.n	80059c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f8bd 	bl	8005b24 <DMA_CheckFifoParam>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059be:	2301      	movs	r3, #1
 80059c0:	e016      	b.n	80059f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f874 	bl	8005ab8 <DMA_CalcBaseAndBitshift>
 80059d0:	4603      	mov	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	223f      	movs	r2, #63	; 0x3f
 80059da:	409a      	lsls	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	f010803f 	.word	0xf010803f

080059fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e050      	b.n	8005ab0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d101      	bne.n	8005a1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e048      	b.n	8005ab0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2221      	movs	r2, #33	; 0x21
 8005a5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f82a 	bl	8005ab8 <DMA_CalcBaseAndBitshift>
 8005a64:	4603      	mov	r3, r0
 8005a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6c:	223f      	movs	r2, #63	; 0x3f
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	3b10      	subs	r3, #16
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <DMA_CalcBaseAndBitshift+0x60>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ad2:	4a12      	ldr	r2, [pc, #72]	; (8005b1c <DMA_CalcBaseAndBitshift+0x64>)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d908      	bls.n	8005af8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <DMA_CalcBaseAndBitshift+0x68>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	1d1a      	adds	r2, r3, #4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	659a      	str	r2, [r3, #88]	; 0x58
 8005af6:	e006      	b.n	8005b06 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <DMA_CalcBaseAndBitshift+0x68>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	aaaaaaab 	.word	0xaaaaaaab
 8005b1c:	0804ee74 	.word	0x0804ee74
 8005b20:	fffffc00 	.word	0xfffffc00

08005b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d11f      	bne.n	8005b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d856      	bhi.n	8005bf2 <DMA_CheckFifoParam+0xce>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <DMA_CheckFifoParam+0x28>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b6f 	.word	0x08005b6f
 8005b54:	08005b5d 	.word	0x08005b5d
 8005b58:	08005bf3 	.word	0x08005bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d046      	beq.n	8005bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b6c:	e043      	b.n	8005bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b76:	d140      	bne.n	8005bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b7c:	e03d      	b.n	8005bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	d121      	bne.n	8005bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d837      	bhi.n	8005bfe <DMA_CheckFifoParam+0xda>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <DMA_CheckFifoParam+0x70>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bab 	.word	0x08005bab
 8005b9c:	08005ba5 	.word	0x08005ba5
 8005ba0:	08005bbd 	.word	0x08005bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba8:	e030      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d025      	beq.n	8005c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bba:	e022      	b.n	8005c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bc4:	d11f      	bne.n	8005c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bca:	e01c      	b.n	8005c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d903      	bls.n	8005bda <DMA_CheckFifoParam+0xb6>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d003      	beq.n	8005be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bd8:	e018      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bde:	e015      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e00b      	b.n	8005c0a <DMA_CheckFifoParam+0xe6>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e00a      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e008      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e006      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      break;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <DMA_CheckFifoParam+0xe8>
      break;
 8005c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop

08005c1c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e039      	b.n	8005ca2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fa fe6c 	bl	8000920 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	f023 0107 	bic.w	r1, r3, #7
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <HAL_DMA2D_Init+0x90>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68d1      	ldr	r1, [r2, #12]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	ffffc000 	.word	0xffffc000

08005cb0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA2D_Start+0x1c>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e018      	b.n	8005cfe <HAL_DMA2D_Start+0x4e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa98 	bl	800621c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d056      	beq.n	8005dd0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d22:	f7fe ffd1 	bl	8004cc8 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d28:	e04b      	b.n	8005dc2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d023      	beq.n	8005d84 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	f043 0202 	orr.w	r2, r3, #2
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	f043 0201 	orr.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2221      	movs	r2, #33	; 0x21
 8005d6e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2204      	movs	r2, #4
 8005d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0a5      	b.n	8005ed0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d8c:	f7fe ff9c 	bl	8004cc8 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d302      	bcc.n	8005da2 <HAL_DMA2D_PollForTransfer+0x9c>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10f      	bne.n	8005dc2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2203      	movs	r2, #3
 8005db2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e086      	b.n	8005ed0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ac      	beq.n	8005d2a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d061      	beq.n	8005eb6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005df2:	f7fe ff69 	bl	8004cc8 <HAL_GetTick>
 8005df6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005df8:	e056      	b.n	8005ea8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02e      	beq.n	8005e6a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	f043 0202 	orr.w	r2, r3, #2
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	f043 0201 	orr.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2229      	movs	r2, #41	; 0x29
 8005e54:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e032      	b.n	8005ed0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d01a      	beq.n	8005ea8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fe ff29 	bl	8004cc8 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <HAL_DMA2D_PollForTransfer+0x182>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	f043 0220 	orr.w	r2, r3, #32
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e013      	b.n	8005ed0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0a1      	beq.n	8005dfa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2212      	movs	r2, #18
 8005ebc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d026      	beq.n	8005f48 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d021      	beq.n	8005f48 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f12:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f18:	f043 0201 	orr.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d026      	beq.n	8005fa0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d021      	beq.n	8005fa0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f6a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2220      	movs	r2, #32
 8005f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	f043 0202 	orr.w	r2, r3, #2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2204      	movs	r2, #4
 8005f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d026      	beq.n	8005ff8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d021      	beq.n	8005ff8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	f043 0204 	orr.w	r2, r3, #4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d013      	beq.n	800602a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2204      	movs	r2, #4
 8006022:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f853 	bl	80060d0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d024      	beq.n	800607e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01f      	beq.n	800607e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800604c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2202      	movs	r2, #2
 8006054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01f      	beq.n	80060c8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01a      	beq.n	80060c8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f80e 	bl	80060e4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_DMA2D_ConfigLayer+0x20>
 8006114:	2302      	movs	r3, #2
 8006116:	e079      	b.n	800620c <HAL_DMA2D_ConfigLayer+0x114>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	3318      	adds	r3, #24
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006142:	4b35      	ldr	r3, [pc, #212]	; (8006218 <HAL_DMA2D_ConfigLayer+0x120>)
 8006144:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b0a      	cmp	r3, #10
 800614c:	d003      	beq.n	8006156 <HAL_DMA2D_ConfigLayer+0x5e>
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b09      	cmp	r3, #9
 8006154:	d107      	bne.n	8006166 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e005      	b.n	8006172 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d120      	bne.n	80061ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	43db      	mvns	r3, r3
 8006182:	ea02 0103 	and.w	r1, r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	430a      	orrs	r2, r1
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b0a      	cmp	r3, #10
 80061a0:	d003      	beq.n	80061aa <HAL_DMA2D_ConfigLayer+0xb2>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d127      	bne.n	80061fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
 80061b8:	e01f      	b.n	80061fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	43db      	mvns	r3, r3
 80061c4:	ea02 0103 	and.w	r1, r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b0a      	cmp	r3, #10
 80061e2:	d003      	beq.n	80061ec <HAL_DMA2D_ConfigLayer+0xf4>
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b09      	cmp	r3, #9
 80061ea:	d106      	bne.n	80061fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80061f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	ff03000f 	.word	0xff03000f

0800621c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800621c:	b480      	push	{r7}
 800621e:	b08b      	sub	sp, #44	; 0x2c
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006230:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	041a      	lsls	r2, r3, #16
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	431a      	orrs	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006254:	d174      	bne.n	8006340 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800625c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006264:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800626c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	431a      	orrs	r2, r3
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	4313      	orrs	r3, r2
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
 800628c:	e053      	b.n	8006336 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d106      	bne.n	80062a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4313      	orrs	r3, r2
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
 80062a2:	e048      	b.n	8006336 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d111      	bne.n	80062d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	0cdb      	lsrs	r3, r3, #19
 80062b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	0a9b      	lsrs	r3, r3, #10
 80062b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	08db      	lsrs	r3, r3, #3
 80062bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	02db      	lsls	r3, r3, #11
 80062c6:	4313      	orrs	r3, r2
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
 80062ce:	e032      	b.n	8006336 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d117      	bne.n	8006308 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	0fdb      	lsrs	r3, r3, #31
 80062dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	0cdb      	lsrs	r3, r3, #19
 80062e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	0adb      	lsrs	r3, r3, #11
 80062e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	08db      	lsrs	r3, r3, #3
 80062ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	431a      	orrs	r2, r3
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	03db      	lsls	r3, r3, #15
 80062fe:	4313      	orrs	r3, r2
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	e016      	b.n	8006336 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	0f1b      	lsrs	r3, r3, #28
 800630c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	0d1b      	lsrs	r3, r3, #20
 8006312:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	0b1b      	lsrs	r3, r3, #12
 8006318:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	011a      	lsls	r2, r3, #4
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	431a      	orrs	r2, r3
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	4313      	orrs	r3, r2
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800633e:	e003      	b.n	8006348 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	60da      	str	r2, [r3, #12]
}
 8006348:	bf00      	nop
 800634a:	372c      	adds	r7, #44	; 0x2c
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	; 0x24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e175      	b.n	8006660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006374:	2201      	movs	r2, #1
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4013      	ands	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	429a      	cmp	r2, r3
 800638e:	f040 8164 	bne.w	800665a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d005      	beq.n	80063aa <HAL_GPIO_Init+0x56>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d130      	bne.n	800640c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	2203      	movs	r2, #3
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063e0:	2201      	movs	r2, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4013      	ands	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 0201 	and.w	r2, r3, #1
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d017      	beq.n	8006448 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	2203      	movs	r2, #3
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4313      	orrs	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d123      	bne.n	800649c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	08da      	lsrs	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3208      	adds	r2, #8
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	220f      	movs	r2, #15
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	08da      	lsrs	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3208      	adds	r2, #8
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2203      	movs	r2, #3
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0203 	and.w	r2, r3, #3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80be 	beq.w	800665a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064de:	4b66      	ldr	r3, [pc, #408]	; (8006678 <HAL_GPIO_Init+0x324>)
 80064e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e2:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_GPIO_Init+0x324>)
 80064e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064e8:	6453      	str	r3, [r2, #68]	; 0x44
 80064ea:	4b63      	ldr	r3, [pc, #396]	; (8006678 <HAL_GPIO_Init+0x324>)
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80064f6:	4a61      	ldr	r2, [pc, #388]	; (800667c <HAL_GPIO_Init+0x328>)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	3302      	adds	r3, #2
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	220f      	movs	r2, #15
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a58      	ldr	r2, [pc, #352]	; (8006680 <HAL_GPIO_Init+0x32c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d037      	beq.n	8006592 <HAL_GPIO_Init+0x23e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a57      	ldr	r2, [pc, #348]	; (8006684 <HAL_GPIO_Init+0x330>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d031      	beq.n	800658e <HAL_GPIO_Init+0x23a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a56      	ldr	r2, [pc, #344]	; (8006688 <HAL_GPIO_Init+0x334>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d02b      	beq.n	800658a <HAL_GPIO_Init+0x236>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a55      	ldr	r2, [pc, #340]	; (800668c <HAL_GPIO_Init+0x338>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d025      	beq.n	8006586 <HAL_GPIO_Init+0x232>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a54      	ldr	r2, [pc, #336]	; (8006690 <HAL_GPIO_Init+0x33c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01f      	beq.n	8006582 <HAL_GPIO_Init+0x22e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a53      	ldr	r2, [pc, #332]	; (8006694 <HAL_GPIO_Init+0x340>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d019      	beq.n	800657e <HAL_GPIO_Init+0x22a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a52      	ldr	r2, [pc, #328]	; (8006698 <HAL_GPIO_Init+0x344>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <HAL_GPIO_Init+0x226>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a51      	ldr	r2, [pc, #324]	; (800669c <HAL_GPIO_Init+0x348>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00d      	beq.n	8006576 <HAL_GPIO_Init+0x222>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a50      	ldr	r2, [pc, #320]	; (80066a0 <HAL_GPIO_Init+0x34c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <HAL_GPIO_Init+0x21e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a4f      	ldr	r2, [pc, #316]	; (80066a4 <HAL_GPIO_Init+0x350>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <HAL_GPIO_Init+0x21a>
 800656a:	2309      	movs	r3, #9
 800656c:	e012      	b.n	8006594 <HAL_GPIO_Init+0x240>
 800656e:	230a      	movs	r3, #10
 8006570:	e010      	b.n	8006594 <HAL_GPIO_Init+0x240>
 8006572:	2308      	movs	r3, #8
 8006574:	e00e      	b.n	8006594 <HAL_GPIO_Init+0x240>
 8006576:	2307      	movs	r3, #7
 8006578:	e00c      	b.n	8006594 <HAL_GPIO_Init+0x240>
 800657a:	2306      	movs	r3, #6
 800657c:	e00a      	b.n	8006594 <HAL_GPIO_Init+0x240>
 800657e:	2305      	movs	r3, #5
 8006580:	e008      	b.n	8006594 <HAL_GPIO_Init+0x240>
 8006582:	2304      	movs	r3, #4
 8006584:	e006      	b.n	8006594 <HAL_GPIO_Init+0x240>
 8006586:	2303      	movs	r3, #3
 8006588:	e004      	b.n	8006594 <HAL_GPIO_Init+0x240>
 800658a:	2302      	movs	r3, #2
 800658c:	e002      	b.n	8006594 <HAL_GPIO_Init+0x240>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <HAL_GPIO_Init+0x240>
 8006592:	2300      	movs	r3, #0
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	f002 0203 	and.w	r2, r2, #3
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	4093      	lsls	r3, r2
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80065a4:	4935      	ldr	r1, [pc, #212]	; (800667c <HAL_GPIO_Init+0x328>)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	089b      	lsrs	r3, r3, #2
 80065aa:	3302      	adds	r3, #2
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065b2:	4b3d      	ldr	r3, [pc, #244]	; (80066a8 <HAL_GPIO_Init+0x354>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <HAL_GPIO_Init+0x354>)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065dc:	4b32      	ldr	r3, [pc, #200]	; (80066a8 <HAL_GPIO_Init+0x354>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4013      	ands	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006600:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <HAL_GPIO_Init+0x354>)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_GPIO_Init+0x354>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	43db      	mvns	r3, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4013      	ands	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800662a:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <HAL_GPIO_Init+0x354>)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <HAL_GPIO_Init+0x354>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	43db      	mvns	r3, r3
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	4013      	ands	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006654:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <HAL_GPIO_Init+0x354>)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b0f      	cmp	r3, #15
 8006664:	f67f ae86 	bls.w	8006374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	3724      	adds	r7, #36	; 0x24
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40023800 	.word	0x40023800
 800667c:	40013800 	.word	0x40013800
 8006680:	40020000 	.word	0x40020000
 8006684:	40020400 	.word	0x40020400
 8006688:	40020800 	.word	0x40020800
 800668c:	40020c00 	.word	0x40020c00
 8006690:	40021000 	.word	0x40021000
 8006694:	40021400 	.word	0x40021400
 8006698:	40021800 	.word	0x40021800
 800669c:	40021c00 	.word	0x40021c00
 80066a0:	40022000 	.word	0x40022000
 80066a4:	40022400 	.word	0x40022400
 80066a8:	40013c00 	.word	0x40013c00

080066ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80066be:	2300      	movs	r3, #0
 80066c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e0d9      	b.n	800687c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80066c8:	2201      	movs	r2, #1
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4013      	ands	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	f040 80c9 	bne.w	8006876 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80066e4:	4a6b      	ldr	r2, [pc, #428]	; (8006894 <HAL_GPIO_DeInit+0x1e8>)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	3302      	adds	r3, #2
 80066ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	220f      	movs	r2, #15
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a63      	ldr	r2, [pc, #396]	; (8006898 <HAL_GPIO_DeInit+0x1ec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d037      	beq.n	800677e <HAL_GPIO_DeInit+0xd2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a62      	ldr	r2, [pc, #392]	; (800689c <HAL_GPIO_DeInit+0x1f0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d031      	beq.n	800677a <HAL_GPIO_DeInit+0xce>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a61      	ldr	r2, [pc, #388]	; (80068a0 <HAL_GPIO_DeInit+0x1f4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d02b      	beq.n	8006776 <HAL_GPIO_DeInit+0xca>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a60      	ldr	r2, [pc, #384]	; (80068a4 <HAL_GPIO_DeInit+0x1f8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d025      	beq.n	8006772 <HAL_GPIO_DeInit+0xc6>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a5f      	ldr	r2, [pc, #380]	; (80068a8 <HAL_GPIO_DeInit+0x1fc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01f      	beq.n	800676e <HAL_GPIO_DeInit+0xc2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a5e      	ldr	r2, [pc, #376]	; (80068ac <HAL_GPIO_DeInit+0x200>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d019      	beq.n	800676a <HAL_GPIO_DeInit+0xbe>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a5d      	ldr	r2, [pc, #372]	; (80068b0 <HAL_GPIO_DeInit+0x204>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_GPIO_DeInit+0xba>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a5c      	ldr	r2, [pc, #368]	; (80068b4 <HAL_GPIO_DeInit+0x208>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00d      	beq.n	8006762 <HAL_GPIO_DeInit+0xb6>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a5b      	ldr	r2, [pc, #364]	; (80068b8 <HAL_GPIO_DeInit+0x20c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d007      	beq.n	800675e <HAL_GPIO_DeInit+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a5a      	ldr	r2, [pc, #360]	; (80068bc <HAL_GPIO_DeInit+0x210>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <HAL_GPIO_DeInit+0xae>
 8006756:	2309      	movs	r3, #9
 8006758:	e012      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 800675a:	230a      	movs	r3, #10
 800675c:	e010      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 800675e:	2308      	movs	r3, #8
 8006760:	e00e      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 8006762:	2307      	movs	r3, #7
 8006764:	e00c      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 8006766:	2306      	movs	r3, #6
 8006768:	e00a      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 800676a:	2305      	movs	r3, #5
 800676c:	e008      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 800676e:	2304      	movs	r3, #4
 8006770:	e006      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 8006772:	2303      	movs	r3, #3
 8006774:	e004      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 8006776:	2302      	movs	r3, #2
 8006778:	e002      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <HAL_GPIO_DeInit+0xd4>
 800677e:	2300      	movs	r3, #0
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	f002 0203 	and.w	r2, r2, #3
 8006786:	0092      	lsls	r2, r2, #2
 8006788:	4093      	lsls	r3, r2
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d132      	bne.n	80067f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006790:	4b4b      	ldr	r3, [pc, #300]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	43db      	mvns	r3, r3
 8006798:	4949      	ldr	r1, [pc, #292]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 800679a:	4013      	ands	r3, r2
 800679c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800679e:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	4946      	ldr	r1, [pc, #280]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80067ac:	4b44      	ldr	r3, [pc, #272]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	4942      	ldr	r1, [pc, #264]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80067ba:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	493f      	ldr	r1, [pc, #252]	; (80068c0 <HAL_GPIO_DeInit+0x214>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	220f      	movs	r2, #15
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <HAL_GPIO_DeInit+0x1e8>)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	3302      	adds	r3, #2
 80067e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	43da      	mvns	r2, r3
 80067e8:	482a      	ldr	r0, [pc, #168]	; (8006894 <HAL_GPIO_DeInit+0x1e8>)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	089b      	lsrs	r3, r3, #2
 80067ee:	400a      	ands	r2, r1
 80067f0:	3302      	adds	r3, #2
 80067f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	2103      	movs	r1, #3
 8006800:	fa01 f303 	lsl.w	r3, r1, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	401a      	ands	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	08da      	lsrs	r2, r3, #3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3208      	adds	r2, #8
 8006814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	220f      	movs	r2, #15
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	08d2      	lsrs	r2, r2, #3
 800682c:	4019      	ands	r1, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3208      	adds	r2, #8
 8006832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	2103      	movs	r1, #3
 8006840:	fa01 f303 	lsl.w	r3, r1, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	401a      	ands	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	2101      	movs	r1, #1
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	fa01 f303 	lsl.w	r3, r1, r3
 8006858:	43db      	mvns	r3, r3
 800685a:	401a      	ands	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	2103      	movs	r1, #3
 800686a:	fa01 f303 	lsl.w	r3, r1, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	401a      	ands	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	3301      	adds	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	f67f af22 	bls.w	80066c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40013800 	.word	0x40013800
 8006898:	40020000 	.word	0x40020000
 800689c:	40020400 	.word	0x40020400
 80068a0:	40020800 	.word	0x40020800
 80068a4:	40020c00 	.word	0x40020c00
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40021400 	.word	0x40021400
 80068b0:	40021800 	.word	0x40021800
 80068b4:	40021c00 	.word	0x40021c00
 80068b8:	40022000 	.word	0x40022000
 80068bc:	40022400 	.word	0x40022400
 80068c0:	40013c00 	.word	0x40013c00

080068c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e001      	b.n	80068e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
 8006900:	4613      	mov	r3, r2
 8006902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006904:	787b      	ldrb	r3, [r7, #1]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006910:	e003      	b.n	800691a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006912:	887b      	ldrh	r3, [r7, #2]
 8006914:	041a      	lsls	r2, r3, #16
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	619a      	str	r2, [r3, #24]
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e07f      	b.n	8006a3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fb f806 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2224      	movs	r2, #36	; 0x24
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d107      	bne.n	80069a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800699e:	609a      	str	r2, [r3, #8]
 80069a0:	e006      	b.n	80069b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d104      	bne.n	80069c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <HAL_I2C_Init+0x11c>)
 80069ce:	430b      	orrs	r3, r1
 80069d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69d9      	ldr	r1, [r3, #28]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	02008000 	.word	0x02008000

08006a48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e021      	b.n	8006a9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2224      	movs	r2, #36	; 0x24
 8006a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0201 	bic.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fb f81c 	bl	8001ab0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	817b      	strh	r3, [r7, #10]
 8006aba:	460b      	mov	r3, r1
 8006abc:	813b      	strh	r3, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	f040 80f9 	bne.w	8006cc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_I2C_Mem_Write+0x34>
 8006ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0ed      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_I2C_Mem_Write+0x4e>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e0e6      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006afe:	f7fe f8e3 	bl	8004cc8 <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	2319      	movs	r3, #25
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fad1 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0d1      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2221      	movs	r2, #33	; 0x21
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2240      	movs	r2, #64	; 0x40
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a3a      	ldr	r2, [r7, #32]
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b48:	88f8      	ldrh	r0, [r7, #6]
 8006b4a:	893a      	ldrh	r2, [r7, #8]
 8006b4c:	8979      	ldrh	r1, [r7, #10]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4603      	mov	r3, r0
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f9e1 	bl	8006f20 <I2C_RequestMemoryWrite>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0a9      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2bff      	cmp	r3, #255	; 0xff
 8006b78:	d90e      	bls.n	8006b98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	22ff      	movs	r2, #255	; 0xff
 8006b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	8979      	ldrh	r1, [r7, #10]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fc2d 	bl	80073f0 <I2C_TransferConfig>
 8006b96:	e00f      	b.n	8006bb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	8979      	ldrh	r1, [r7, #10]
 8006baa:	2300      	movs	r3, #0
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fc1c 	bl	80073f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fabb 	bl	8007138 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e07b      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d034      	beq.n	8006c70 <HAL_I2C_Mem_Write+0x1c8>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d130      	bne.n	8006c70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2200      	movs	r2, #0
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fa4d 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e04d      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2bff      	cmp	r3, #255	; 0xff
 8006c30:	d90e      	bls.n	8006c50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	22ff      	movs	r2, #255	; 0xff
 8006c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	8979      	ldrh	r1, [r7, #10]
 8006c40:	2300      	movs	r3, #0
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fbd1 	bl	80073f0 <I2C_TransferConfig>
 8006c4e:	e00f      	b.n	8006c70 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	8979      	ldrh	r1, [r7, #10]
 8006c62:	2300      	movs	r3, #0
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fbc0 	bl	80073f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d19e      	bne.n	8006bb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 fa9a 	bl	80071b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e01a      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2220      	movs	r2, #32
 8006c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6859      	ldr	r1, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <HAL_I2C_Mem_Write+0x224>)
 8006ca2:	400b      	ands	r3, r1
 8006ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e000      	b.n	8006cc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	fe00e800 	.word	0xfe00e800

08006cd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	817b      	strh	r3, [r7, #10]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	813b      	strh	r3, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	f040 80fd 	bne.w	8006ef2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_I2C_Mem_Read+0x34>
 8006cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0f1      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_I2C_Mem_Read+0x4e>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e0ea      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d26:	f7fd ffcf 	bl	8004cc8 <HAL_GetTick>
 8006d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2319      	movs	r3, #25
 8006d32:	2201      	movs	r2, #1
 8006d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f9bd 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0d5      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2222      	movs	r2, #34	; 0x22
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2240      	movs	r2, #64	; 0x40
 8006d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a3a      	ldr	r2, [r7, #32]
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d70:	88f8      	ldrh	r0, [r7, #6]
 8006d72:	893a      	ldrh	r2, [r7, #8]
 8006d74:	8979      	ldrh	r1, [r7, #10]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4603      	mov	r3, r0
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f921 	bl	8006fc8 <I2C_RequestMemoryRead>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0ad      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2bff      	cmp	r3, #255	; 0xff
 8006da0:	d90e      	bls.n	8006dc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	8979      	ldrh	r1, [r7, #10]
 8006db0:	4b52      	ldr	r3, [pc, #328]	; (8006efc <HAL_I2C_Mem_Read+0x22c>)
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fb19 	bl	80073f0 <I2C_TransferConfig>
 8006dbe:	e00f      	b.n	8006de0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	8979      	ldrh	r1, [r7, #10]
 8006dd2:	4b4a      	ldr	r3, [pc, #296]	; (8006efc <HAL_I2C_Mem_Read+0x22c>)
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 fb08 	bl	80073f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	2200      	movs	r2, #0
 8006de8:	2104      	movs	r1, #4
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f964 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e07c      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d034      	beq.n	8006ea0 <HAL_I2C_Mem_Read+0x1d0>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d130      	bne.n	8006ea0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	2200      	movs	r2, #0
 8006e46:	2180      	movs	r1, #128	; 0x80
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f935 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e04d      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2bff      	cmp	r3, #255	; 0xff
 8006e60:	d90e      	bls.n	8006e80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	8979      	ldrh	r1, [r7, #10]
 8006e70:	2300      	movs	r3, #0
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fab9 	bl	80073f0 <I2C_TransferConfig>
 8006e7e:	e00f      	b.n	8006ea0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	8979      	ldrh	r1, [r7, #10]
 8006e92:	2300      	movs	r3, #0
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 faa8 	bl	80073f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d19a      	bne.n	8006de0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f982 	bl	80071b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e01a      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6859      	ldr	r1, [r3, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_I2C_Mem_Read+0x230>)
 8006ed2:	400b      	ands	r3, r1
 8006ed4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e000      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006ef2:	2302      	movs	r3, #2
  }
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	80002400 	.word	0x80002400
 8006f00:	fe00e800 	.word	0xfe00e800

08006f04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f12:	b2db      	uxtb	r3, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	817b      	strh	r3, [r7, #10]
 8006f32:	460b      	mov	r3, r1
 8006f34:	813b      	strh	r3, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	8979      	ldrh	r1, [r7, #10]
 8006f40:	4b20      	ldr	r3, [pc, #128]	; (8006fc4 <I2C_RequestMemoryWrite+0xa4>)
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fa51 	bl	80073f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	69b9      	ldr	r1, [r7, #24]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f8f0 	bl	8007138 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e02c      	b.n	8006fbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d105      	bne.n	8006f74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f68:	893b      	ldrh	r3, [r7, #8]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	629a      	str	r2, [r3, #40]	; 0x28
 8006f72:	e015      	b.n	8006fa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f74:	893b      	ldrh	r3, [r7, #8]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	69b9      	ldr	r1, [r7, #24]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f8d6 	bl	8007138 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e012      	b.n	8006fbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f96:	893b      	ldrh	r3, [r7, #8]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2180      	movs	r1, #128	; 0x80
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f884 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	80002000 	.word	0x80002000

08006fc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	817b      	strh	r3, [r7, #10]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	813b      	strh	r3, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	8979      	ldrh	r1, [r7, #10]
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <I2C_RequestMemoryRead+0xa4>)
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2300      	movs	r3, #0
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f9fe 	bl	80073f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	69b9      	ldr	r1, [r7, #24]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f89d 	bl	8007138 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e02c      	b.n	8007062 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d105      	bne.n	800701a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28
 8007018:	e015      	b.n	8007046 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800701a:	893b      	ldrh	r3, [r7, #8]
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	b29b      	uxth	r3, r3
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	69b9      	ldr	r1, [r7, #24]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f883 	bl	8007138 <I2C_WaitOnTXISFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e012      	b.n	8007062 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800703c:	893b      	ldrh	r3, [r7, #8]
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2200      	movs	r2, #0
 800704e:	2140      	movs	r1, #64	; 0x40
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f831 	bl	80070b8 <I2C_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	80002000 	.word	0x80002000

08007070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d103      	bne.n	800708e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	d007      	beq.n	80070ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	619a      	str	r2, [r3, #24]
  }
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	4613      	mov	r3, r2
 80070c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070c8:	e022      	b.n	8007110 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d01e      	beq.n	8007110 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d2:	f7fd fdf9 	bl	8004cc8 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d302      	bcc.n	80070e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d113      	bne.n	8007110 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	f043 0220 	orr.w	r2, r3, #32
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e00f      	b.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	4013      	ands	r3, r2
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	429a      	cmp	r2, r3
 800711e:	bf0c      	ite	eq
 8007120:	2301      	moveq	r3, #1
 8007122:	2300      	movne	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	429a      	cmp	r2, r3
 800712c:	d0cd      	beq.n	80070ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007144:	e02c      	b.n	80071a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f870 	bl	8007230 <I2C_IsErrorOccurred>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e02a      	b.n	80071b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d01e      	beq.n	80071a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007162:	f7fd fdb1 	bl	8004cc8 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	d302      	bcc.n	8007178 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d113      	bne.n	80071a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717c:	f043 0220 	orr.w	r2, r3, #32
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e007      	b.n	80071b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d1cb      	bne.n	8007146 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071c4:	e028      	b.n	8007218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f830 	bl	8007230 <I2C_IsErrorOccurred>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e026      	b.n	8007228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071da:	f7fd fd75 	bl	8004cc8 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d302      	bcc.n	80071f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d113      	bne.n	8007218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e007      	b.n	8007228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	d1cf      	bne.n	80071c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d068      	beq.n	800732e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2210      	movs	r2, #16
 8007262:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007264:	e049      	b.n	80072fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d045      	beq.n	80072fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800726e:	f7fd fd2b 	bl	8004cc8 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <I2C_IsErrorOccurred+0x54>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d13a      	bne.n	80072fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007296:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a6:	d121      	bne.n	80072ec <I2C_IsErrorOccurred+0xbc>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ae:	d01d      	beq.n	80072ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d01a      	beq.n	80072ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072c6:	f7fd fcff 	bl	8004cc8 <HAL_GetTick>
 80072ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072cc:	e00e      	b.n	80072ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072ce:	f7fd fcfb 	bl	8004cc8 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b19      	cmp	r3, #25
 80072da:	d907      	bls.n	80072ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	f043 0320 	orr.w	r3, r3, #32
 80072e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80072ea:	e006      	b.n	80072fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d1e9      	bne.n	80072ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b20      	cmp	r3, #32
 8007306:	d003      	beq.n	8007310 <I2C_IsErrorOccurred+0xe0>
 8007308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0aa      	beq.n	8007266 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2220      	movs	r2, #32
 800731e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f043 0304 	orr.w	r3, r3, #4
 8007326:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007350:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007372:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	f043 0302 	orr.w	r3, r3, #2
 800738a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800739c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01c      	beq.n	80073de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fe63 	bl	8007070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6859      	ldr	r1, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <I2C_IsErrorOccurred+0x1bc>)
 80073b6:	400b      	ands	r3, r1
 80073b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80073de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3728      	adds	r7, #40	; 0x28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	fe00e800 	.word	0xfe00e800

080073f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	4613      	mov	r3, r2
 8007400:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007402:	897b      	ldrh	r3, [r7, #10]
 8007404:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007408:	7a7b      	ldrb	r3, [r7, #9]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007410:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	4313      	orrs	r3, r2
 800741a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800741e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	0d5b      	lsrs	r3, r3, #21
 800742a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800742e:	4b08      	ldr	r3, [pc, #32]	; (8007450 <I2C_TransferConfig+0x60>)
 8007430:	430b      	orrs	r3, r1
 8007432:	43db      	mvns	r3, r3
 8007434:	ea02 0103 	and.w	r1, r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	03ff63ff 	.word	0x03ff63ff

08007454 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b20      	cmp	r3, #32
 8007468:	d138      	bne.n	80074dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007474:	2302      	movs	r3, #2
 8007476:	e032      	b.n	80074de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2224      	movs	r2, #36	; 0x24
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0201 	orr.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d139      	bne.n	8007574 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800750a:	2302      	movs	r3, #2
 800750c:	e033      	b.n	8007576 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2224      	movs	r2, #36	; 0x24
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0201 	bic.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800753c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	e000      	b.n	8007576 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007574:	2302      	movs	r3, #2
  }
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e0bf      	b.n	8007716 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa fb3e 	bl	8001c2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80075c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6899      	ldr	r1, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b4a      	ldr	r3, [pc, #296]	; (8007720 <HAL_LTDC_Init+0x19c>)
 80075f8:	400b      	ands	r3, r1
 80075fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6899      	ldr	r1, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68d9      	ldr	r1, [r3, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b3e      	ldr	r3, [pc, #248]	; (8007720 <HAL_LTDC_Init+0x19c>)
 8007626:	400b      	ands	r3, r1
 8007628:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	041b      	lsls	r3, r3, #16
 8007630:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68d9      	ldr	r1, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a1a      	ldr	r2, [r3, #32]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6919      	ldr	r1, [r3, #16]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b33      	ldr	r3, [pc, #204]	; (8007720 <HAL_LTDC_Init+0x19c>)
 8007654:	400b      	ands	r3, r1
 8007656:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6919      	ldr	r1, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6959      	ldr	r1, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b27      	ldr	r3, [pc, #156]	; (8007720 <HAL_LTDC_Init+0x19c>)
 8007682:	400b      	ands	r3, r1
 8007684:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	041b      	lsls	r3, r3, #16
 800768c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6959      	ldr	r1, [r3, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80076b4:	041b      	lsls	r3, r3, #16
 80076b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0206 	orr.w	r2, r2, #6
 80076f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	f000f800 	.word	0xf000f800

08007724 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d023      	beq.n	800778e <HAL_LTDC_IRQHandler+0x6a>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01e      	beq.n	800778e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0204 	bic.w	r2, r2, #4
 800775e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2204      	movs	r2, #4
 8007766:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800776e:	f043 0201 	orr.w	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2204      	movs	r2, #4
 800777c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f86f 	bl	800786c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d023      	beq.n	80077e0 <HAL_LTDC_IRQHandler+0xbc>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01e      	beq.n	80077e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0202 	bic.w	r2, r2, #2
 80077b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2202      	movs	r2, #2
 80077b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077c0:	f043 0202 	orr.w	r2, r3, #2
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2204      	movs	r2, #4
 80077ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f846 	bl	800786c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01b      	beq.n	8007822 <HAL_LTDC_IRQHandler+0xfe>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d016      	beq.n	8007822 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f82f 	bl	8007880 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01b      	beq.n	8007864 <HAL_LTDC_IRQHandler+0x140>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0208 	bic.w	r2, r2, #8
 8007844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2208      	movs	r2, #8
 800784c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f818 	bl	8007894 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80078a8:	b5b0      	push	{r4, r5, r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_LTDC_ConfigLayer+0x1a>
 80078be:	2302      	movs	r3, #2
 80078c0:	e02c      	b.n	800791c <HAL_LTDC_ConfigLayer+0x74>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2134      	movs	r1, #52	; 0x34
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	4413      	add	r3, r2
 80078de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4614      	mov	r4, r2
 80078e6:	461d      	mov	r5, r3
 80078e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f81f 	bl	8007940 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2201      	movs	r2, #1
 8007908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bdb0      	pop	{r4, r5, r7, pc}

08007924 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007932:	b2db      	uxtb	r3, r3
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	; 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800795c:	4413      	add	r3, r2
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	01db      	lsls	r3, r3, #7
 800796c:	4413      	add	r3, r2
 800796e:	3384      	adds	r3, #132	; 0x84
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	4611      	mov	r1, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	01d2      	lsls	r2, r2, #7
 800797c:	440a      	add	r2, r1
 800797e:	3284      	adds	r2, #132	; 0x84
 8007980:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007984:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007996:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007998:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	01db      	lsls	r3, r3, #7
 80079a4:	440b      	add	r3, r1
 80079a6:	3384      	adds	r3, #132	; 0x84
 80079a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80079ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079be:	4413      	add	r3, r2
 80079c0:	041b      	lsls	r3, r3, #16
 80079c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	01db      	lsls	r3, r3, #7
 80079ce:	4413      	add	r3, r2
 80079d0:	3384      	adds	r3, #132	; 0x84
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	4611      	mov	r1, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	01d2      	lsls	r2, r2, #7
 80079de:	440a      	add	r2, r1
 80079e0:	3284      	adds	r2, #132	; 0x84
 80079e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80079e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079f6:	4413      	add	r3, r2
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4619      	mov	r1, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	01db      	lsls	r3, r3, #7
 8007a04:	440b      	add	r3, r1
 8007a06:	3384      	adds	r3, #132	; 0x84
 8007a08:	4619      	mov	r1, r3
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	01db      	lsls	r3, r3, #7
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3384      	adds	r3, #132	; 0x84
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	4611      	mov	r1, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	01d2      	lsls	r2, r2, #7
 8007a2a:	440a      	add	r2, r1
 8007a2c:	3284      	adds	r2, #132	; 0x84
 8007a2e:	f023 0307 	bic.w	r3, r3, #7
 8007a32:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	01db      	lsls	r3, r3, #7
 8007a3e:	4413      	add	r3, r2
 8007a40:	3384      	adds	r3, #132	; 0x84
 8007a42:	461a      	mov	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007a5a:	041b      	lsls	r3, r3, #16
 8007a5c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	061b      	lsls	r3, r3, #24
 8007a64:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	01db      	lsls	r3, r3, #7
 8007a70:	4413      	add	r3, r2
 8007a72:	3384      	adds	r3, #132	; 0x84
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	01db      	lsls	r3, r3, #7
 8007a80:	4413      	add	r3, r2
 8007a82:	3384      	adds	r3, #132	; 0x84
 8007a84:	461a      	mov	r2, r3
 8007a86:	2300      	movs	r3, #0
 8007a88:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a90:	461a      	mov	r2, r3
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	01db      	lsls	r3, r3, #7
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3384      	adds	r3, #132	; 0x84
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	01db      	lsls	r3, r3, #7
 8007aba:	4413      	add	r3, r2
 8007abc:	3384      	adds	r3, #132	; 0x84
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	01d2      	lsls	r2, r2, #7
 8007aca:	440a      	add	r2, r1
 8007acc:	3284      	adds	r2, #132	; 0x84
 8007ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ad2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	01db      	lsls	r3, r3, #7
 8007ade:	4413      	add	r3, r2
 8007ae0:	3384      	adds	r3, #132	; 0x84
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	01db      	lsls	r3, r3, #7
 8007af4:	4413      	add	r3, r2
 8007af6:	3384      	adds	r3, #132	; 0x84
 8007af8:	69da      	ldr	r2, [r3, #28]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	01db      	lsls	r3, r3, #7
 8007b04:	440b      	add	r3, r1
 8007b06:	3384      	adds	r3, #132	; 0x84
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4b58      	ldr	r3, [pc, #352]	; (8007c6c <LTDC_SetConfig+0x32c>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	6809      	ldr	r1, [r1, #0]
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	01c9      	lsls	r1, r1, #7
 8007b22:	4401      	add	r1, r0
 8007b24:	3184      	adds	r1, #132	; 0x84
 8007b26:	4313      	orrs	r3, r2
 8007b28:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	01db      	lsls	r3, r3, #7
 8007b34:	4413      	add	r3, r2
 8007b36:	3384      	adds	r3, #132	; 0x84
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	01db      	lsls	r3, r3, #7
 8007b44:	4413      	add	r3, r2
 8007b46:	3384      	adds	r3, #132	; 0x84
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	01db      	lsls	r3, r3, #7
 8007b58:	4413      	add	r3, r2
 8007b5a:	3384      	adds	r3, #132	; 0x84
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e01b      	b.n	8007baa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d102      	bne.n	8007b80 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	e014      	b.n	8007baa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d00b      	beq.n	8007ba0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d007      	beq.n	8007ba0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d003      	beq.n	8007ba0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b9c:	2b07      	cmp	r3, #7
 8007b9e:	d102      	bne.n	8007ba6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	e001      	b.n	8007baa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	01db      	lsls	r3, r3, #7
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3384      	adds	r3, #132	; 0x84
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	01d2      	lsls	r2, r2, #7
 8007bc4:	440a      	add	r2, r1
 8007bc6:	3284      	adds	r2, #132	; 0x84
 8007bc8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	fb02 f303 	mul.w	r3, r2, r3
 8007bd8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6859      	ldr	r1, [r3, #4]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	1acb      	subs	r3, r1, r3
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007bec:	68f9      	ldr	r1, [r7, #12]
 8007bee:	6809      	ldr	r1, [r1, #0]
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	01c9      	lsls	r1, r1, #7
 8007bf6:	4401      	add	r1, r0
 8007bf8:	3184      	adds	r1, #132	; 0x84
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	01db      	lsls	r3, r3, #7
 8007c08:	4413      	add	r3, r2
 8007c0a:	3384      	adds	r3, #132	; 0x84
 8007c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4619      	mov	r1, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	01db      	lsls	r3, r3, #7
 8007c18:	440b      	add	r3, r1
 8007c1a:	3384      	adds	r3, #132	; 0x84
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4b14      	ldr	r3, [pc, #80]	; (8007c70 <LTDC_SetConfig+0x330>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	01db      	lsls	r3, r3, #7
 8007c2e:	4413      	add	r3, r2
 8007c30:	3384      	adds	r3, #132	; 0x84
 8007c32:	461a      	mov	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	01db      	lsls	r3, r3, #7
 8007c44:	4413      	add	r3, r2
 8007c46:	3384      	adds	r3, #132	; 0x84
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	01d2      	lsls	r2, r2, #7
 8007c54:	440a      	add	r2, r1
 8007c56:	3284      	adds	r2, #132	; 0x84
 8007c58:	f043 0301 	orr.w	r3, r3, #1
 8007c5c:	6013      	str	r3, [r2, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	3724      	adds	r7, #36	; 0x24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	fffff8f8 	.word	0xfffff8f8
 8007c70:	fffff800 	.word	0xfffff800

08007c74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a04      	ldr	r2, [pc, #16]	; (8007c90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c82:	6013      	str	r3, [r2, #0]
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40007000 	.word	0x40007000

08007c94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c9e:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8007caa:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007cb6:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1d      	ldr	r2, [pc, #116]	; (8007d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cc2:	f7fd f801 	bl	8004cc8 <HAL_GetTick>
 8007cc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007cc8:	e009      	b.n	8007cde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007cca:	f7fc fffd 	bl	8004cc8 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cd8:	d901      	bls.n	8007cde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e022      	b.n	8007d24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cea:	d1ee      	bne.n	8007cca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007cec:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cf8:	f7fc ffe6 	bl	8004cc8 <HAL_GetTick>
 8007cfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007cfe:	e009      	b.n	8007d14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d00:	f7fc ffe2 	bl	8004cc8 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d0e:	d901      	bls.n	8007d14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e007      	b.n	8007d24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d14:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d20:	d1ee      	bne.n	8007d00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	40007000 	.word	0x40007000

08007d34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e291      	b.n	800826e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8087 	beq.w	8007e66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d58:	4b96      	ldr	r3, [pc, #600]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 030c 	and.w	r3, r3, #12
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d00c      	beq.n	8007d7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d64:	4b93      	ldr	r3, [pc, #588]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 030c 	and.w	r3, r3, #12
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d112      	bne.n	8007d96 <HAL_RCC_OscConfig+0x62>
 8007d70:	4b90      	ldr	r3, [pc, #576]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7c:	d10b      	bne.n	8007d96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d7e:	4b8d      	ldr	r3, [pc, #564]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d06c      	beq.n	8007e64 <HAL_RCC_OscConfig+0x130>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d168      	bne.n	8007e64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e26b      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9e:	d106      	bne.n	8007dae <HAL_RCC_OscConfig+0x7a>
 8007da0:	4b84      	ldr	r3, [pc, #528]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a83      	ldr	r2, [pc, #524]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	e02e      	b.n	8007e0c <HAL_RCC_OscConfig+0xd8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x9c>
 8007db6:	4b7f      	ldr	r3, [pc, #508]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a7e      	ldr	r2, [pc, #504]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4b7c      	ldr	r3, [pc, #496]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a7b      	ldr	r2, [pc, #492]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e01d      	b.n	8007e0c <HAL_RCC_OscConfig+0xd8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dd8:	d10c      	bne.n	8007df4 <HAL_RCC_OscConfig+0xc0>
 8007dda:	4b76      	ldr	r3, [pc, #472]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a75      	ldr	r2, [pc, #468]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4b73      	ldr	r3, [pc, #460]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a72      	ldr	r2, [pc, #456]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e00b      	b.n	8007e0c <HAL_RCC_OscConfig+0xd8>
 8007df4:	4b6f      	ldr	r3, [pc, #444]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a6e      	ldr	r2, [pc, #440]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	4b6c      	ldr	r3, [pc, #432]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a6b      	ldr	r2, [pc, #428]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d013      	beq.n	8007e3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e14:	f7fc ff58 	bl	8004cc8 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e1c:	f7fc ff54 	bl	8004cc8 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b64      	cmp	r3, #100	; 0x64
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e21f      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e2e:	4b61      	ldr	r3, [pc, #388]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0f0      	beq.n	8007e1c <HAL_RCC_OscConfig+0xe8>
 8007e3a:	e014      	b.n	8007e66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3c:	f7fc ff44 	bl	8004cc8 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e44:	f7fc ff40 	bl	8004cc8 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b64      	cmp	r3, #100	; 0x64
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e20b      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e56:	4b57      	ldr	r3, [pc, #348]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f0      	bne.n	8007e44 <HAL_RCC_OscConfig+0x110>
 8007e62:	e000      	b.n	8007e66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d069      	beq.n	8007f46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e72:	4b50      	ldr	r3, [pc, #320]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 030c 	and.w	r3, r3, #12
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e7e:	4b4d      	ldr	r3, [pc, #308]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 030c 	and.w	r3, r3, #12
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d11c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x190>
 8007e8a:	4b4a      	ldr	r3, [pc, #296]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d116      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e96:	4b47      	ldr	r3, [pc, #284]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_RCC_OscConfig+0x17a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d001      	beq.n	8007eae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e1df      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eae:	4b41      	ldr	r3, [pc, #260]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	493d      	ldr	r1, [pc, #244]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ec2:	e040      	b.n	8007f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d023      	beq.n	8007f14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ecc:	4b39      	ldr	r3, [pc, #228]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a38      	ldr	r2, [pc, #224]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fc fef6 	bl	8004cc8 <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ee0:	f7fc fef2 	bl	8004cc8 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e1bd      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ef2:	4b30      	ldr	r3, [pc, #192]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007efe:	4b2d      	ldr	r3, [pc, #180]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	4929      	ldr	r1, [pc, #164]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	600b      	str	r3, [r1, #0]
 8007f12:	e018      	b.n	8007f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f14:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a26      	ldr	r2, [pc, #152]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fc fed2 	bl	8004cc8 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f28:	f7fc fece 	bl	8004cc8 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e199      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f3a:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f0      	bne.n	8007f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d038      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d019      	beq.n	8007f8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f5a:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5e:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f66:	f7fc feaf 	bl	8004cc8 <HAL_GetTick>
 8007f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f6e:	f7fc feab 	bl	8004cc8 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e176      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <HAL_RCC_OscConfig+0x23a>
 8007f8c:	e01a      	b.n	8007fc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f92:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <HAL_RCC_OscConfig+0x280>)
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f9a:	f7fc fe95 	bl	8004cc8 <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fa0:	e00a      	b.n	8007fb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fa2:	f7fc fe91 	bl	8004cc8 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d903      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e15c      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
 8007fb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb8:	4b91      	ldr	r3, [pc, #580]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8007fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1ee      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80a4 	beq.w	800811a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fd2:	4b8b      	ldr	r3, [pc, #556]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10d      	bne.n	8007ffa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fde:	4b88      	ldr	r3, [pc, #544]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	4a87      	ldr	r2, [pc, #540]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fea:	4b85      	ldr	r3, [pc, #532]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ffa:	4b82      	ldr	r3, [pc, #520]	; (8008204 <HAL_RCC_OscConfig+0x4d0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d118      	bne.n	8008038 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008006:	4b7f      	ldr	r3, [pc, #508]	; (8008204 <HAL_RCC_OscConfig+0x4d0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a7e      	ldr	r2, [pc, #504]	; (8008204 <HAL_RCC_OscConfig+0x4d0>)
 800800c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008012:	f7fc fe59 	bl	8004cc8 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008018:	e008      	b.n	800802c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801a:	f7fc fe55 	bl	8004cc8 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b64      	cmp	r3, #100	; 0x64
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e120      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800802c:	4b75      	ldr	r3, [pc, #468]	; (8008204 <HAL_RCC_OscConfig+0x4d0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0f0      	beq.n	800801a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d106      	bne.n	800804e <HAL_RCC_OscConfig+0x31a>
 8008040:	4b6f      	ldr	r3, [pc, #444]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	4a6e      	ldr	r2, [pc, #440]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	6713      	str	r3, [r2, #112]	; 0x70
 800804c:	e02d      	b.n	80080aa <HAL_RCC_OscConfig+0x376>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10c      	bne.n	8008070 <HAL_RCC_OscConfig+0x33c>
 8008056:	4b6a      	ldr	r3, [pc, #424]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805a:	4a69      	ldr	r2, [pc, #420]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	6713      	str	r3, [r2, #112]	; 0x70
 8008062:	4b67      	ldr	r3, [pc, #412]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	4a66      	ldr	r2, [pc, #408]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008068:	f023 0304 	bic.w	r3, r3, #4
 800806c:	6713      	str	r3, [r2, #112]	; 0x70
 800806e:	e01c      	b.n	80080aa <HAL_RCC_OscConfig+0x376>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b05      	cmp	r3, #5
 8008076:	d10c      	bne.n	8008092 <HAL_RCC_OscConfig+0x35e>
 8008078:	4b61      	ldr	r3, [pc, #388]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	4a60      	ldr	r2, [pc, #384]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800807e:	f043 0304 	orr.w	r3, r3, #4
 8008082:	6713      	str	r3, [r2, #112]	; 0x70
 8008084:	4b5e      	ldr	r3, [pc, #376]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008088:	4a5d      	ldr	r2, [pc, #372]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	6713      	str	r3, [r2, #112]	; 0x70
 8008090:	e00b      	b.n	80080aa <HAL_RCC_OscConfig+0x376>
 8008092:	4b5b      	ldr	r3, [pc, #364]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	4a5a      	ldr	r2, [pc, #360]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	6713      	str	r3, [r2, #112]	; 0x70
 800809e:	4b58      	ldr	r3, [pc, #352]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	4a57      	ldr	r2, [pc, #348]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80080a4:	f023 0304 	bic.w	r3, r3, #4
 80080a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d015      	beq.n	80080de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b2:	f7fc fe09 	bl	8004cc8 <HAL_GetTick>
 80080b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b8:	e00a      	b.n	80080d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ba:	f7fc fe05 	bl	8004cc8 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e0ce      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080d0:	4b4b      	ldr	r3, [pc, #300]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0ee      	beq.n	80080ba <HAL_RCC_OscConfig+0x386>
 80080dc:	e014      	b.n	8008108 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080de:	f7fc fdf3 	bl	8004cc8 <HAL_GetTick>
 80080e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e4:	e00a      	b.n	80080fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e6:	f7fc fdef 	bl	8004cc8 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e0b8      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080fc:	4b40      	ldr	r3, [pc, #256]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80080fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ee      	bne.n	80080e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d105      	bne.n	800811a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800810e:	4b3c      	ldr	r3, [pc, #240]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	4a3b      	ldr	r2, [pc, #236]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 80a4 	beq.w	800826c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008124:	4b36      	ldr	r3, [pc, #216]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 030c 	and.w	r3, r3, #12
 800812c:	2b08      	cmp	r3, #8
 800812e:	d06b      	beq.n	8008208 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d149      	bne.n	80081cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008138:	4b31      	ldr	r3, [pc, #196]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a30      	ldr	r2, [pc, #192]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800813e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008144:	f7fc fdc0 	bl	8004cc8 <HAL_GetTick>
 8008148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800814c:	f7fc fdbc 	bl	8004cc8 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e087      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800815e:	4b28      	ldr	r3, [pc, #160]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f0      	bne.n	800814c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69da      	ldr	r2, [r3, #28]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	019b      	lsls	r3, r3, #6
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	085b      	lsrs	r3, r3, #1
 8008182:	3b01      	subs	r3, #1
 8008184:	041b      	lsls	r3, r3, #16
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	061b      	lsls	r3, r3, #24
 800818e:	4313      	orrs	r3, r2
 8008190:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 8008192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008196:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008198:	4b19      	ldr	r3, [pc, #100]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a18      	ldr	r2, [pc, #96]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 800819e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a4:	f7fc fd90 	bl	8004cc8 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ac:	f7fc fd8c 	bl	8004cc8 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e057      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081be:	4b10      	ldr	r3, [pc, #64]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f0      	beq.n	80081ac <HAL_RCC_OscConfig+0x478>
 80081ca:	e04f      	b.n	800826c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081cc:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0b      	ldr	r2, [pc, #44]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80081d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d8:	f7fc fd76 	bl	8004cc8 <HAL_GetTick>
 80081dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e0:	f7fc fd72 	bl	8004cc8 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e03d      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081f2:	4b03      	ldr	r3, [pc, #12]	; (8008200 <HAL_RCC_OscConfig+0x4cc>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f0      	bne.n	80081e0 <HAL_RCC_OscConfig+0x4ac>
 80081fe:	e035      	b.n	800826c <HAL_RCC_OscConfig+0x538>
 8008200:	40023800 	.word	0x40023800
 8008204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008208:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <HAL_RCC_OscConfig+0x544>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d028      	beq.n	8008268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008220:	429a      	cmp	r2, r3
 8008222:	d121      	bne.n	8008268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800822e:	429a      	cmp	r2, r3
 8008230:	d11a      	bne.n	8008268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008238:	4013      	ands	r3, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800823e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008240:	4293      	cmp	r3, r2
 8008242:	d111      	bne.n	8008268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	3b01      	subs	r3, #1
 8008252:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008254:	429a      	cmp	r2, r3
 8008256:	d107      	bne.n	8008268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008264:	429a      	cmp	r2, r3
 8008266:	d001      	beq.n	800826c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e000      	b.n	800826e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40023800 	.word	0x40023800

0800827c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e0d0      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008294:	4b6a      	ldr	r3, [pc, #424]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 030f 	and.w	r3, r3, #15
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d910      	bls.n	80082c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082a2:	4b67      	ldr	r3, [pc, #412]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f023 020f 	bic.w	r2, r3, #15
 80082aa:	4965      	ldr	r1, [pc, #404]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b2:	4b63      	ldr	r3, [pc, #396]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d001      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e0b8      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d020      	beq.n	8008312 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082dc:	4b59      	ldr	r3, [pc, #356]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4a58      	ldr	r2, [pc, #352]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80082e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082f4:	4b53      	ldr	r3, [pc, #332]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	4a52      	ldr	r2, [pc, #328]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80082fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008300:	4b50      	ldr	r3, [pc, #320]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	494d      	ldr	r1, [pc, #308]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 800830e:	4313      	orrs	r3, r2
 8008310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d040      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008326:	4b47      	ldr	r3, [pc, #284]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d115      	bne.n	800835e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e07f      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d107      	bne.n	800834e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800833e:	4b41      	ldr	r3, [pc, #260]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d109      	bne.n	800835e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e073      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800834e:	4b3d      	ldr	r3, [pc, #244]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e06b      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800835e:	4b39      	ldr	r3, [pc, #228]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f023 0203 	bic.w	r2, r3, #3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	4936      	ldr	r1, [pc, #216]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 800836c:	4313      	orrs	r3, r2
 800836e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008370:	f7fc fcaa 	bl	8004cc8 <HAL_GetTick>
 8008374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008376:	e00a      	b.n	800838e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008378:	f7fc fca6 	bl	8004cc8 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	f241 3288 	movw	r2, #5000	; 0x1388
 8008386:	4293      	cmp	r3, r2
 8008388:	d901      	bls.n	800838e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e053      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800838e:	4b2d      	ldr	r3, [pc, #180]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 020c 	and.w	r2, r3, #12
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	429a      	cmp	r2, r3
 800839e:	d1eb      	bne.n	8008378 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083a0:	4b27      	ldr	r3, [pc, #156]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d210      	bcs.n	80083d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ae:	4b24      	ldr	r3, [pc, #144]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f023 020f 	bic.w	r2, r3, #15
 80083b6:	4922      	ldr	r1, [pc, #136]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083be:	4b20      	ldr	r3, [pc, #128]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d001      	beq.n	80083d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e032      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d008      	beq.n	80083ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083dc:	4b19      	ldr	r3, [pc, #100]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4916      	ldr	r1, [pc, #88]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083fa:	4b12      	ldr	r3, [pc, #72]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	490e      	ldr	r1, [pc, #56]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 800840a:	4313      	orrs	r3, r2
 800840c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800840e:	f000 f821 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 8008412:	4602      	mov	r2, r0
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	490a      	ldr	r1, [pc, #40]	; (8008448 <HAL_RCC_ClockConfig+0x1cc>)
 8008420:	5ccb      	ldrb	r3, [r1, r3]
 8008422:	fa22 f303 	lsr.w	r3, r2, r3
 8008426:	4a09      	ldr	r2, [pc, #36]	; (800844c <HAL_RCC_ClockConfig+0x1d0>)
 8008428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <HAL_RCC_ClockConfig+0x1d4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f7fb ff38 	bl	80042a4 <HAL_InitTick>

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40023c00 	.word	0x40023c00
 8008444:	40023800 	.word	0x40023800
 8008448:	0804ee5c 	.word	0x0804ee5c
 800844c:	2000003c 	.word	0x2000003c
 8008450:	20000040 	.word	0x20000040

08008454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008458:	b090      	sub	sp, #64	; 0x40
 800845a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
 8008460:	2300      	movs	r3, #0
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008464:	2300      	movs	r3, #0
 8008466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800846c:	4b59      	ldr	r3, [pc, #356]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 030c 	and.w	r3, r3, #12
 8008474:	2b08      	cmp	r3, #8
 8008476:	d00d      	beq.n	8008494 <HAL_RCC_GetSysClockFreq+0x40>
 8008478:	2b08      	cmp	r3, #8
 800847a:	f200 80a1 	bhi.w	80085c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <HAL_RCC_GetSysClockFreq+0x34>
 8008482:	2b04      	cmp	r3, #4
 8008484:	d003      	beq.n	800848e <HAL_RCC_GetSysClockFreq+0x3a>
 8008486:	e09b      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008488:	4b53      	ldr	r3, [pc, #332]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800848a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800848c:	e09b      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800848e:	4b53      	ldr	r3, [pc, #332]	; (80085dc <HAL_RCC_GetSysClockFreq+0x188>)
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008492:	e098      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008494:	4b4f      	ldr	r3, [pc, #316]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800849e:	4b4d      	ldr	r3, [pc, #308]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d028      	beq.n	80084fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	099b      	lsrs	r3, r3, #6
 80084b0:	2200      	movs	r2, #0
 80084b2:	623b      	str	r3, [r7, #32]
 80084b4:	627a      	str	r2, [r7, #36]	; 0x24
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80084bc:	2100      	movs	r1, #0
 80084be:	4b47      	ldr	r3, [pc, #284]	; (80085dc <HAL_RCC_GetSysClockFreq+0x188>)
 80084c0:	fb03 f201 	mul.w	r2, r3, r1
 80084c4:	2300      	movs	r3, #0
 80084c6:	fb00 f303 	mul.w	r3, r0, r3
 80084ca:	4413      	add	r3, r2
 80084cc:	4a43      	ldr	r2, [pc, #268]	; (80085dc <HAL_RCC_GetSysClockFreq+0x188>)
 80084ce:	fba0 1202 	umull	r1, r2, r0, r2
 80084d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084d4:	460a      	mov	r2, r1
 80084d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80084d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084da:	4413      	add	r3, r2
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	2200      	movs	r2, #0
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	61fa      	str	r2, [r7, #28]
 80084e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80084ee:	f7f7 fedf 	bl	80002b0 <__aeabi_uldivmod>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4613      	mov	r3, r2
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fa:	e053      	b.n	80085a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084fc:	4b35      	ldr	r3, [pc, #212]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	099b      	lsrs	r3, r3, #6
 8008502:	2200      	movs	r2, #0
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	617a      	str	r2, [r7, #20]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800850e:	f04f 0b00 	mov.w	fp, #0
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	f04f 0000 	mov.w	r0, #0
 800851a:	f04f 0100 	mov.w	r1, #0
 800851e:	0159      	lsls	r1, r3, #5
 8008520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008524:	0150      	lsls	r0, r2, #5
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	ebb2 080a 	subs.w	r8, r2, sl
 800852e:	eb63 090b 	sbc.w	r9, r3, fp
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800853e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008542:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008546:	ebb2 0408 	subs.w	r4, r2, r8
 800854a:	eb63 0509 	sbc.w	r5, r3, r9
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	00eb      	lsls	r3, r5, #3
 8008558:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800855c:	00e2      	lsls	r2, r4, #3
 800855e:	4614      	mov	r4, r2
 8008560:	461d      	mov	r5, r3
 8008562:	eb14 030a 	adds.w	r3, r4, sl
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	eb45 030b 	adc.w	r3, r5, fp
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800857a:	4629      	mov	r1, r5
 800857c:	028b      	lsls	r3, r1, #10
 800857e:	4621      	mov	r1, r4
 8008580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008584:	4621      	mov	r1, r4
 8008586:	028a      	lsls	r2, r1, #10
 8008588:	4610      	mov	r0, r2
 800858a:	4619      	mov	r1, r3
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	2200      	movs	r2, #0
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	60fa      	str	r2, [r7, #12]
 8008594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008598:	f7f7 fe8a 	bl	80002b0 <__aeabi_uldivmod>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4613      	mov	r3, r2
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80085a4:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	0c1b      	lsrs	r3, r3, #16
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	3301      	adds	r3, #1
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80085b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085be:	e002      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80085c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3740      	adds	r7, #64	; 0x40
 80085cc:	46bd      	mov	sp, r7
 80085ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085d2:	bf00      	nop
 80085d4:	40023800 	.word	0x40023800
 80085d8:	00f42400 	.word	0x00f42400
 80085dc:	017d7840 	.word	0x017d7840

080085e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80085e6:	681b      	ldr	r3, [r3, #0]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	2000003c 	.word	0x2000003c

080085f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085fc:	f7ff fff0 	bl	80085e0 <HAL_RCC_GetHCLKFreq>
 8008600:	4602      	mov	r2, r0
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	0a9b      	lsrs	r3, r3, #10
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	4903      	ldr	r1, [pc, #12]	; (800861c <HAL_RCC_GetPCLK1Freq+0x24>)
 800860e:	5ccb      	ldrb	r3, [r1, r3]
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40023800 	.word	0x40023800
 800861c:	0804ee6c 	.word	0x0804ee6c

08008620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008624:	f7ff ffdc 	bl	80085e0 <HAL_RCC_GetHCLKFreq>
 8008628:	4602      	mov	r2, r0
 800862a:	4b05      	ldr	r3, [pc, #20]	; (8008640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	0b5b      	lsrs	r3, r3, #13
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	4903      	ldr	r1, [pc, #12]	; (8008644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008636:	5ccb      	ldrb	r3, [r1, r3]
 8008638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800863c:	4618      	mov	r0, r3
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40023800 	.word	0x40023800
 8008644:	0804ee6c 	.word	0x0804ee6c

08008648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	220f      	movs	r2, #15
 8008656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008658:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <HAL_RCC_GetClockConfig+0x5c>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0203 	and.w	r2, r3, #3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008664:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008670:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <HAL_RCC_GetClockConfig+0x5c>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800868a:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <HAL_RCC_GetClockConfig+0x60>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 020f 	and.w	r2, r3, #15
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40023c00 	.word	0x40023c00

080086ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d012      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086d4:	4b69      	ldr	r3, [pc, #420]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	4a68      	ldr	r2, [pc, #416]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80086de:	6093      	str	r3, [r2, #8]
 80086e0:	4b66      	ldr	r3, [pc, #408]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	4964      	ldr	r1, [pc, #400]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80086f6:	2301      	movs	r3, #1
 80086f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d017      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008706:	4b5d      	ldr	r3, [pc, #372]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800870c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008714:	4959      	ldr	r1, [pc, #356]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008724:	d101      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008726:	2301      	movs	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d017      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008742:	4b4e      	ldr	r3, [pc, #312]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008748:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	494a      	ldr	r1, [pc, #296]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008760:	d101      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008762:	2301      	movs	r3, #1
 8008764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800876e:	2301      	movs	r3, #1
 8008770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800877e:	2301      	movs	r3, #1
 8008780:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 808b 	beq.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008790:	4b3a      	ldr	r3, [pc, #232]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	4a39      	ldr	r2, [pc, #228]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879a:	6413      	str	r3, [r2, #64]	; 0x40
 800879c:	4b37      	ldr	r3, [pc, #220]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087a8:	4b35      	ldr	r3, [pc, #212]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a34      	ldr	r2, [pc, #208]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b4:	f7fc fa88 	bl	8004cc8 <HAL_GetTick>
 80087b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80087ba:	e008      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087bc:	f7fc fa84 	bl	8004cc8 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b64      	cmp	r3, #100	; 0x64
 80087c8:	d901      	bls.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e357      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80087ce:	4b2c      	ldr	r3, [pc, #176]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087da:	4b28      	ldr	r3, [pc, #160]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d035      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d02e      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087f8:	4b20      	ldr	r3, [pc, #128]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008800:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008802:	4b1e      	ldr	r3, [pc, #120]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008806:	4a1d      	ldr	r2, [pc, #116]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800880c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800880e:	4b1b      	ldr	r3, [pc, #108]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	4a1a      	ldr	r2, [pc, #104]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008818:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800881a:	4a18      	ldr	r2, [pc, #96]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008820:	4b16      	ldr	r3, [pc, #88]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b01      	cmp	r3, #1
 800882a:	d114      	bne.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7fc fa4c 	bl	8004cc8 <HAL_GetTick>
 8008830:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008832:	e00a      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008834:	f7fc fa48 	bl	8004cc8 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008842:	4293      	cmp	r3, r2
 8008844:	d901      	bls.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e319      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0ee      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008862:	d111      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008872:	400b      	ands	r3, r1
 8008874:	4901      	ldr	r1, [pc, #4]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008876:	4313      	orrs	r3, r2
 8008878:	608b      	str	r3, [r1, #8]
 800887a:	e00b      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800887c:	40023800 	.word	0x40023800
 8008880:	40007000 	.word	0x40007000
 8008884:	0ffffcff 	.word	0x0ffffcff
 8008888:	4baa      	ldr	r3, [pc, #680]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	4aa9      	ldr	r2, [pc, #676]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800888e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008892:	6093      	str	r3, [r2, #8]
 8008894:	4ba7      	ldr	r3, [pc, #668]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088a0:	49a4      	ldr	r1, [pc, #656]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d010      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088b2:	4ba0      	ldr	r3, [pc, #640]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088b8:	4a9e      	ldr	r2, [pc, #632]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80088c2:	4b9c      	ldr	r3, [pc, #624]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	4999      	ldr	r1, [pc, #612]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088e0:	4b94      	ldr	r3, [pc, #592]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ee:	4991      	ldr	r1, [pc, #580]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008902:	4b8c      	ldr	r3, [pc, #560]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008910:	4988      	ldr	r1, [pc, #544]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008912:	4313      	orrs	r3, r2
 8008914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008924:	4b83      	ldr	r3, [pc, #524]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008932:	4980      	ldr	r1, [pc, #512]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008946:	4b7b      	ldr	r3, [pc, #492]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008954:	4977      	ldr	r1, [pc, #476]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008956:	4313      	orrs	r3, r2
 8008958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00a      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008968:	4b72      	ldr	r3, [pc, #456]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896e:	f023 0203 	bic.w	r2, r3, #3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	496f      	ldr	r1, [pc, #444]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008978:	4313      	orrs	r3, r2
 800897a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800898a:	4b6a      	ldr	r3, [pc, #424]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008990:	f023 020c 	bic.w	r2, r3, #12
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008998:	4966      	ldr	r1, [pc, #408]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089ac:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ba:	495e      	ldr	r1, [pc, #376]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089ce:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	4955      	ldr	r1, [pc, #340]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80089f0:	4b50      	ldr	r3, [pc, #320]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fe:	494d      	ldr	r1, [pc, #308]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008a12:	4b48      	ldr	r3, [pc, #288]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a20:	4944      	ldr	r1, [pc, #272]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008a34:	4b3f      	ldr	r3, [pc, #252]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a42:	493c      	ldr	r1, [pc, #240]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008a56:	4b37      	ldr	r3, [pc, #220]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a64:	4933      	ldr	r1, [pc, #204]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00a      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a78:	4b2e      	ldr	r3, [pc, #184]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a86:	492b      	ldr	r1, [pc, #172]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d011      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a9a:	4b26      	ldr	r3, [pc, #152]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa8:	4922      	ldr	r1, [pc, #136]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ab8:	d101      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008aca:	2301      	movs	r3, #1
 8008acc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ada:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae8:	4912      	ldr	r1, [pc, #72]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008afc:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b0c:	4909      	ldr	r1, [pc, #36]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d006      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80d9 	beq.w	8008cda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b28:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a01      	ldr	r2, [pc, #4]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b32:	e001      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008b34:	40023800 	.word	0x40023800
 8008b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b3a:	f7fc f8c5 	bl	8004cc8 <HAL_GetTick>
 8008b3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b40:	e008      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b42:	f7fc f8c1 	bl	8004cc8 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b64      	cmp	r3, #100	; 0x64
 8008b4e:	d901      	bls.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e194      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b54:	4b6c      	ldr	r3, [pc, #432]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f0      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d021      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11d      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008b74:	4b64      	ldr	r3, [pc, #400]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7a:	0c1b      	lsrs	r3, r3, #16
 8008b7c:	f003 0303 	and.w	r3, r3, #3
 8008b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b82:	4b61      	ldr	r3, [pc, #388]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b88:	0e1b      	lsrs	r3, r3, #24
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	019a      	lsls	r2, r3, #6
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	041b      	lsls	r3, r3, #16
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	061b      	lsls	r3, r3, #24
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	071b      	lsls	r3, r3, #28
 8008ba8:	4957      	ldr	r1, [pc, #348]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d004      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc4:	d00a      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d02e      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bda:	d129      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008bdc:	4b4a      	ldr	r3, [pc, #296]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008be2:	0c1b      	lsrs	r3, r3, #16
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008bea:	4b47      	ldr	r3, [pc, #284]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf0:	0f1b      	lsrs	r3, r3, #28
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	019a      	lsls	r2, r3, #6
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	041b      	lsls	r3, r3, #16
 8008c02:	431a      	orrs	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	061b      	lsls	r3, r3, #24
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	071b      	lsls	r3, r3, #28
 8008c10:	493d      	ldr	r1, [pc, #244]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c18:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c1e:	f023 021f 	bic.w	r2, r3, #31
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4937      	ldr	r1, [pc, #220]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01d      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c3c:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c42:	0e1b      	lsrs	r3, r3, #24
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c50:	0f1b      	lsrs	r3, r3, #28
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	019a      	lsls	r2, r3, #6
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	431a      	orrs	r2, r3
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	061b      	lsls	r3, r3, #24
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	071b      	lsls	r3, r3, #28
 8008c70:	4925      	ldr	r1, [pc, #148]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d011      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	019a      	lsls	r2, r3, #6
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	041b      	lsls	r3, r3, #16
 8008c90:	431a      	orrs	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	061b      	lsls	r3, r3, #24
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	071b      	lsls	r3, r3, #28
 8008ca0:	4919      	ldr	r1, [pc, #100]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ca8:	4b17      	ldr	r3, [pc, #92]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a16      	ldr	r2, [pc, #88]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb4:	f7fc f808 	bl	8004cc8 <HAL_GetTick>
 8008cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cba:	e008      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008cbc:	f7fc f804 	bl	8004cc8 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b64      	cmp	r3, #100	; 0x64
 8008cc8:	d901      	bls.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e0d7      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cce:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f0      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	f040 80cd 	bne.w	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a08      	ldr	r2, [pc, #32]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cee:	f7fb ffeb 	bl	8004cc8 <HAL_GetTick>
 8008cf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008cf4:	e00a      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008cf6:	f7fb ffe7 	bl	8004cc8 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b64      	cmp	r3, #100	; 0x64
 8008d02:	d903      	bls.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e0ba      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008d08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d0c:	4b5e      	ldr	r3, [pc, #376]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d18:	d0ed      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d02e      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d12a      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d42:	4b51      	ldr	r3, [pc, #324]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d48:	0c1b      	lsrs	r3, r3, #16
 8008d4a:	f003 0303 	and.w	r3, r3, #3
 8008d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008d50:	4b4d      	ldr	r3, [pc, #308]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d56:	0f1b      	lsrs	r3, r3, #28
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	019a      	lsls	r2, r3, #6
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	041b      	lsls	r3, r3, #16
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	061b      	lsls	r3, r3, #24
 8008d70:	431a      	orrs	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	071b      	lsls	r3, r3, #28
 8008d76:	4944      	ldr	r1, [pc, #272]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008d7e:	4b42      	ldr	r3, [pc, #264]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	493d      	ldr	r1, [pc, #244]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d022      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dac:	d11d      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008dae:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db4:	0e1b      	lsrs	r3, r3, #24
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008dbc:	4b32      	ldr	r3, [pc, #200]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc2:	0f1b      	lsrs	r3, r3, #28
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	019a      	lsls	r2, r3, #6
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	071b      	lsls	r3, r3, #28
 8008de2:	4929      	ldr	r1, [pc, #164]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0308 	and.w	r3, r3, #8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d028      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008df6:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfc:	0e1b      	lsrs	r3, r3, #24
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008e04:	4b20      	ldr	r3, [pc, #128]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0a:	0c1b      	lsrs	r3, r3, #16
 8008e0c:	f003 0303 	and.w	r3, r3, #3
 8008e10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	019a      	lsls	r2, r3, #6
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	041b      	lsls	r3, r3, #16
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	061b      	lsls	r3, r3, #24
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	071b      	lsls	r3, r3, #28
 8008e2a:	4917      	ldr	r1, [pc, #92]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	4911      	ldr	r1, [pc, #68]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a0e      	ldr	r2, [pc, #56]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e54:	f7fb ff38 	bl	8004cc8 <HAL_GetTick>
 8008e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e5c:	f7fb ff34 	bl	8004cc8 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b64      	cmp	r3, #100	; 0x64
 8008e68:	d901      	bls.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e007      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e6e:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e7a:	d1ef      	bne.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	40023800 	.word	0x40023800

08008e8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e071      	b.n	8008f86 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7f5b      	ldrb	r3, [r3, #29]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d105      	bne.n	8008eb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7f9 fb36 	bl	8002524 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b10      	cmp	r3, #16
 8008eca:	d053      	beq.n	8008f74 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	22ca      	movs	r2, #202	; 0xca
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2253      	movs	r2, #83	; 0x53
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fb77 	bl	80095d0 <RTC_EnterInitMode>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d12a      	bne.n	8008f42 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6899      	ldr	r1, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4b26      	ldr	r3, [pc, #152]	; (8008f90 <HAL_RTC_Init+0x104>)
 8008ef8:	400b      	ands	r3, r1
 8008efa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6899      	ldr	r1, [r3, #8]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68d2      	ldr	r2, [r2, #12]
 8008f22:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6919      	ldr	r1, [r3, #16]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	041a      	lsls	r2, r3, #16
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fb80 	bl	800963e <RTC_ExitInitMode>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d110      	bne.n	8008f6a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0208 	bic.w	r2, r2, #8
 8008f56:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699a      	ldr	r2, [r3, #24]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	22ff      	movs	r2, #255	; 0xff
 8008f70:	625a      	str	r2, [r3, #36]	; 0x24
 8008f72:	e001      	b.n	8008f78 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d102      	bne.n	8008f84 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	ff8fffbf 	.word	0xff8fffbf

08008f94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	7f1b      	ldrb	r3, [r3, #28]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_RTC_SetTime+0x1c>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e085      	b.n	80090bc <HAL_RTC_SetTime+0x128>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d126      	bne.n	8009010 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fb54 	bl	8009688 <RTC_ByteToBcd2>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb4d 	bl	8009688 <RTC_ByteToBcd2>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ff2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	789b      	ldrb	r3, [r3, #2]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fb45 	bl	8009688 <RTC_ByteToBcd2>
 8008ffe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009000:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	78db      	ldrb	r3, [r3, #3]
 8009008:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	e018      	b.n	8009042 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009030:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009036:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	78db      	ldrb	r3, [r3, #3]
 800903c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	22ca      	movs	r2, #202	; 0xca
 8009048:	625a      	str	r2, [r3, #36]	; 0x24
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2253      	movs	r2, #83	; 0x53
 8009050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fabc 	bl	80095d0 <RTC_EnterInitMode>
 8009058:	4603      	mov	r3, r0
 800905a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800905c:	7cfb      	ldrb	r3, [r7, #19]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d11e      	bne.n	80090a0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	6979      	ldr	r1, [r7, #20]
 8009068:	4b16      	ldr	r3, [pc, #88]	; (80090c4 <HAL_RTC_SetTime+0x130>)
 800906a:	400b      	ands	r3, r1
 800906c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800907c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6899      	ldr	r1, [r3, #8]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	431a      	orrs	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 fad1 	bl	800963e <RTC_ExitInitMode>
 800909c:	4603      	mov	r3, r0
 800909e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80090a0:	7cfb      	ldrb	r3, [r7, #19]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	22ff      	movs	r2, #255	; 0xff
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	771a      	strb	r2, [r3, #28]

  return status;
 80090ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd90      	pop	{r4, r7, pc}
 80090c4:	007f7f7f 	.word	0x007f7f7f

080090c8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b22      	ldr	r3, [pc, #136]	; (8009180 <HAL_RTC_GetTime+0xb8>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	0c1b      	lsrs	r3, r3, #16
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009106:	b2da      	uxtb	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009116:	b2da      	uxtb	r2, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009124:	b2da      	uxtb	r2, r3
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	0d9b      	lsrs	r3, r3, #22
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	b2da      	uxtb	r2, r3
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d11a      	bne.n	8009176 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fabd 	bl	80096c4 <RTC_Bcd2ToByte>
 800914a:	4603      	mov	r3, r0
 800914c:	461a      	mov	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fab4 	bl	80096c4 <RTC_Bcd2ToByte>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	789b      	ldrb	r3, [r3, #2]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 faab 	bl	80096c4 <RTC_Bcd2ToByte>
 800916e:	4603      	mov	r3, r0
 8009170:	461a      	mov	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	007f7f7f 	.word	0x007f7f7f

08009184 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009184:	b590      	push	{r4, r7, lr}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	7f1b      	ldrb	r3, [r3, #28]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_RTC_SetDate+0x1c>
 800919c:	2302      	movs	r3, #2
 800919e:	e06f      	b.n	8009280 <HAL_RTC_SetDate+0xfc>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2202      	movs	r2, #2
 80091aa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10e      	bne.n	80091d0 <HAL_RTC_SetDate+0x4c>
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d008      	beq.n	80091d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	785b      	ldrb	r3, [r3, #1]
 80091c2:	f023 0310 	bic.w	r3, r3, #16
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	330a      	adds	r3, #10
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d11c      	bne.n	8009210 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	78db      	ldrb	r3, [r3, #3]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fa54 	bl	8009688 <RTC_ByteToBcd2>
 80091e0:	4603      	mov	r3, r0
 80091e2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fa4d 	bl	8009688 <RTC_ByteToBcd2>
 80091ee:	4603      	mov	r3, r0
 80091f0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091f2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	789b      	ldrb	r3, [r3, #2]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fa45 	bl	8009688 <RTC_ByteToBcd2>
 80091fe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009200:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800920a:	4313      	orrs	r3, r2
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	e00e      	b.n	800922e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	78db      	ldrb	r3, [r3, #3]
 8009214:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	785b      	ldrb	r3, [r3, #1]
 800921a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800921c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009222:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	22ca      	movs	r2, #202	; 0xca
 8009234:	625a      	str	r2, [r3, #36]	; 0x24
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2253      	movs	r2, #83	; 0x53
 800923c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 f9c6 	bl	80095d0 <RTC_EnterInitMode>
 8009244:	4603      	mov	r3, r0
 8009246:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009248:	7cfb      	ldrb	r3, [r7, #19]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	6979      	ldr	r1, [r7, #20]
 8009254:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <HAL_RTC_SetDate+0x104>)
 8009256:	400b      	ands	r3, r1
 8009258:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f9ef 	bl	800963e <RTC_ExitInitMode>
 8009260:	4603      	mov	r3, r0
 8009262:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009264:	7cfb      	ldrb	r3, [r7, #19]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	771a      	strb	r2, [r3, #28]

  return status;
 800927e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009280:	4618      	mov	r0, r3
 8009282:	371c      	adds	r7, #28
 8009284:	46bd      	mov	sp, r7
 8009286:	bd90      	pop	{r4, r7, pc}
 8009288:	00ffff3f 	.word	0x00ffff3f

0800928c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	4b21      	ldr	r3, [pc, #132]	; (8009328 <HAL_RTC_GetDate+0x9c>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	0a1b      	lsrs	r3, r3, #8
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 031f 	and.w	r3, r3, #31
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	0b5b      	lsrs	r3, r3, #13
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d11a      	bne.n	800931c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	78db      	ldrb	r3, [r3, #3]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f9ea 	bl	80096c4 <RTC_Bcd2ToByte>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f9e1 	bl	80096c4 <RTC_Bcd2ToByte>
 8009302:	4603      	mov	r3, r0
 8009304:	461a      	mov	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	789b      	ldrb	r3, [r3, #2]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f9d8 	bl	80096c4 <RTC_Bcd2ToByte>
 8009314:	4603      	mov	r3, r0
 8009316:	461a      	mov	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	00ffff3f 	.word	0x00ffff3f

0800932c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b089      	sub	sp, #36	; 0x24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	7f1b      	ldrb	r3, [r3, #28]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_RTC_SetAlarm+0x24>
 800934c:	2302      	movs	r3, #2
 800934e:	e113      	b.n	8009578 <HAL_RTC_SetAlarm+0x24c>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2202      	movs	r2, #2
 800935a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d137      	bne.n	80093d2 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f984 	bl	8009688 <RTC_ByteToBcd2>
 8009380:	4603      	mov	r3, r0
 8009382:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f97d 	bl	8009688 <RTC_ByteToBcd2>
 800938e:	4603      	mov	r3, r0
 8009390:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009392:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	789b      	ldrb	r3, [r3, #2]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 f975 	bl	8009688 <RTC_ByteToBcd2>
 800939e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80093a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	78db      	ldrb	r3, [r3, #3]
 80093a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80093aa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f967 	bl	8009688 <RTC_ByteToBcd2>
 80093ba:	4603      	mov	r3, r0
 80093bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80093be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80093cc:	4313      	orrs	r3, r2
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	e023      	b.n	800941a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2200      	movs	r2, #0
 80093e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093f2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	78db      	ldrb	r3, [r3, #3]
 80093fe:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009400:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009408:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800940a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009410:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009416:	4313      	orrs	r3, r2
 8009418:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	22ca      	movs	r2, #202	; 0xca
 800942c:	625a      	str	r2, [r3, #36]	; 0x24
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2253      	movs	r2, #83	; 0x53
 8009434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800943e:	d148      	bne.n	80094d2 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800944e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800945e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009470:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009472:	f7fb fc29 	bl	8004cc8 <HAL_GetTick>
 8009476:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009478:	e013      	b.n	80094a2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800947a:	f7fb fc25 	bl	8004cc8 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009488:	d90b      	bls.n	80094a2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	22ff      	movs	r2, #255	; 0xff
 8009490:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2203      	movs	r2, #3
 8009496:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e06a      	b.n	8009578 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0e4      	beq.n	800947a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094ce:	609a      	str	r2, [r3, #8]
 80094d0:	e047      	b.n	8009562 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094e0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094f0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009502:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009504:	f7fb fbe0 	bl	8004cc8 <HAL_GetTick>
 8009508:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800950a:	e013      	b.n	8009534 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800950c:	f7fb fbdc 	bl	8004cc8 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800951a:	d90b      	bls.n	8009534 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	22ff      	movs	r2, #255	; 0xff
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2203      	movs	r2, #3
 8009528:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e021      	b.n	8009578 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0e4      	beq.n	800950c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009560:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	22ff      	movs	r2, #255	; 0xff
 8009568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3724      	adds	r7, #36	; 0x24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}

08009580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800959a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800959c:	f7fb fb94 	bl	8004cc8 <HAL_GetTick>
 80095a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095a2:	e009      	b.n	80095b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095a4:	f7fb fb90 	bl	8004cc8 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095b2:	d901      	bls.n	80095b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e007      	b.n	80095c8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0ee      	beq.n	80095a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d122      	bne.n	8009634 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095fe:	f7fb fb63 	bl	8004cc8 <HAL_GetTick>
 8009602:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009604:	e00c      	b.n	8009620 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009606:	f7fb fb5f 	bl	8004cc8 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009614:	d904      	bls.n	8009620 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2204      	movs	r2, #4
 800961a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <RTC_EnterInitMode+0x64>
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d1e8      	bne.n	8009606 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009658:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff ff89 	bl	8009580 <HAL_RTC_WaitForSynchro>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009696:	e005      	b.n	80096a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	3b0a      	subs	r3, #10
 80096a2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	d8f6      	bhi.n	8009698 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	b2db      	uxtb	r3, r3
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	091b      	lsrs	r3, r3, #4
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	f003 030f 	and.w	r3, r3, #15
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	4413      	add	r3, r2
 80096f2:	b2db      	uxtb	r3, r3
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	7f1b      	ldrb	r3, [r3, #28]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d101      	bne.n	800971c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009718:	2302      	movs	r3, #2
 800971a:	e050      	b.n	80097be <HAL_RTCEx_SetTimeStamp+0xbe>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2202      	movs	r2, #2
 8009726:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0206 	bic.w	r2, r2, #6
 8009736:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	430a      	orrs	r2, r1
 8009746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	4b1f      	ldr	r3, [pc, #124]	; (80097cc <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009750:	4013      	ands	r3, r2
 8009752:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	22ca      	movs	r2, #202	; 0xca
 8009762:	625a      	str	r2, [r3, #36]	; 0x24
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2253      	movs	r2, #83	; 0x53
 800976a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8009784:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	b2da      	uxtb	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8009796:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689a      	ldr	r2, [r3, #8]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097a6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	22ff      	movs	r2, #255	; 0xff
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	fffff7f7 	.word	0xfffff7f7

080097d0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e025      	b.n	8009830 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d106      	bne.n	80097fe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7f7 f997 	bl	8000b2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2202      	movs	r2, #2
 8009802:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3304      	adds	r3, #4
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f001 fb7b 	bl	800af0c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	461a      	mov	r2, r3
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	f001 fbcf 	bl	800afc4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800984a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d101      	bne.n	8009856 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009852:	2302      	movs	r3, #2
 8009854:	e021      	b.n	800989a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d002      	beq.n	8009862 <HAL_SDRAM_SendCommand+0x2a>
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b05      	cmp	r3, #5
 8009860:	d118      	bne.n	8009894 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2202      	movs	r2, #2
 8009866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	4618      	mov	r0, r3
 8009874:	f001 fc10 	bl	800b098 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d104      	bne.n	800988a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2205      	movs	r2, #5
 8009884:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009888:	e006      	b.n	8009898 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009892:	e001      	b.n	8009898 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e000      	b.n	800989a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d101      	bne.n	80098bc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80098b8:	2302      	movs	r3, #2
 80098ba:	e016      	b.n	80098ea <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d10f      	bne.n	80098e8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f001 fc02 	bl	800b0e0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e000      	b.n	80098ea <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e09d      	b.n	8009a40 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	2b00      	cmp	r3, #0
 800990a:	d108      	bne.n	800991e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009914:	d009      	beq.n	800992a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	61da      	str	r2, [r3, #28]
 800991c:	e005      	b.n	800992a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7f8 fe59 	bl	80025fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009960:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800996a:	d902      	bls.n	8009972 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	e002      	b.n	8009978 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009976:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009980:	d007      	beq.n	8009992 <HAL_SPI_Init+0xa0>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800998a:	d002      	beq.n	8009992 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d4:	ea42 0103 	orr.w	r1, r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	f003 0204 	and.w	r2, r3, #4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	431a      	orrs	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a00:	f003 0308 	and.w	r3, r3, #8
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009a0e:	ea42 0103 	orr.w	r1, r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69da      	ldr	r2, [r3, #28]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e049      	b.n	8009aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fa feaa 	bl	80047c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f000 fac0 	bl	800a00c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d001      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e054      	b.n	8009bba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0201 	orr.w	r2, r2, #1
 8009b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a26      	ldr	r2, [pc, #152]	; (8009bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d022      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b3a:	d01d      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a22      	ldr	r2, [pc, #136]	; (8009bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d018      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a21      	ldr	r2, [pc, #132]	; (8009bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d013      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a1f      	ldr	r2, [pc, #124]	; (8009bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d00e      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a1e      	ldr	r2, [pc, #120]	; (8009bd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d009      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a1c      	ldr	r2, [pc, #112]	; (8009bdc <HAL_TIM_Base_Start_IT+0xe4>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d004      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x80>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d115      	bne.n	8009ba4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <HAL_TIM_Base_Start_IT+0xec>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b06      	cmp	r3, #6
 8009b88:	d015      	beq.n	8009bb6 <HAL_TIM_Base_Start_IT+0xbe>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b90:	d011      	beq.n	8009bb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0201 	orr.w	r2, r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba2:	e008      	b.n	8009bb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	e000      	b.n	8009bb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40010000 	.word	0x40010000
 8009bcc:	40000400 	.word	0x40000400
 8009bd0:	40000800 	.word	0x40000800
 8009bd4:	40000c00 	.word	0x40000c00
 8009bd8:	40010400 	.word	0x40010400
 8009bdc:	40014000 	.word	0x40014000
 8009be0:	40001800 	.word	0x40001800
 8009be4:	00010007 	.word	0x00010007

08009be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d122      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d11b      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f06f 0202 	mvn.w	r2, #2
 8009c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	f003 0303 	and.w	r3, r3, #3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f9d0 	bl	8009fd0 <HAL_TIM_IC_CaptureCallback>
 8009c30:	e005      	b.n	8009c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f9c2 	bl	8009fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f9d3 	bl	8009fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0304 	and.w	r3, r3, #4
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d122      	bne.n	8009c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d11b      	bne.n	8009c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0204 	mvn.w	r2, #4
 8009c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f9a6 	bl	8009fd0 <HAL_TIM_IC_CaptureCallback>
 8009c84:	e005      	b.n	8009c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f998 	bl	8009fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f9a9 	bl	8009fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f003 0308 	and.w	r3, r3, #8
 8009ca2:	2b08      	cmp	r3, #8
 8009ca4:	d122      	bne.n	8009cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f003 0308 	and.w	r3, r3, #8
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d11b      	bne.n	8009cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f06f 0208 	mvn.w	r2, #8
 8009cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f97c 	bl	8009fd0 <HAL_TIM_IC_CaptureCallback>
 8009cd8:	e005      	b.n	8009ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f96e 	bl	8009fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f97f 	bl	8009fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b10      	cmp	r3, #16
 8009cf8:	d122      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	2b10      	cmp	r3, #16
 8009d06:	d11b      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0210 	mvn.w	r2, #16
 8009d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2208      	movs	r2, #8
 8009d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f952 	bl	8009fd0 <HAL_TIM_IC_CaptureCallback>
 8009d2c:	e005      	b.n	8009d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f944 	bl	8009fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f955 	bl	8009fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d10e      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d107      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0201 	mvn.w	r2, #1
 8009d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7f8 fb20 	bl	80023ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d76:	2b80      	cmp	r3, #128	; 0x80
 8009d78:	d10e      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d84:	2b80      	cmp	r3, #128	; 0x80
 8009d86:	d107      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fb0c 	bl	800a3b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da6:	d10e      	bne.n	8009dc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db2:	2b80      	cmp	r3, #128	; 0x80
 8009db4:	d107      	bne.n	8009dc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 faff 	bl	800a3c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd0:	2b40      	cmp	r3, #64	; 0x40
 8009dd2:	d10e      	bne.n	8009df2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d107      	bne.n	8009df2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f903 	bl	8009ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f003 0320 	and.w	r3, r3, #32
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d10e      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d107      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f06f 0220 	mvn.w	r2, #32
 8009e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fabf 	bl	800a39c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d101      	bne.n	8009e44 <HAL_TIM_ConfigClockSource+0x1c>
 8009e40:	2302      	movs	r3, #2
 8009e42:	e0b4      	b.n	8009fae <HAL_TIM_ConfigClockSource+0x186>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	4b56      	ldr	r3, [pc, #344]	; (8009fb8 <HAL_TIM_ConfigClockSource+0x190>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7c:	d03e      	beq.n	8009efc <HAL_TIM_ConfigClockSource+0xd4>
 8009e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e82:	f200 8087 	bhi.w	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e8a:	f000 8086 	beq.w	8009f9a <HAL_TIM_ConfigClockSource+0x172>
 8009e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e92:	d87f      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009e94:	2b70      	cmp	r3, #112	; 0x70
 8009e96:	d01a      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0xa6>
 8009e98:	2b70      	cmp	r3, #112	; 0x70
 8009e9a:	d87b      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009e9c:	2b60      	cmp	r3, #96	; 0x60
 8009e9e:	d050      	beq.n	8009f42 <HAL_TIM_ConfigClockSource+0x11a>
 8009ea0:	2b60      	cmp	r3, #96	; 0x60
 8009ea2:	d877      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009ea4:	2b50      	cmp	r3, #80	; 0x50
 8009ea6:	d03c      	beq.n	8009f22 <HAL_TIM_ConfigClockSource+0xfa>
 8009ea8:	2b50      	cmp	r3, #80	; 0x50
 8009eaa:	d873      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009eac:	2b40      	cmp	r3, #64	; 0x40
 8009eae:	d058      	beq.n	8009f62 <HAL_TIM_ConfigClockSource+0x13a>
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d86f      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009eb4:	2b30      	cmp	r3, #48	; 0x30
 8009eb6:	d064      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0x15a>
 8009eb8:	2b30      	cmp	r3, #48	; 0x30
 8009eba:	d86b      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	d060      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0x15a>
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d867      	bhi.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d05c      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0x15a>
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d05a      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0x15a>
 8009ecc:	e062      	b.n	8009f94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6899      	ldr	r1, [r3, #8]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f000 f9af 	bl	800a240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	609a      	str	r2, [r3, #8]
      break;
 8009efa:	e04f      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	6899      	ldr	r1, [r3, #8]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f000 f998 	bl	800a240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f1e:	609a      	str	r2, [r3, #8]
      break;
 8009f20:	e03c      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6859      	ldr	r1, [r3, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f000 f90c 	bl	800a14c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2150      	movs	r1, #80	; 0x50
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 f965 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009f40:	e02c      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	6859      	ldr	r1, [r3, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f000 f92b 	bl	800a1aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2160      	movs	r1, #96	; 0x60
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 f955 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009f60:	e01c      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	6859      	ldr	r1, [r3, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f000 f8ec 	bl	800a14c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2140      	movs	r1, #64	; 0x40
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 f945 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009f80:	e00c      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f000 f93c 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009f92:	e003      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	73fb      	strb	r3, [r7, #15]
      break;
 8009f98:	e000      	b.n	8009f9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	fffeff88 	.word	0xfffeff88

08009fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a40      	ldr	r2, [pc, #256]	; (800a120 <TIM_Base_SetConfig+0x114>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d013      	beq.n	800a04c <TIM_Base_SetConfig+0x40>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02a:	d00f      	beq.n	800a04c <TIM_Base_SetConfig+0x40>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a3d      	ldr	r2, [pc, #244]	; (800a124 <TIM_Base_SetConfig+0x118>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00b      	beq.n	800a04c <TIM_Base_SetConfig+0x40>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a3c      	ldr	r2, [pc, #240]	; (800a128 <TIM_Base_SetConfig+0x11c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d007      	beq.n	800a04c <TIM_Base_SetConfig+0x40>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a3b      	ldr	r2, [pc, #236]	; (800a12c <TIM_Base_SetConfig+0x120>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d003      	beq.n	800a04c <TIM_Base_SetConfig+0x40>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a3a      	ldr	r2, [pc, #232]	; (800a130 <TIM_Base_SetConfig+0x124>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d108      	bne.n	800a05e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a2f      	ldr	r2, [pc, #188]	; (800a120 <TIM_Base_SetConfig+0x114>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d02b      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a06c:	d027      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a2c      	ldr	r2, [pc, #176]	; (800a124 <TIM_Base_SetConfig+0x118>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d023      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a2b      	ldr	r2, [pc, #172]	; (800a128 <TIM_Base_SetConfig+0x11c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d01f      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a2a      	ldr	r2, [pc, #168]	; (800a12c <TIM_Base_SetConfig+0x120>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d01b      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a29      	ldr	r2, [pc, #164]	; (800a130 <TIM_Base_SetConfig+0x124>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d017      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a28      	ldr	r2, [pc, #160]	; (800a134 <TIM_Base_SetConfig+0x128>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d013      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a27      	ldr	r2, [pc, #156]	; (800a138 <TIM_Base_SetConfig+0x12c>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d00f      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a26      	ldr	r2, [pc, #152]	; (800a13c <TIM_Base_SetConfig+0x130>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d00b      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a25      	ldr	r2, [pc, #148]	; (800a140 <TIM_Base_SetConfig+0x134>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d007      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a24      	ldr	r2, [pc, #144]	; (800a144 <TIM_Base_SetConfig+0x138>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d003      	beq.n	800a0be <TIM_Base_SetConfig+0xb2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a23      	ldr	r2, [pc, #140]	; (800a148 <TIM_Base_SetConfig+0x13c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d108      	bne.n	800a0d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a0a      	ldr	r2, [pc, #40]	; (800a120 <TIM_Base_SetConfig+0x114>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d003      	beq.n	800a104 <TIM_Base_SetConfig+0xf8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a0c      	ldr	r2, [pc, #48]	; (800a130 <TIM_Base_SetConfig+0x124>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d103      	bne.n	800a10c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	691a      	ldr	r2, [r3, #16]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	615a      	str	r2, [r3, #20]
}
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	40010000 	.word	0x40010000
 800a124:	40000400 	.word	0x40000400
 800a128:	40000800 	.word	0x40000800
 800a12c:	40000c00 	.word	0x40000c00
 800a130:	40010400 	.word	0x40010400
 800a134:	40014000 	.word	0x40014000
 800a138:	40014400 	.word	0x40014400
 800a13c:	40014800 	.word	0x40014800
 800a140:	40001800 	.word	0x40001800
 800a144:	40001c00 	.word	0x40001c00
 800a148:	40002000 	.word	0x40002000

0800a14c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	f023 0201 	bic.w	r2, r3, #1
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 030a 	bic.w	r3, r3, #10
 800a188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b087      	sub	sp, #28
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f023 0210 	bic.w	r2, r3, #16
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	031b      	lsls	r3, r3, #12
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	621a      	str	r2, [r3, #32]
}
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4313      	orrs	r3, r2
 800a228:	f043 0307 	orr.w	r3, r3, #7
 800a22c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	609a      	str	r2, [r3, #8]
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a240:	b480      	push	{r7}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a25a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	021a      	lsls	r2, r3, #8
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	431a      	orrs	r2, r3
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4313      	orrs	r3, r2
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	609a      	str	r2, [r3, #8]
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a294:	2302      	movs	r3, #2
 800a296:	e06d      	b.n	800a374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a30      	ldr	r2, [pc, #192]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d004      	beq.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a2f      	ldr	r2, [pc, #188]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d108      	bne.n	800a2de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a2d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a20      	ldr	r2, [pc, #128]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d022      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a30a:	d01d      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a1d      	ldr	r2, [pc, #116]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d018      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a1c      	ldr	r2, [pc, #112]	; (800a38c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d013      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a1a      	ldr	r2, [pc, #104]	; (800a390 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00e      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a15      	ldr	r2, [pc, #84]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d009      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a16      	ldr	r2, [pc, #88]	; (800a394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d004      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a15      	ldr	r2, [pc, #84]	; (800a398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d10c      	bne.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a34e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	4313      	orrs	r3, r2
 800a358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	40010000 	.word	0x40010000
 800a384:	40010400 	.word	0x40010400
 800a388:	40000400 	.word	0x40000400
 800a38c:	40000800 	.word	0x40000800
 800a390:	40000c00 	.word	0x40000c00
 800a394:	40014000 	.word	0x40014000
 800a398:	40001800 	.word	0x40001800

0800a39c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e040      	b.n	800a46c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d106      	bne.n	800a400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fa fb0a 	bl	8004a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2224      	movs	r2, #36	; 0x24
 800a404:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f974 	bl	800a704 <UART_SetConfig>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e022      	b.n	800a46c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fbcc 	bl	800abcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0201 	orr.w	r2, r2, #1
 800a462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fc53 	bl	800ad10 <UART_CheckIdleState>
 800a46a:	4603      	mov	r3, r0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	; 0x28
 800a478:	af02      	add	r7, sp, #8
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	4613      	mov	r3, r2
 800a482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a488:	2b20      	cmp	r3, #32
 800a48a:	d171      	bne.n	800a570 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <HAL_UART_Transmit+0x24>
 800a492:	88fb      	ldrh	r3, [r7, #6]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e06a      	b.n	800a572 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2221      	movs	r2, #33	; 0x21
 800a4a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4aa:	f7fa fc0d 	bl	8004cc8 <HAL_GetTick>
 800a4ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	88fa      	ldrh	r2, [r7, #6]
 800a4b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	88fa      	ldrh	r2, [r7, #6]
 800a4bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c8:	d108      	bne.n	800a4dc <HAL_UART_Transmit+0x68>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d104      	bne.n	800a4dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	61bb      	str	r3, [r7, #24]
 800a4da:	e003      	b.n	800a4e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a4e4:	e02c      	b.n	800a540 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	2180      	movs	r1, #128	; 0x80
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 fc44 	bl	800ad7e <UART_WaitOnFlagUntilTimeout>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e038      	b.n	800a572 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a514:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	3302      	adds	r3, #2
 800a51a:	61bb      	str	r3, [r7, #24]
 800a51c:	e007      	b.n	800a52e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	781a      	ldrb	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	3301      	adds	r3, #1
 800a52c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1cc      	bne.n	800a4e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2200      	movs	r2, #0
 800a554:	2140      	movs	r1, #64	; 0x40
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 fc11 	bl	800ad7e <UART_WaitOnFlagUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e005      	b.n	800a572 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2220      	movs	r2, #32
 800a56a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	e000      	b.n	800a572 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a570:	2302      	movs	r3, #2
  }
}
 800a572:	4618      	mov	r0, r3
 800a574:	3720      	adds	r7, #32
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b08a      	sub	sp, #40	; 0x28
 800a57e:	af02      	add	r7, sp, #8
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	603b      	str	r3, [r7, #0]
 800a586:	4613      	mov	r3, r2
 800a588:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a590:	2b20      	cmp	r3, #32
 800a592:	f040 80b1 	bne.w	800a6f8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <HAL_UART_Receive+0x28>
 800a59c:	88fb      	ldrh	r3, [r7, #6]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e0a9      	b.n	800a6fa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2222      	movs	r2, #34	; 0x22
 800a5b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5bc:	f7fa fb84 	bl	8004cc8 <HAL_GetTick>
 800a5c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	88fa      	ldrh	r2, [r7, #6]
 800a5c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	88fa      	ldrh	r2, [r7, #6]
 800a5ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5da:	d10e      	bne.n	800a5fa <HAL_UART_Receive+0x80>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <HAL_UART_Receive+0x76>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a5ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5ee:	e02d      	b.n	800a64c <HAL_UART_Receive+0xd2>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	22ff      	movs	r2, #255	; 0xff
 800a5f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5f8:	e028      	b.n	800a64c <HAL_UART_Receive+0xd2>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10d      	bne.n	800a61e <HAL_UART_Receive+0xa4>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <HAL_UART_Receive+0x9a>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	22ff      	movs	r2, #255	; 0xff
 800a60e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a612:	e01b      	b.n	800a64c <HAL_UART_Receive+0xd2>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	227f      	movs	r2, #127	; 0x7f
 800a618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a61c:	e016      	b.n	800a64c <HAL_UART_Receive+0xd2>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a626:	d10d      	bne.n	800a644 <HAL_UART_Receive+0xca>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d104      	bne.n	800a63a <HAL_UART_Receive+0xc0>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	227f      	movs	r2, #127	; 0x7f
 800a634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a638:	e008      	b.n	800a64c <HAL_UART_Receive+0xd2>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	223f      	movs	r2, #63	; 0x3f
 800a63e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a642:	e003      	b.n	800a64c <HAL_UART_Receive+0xd2>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a652:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d108      	bne.n	800a670 <HAL_UART_Receive+0xf6>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	61bb      	str	r3, [r7, #24]
 800a66e:	e003      	b.n	800a678 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a678:	e032      	b.n	800a6e0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2200      	movs	r2, #0
 800a682:	2120      	movs	r1, #32
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fb7a 	bl	800ad7e <UART_WaitOnFlagUntilTimeout>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e032      	b.n	800a6fa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10c      	bne.n	800a6b4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	8a7b      	ldrh	r3, [r7, #18]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	3302      	adds	r3, #2
 800a6b0:	61bb      	str	r3, [r7, #24]
 800a6b2:	e00c      	b.n	800a6ce <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	8a7b      	ldrh	r3, [r7, #18]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1c6      	bne.n	800a67a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e000      	b.n	800a6fa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800a6f8:	2302      	movs	r3, #2
  }
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3720      	adds	r7, #32
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	4313      	orrs	r3, r2
 800a726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	4ba6      	ldr	r3, [pc, #664]	; (800a9c8 <UART_SetConfig+0x2c4>)
 800a730:	4013      	ands	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	6979      	ldr	r1, [r7, #20]
 800a738:	430b      	orrs	r3, r1
 800a73a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	4313      	orrs	r3, r2
 800a760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	430a      	orrs	r2, r1
 800a774:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a94      	ldr	r2, [pc, #592]	; (800a9cc <UART_SetConfig+0x2c8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d120      	bne.n	800a7c2 <UART_SetConfig+0xbe>
 800a780:	4b93      	ldr	r3, [pc, #588]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d816      	bhi.n	800a7bc <UART_SetConfig+0xb8>
 800a78e:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <UART_SetConfig+0x90>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7a5 	.word	0x0800a7a5
 800a798:	0800a7b1 	.word	0x0800a7b1
 800a79c:	0800a7ab 	.word	0x0800a7ab
 800a7a0:	0800a7b7 	.word	0x0800a7b7
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	77fb      	strb	r3, [r7, #31]
 800a7a8:	e150      	b.n	800aa4c <UART_SetConfig+0x348>
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	77fb      	strb	r3, [r7, #31]
 800a7ae:	e14d      	b.n	800aa4c <UART_SetConfig+0x348>
 800a7b0:	2304      	movs	r3, #4
 800a7b2:	77fb      	strb	r3, [r7, #31]
 800a7b4:	e14a      	b.n	800aa4c <UART_SetConfig+0x348>
 800a7b6:	2308      	movs	r3, #8
 800a7b8:	77fb      	strb	r3, [r7, #31]
 800a7ba:	e147      	b.n	800aa4c <UART_SetConfig+0x348>
 800a7bc:	2310      	movs	r3, #16
 800a7be:	77fb      	strb	r3, [r7, #31]
 800a7c0:	e144      	b.n	800aa4c <UART_SetConfig+0x348>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a83      	ldr	r2, [pc, #524]	; (800a9d4 <UART_SetConfig+0x2d0>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d132      	bne.n	800a832 <UART_SetConfig+0x12e>
 800a7cc:	4b80      	ldr	r3, [pc, #512]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d2:	f003 030c 	and.w	r3, r3, #12
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d828      	bhi.n	800a82c <UART_SetConfig+0x128>
 800a7da:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <UART_SetConfig+0xdc>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a815 	.word	0x0800a815
 800a7e4:	0800a82d 	.word	0x0800a82d
 800a7e8:	0800a82d 	.word	0x0800a82d
 800a7ec:	0800a82d 	.word	0x0800a82d
 800a7f0:	0800a821 	.word	0x0800a821
 800a7f4:	0800a82d 	.word	0x0800a82d
 800a7f8:	0800a82d 	.word	0x0800a82d
 800a7fc:	0800a82d 	.word	0x0800a82d
 800a800:	0800a81b 	.word	0x0800a81b
 800a804:	0800a82d 	.word	0x0800a82d
 800a808:	0800a82d 	.word	0x0800a82d
 800a80c:	0800a82d 	.word	0x0800a82d
 800a810:	0800a827 	.word	0x0800a827
 800a814:	2300      	movs	r3, #0
 800a816:	77fb      	strb	r3, [r7, #31]
 800a818:	e118      	b.n	800aa4c <UART_SetConfig+0x348>
 800a81a:	2302      	movs	r3, #2
 800a81c:	77fb      	strb	r3, [r7, #31]
 800a81e:	e115      	b.n	800aa4c <UART_SetConfig+0x348>
 800a820:	2304      	movs	r3, #4
 800a822:	77fb      	strb	r3, [r7, #31]
 800a824:	e112      	b.n	800aa4c <UART_SetConfig+0x348>
 800a826:	2308      	movs	r3, #8
 800a828:	77fb      	strb	r3, [r7, #31]
 800a82a:	e10f      	b.n	800aa4c <UART_SetConfig+0x348>
 800a82c:	2310      	movs	r3, #16
 800a82e:	77fb      	strb	r3, [r7, #31]
 800a830:	e10c      	b.n	800aa4c <UART_SetConfig+0x348>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a68      	ldr	r2, [pc, #416]	; (800a9d8 <UART_SetConfig+0x2d4>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d120      	bne.n	800a87e <UART_SetConfig+0x17a>
 800a83c:	4b64      	ldr	r3, [pc, #400]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a842:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a846:	2b30      	cmp	r3, #48	; 0x30
 800a848:	d013      	beq.n	800a872 <UART_SetConfig+0x16e>
 800a84a:	2b30      	cmp	r3, #48	; 0x30
 800a84c:	d814      	bhi.n	800a878 <UART_SetConfig+0x174>
 800a84e:	2b20      	cmp	r3, #32
 800a850:	d009      	beq.n	800a866 <UART_SetConfig+0x162>
 800a852:	2b20      	cmp	r3, #32
 800a854:	d810      	bhi.n	800a878 <UART_SetConfig+0x174>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <UART_SetConfig+0x15c>
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d006      	beq.n	800a86c <UART_SetConfig+0x168>
 800a85e:	e00b      	b.n	800a878 <UART_SetConfig+0x174>
 800a860:	2300      	movs	r3, #0
 800a862:	77fb      	strb	r3, [r7, #31]
 800a864:	e0f2      	b.n	800aa4c <UART_SetConfig+0x348>
 800a866:	2302      	movs	r3, #2
 800a868:	77fb      	strb	r3, [r7, #31]
 800a86a:	e0ef      	b.n	800aa4c <UART_SetConfig+0x348>
 800a86c:	2304      	movs	r3, #4
 800a86e:	77fb      	strb	r3, [r7, #31]
 800a870:	e0ec      	b.n	800aa4c <UART_SetConfig+0x348>
 800a872:	2308      	movs	r3, #8
 800a874:	77fb      	strb	r3, [r7, #31]
 800a876:	e0e9      	b.n	800aa4c <UART_SetConfig+0x348>
 800a878:	2310      	movs	r3, #16
 800a87a:	77fb      	strb	r3, [r7, #31]
 800a87c:	e0e6      	b.n	800aa4c <UART_SetConfig+0x348>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a56      	ldr	r2, [pc, #344]	; (800a9dc <UART_SetConfig+0x2d8>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d120      	bne.n	800a8ca <UART_SetConfig+0x1c6>
 800a888:	4b51      	ldr	r3, [pc, #324]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a88e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a892:	2bc0      	cmp	r3, #192	; 0xc0
 800a894:	d013      	beq.n	800a8be <UART_SetConfig+0x1ba>
 800a896:	2bc0      	cmp	r3, #192	; 0xc0
 800a898:	d814      	bhi.n	800a8c4 <UART_SetConfig+0x1c0>
 800a89a:	2b80      	cmp	r3, #128	; 0x80
 800a89c:	d009      	beq.n	800a8b2 <UART_SetConfig+0x1ae>
 800a89e:	2b80      	cmp	r3, #128	; 0x80
 800a8a0:	d810      	bhi.n	800a8c4 <UART_SetConfig+0x1c0>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <UART_SetConfig+0x1a8>
 800a8a6:	2b40      	cmp	r3, #64	; 0x40
 800a8a8:	d006      	beq.n	800a8b8 <UART_SetConfig+0x1b4>
 800a8aa:	e00b      	b.n	800a8c4 <UART_SetConfig+0x1c0>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	77fb      	strb	r3, [r7, #31]
 800a8b0:	e0cc      	b.n	800aa4c <UART_SetConfig+0x348>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	77fb      	strb	r3, [r7, #31]
 800a8b6:	e0c9      	b.n	800aa4c <UART_SetConfig+0x348>
 800a8b8:	2304      	movs	r3, #4
 800a8ba:	77fb      	strb	r3, [r7, #31]
 800a8bc:	e0c6      	b.n	800aa4c <UART_SetConfig+0x348>
 800a8be:	2308      	movs	r3, #8
 800a8c0:	77fb      	strb	r3, [r7, #31]
 800a8c2:	e0c3      	b.n	800aa4c <UART_SetConfig+0x348>
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	77fb      	strb	r3, [r7, #31]
 800a8c8:	e0c0      	b.n	800aa4c <UART_SetConfig+0x348>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a44      	ldr	r2, [pc, #272]	; (800a9e0 <UART_SetConfig+0x2dc>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d125      	bne.n	800a920 <UART_SetConfig+0x21c>
 800a8d4:	4b3e      	ldr	r3, [pc, #248]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8e2:	d017      	beq.n	800a914 <UART_SetConfig+0x210>
 800a8e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8e8:	d817      	bhi.n	800a91a <UART_SetConfig+0x216>
 800a8ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ee:	d00b      	beq.n	800a908 <UART_SetConfig+0x204>
 800a8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8f4:	d811      	bhi.n	800a91a <UART_SetConfig+0x216>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <UART_SetConfig+0x1fe>
 800a8fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fe:	d006      	beq.n	800a90e <UART_SetConfig+0x20a>
 800a900:	e00b      	b.n	800a91a <UART_SetConfig+0x216>
 800a902:	2300      	movs	r3, #0
 800a904:	77fb      	strb	r3, [r7, #31]
 800a906:	e0a1      	b.n	800aa4c <UART_SetConfig+0x348>
 800a908:	2302      	movs	r3, #2
 800a90a:	77fb      	strb	r3, [r7, #31]
 800a90c:	e09e      	b.n	800aa4c <UART_SetConfig+0x348>
 800a90e:	2304      	movs	r3, #4
 800a910:	77fb      	strb	r3, [r7, #31]
 800a912:	e09b      	b.n	800aa4c <UART_SetConfig+0x348>
 800a914:	2308      	movs	r3, #8
 800a916:	77fb      	strb	r3, [r7, #31]
 800a918:	e098      	b.n	800aa4c <UART_SetConfig+0x348>
 800a91a:	2310      	movs	r3, #16
 800a91c:	77fb      	strb	r3, [r7, #31]
 800a91e:	e095      	b.n	800aa4c <UART_SetConfig+0x348>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a2f      	ldr	r2, [pc, #188]	; (800a9e4 <UART_SetConfig+0x2e0>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d125      	bne.n	800a976 <UART_SetConfig+0x272>
 800a92a:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a938:	d017      	beq.n	800a96a <UART_SetConfig+0x266>
 800a93a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a93e:	d817      	bhi.n	800a970 <UART_SetConfig+0x26c>
 800a940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a944:	d00b      	beq.n	800a95e <UART_SetConfig+0x25a>
 800a946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a94a:	d811      	bhi.n	800a970 <UART_SetConfig+0x26c>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <UART_SetConfig+0x254>
 800a950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a954:	d006      	beq.n	800a964 <UART_SetConfig+0x260>
 800a956:	e00b      	b.n	800a970 <UART_SetConfig+0x26c>
 800a958:	2301      	movs	r3, #1
 800a95a:	77fb      	strb	r3, [r7, #31]
 800a95c:	e076      	b.n	800aa4c <UART_SetConfig+0x348>
 800a95e:	2302      	movs	r3, #2
 800a960:	77fb      	strb	r3, [r7, #31]
 800a962:	e073      	b.n	800aa4c <UART_SetConfig+0x348>
 800a964:	2304      	movs	r3, #4
 800a966:	77fb      	strb	r3, [r7, #31]
 800a968:	e070      	b.n	800aa4c <UART_SetConfig+0x348>
 800a96a:	2308      	movs	r3, #8
 800a96c:	77fb      	strb	r3, [r7, #31]
 800a96e:	e06d      	b.n	800aa4c <UART_SetConfig+0x348>
 800a970:	2310      	movs	r3, #16
 800a972:	77fb      	strb	r3, [r7, #31]
 800a974:	e06a      	b.n	800aa4c <UART_SetConfig+0x348>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a1b      	ldr	r2, [pc, #108]	; (800a9e8 <UART_SetConfig+0x2e4>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d138      	bne.n	800a9f2 <UART_SetConfig+0x2ee>
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <UART_SetConfig+0x2cc>)
 800a982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a986:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a98a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a98e:	d017      	beq.n	800a9c0 <UART_SetConfig+0x2bc>
 800a990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a994:	d82a      	bhi.n	800a9ec <UART_SetConfig+0x2e8>
 800a996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a99a:	d00b      	beq.n	800a9b4 <UART_SetConfig+0x2b0>
 800a99c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a0:	d824      	bhi.n	800a9ec <UART_SetConfig+0x2e8>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <UART_SetConfig+0x2aa>
 800a9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9aa:	d006      	beq.n	800a9ba <UART_SetConfig+0x2b6>
 800a9ac:	e01e      	b.n	800a9ec <UART_SetConfig+0x2e8>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	77fb      	strb	r3, [r7, #31]
 800a9b2:	e04b      	b.n	800aa4c <UART_SetConfig+0x348>
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	77fb      	strb	r3, [r7, #31]
 800a9b8:	e048      	b.n	800aa4c <UART_SetConfig+0x348>
 800a9ba:	2304      	movs	r3, #4
 800a9bc:	77fb      	strb	r3, [r7, #31]
 800a9be:	e045      	b.n	800aa4c <UART_SetConfig+0x348>
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	77fb      	strb	r3, [r7, #31]
 800a9c4:	e042      	b.n	800aa4c <UART_SetConfig+0x348>
 800a9c6:	bf00      	nop
 800a9c8:	efff69f3 	.word	0xefff69f3
 800a9cc:	40011000 	.word	0x40011000
 800a9d0:	40023800 	.word	0x40023800
 800a9d4:	40004400 	.word	0x40004400
 800a9d8:	40004800 	.word	0x40004800
 800a9dc:	40004c00 	.word	0x40004c00
 800a9e0:	40005000 	.word	0x40005000
 800a9e4:	40011400 	.word	0x40011400
 800a9e8:	40007800 	.word	0x40007800
 800a9ec:	2310      	movs	r3, #16
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e02c      	b.n	800aa4c <UART_SetConfig+0x348>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a72      	ldr	r2, [pc, #456]	; (800abc0 <UART_SetConfig+0x4bc>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d125      	bne.n	800aa48 <UART_SetConfig+0x344>
 800a9fc:	4b71      	ldr	r3, [pc, #452]	; (800abc4 <UART_SetConfig+0x4c0>)
 800a9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa0a:	d017      	beq.n	800aa3c <UART_SetConfig+0x338>
 800aa0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa10:	d817      	bhi.n	800aa42 <UART_SetConfig+0x33e>
 800aa12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa16:	d00b      	beq.n	800aa30 <UART_SetConfig+0x32c>
 800aa18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa1c:	d811      	bhi.n	800aa42 <UART_SetConfig+0x33e>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <UART_SetConfig+0x326>
 800aa22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa26:	d006      	beq.n	800aa36 <UART_SetConfig+0x332>
 800aa28:	e00b      	b.n	800aa42 <UART_SetConfig+0x33e>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e00d      	b.n	800aa4c <UART_SetConfig+0x348>
 800aa30:	2302      	movs	r3, #2
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	e00a      	b.n	800aa4c <UART_SetConfig+0x348>
 800aa36:	2304      	movs	r3, #4
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e007      	b.n	800aa4c <UART_SetConfig+0x348>
 800aa3c:	2308      	movs	r3, #8
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	e004      	b.n	800aa4c <UART_SetConfig+0x348>
 800aa42:	2310      	movs	r3, #16
 800aa44:	77fb      	strb	r3, [r7, #31]
 800aa46:	e001      	b.n	800aa4c <UART_SetConfig+0x348>
 800aa48:	2310      	movs	r3, #16
 800aa4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa54:	d15b      	bne.n	800ab0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d828      	bhi.n	800aaae <UART_SetConfig+0x3aa>
 800aa5c:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <UART_SetConfig+0x360>)
 800aa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa62:	bf00      	nop
 800aa64:	0800aa89 	.word	0x0800aa89
 800aa68:	0800aa91 	.word	0x0800aa91
 800aa6c:	0800aa99 	.word	0x0800aa99
 800aa70:	0800aaaf 	.word	0x0800aaaf
 800aa74:	0800aa9f 	.word	0x0800aa9f
 800aa78:	0800aaaf 	.word	0x0800aaaf
 800aa7c:	0800aaaf 	.word	0x0800aaaf
 800aa80:	0800aaaf 	.word	0x0800aaaf
 800aa84:	0800aaa7 	.word	0x0800aaa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa88:	f7fd fdb6 	bl	80085f8 <HAL_RCC_GetPCLK1Freq>
 800aa8c:	61b8      	str	r0, [r7, #24]
        break;
 800aa8e:	e013      	b.n	800aab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa90:	f7fd fdc6 	bl	8008620 <HAL_RCC_GetPCLK2Freq>
 800aa94:	61b8      	str	r0, [r7, #24]
        break;
 800aa96:	e00f      	b.n	800aab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa98:	4b4b      	ldr	r3, [pc, #300]	; (800abc8 <UART_SetConfig+0x4c4>)
 800aa9a:	61bb      	str	r3, [r7, #24]
        break;
 800aa9c:	e00c      	b.n	800aab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa9e:	f7fd fcd9 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 800aaa2:	61b8      	str	r0, [r7, #24]
        break;
 800aaa4:	e008      	b.n	800aab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaaa:	61bb      	str	r3, [r7, #24]
        break;
 800aaac:	e004      	b.n	800aab8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	77bb      	strb	r3, [r7, #30]
        break;
 800aab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d074      	beq.n	800aba8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	005a      	lsls	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	441a      	add	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d916      	bls.n	800ab08 <UART_SetConfig+0x404>
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae0:	d212      	bcs.n	800ab08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	f023 030f 	bic.w	r3, r3, #15
 800aaea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	085b      	lsrs	r3, r3, #1
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	89fb      	ldrh	r3, [r7, #14]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	89fa      	ldrh	r2, [r7, #14]
 800ab04:	60da      	str	r2, [r3, #12]
 800ab06:	e04f      	b.n	800aba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	77bb      	strb	r3, [r7, #30]
 800ab0c:	e04c      	b.n	800aba8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab0e:	7ffb      	ldrb	r3, [r7, #31]
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d828      	bhi.n	800ab66 <UART_SetConfig+0x462>
 800ab14:	a201      	add	r2, pc, #4	; (adr r2, 800ab1c <UART_SetConfig+0x418>)
 800ab16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1a:	bf00      	nop
 800ab1c:	0800ab41 	.word	0x0800ab41
 800ab20:	0800ab49 	.word	0x0800ab49
 800ab24:	0800ab51 	.word	0x0800ab51
 800ab28:	0800ab67 	.word	0x0800ab67
 800ab2c:	0800ab57 	.word	0x0800ab57
 800ab30:	0800ab67 	.word	0x0800ab67
 800ab34:	0800ab67 	.word	0x0800ab67
 800ab38:	0800ab67 	.word	0x0800ab67
 800ab3c:	0800ab5f 	.word	0x0800ab5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab40:	f7fd fd5a 	bl	80085f8 <HAL_RCC_GetPCLK1Freq>
 800ab44:	61b8      	str	r0, [r7, #24]
        break;
 800ab46:	e013      	b.n	800ab70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab48:	f7fd fd6a 	bl	8008620 <HAL_RCC_GetPCLK2Freq>
 800ab4c:	61b8      	str	r0, [r7, #24]
        break;
 800ab4e:	e00f      	b.n	800ab70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab50:	4b1d      	ldr	r3, [pc, #116]	; (800abc8 <UART_SetConfig+0x4c4>)
 800ab52:	61bb      	str	r3, [r7, #24]
        break;
 800ab54:	e00c      	b.n	800ab70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab56:	f7fd fc7d 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 800ab5a:	61b8      	str	r0, [r7, #24]
        break;
 800ab5c:	e008      	b.n	800ab70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab62:	61bb      	str	r3, [r7, #24]
        break;
 800ab64:	e004      	b.n	800ab70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ab66:	2300      	movs	r3, #0
 800ab68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	77bb      	strb	r3, [r7, #30]
        break;
 800ab6e:	bf00      	nop
    }

    if (pclk != 0U)
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d018      	beq.n	800aba8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	085a      	lsrs	r2, r3, #1
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	441a      	add	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b0f      	cmp	r3, #15
 800ab8e:	d909      	bls.n	800aba4 <UART_SetConfig+0x4a0>
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab96:	d205      	bcs.n	800aba4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	60da      	str	r2, [r3, #12]
 800aba2:	e001      	b.n	800aba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800abb4:	7fbb      	ldrb	r3, [r7, #30]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3720      	adds	r7, #32
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	40007c00 	.word	0x40007c00
 800abc4:	40023800 	.word	0x40023800
 800abc8:	00f42400 	.word	0x00f42400

0800abcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	f003 0302 	and.w	r3, r3, #2
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	f003 0308 	and.w	r3, r3, #8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00a      	beq.n	800ac7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01a      	beq.n	800ace2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acca:	d10a      	bne.n	800ace2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	605a      	str	r2, [r3, #4]
  }
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af02      	add	r7, sp, #8
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad20:	f7f9 ffd2 	bl	8004cc8 <HAL_GetTick>
 800ad24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d10e      	bne.n	800ad52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f81b 	bl	800ad7e <UART_WaitOnFlagUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e011      	b.n	800ad76 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2220      	movs	r2, #32
 800ad56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b09c      	sub	sp, #112	; 0x70
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	603b      	str	r3, [r7, #0]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad8e:	e0a7      	b.n	800aee0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	f000 80a3 	beq.w	800aee0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad9a:	f7f9 ff95 	bl	8004cc8 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d302      	bcc.n	800adb0 <UART_WaitOnFlagUntilTimeout+0x32>
 800adaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adac:	2b00      	cmp	r3, #0
 800adae:	d13f      	bne.n	800ae30 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adc4:	667b      	str	r3, [r7, #100]	; 0x64
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800add0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800add4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800addc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e6      	bne.n	800adb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	663b      	str	r3, [r7, #96]	; 0x60
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3308      	adds	r3, #8
 800ae00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae02:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e5      	bne.n	800ade2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e068      	b.n	800af02 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0304 	and.w	r3, r3, #4
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d050      	beq.n	800aee0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae4c:	d148      	bne.n	800aee0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae76:	637b      	str	r3, [r7, #52]	; 0x34
 800ae78:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e6      	bne.n	800ae58 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3308      	adds	r3, #8
 800ae90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	613b      	str	r3, [r7, #16]
   return(result);
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f023 0301 	bic.w	r3, r3, #1
 800aea0:	66bb      	str	r3, [r7, #104]	; 0x68
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3308      	adds	r3, #8
 800aea8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aeaa:	623a      	str	r2, [r7, #32]
 800aeac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	69f9      	ldr	r1, [r7, #28]
 800aeb0:	6a3a      	ldr	r2, [r7, #32]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e5      	bne.n	800ae8a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2220      	movs	r2, #32
 800aec2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2220      	movs	r2, #32
 800aec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2220      	movs	r2, #32
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e010      	b.n	800af02 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69da      	ldr	r2, [r3, #28]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	4013      	ands	r3, r2
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	bf0c      	ite	eq
 800aef0:	2301      	moveq	r3, #1
 800aef2:	2300      	movne	r3, #0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	461a      	mov	r2, r3
 800aef8:	79fb      	ldrb	r3, [r7, #7]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	f43f af48 	beq.w	800ad90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3770      	adds	r7, #112	; 0x70
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d121      	bne.n	800af62 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b27      	ldr	r3, [pc, #156]	; (800afc0 <FMC_SDRAM_Init+0xb4>)
 800af24:	4013      	ands	r3, r2
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	6851      	ldr	r1, [r2, #4]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	6892      	ldr	r2, [r2, #8]
 800af2e:	4311      	orrs	r1, r2
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	68d2      	ldr	r2, [r2, #12]
 800af34:	4311      	orrs	r1, r2
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	6912      	ldr	r2, [r2, #16]
 800af3a:	4311      	orrs	r1, r2
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	6952      	ldr	r2, [r2, #20]
 800af40:	4311      	orrs	r1, r2
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	6992      	ldr	r2, [r2, #24]
 800af46:	4311      	orrs	r1, r2
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	69d2      	ldr	r2, [r2, #28]
 800af4c:	4311      	orrs	r1, r2
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	6a12      	ldr	r2, [r2, #32]
 800af52:	4311      	orrs	r1, r2
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af58:	430a      	orrs	r2, r1
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	e026      	b.n	800afb0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	69d9      	ldr	r1, [r3, #28]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	4319      	orrs	r1, r3
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	430b      	orrs	r3, r1
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	4b0e      	ldr	r3, [pc, #56]	; (800afc0 <FMC_SDRAM_Init+0xb4>)
 800af86:	4013      	ands	r3, r2
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	6851      	ldr	r1, [r2, #4]
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	6892      	ldr	r2, [r2, #8]
 800af90:	4311      	orrs	r1, r2
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	68d2      	ldr	r2, [r2, #12]
 800af96:	4311      	orrs	r1, r2
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	6912      	ldr	r2, [r2, #16]
 800af9c:	4311      	orrs	r1, r2
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	6952      	ldr	r2, [r2, #20]
 800afa2:	4311      	orrs	r1, r2
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	6992      	ldr	r2, [r2, #24]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	431a      	orrs	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	ffff8000 	.word	0xffff8000

0800afc4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d128      	bne.n	800b028 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	1e59      	subs	r1, r3, #1
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	3b01      	subs	r3, #1
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	4319      	orrs	r1, r3
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	021b      	lsls	r3, r3, #8
 800aff6:	4319      	orrs	r1, r3
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	3b01      	subs	r3, #1
 800affe:	031b      	lsls	r3, r3, #12
 800b000:	4319      	orrs	r1, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	3b01      	subs	r3, #1
 800b008:	041b      	lsls	r3, r3, #16
 800b00a:	4319      	orrs	r1, r3
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	3b01      	subs	r3, #1
 800b012:	051b      	lsls	r3, r3, #20
 800b014:	4319      	orrs	r1, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	061b      	lsls	r3, r3, #24
 800b01e:	430b      	orrs	r3, r1
 800b020:	431a      	orrs	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	609a      	str	r2, [r3, #8]
 800b026:	e02d      	b.n	800b084 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	4b19      	ldr	r3, [pc, #100]	; (800b094 <FMC_SDRAM_Timing_Init+0xd0>)
 800b02e:	4013      	ands	r3, r2
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	68d2      	ldr	r2, [r2, #12]
 800b034:	3a01      	subs	r2, #1
 800b036:	0311      	lsls	r1, r2, #12
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	6952      	ldr	r2, [r2, #20]
 800b03c:	3a01      	subs	r2, #1
 800b03e:	0512      	lsls	r2, r2, #20
 800b040:	430a      	orrs	r2, r1
 800b042:	431a      	orrs	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	1e59      	subs	r1, r3, #1
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	011b      	lsls	r3, r3, #4
 800b05e:	4319      	orrs	r1, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	3b01      	subs	r3, #1
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	4319      	orrs	r1, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	3b01      	subs	r3, #1
 800b070:	041b      	lsls	r3, r3, #16
 800b072:	4319      	orrs	r1, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	3b01      	subs	r3, #1
 800b07a:	061b      	lsls	r3, r3, #24
 800b07c:	430b      	orrs	r3, r1
 800b07e:	431a      	orrs	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	ff0f0fff 	.word	0xff0f0fff

0800b098 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	691a      	ldr	r2, [r3, #16]
 800b0a8:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <FMC_SDRAM_SendCommand+0x44>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	6811      	ldr	r1, [r2, #0]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	6852      	ldr	r2, [r2, #4]
 800b0b4:	4311      	orrs	r1, r2
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	6892      	ldr	r2, [r2, #8]
 800b0ba:	3a01      	subs	r2, #1
 800b0bc:	0152      	lsls	r2, r2, #5
 800b0be:	4311      	orrs	r1, r2
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	68d2      	ldr	r2, [r2, #12]
 800b0c4:	0252      	lsls	r2, r2, #9
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	ffc00000 	.word	0xffc00000

0800b0e0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	695a      	ldr	r2, [r3, #20]
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	0052      	lsls	r2, r2, #1
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	ffffc001 	.word	0xffffc001

0800b110 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b11e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b122:	2b84      	cmp	r3, #132	; 0x84
 800b124:	d005      	beq.n	800b132 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4413      	add	r3, r2
 800b12e:	3303      	adds	r3, #3
 800b130:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b132:	68fb      	ldr	r3, [r7, #12]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b144:	f000 fb84 	bl	800b850 <vTaskStartScheduler>
  
  return osOK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b14e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b150:	b089      	sub	sp, #36	; 0x24
 800b152:	af04      	add	r7, sp, #16
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d020      	beq.n	800b1a2 <osThreadCreate+0x54>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01c      	beq.n	800b1a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685c      	ldr	r4, [r3, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681d      	ldr	r5, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691e      	ldr	r6, [r3, #16]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff ffc8 	bl	800b110 <makeFreeRtosPriority>
 800b180:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b18a:	9202      	str	r2, [sp, #8]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	9100      	str	r1, [sp, #0]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	4632      	mov	r2, r6
 800b194:	4629      	mov	r1, r5
 800b196:	4620      	mov	r0, r4
 800b198:	f000 f8ed 	bl	800b376 <xTaskCreateStatic>
 800b19c:	4603      	mov	r3, r0
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e01c      	b.n	800b1dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685c      	ldr	r4, [r3, #4]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1ae:	b29e      	uxth	r6, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff ffaa 	bl	800b110 <makeFreeRtosPriority>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	f107 030c 	add.w	r3, r7, #12
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	9200      	str	r2, [sp, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 f935 	bl	800b43c <xTaskCreate>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d001      	beq.n	800b1dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <osDelay+0x16>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	e000      	b.n	800b1fe <osDelay+0x18>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 faf0 	bl	800b7e4 <vTaskDelay>
  
  return osOK;
 800b204:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f103 0208 	add.w	r2, r3, #8
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f04f 32ff 	mov.w	r2, #4294967295
 800b226:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f103 0208 	add.w	r2, r3, #8
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f103 0208 	add.w	r2, r3, #8
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	689a      	ldr	r2, [r3, #8]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	683a      	ldr	r2, [r7, #0]
 800b292:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c6:	d103      	bne.n	800b2d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	e00c      	b.n	800b2ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	60fb      	str	r3, [r7, #12]
 800b2d6:	e002      	b.n	800b2de <vListInsert+0x2e>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	60fb      	str	r3, [r7, #12]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d2f6      	bcs.n	800b2d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	1c5a      	adds	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	601a      	str	r2, [r3, #0]
}
 800b316:	bf00      	nop
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b322:	b480      	push	{r7}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	6892      	ldr	r2, [r2, #8]
 800b338:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6852      	ldr	r2, [r2, #4]
 800b342:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d103      	bne.n	800b356 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	689a      	ldr	r2, [r3, #8]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	1e5a      	subs	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b376:	b580      	push	{r7, lr}
 800b378:	b08e      	sub	sp, #56	; 0x38
 800b37a:	af04      	add	r7, sp, #16
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	607a      	str	r2, [r7, #4]
 800b382:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10c      	bne.n	800b3a4 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38e:	b672      	cpsid	i
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	b662      	cpsie	i
 800b39e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10c      	bne.n	800b3c4 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	b672      	cpsid	i
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	b662      	cpsie	i
 800b3be:	61fb      	str	r3, [r7, #28]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b3c4:	23b4      	movs	r3, #180	; 0xb4
 800b3c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	2bb4      	cmp	r3, #180	; 0xb4
 800b3cc:	d00c      	beq.n	800b3e8 <xTaskCreateStatic+0x72>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	b672      	cpsid	i
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	b662      	cpsie	i
 800b3e2:	61bb      	str	r3, [r7, #24]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d01e      	beq.n	800b42e <xTaskCreateStatic+0xb8>
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d01b      	beq.n	800b42e <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	2202      	movs	r2, #2
 800b404:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b408:	2300      	movs	r3, #0
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	9302      	str	r3, [sp, #8]
 800b410:	f107 0314 	add.w	r3, r7, #20
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 f851 	bl	800b4c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b428:	f000 f8ee 	bl	800b608 <prvAddNewTaskToReadyList>
 800b42c:	e001      	b.n	800b432 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b432:	697b      	ldr	r3, [r7, #20]
	}
 800b434:	4618      	mov	r0, r3
 800b436:	3728      	adds	r7, #40	; 0x28
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08c      	sub	sp, #48	; 0x30
 800b440:	af04      	add	r7, sp, #16
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	4613      	mov	r3, r2
 800b44a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b44c:	88fb      	ldrh	r3, [r7, #6]
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4618      	mov	r0, r3
 800b452:	f000 ff7b 	bl	800c34c <pvPortMalloc>
 800b456:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00e      	beq.n	800b47c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b45e:	20b4      	movs	r0, #180	; 0xb4
 800b460:	f000 ff74 	bl	800c34c <pvPortMalloc>
 800b464:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	631a      	str	r2, [r3, #48]	; 0x30
 800b472:	e005      	b.n	800b480 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b474:	6978      	ldr	r0, [r7, #20]
 800b476:	f001 f833 	bl	800c4e0 <vPortFree>
 800b47a:	e001      	b.n	800b480 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b47c:	2300      	movs	r3, #0
 800b47e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d017      	beq.n	800b4b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b48e:	88fa      	ldrh	r2, [r7, #6]
 800b490:	2300      	movs	r3, #0
 800b492:	9303      	str	r3, [sp, #12]
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	68b9      	ldr	r1, [r7, #8]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 f80f 	bl	800b4c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4aa:	69f8      	ldr	r0, [r7, #28]
 800b4ac:	f000 f8ac 	bl	800b608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	61bb      	str	r3, [r7, #24]
 800b4b4:	e002      	b.n	800b4bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4bc:	69bb      	ldr	r3, [r7, #24]
	}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b4e0:	440b      	add	r3, r1
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	f023 0307 	bic.w	r3, r3, #7
 800b4ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00c      	beq.n	800b514 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	b672      	cpsid	i
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	b662      	cpsie	i
 800b50e:	617b      	str	r3, [r7, #20]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01f      	beq.n	800b55a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b51a:	2300      	movs	r3, #0
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e012      	b.n	800b546 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	7819      	ldrb	r1, [r3, #0]
 800b528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	4413      	add	r3, r2
 800b52e:	3334      	adds	r3, #52	; 0x34
 800b530:	460a      	mov	r2, r1
 800b532:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	3301      	adds	r3, #1
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	2b0f      	cmp	r3, #15
 800b54a:	d9e9      	bls.n	800b520 <prvInitialiseNewTask+0x58>
 800b54c:	e000      	b.n	800b550 <prvInitialiseNewTask+0x88>
			{
				break;
 800b54e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b558:	e003      	b.n	800b562 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	2b06      	cmp	r3, #6
 800b566:	d901      	bls.n	800b56c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b568:	2306      	movs	r3, #6
 800b56a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b570:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b576:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	2200      	movs	r2, #0
 800b57c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	3304      	adds	r3, #4
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff fe63 	bl	800b24e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	3318      	adds	r3, #24
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff fe5e 	bl	800b24e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	f1c3 0207 	rsb	r2, r3, #7
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	334c      	adds	r3, #76	; 0x4c
 800b5bc:	2260      	movs	r2, #96	; 0x60
 800b5be:	2100      	movs	r1, #0
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f001 f8e1 	bl	800c788 <memset>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	4a0c      	ldr	r2, [pc, #48]	; (800b5fc <prvInitialiseNewTask+0x134>)
 800b5ca:	651a      	str	r2, [r3, #80]	; 0x50
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	4a0c      	ldr	r2, [pc, #48]	; (800b600 <prvInitialiseNewTask+0x138>)
 800b5d0:	655a      	str	r2, [r3, #84]	; 0x54
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <prvInitialiseNewTask+0x13c>)
 800b5d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	68f9      	ldr	r1, [r7, #12]
 800b5dc:	69b8      	ldr	r0, [r7, #24]
 800b5de:	f000 fcc1 	bl	800bf64 <pxPortInitialiseStack>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5f4:	bf00      	nop
 800b5f6:	3720      	adds	r7, #32
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	0804ee9c 	.word	0x0804ee9c
 800b600:	0804eebc 	.word	0x0804eebc
 800b604:	0804ee7c 	.word	0x0804ee7c

0800b608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b610:	f000 fdb4 	bl	800c17c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b614:	4b2a      	ldr	r3, [pc, #168]	; (800b6c0 <prvAddNewTaskToReadyList+0xb8>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	3301      	adds	r3, #1
 800b61a:	4a29      	ldr	r2, [pc, #164]	; (800b6c0 <prvAddNewTaskToReadyList+0xb8>)
 800b61c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <prvAddNewTaskToReadyList+0xbc>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d109      	bne.n	800b63a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b626:	4a27      	ldr	r2, [pc, #156]	; (800b6c4 <prvAddNewTaskToReadyList+0xbc>)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b62c:	4b24      	ldr	r3, [pc, #144]	; (800b6c0 <prvAddNewTaskToReadyList+0xb8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d110      	bne.n	800b656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b634:	f000 fb6c 	bl	800bd10 <prvInitialiseTaskLists>
 800b638:	e00d      	b.n	800b656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b63a:	4b23      	ldr	r3, [pc, #140]	; (800b6c8 <prvAddNewTaskToReadyList+0xc0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d109      	bne.n	800b656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b642:	4b20      	ldr	r3, [pc, #128]	; (800b6c4 <prvAddNewTaskToReadyList+0xbc>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d802      	bhi.n	800b656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b650:	4a1c      	ldr	r2, [pc, #112]	; (800b6c4 <prvAddNewTaskToReadyList+0xbc>)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b656:	4b1d      	ldr	r3, [pc, #116]	; (800b6cc <prvAddNewTaskToReadyList+0xc4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3301      	adds	r3, #1
 800b65c:	4a1b      	ldr	r2, [pc, #108]	; (800b6cc <prvAddNewTaskToReadyList+0xc4>)
 800b65e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b664:	2201      	movs	r2, #1
 800b666:	409a      	lsls	r2, r3
 800b668:	4b19      	ldr	r3, [pc, #100]	; (800b6d0 <prvAddNewTaskToReadyList+0xc8>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	4a18      	ldr	r2, [pc, #96]	; (800b6d0 <prvAddNewTaskToReadyList+0xc8>)
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b676:	4613      	mov	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4a15      	ldr	r2, [pc, #84]	; (800b6d4 <prvAddNewTaskToReadyList+0xcc>)
 800b680:	441a      	add	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3304      	adds	r3, #4
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f7ff fded 	bl	800b268 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b68e:	f000 fda9 	bl	800c1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b692:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <prvAddNewTaskToReadyList+0xc0>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00e      	beq.n	800b6b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b69a:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <prvAddNewTaskToReadyList+0xbc>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d207      	bcs.n	800b6b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6a8:	4b0b      	ldr	r3, [pc, #44]	; (800b6d8 <prvAddNewTaskToReadyList+0xd0>)
 800b6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6b8:	bf00      	nop
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	20000dec 	.word	0x20000dec
 800b6c4:	20000cec 	.word	0x20000cec
 800b6c8:	20000df8 	.word	0x20000df8
 800b6cc:	20000e08 	.word	0x20000e08
 800b6d0:	20000df4 	.word	0x20000df4
 800b6d4:	20000cf0 	.word	0x20000cf0
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08a      	sub	sp, #40	; 0x28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10c      	bne.n	800b70a <vTaskDelayUntil+0x2e>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	b672      	cpsid	i
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	b662      	cpsie	i
 800b704:	617b      	str	r3, [r7, #20]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10c      	bne.n	800b72a <vTaskDelayUntil+0x4e>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	b672      	cpsid	i
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	b662      	cpsie	i
 800b724:	613b      	str	r3, [r7, #16]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800b72a:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <vTaskDelayUntil+0xfc>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00c      	beq.n	800b74c <vTaskDelayUntil+0x70>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	b672      	cpsid	i
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	b662      	cpsie	i
 800b746:	60fb      	str	r3, [r7, #12]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800b74c:	f000 f8ee 	bl	800b92c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b750:	4b22      	ldr	r3, [pc, #136]	; (800b7dc <vTaskDelayUntil+0x100>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	4413      	add	r3, r2
 800b75e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6a3a      	ldr	r2, [r7, #32]
 800b766:	429a      	cmp	r2, r3
 800b768:	d20b      	bcs.n	800b782 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	69fa      	ldr	r2, [r7, #28]
 800b770:	429a      	cmp	r2, r3
 800b772:	d211      	bcs.n	800b798 <vTaskDelayUntil+0xbc>
 800b774:	69fa      	ldr	r2, [r7, #28]
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d90d      	bls.n	800b798 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
 800b780:	e00a      	b.n	800b798 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69fa      	ldr	r2, [r7, #28]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d303      	bcc.n	800b794 <vTaskDelayUntil+0xb8>
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	429a      	cmp	r2, r3
 800b792:	d901      	bls.n	800b798 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b794:	2301      	movs	r3, #1
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fb73 	bl	800be98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b7b2:	f000 f8c9 	bl	800b948 <xTaskResumeAll>
 800b7b6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d107      	bne.n	800b7ce <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800b7be:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <vTaskDelayUntil+0x104>)
 800b7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7ce:	bf00      	nop
 800b7d0:	3728      	adds	r7, #40	; 0x28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20000e14 	.word	0x20000e14
 800b7dc:	20000df0 	.word	0x20000df0
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d019      	beq.n	800b82a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7f6:	4b14      	ldr	r3, [pc, #80]	; (800b848 <vTaskDelay+0x64>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00c      	beq.n	800b818 <vTaskDelay+0x34>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	b672      	cpsid	i
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	b662      	cpsie	i
 800b812:	60bb      	str	r3, [r7, #8]
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b818:	f000 f888 	bl	800b92c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b81c:	2100      	movs	r1, #0
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fb3a 	bl	800be98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b824:	f000 f890 	bl	800b948 <xTaskResumeAll>
 800b828:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d107      	bne.n	800b840 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b830:	4b06      	ldr	r3, [pc, #24]	; (800b84c <vTaskDelay+0x68>)
 800b832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b840:	bf00      	nop
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20000e14 	.word	0x20000e14
 800b84c:	e000ed04 	.word	0xe000ed04

0800b850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08a      	sub	sp, #40	; 0x28
 800b854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b85e:	463a      	mov	r2, r7
 800b860:	1d39      	adds	r1, r7, #4
 800b862:	f107 0308 	add.w	r3, r7, #8
 800b866:	4618      	mov	r0, r3
 800b868:	f7f5 f96a 	bl	8000b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	9202      	str	r2, [sp, #8]
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	2300      	movs	r3, #0
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	2300      	movs	r3, #0
 800b87c:	460a      	mov	r2, r1
 800b87e:	4923      	ldr	r1, [pc, #140]	; (800b90c <vTaskStartScheduler+0xbc>)
 800b880:	4823      	ldr	r0, [pc, #140]	; (800b910 <vTaskStartScheduler+0xc0>)
 800b882:	f7ff fd78 	bl	800b376 <xTaskCreateStatic>
 800b886:	4603      	mov	r3, r0
 800b888:	4a22      	ldr	r2, [pc, #136]	; (800b914 <vTaskStartScheduler+0xc4>)
 800b88a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b88c:	4b21      	ldr	r3, [pc, #132]	; (800b914 <vTaskStartScheduler+0xc4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b894:	2301      	movs	r3, #1
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	e001      	b.n	800b89e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d11d      	bne.n	800b8e0 <vTaskStartScheduler+0x90>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	b672      	cpsid	i
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	b662      	cpsie	i
 800b8b8:	613b      	str	r3, [r7, #16]
}
 800b8ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8bc:	4b16      	ldr	r3, [pc, #88]	; (800b918 <vTaskStartScheduler+0xc8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	334c      	adds	r3, #76	; 0x4c
 800b8c2:	4a16      	ldr	r2, [pc, #88]	; (800b91c <vTaskStartScheduler+0xcc>)
 800b8c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8c6:	4b16      	ldr	r3, [pc, #88]	; (800b920 <vTaskStartScheduler+0xd0>)
 800b8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8ce:	4b15      	ldr	r3, [pc, #84]	; (800b924 <vTaskStartScheduler+0xd4>)
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8d4:	4b14      	ldr	r3, [pc, #80]	; (800b928 <vTaskStartScheduler+0xd8>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8da:	f000 fbd1 	bl	800c080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8de:	e010      	b.n	800b902 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e6:	d10c      	bne.n	800b902 <vTaskStartScheduler+0xb2>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	b672      	cpsid	i
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	b662      	cpsie	i
 800b8fc:	60fb      	str	r3, [r7, #12]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <vTaskStartScheduler+0xb0>
}
 800b902:	bf00      	nop
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	0800d29c 	.word	0x0800d29c
 800b910:	0800bce1 	.word	0x0800bce1
 800b914:	20000e10 	.word	0x20000e10
 800b918:	20000cec 	.word	0x20000cec
 800b91c:	2000004c 	.word	0x2000004c
 800b920:	20000e0c 	.word	0x20000e0c
 800b924:	20000df8 	.word	0x20000df8
 800b928:	20000df0 	.word	0x20000df0

0800b92c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b92c:	b480      	push	{r7}
 800b92e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <vTaskSuspendAll+0x18>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3301      	adds	r3, #1
 800b936:	4a03      	ldr	r2, [pc, #12]	; (800b944 <vTaskSuspendAll+0x18>)
 800b938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b93a:	bf00      	nop
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	20000e14 	.word	0x20000e14

0800b948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b952:	2300      	movs	r3, #0
 800b954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b956:	4b42      	ldr	r3, [pc, #264]	; (800ba60 <xTaskResumeAll+0x118>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10c      	bne.n	800b978 <xTaskResumeAll+0x30>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	b672      	cpsid	i
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	b662      	cpsie	i
 800b972:	603b      	str	r3, [r7, #0]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b978:	f000 fc00 	bl	800c17c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b97c:	4b38      	ldr	r3, [pc, #224]	; (800ba60 <xTaskResumeAll+0x118>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3b01      	subs	r3, #1
 800b982:	4a37      	ldr	r2, [pc, #220]	; (800ba60 <xTaskResumeAll+0x118>)
 800b984:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b986:	4b36      	ldr	r3, [pc, #216]	; (800ba60 <xTaskResumeAll+0x118>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d161      	bne.n	800ba52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b98e:	4b35      	ldr	r3, [pc, #212]	; (800ba64 <xTaskResumeAll+0x11c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d05d      	beq.n	800ba52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b996:	e02e      	b.n	800b9f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b998:	4b33      	ldr	r3, [pc, #204]	; (800ba68 <xTaskResumeAll+0x120>)
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3318      	adds	r3, #24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fcbc 	bl	800b322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fcb7 	bl	800b322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	409a      	lsls	r2, r3
 800b9bc:	4b2b      	ldr	r3, [pc, #172]	; (800ba6c <xTaskResumeAll+0x124>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	4a2a      	ldr	r2, [pc, #168]	; (800ba6c <xTaskResumeAll+0x124>)
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4a27      	ldr	r2, [pc, #156]	; (800ba70 <xTaskResumeAll+0x128>)
 800b9d4:	441a      	add	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4610      	mov	r0, r2
 800b9de:	f7ff fc43 	bl	800b268 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e6:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <xTaskResumeAll+0x12c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d302      	bcc.n	800b9f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b9f0:	4b21      	ldr	r3, [pc, #132]	; (800ba78 <xTaskResumeAll+0x130>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9f6:	4b1c      	ldr	r3, [pc, #112]	; (800ba68 <xTaskResumeAll+0x120>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1cc      	bne.n	800b998 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba04:	f000 fa28 	bl	800be58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba08:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <xTaskResumeAll+0x134>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d010      	beq.n	800ba36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba14:	f000 f846 	bl	800baa4 <xTaskIncrementTick>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba1e:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <xTaskResumeAll+0x130>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1f1      	bne.n	800ba14 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ba30:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <xTaskResumeAll+0x134>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba36:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <xTaskResumeAll+0x130>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d009      	beq.n	800ba52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba42:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <xTaskResumeAll+0x138>)
 800ba44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba52:	f000 fbc7 	bl	800c1e4 <vPortExitCritical>

	return xAlreadyYielded;
 800ba56:	68bb      	ldr	r3, [r7, #8]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	20000e14 	.word	0x20000e14
 800ba64:	20000dec 	.word	0x20000dec
 800ba68:	20000dac 	.word	0x20000dac
 800ba6c:	20000df4 	.word	0x20000df4
 800ba70:	20000cf0 	.word	0x20000cf0
 800ba74:	20000cec 	.word	0x20000cec
 800ba78:	20000e00 	.word	0x20000e00
 800ba7c:	20000dfc 	.word	0x20000dfc
 800ba80:	e000ed04 	.word	0xe000ed04

0800ba84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba8a:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <xTaskGetTickCount+0x1c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba90:	687b      	ldr	r3, [r7, #4]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20000df0 	.word	0x20000df0

0800baa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baae:	4b4f      	ldr	r3, [pc, #316]	; (800bbec <xTaskIncrementTick+0x148>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f040 808a 	bne.w	800bbcc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bab8:	4b4d      	ldr	r3, [pc, #308]	; (800bbf0 <xTaskIncrementTick+0x14c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bac0:	4a4b      	ldr	r2, [pc, #300]	; (800bbf0 <xTaskIncrementTick+0x14c>)
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d122      	bne.n	800bb12 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800bacc:	4b49      	ldr	r3, [pc, #292]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00c      	beq.n	800baf0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bada:	b672      	cpsid	i
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	b662      	cpsie	i
 800baea:	603b      	str	r3, [r7, #0]
}
 800baec:	bf00      	nop
 800baee:	e7fe      	b.n	800baee <xTaskIncrementTick+0x4a>
 800baf0:	4b40      	ldr	r3, [pc, #256]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	4b40      	ldr	r3, [pc, #256]	; (800bbf8 <xTaskIncrementTick+0x154>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a3e      	ldr	r2, [pc, #248]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	4a3e      	ldr	r2, [pc, #248]	; (800bbf8 <xTaskIncrementTick+0x154>)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	4b3d      	ldr	r3, [pc, #244]	; (800bbfc <xTaskIncrementTick+0x158>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	4a3c      	ldr	r2, [pc, #240]	; (800bbfc <xTaskIncrementTick+0x158>)
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	f000 f9a3 	bl	800be58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb12:	4b3b      	ldr	r3, [pc, #236]	; (800bc00 <xTaskIncrementTick+0x15c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d348      	bcc.n	800bbae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb1c:	4b35      	ldr	r3, [pc, #212]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d104      	bne.n	800bb30 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb26:	4b36      	ldr	r3, [pc, #216]	; (800bc00 <xTaskIncrementTick+0x15c>)
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2c:	601a      	str	r2, [r3, #0]
					break;
 800bb2e:	e03e      	b.n	800bbae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb30:	4b30      	ldr	r3, [pc, #192]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d203      	bcs.n	800bb50 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb48:	4a2d      	ldr	r2, [pc, #180]	; (800bc00 <xTaskIncrementTick+0x15c>)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb4e:	e02e      	b.n	800bbae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	3304      	adds	r3, #4
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff fbe4 	bl	800b322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d004      	beq.n	800bb6c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	3318      	adds	r3, #24
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff fbdb 	bl	800b322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	2201      	movs	r2, #1
 800bb72:	409a      	lsls	r2, r3
 800bb74:	4b23      	ldr	r3, [pc, #140]	; (800bc04 <xTaskIncrementTick+0x160>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	4a22      	ldr	r2, [pc, #136]	; (800bc04 <xTaskIncrementTick+0x160>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4a1f      	ldr	r2, [pc, #124]	; (800bc08 <xTaskIncrementTick+0x164>)
 800bb8c:	441a      	add	r2, r3
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	3304      	adds	r3, #4
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7ff fb67 	bl	800b268 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9e:	4b1b      	ldr	r3, [pc, #108]	; (800bc0c <xTaskIncrementTick+0x168>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d3b9      	bcc.n	800bb1c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbac:	e7b6      	b.n	800bb1c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbae:	4b17      	ldr	r3, [pc, #92]	; (800bc0c <xTaskIncrementTick+0x168>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb4:	4914      	ldr	r1, [pc, #80]	; (800bc08 <xTaskIncrementTick+0x164>)
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d907      	bls.n	800bbd6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	617b      	str	r3, [r7, #20]
 800bbca:	e004      	b.n	800bbd6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bbcc:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <xTaskIncrementTick+0x16c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	4a0f      	ldr	r2, [pc, #60]	; (800bc10 <xTaskIncrementTick+0x16c>)
 800bbd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <xTaskIncrementTick+0x170>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bbe2:	697b      	ldr	r3, [r7, #20]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20000e14 	.word	0x20000e14
 800bbf0:	20000df0 	.word	0x20000df0
 800bbf4:	20000da4 	.word	0x20000da4
 800bbf8:	20000da8 	.word	0x20000da8
 800bbfc:	20000e04 	.word	0x20000e04
 800bc00:	20000e0c 	.word	0x20000e0c
 800bc04:	20000df4 	.word	0x20000df4
 800bc08:	20000cf0 	.word	0x20000cf0
 800bc0c:	20000cec 	.word	0x20000cec
 800bc10:	20000dfc 	.word	0x20000dfc
 800bc14:	20000e00 	.word	0x20000e00

0800bc18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc1e:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <vTaskSwitchContext+0xb0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc26:	4b29      	ldr	r3, [pc, #164]	; (800bccc <vTaskSwitchContext+0xb4>)
 800bc28:	2201      	movs	r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc2c:	e046      	b.n	800bcbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc2e:	4b27      	ldr	r3, [pc, #156]	; (800bccc <vTaskSwitchContext+0xb4>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc34:	4b26      	ldr	r3, [pc, #152]	; (800bcd0 <vTaskSwitchContext+0xb8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	fab3 f383 	clz	r3, r3
 800bc40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc42:	7afb      	ldrb	r3, [r7, #11]
 800bc44:	f1c3 031f 	rsb	r3, r3, #31
 800bc48:	617b      	str	r3, [r7, #20]
 800bc4a:	4922      	ldr	r1, [pc, #136]	; (800bcd4 <vTaskSwitchContext+0xbc>)
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	440b      	add	r3, r1
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10c      	bne.n	800bc78 <vTaskSwitchContext+0x60>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	b672      	cpsid	i
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	b662      	cpsie	i
 800bc72:	607b      	str	r3, [r7, #4]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vTaskSwitchContext+0x5e>
 800bc78:	697a      	ldr	r2, [r7, #20]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4a14      	ldr	r2, [pc, #80]	; (800bcd4 <vTaskSwitchContext+0xbc>)
 800bc84:	4413      	add	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	605a      	str	r2, [r3, #4]
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d104      	bne.n	800bca8 <vTaskSwitchContext+0x90>
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	605a      	str	r2, [r3, #4]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	4a0a      	ldr	r2, [pc, #40]	; (800bcd8 <vTaskSwitchContext+0xc0>)
 800bcb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <vTaskSwitchContext+0xc0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	334c      	adds	r3, #76	; 0x4c
 800bcb8:	4a08      	ldr	r2, [pc, #32]	; (800bcdc <vTaskSwitchContext+0xc4>)
 800bcba:	6013      	str	r3, [r2, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	371c      	adds	r7, #28
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	20000e14 	.word	0x20000e14
 800bccc:	20000e00 	.word	0x20000e00
 800bcd0:	20000df4 	.word	0x20000df4
 800bcd4:	20000cf0 	.word	0x20000cf0
 800bcd8:	20000cec 	.word	0x20000cec
 800bcdc:	2000004c 	.word	0x2000004c

0800bce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bce8:	f000 f852 	bl	800bd90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <prvIdleTask+0x28>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d9f9      	bls.n	800bce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcf4:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <prvIdleTask+0x2c>)
 800bcf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd04:	e7f0      	b.n	800bce8 <prvIdleTask+0x8>
 800bd06:	bf00      	nop
 800bd08:	20000cf0 	.word	0x20000cf0
 800bd0c:	e000ed04 	.word	0xe000ed04

0800bd10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd16:	2300      	movs	r3, #0
 800bd18:	607b      	str	r3, [r7, #4]
 800bd1a:	e00c      	b.n	800bd36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4a12      	ldr	r2, [pc, #72]	; (800bd70 <prvInitialiseTaskLists+0x60>)
 800bd28:	4413      	add	r3, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fa6f 	bl	800b20e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3301      	adds	r3, #1
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b06      	cmp	r3, #6
 800bd3a:	d9ef      	bls.n	800bd1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd3c:	480d      	ldr	r0, [pc, #52]	; (800bd74 <prvInitialiseTaskLists+0x64>)
 800bd3e:	f7ff fa66 	bl	800b20e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd42:	480d      	ldr	r0, [pc, #52]	; (800bd78 <prvInitialiseTaskLists+0x68>)
 800bd44:	f7ff fa63 	bl	800b20e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd48:	480c      	ldr	r0, [pc, #48]	; (800bd7c <prvInitialiseTaskLists+0x6c>)
 800bd4a:	f7ff fa60 	bl	800b20e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd4e:	480c      	ldr	r0, [pc, #48]	; (800bd80 <prvInitialiseTaskLists+0x70>)
 800bd50:	f7ff fa5d 	bl	800b20e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd54:	480b      	ldr	r0, [pc, #44]	; (800bd84 <prvInitialiseTaskLists+0x74>)
 800bd56:	f7ff fa5a 	bl	800b20e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd5a:	4b0b      	ldr	r3, [pc, #44]	; (800bd88 <prvInitialiseTaskLists+0x78>)
 800bd5c:	4a05      	ldr	r2, [pc, #20]	; (800bd74 <prvInitialiseTaskLists+0x64>)
 800bd5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd60:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <prvInitialiseTaskLists+0x7c>)
 800bd62:	4a05      	ldr	r2, [pc, #20]	; (800bd78 <prvInitialiseTaskLists+0x68>)
 800bd64:	601a      	str	r2, [r3, #0]
}
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000cf0 	.word	0x20000cf0
 800bd74:	20000d7c 	.word	0x20000d7c
 800bd78:	20000d90 	.word	0x20000d90
 800bd7c:	20000dac 	.word	0x20000dac
 800bd80:	20000dc0 	.word	0x20000dc0
 800bd84:	20000dd8 	.word	0x20000dd8
 800bd88:	20000da4 	.word	0x20000da4
 800bd8c:	20000da8 	.word	0x20000da8

0800bd90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd96:	e019      	b.n	800bdcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd98:	f000 f9f0 	bl	800c17c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd9c:	4b10      	ldr	r3, [pc, #64]	; (800bde0 <prvCheckTasksWaitingTermination+0x50>)
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3304      	adds	r3, #4
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff faba 	bl	800b322 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdae:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <prvCheckTasksWaitingTermination+0x54>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	4a0b      	ldr	r2, [pc, #44]	; (800bde4 <prvCheckTasksWaitingTermination+0x54>)
 800bdb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdb8:	4b0b      	ldr	r3, [pc, #44]	; (800bde8 <prvCheckTasksWaitingTermination+0x58>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	4a0a      	ldr	r2, [pc, #40]	; (800bde8 <prvCheckTasksWaitingTermination+0x58>)
 800bdc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdc2:	f000 fa0f 	bl	800c1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f810 	bl	800bdec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdcc:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <prvCheckTasksWaitingTermination+0x58>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e1      	bne.n	800bd98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdd4:	bf00      	nop
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20000dc0 	.word	0x20000dc0
 800bde4:	20000dec 	.word	0x20000dec
 800bde8:	20000dd4 	.word	0x20000dd4

0800bdec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	334c      	adds	r3, #76	; 0x4c
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fd6f 	bl	800c8dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800be04:	2b00      	cmp	r3, #0
 800be06:	d108      	bne.n	800be1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fb67 	bl	800c4e0 <vPortFree>
				vPortFree( pxTCB );
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fb64 	bl	800c4e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be18:	e01a      	b.n	800be50 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800be20:	2b01      	cmp	r3, #1
 800be22:	d103      	bne.n	800be2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fb5b 	bl	800c4e0 <vPortFree>
	}
 800be2a:	e011      	b.n	800be50 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800be32:	2b02      	cmp	r3, #2
 800be34:	d00c      	beq.n	800be50 <prvDeleteTCB+0x64>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	b672      	cpsid	i
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	b662      	cpsie	i
 800be4a:	60fb      	str	r3, [r7, #12]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <prvDeleteTCB+0x62>
	}
 800be50:	bf00      	nop
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <prvResetNextTaskUnblockTime+0x38>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <prvResetNextTaskUnblockTime+0x3c>)
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be70:	e008      	b.n	800be84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be72:	4b07      	ldr	r3, [pc, #28]	; (800be90 <prvResetNextTaskUnblockTime+0x38>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	4a04      	ldr	r2, [pc, #16]	; (800be94 <prvResetNextTaskUnblockTime+0x3c>)
 800be82:	6013      	str	r3, [r2, #0]
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	20000da4 	.word	0x20000da4
 800be94:	20000e0c 	.word	0x20000e0c

0800be98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bea2:	4b29      	ldr	r3, [pc, #164]	; (800bf48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea8:	4b28      	ldr	r3, [pc, #160]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3304      	adds	r3, #4
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fa37 	bl	800b322 <uxListRemove>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800beba:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	2201      	movs	r2, #1
 800bec2:	fa02 f303 	lsl.w	r3, r2, r3
 800bec6:	43da      	mvns	r2, r3
 800bec8:	4b21      	ldr	r3, [pc, #132]	; (800bf50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4013      	ands	r3, r2
 800bece:	4a20      	ldr	r2, [pc, #128]	; (800bf50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bed0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed8:	d10a      	bne.n	800bef0 <prvAddCurrentTaskToDelayedList+0x58>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bee0:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	481a      	ldr	r0, [pc, #104]	; (800bf54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800beea:	f7ff f9bd 	bl	800b268 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800beee:	e026      	b.n	800bf3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4413      	add	r3, r2
 800bef6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bef8:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d209      	bcs.n	800bf1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf08:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3304      	adds	r3, #4
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7ff f9cb 	bl	800b2b0 <vListInsert>
}
 800bf1a:	e010      	b.n	800bf3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf1c:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3304      	adds	r3, #4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f7ff f9c1 	bl	800b2b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf2e:	4b0c      	ldr	r3, [pc, #48]	; (800bf60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d202      	bcs.n	800bf3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf38:	4a09      	ldr	r2, [pc, #36]	; (800bf60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	6013      	str	r3, [r2, #0]
}
 800bf3e:	bf00      	nop
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20000df0 	.word	0x20000df0
 800bf4c:	20000cec 	.word	0x20000cec
 800bf50:	20000df4 	.word	0x20000df4
 800bf54:	20000dd8 	.word	0x20000dd8
 800bf58:	20000da8 	.word	0x20000da8
 800bf5c:	20000da4 	.word	0x20000da4
 800bf60:	20000e0c 	.word	0x20000e0c

0800bf64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3b04      	subs	r3, #4
 800bf74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3b04      	subs	r3, #4
 800bf82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f023 0201 	bic.w	r2, r3, #1
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3b04      	subs	r3, #4
 800bf92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf94:	4a0c      	ldr	r2, [pc, #48]	; (800bfc8 <pxPortInitialiseStack+0x64>)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3b14      	subs	r3, #20
 800bf9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3b04      	subs	r3, #4
 800bfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f06f 0202 	mvn.w	r2, #2
 800bfb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3b20      	subs	r3, #32
 800bfb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfba:	68fb      	ldr	r3, [r7, #12]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	0800bfcd 	.word	0x0800bfcd

0800bfcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfd6:	4b14      	ldr	r3, [pc, #80]	; (800c028 <prvTaskExitError+0x5c>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfde:	d00c      	beq.n	800bffa <prvTaskExitError+0x2e>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	60fb      	str	r3, [r7, #12]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <prvTaskExitError+0x2c>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	b672      	cpsid	i
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	b662      	cpsie	i
 800c00e:	60bb      	str	r3, [r7, #8]
}
 800c010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c012:	bf00      	nop
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0fc      	beq.n	800c014 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	20000048 	.word	0x20000048
 800c02c:	00000000 	.word	0x00000000

0800c030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c030:	4b07      	ldr	r3, [pc, #28]	; (800c050 <pxCurrentTCBConst2>)
 800c032:	6819      	ldr	r1, [r3, #0]
 800c034:	6808      	ldr	r0, [r1, #0]
 800c036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03a:	f380 8809 	msr	PSP, r0
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f04f 0000 	mov.w	r0, #0
 800c046:	f380 8811 	msr	BASEPRI, r0
 800c04a:	4770      	bx	lr
 800c04c:	f3af 8000 	nop.w

0800c050 <pxCurrentTCBConst2>:
 800c050:	20000cec 	.word	0x20000cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop

0800c058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c058:	4808      	ldr	r0, [pc, #32]	; (800c07c <prvPortStartFirstTask+0x24>)
 800c05a:	6800      	ldr	r0, [r0, #0]
 800c05c:	6800      	ldr	r0, [r0, #0]
 800c05e:	f380 8808 	msr	MSP, r0
 800c062:	f04f 0000 	mov.w	r0, #0
 800c066:	f380 8814 	msr	CONTROL, r0
 800c06a:	b662      	cpsie	i
 800c06c:	b661      	cpsie	f
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	df00      	svc	0
 800c078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c07a:	bf00      	nop
 800c07c:	e000ed08 	.word	0xe000ed08

0800c080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c086:	4b37      	ldr	r3, [pc, #220]	; (800c164 <xPortStartScheduler+0xe4>)
 800c088:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	22ff      	movs	r2, #255	; 0xff
 800c096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	4b2f      	ldr	r3, [pc, #188]	; (800c168 <xPortStartScheduler+0xe8>)
 800c0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0ae:	4b2f      	ldr	r3, [pc, #188]	; (800c16c <xPortStartScheduler+0xec>)
 800c0b0:	2207      	movs	r2, #7
 800c0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0b4:	e009      	b.n	800c0ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c0b6:	4b2d      	ldr	r3, [pc, #180]	; (800c16c <xPortStartScheduler+0xec>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	4a2b      	ldr	r2, [pc, #172]	; (800c16c <xPortStartScheduler+0xec>)
 800c0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0c0:	78fb      	ldrb	r3, [r7, #3]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0ca:	78fb      	ldrb	r3, [r7, #3]
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d2:	2b80      	cmp	r3, #128	; 0x80
 800c0d4:	d0ef      	beq.n	800c0b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0d6:	4b25      	ldr	r3, [pc, #148]	; (800c16c <xPortStartScheduler+0xec>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f1c3 0307 	rsb	r3, r3, #7
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	d00c      	beq.n	800c0fc <xPortStartScheduler+0x7c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	b672      	cpsid	i
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	b662      	cpsie	i
 800c0f6:	60bb      	str	r3, [r7, #8]
}
 800c0f8:	bf00      	nop
 800c0fa:	e7fe      	b.n	800c0fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0fc:	4b1b      	ldr	r3, [pc, #108]	; (800c16c <xPortStartScheduler+0xec>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	4a1a      	ldr	r2, [pc, #104]	; (800c16c <xPortStartScheduler+0xec>)
 800c104:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c106:	4b19      	ldr	r3, [pc, #100]	; (800c16c <xPortStartScheduler+0xec>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c10e:	4a17      	ldr	r2, [pc, #92]	; (800c16c <xPortStartScheduler+0xec>)
 800c110:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	b2da      	uxtb	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c11a:	4b15      	ldr	r3, [pc, #84]	; (800c170 <xPortStartScheduler+0xf0>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a14      	ldr	r2, [pc, #80]	; (800c170 <xPortStartScheduler+0xf0>)
 800c120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c124:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c126:	4b12      	ldr	r3, [pc, #72]	; (800c170 <xPortStartScheduler+0xf0>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a11      	ldr	r2, [pc, #68]	; (800c170 <xPortStartScheduler+0xf0>)
 800c12c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c130:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c132:	f000 f8dd 	bl	800c2f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c136:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <xPortStartScheduler+0xf4>)
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c13c:	f000 f8fc 	bl	800c338 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c140:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <xPortStartScheduler+0xf8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a0c      	ldr	r2, [pc, #48]	; (800c178 <xPortStartScheduler+0xf8>)
 800c146:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c14a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c14c:	f7ff ff84 	bl	800c058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c150:	f7ff fd62 	bl	800bc18 <vTaskSwitchContext>
	prvTaskExitError();
 800c154:	f7ff ff3a 	bl	800bfcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	e000e400 	.word	0xe000e400
 800c168:	20000e18 	.word	0x20000e18
 800c16c:	20000e1c 	.word	0x20000e1c
 800c170:	e000ed20 	.word	0xe000ed20
 800c174:	20000048 	.word	0x20000048
 800c178:	e000ef34 	.word	0xe000ef34

0800c17c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	b672      	cpsid	i
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	b662      	cpsie	i
 800c196:	607b      	str	r3, [r7, #4]
}
 800c198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c19a:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <vPortEnterCritical+0x60>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	4a0e      	ldr	r2, [pc, #56]	; (800c1dc <vPortEnterCritical+0x60>)
 800c1a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1a4:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <vPortEnterCritical+0x60>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d111      	bne.n	800c1d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <vPortEnterCritical+0x64>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00c      	beq.n	800c1d0 <vPortEnterCritical+0x54>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ba:	b672      	cpsid	i
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	b662      	cpsie	i
 800c1ca:	603b      	str	r3, [r7, #0]
}
 800c1cc:	bf00      	nop
 800c1ce:	e7fe      	b.n	800c1ce <vPortEnterCritical+0x52>
	}
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20000048 	.word	0x20000048
 800c1e0:	e000ed04 	.word	0xe000ed04

0800c1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1ea:	4b13      	ldr	r3, [pc, #76]	; (800c238 <vPortExitCritical+0x54>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10c      	bne.n	800c20c <vPortExitCritical+0x28>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	b672      	cpsid	i
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	b662      	cpsie	i
 800c206:	607b      	str	r3, [r7, #4]
}
 800c208:	bf00      	nop
 800c20a:	e7fe      	b.n	800c20a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c20c:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <vPortExitCritical+0x54>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3b01      	subs	r3, #1
 800c212:	4a09      	ldr	r2, [pc, #36]	; (800c238 <vPortExitCritical+0x54>)
 800c214:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c216:	4b08      	ldr	r3, [pc, #32]	; (800c238 <vPortExitCritical+0x54>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d105      	bne.n	800c22a <vPortExitCritical+0x46>
 800c21e:	2300      	movs	r3, #0
 800c220:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c228:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	20000048 	.word	0x20000048
 800c23c:	00000000 	.word	0x00000000

0800c240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c240:	f3ef 8009 	mrs	r0, PSP
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <pxCurrentTCBConst>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	f01e 0f10 	tst.w	lr, #16
 800c250:	bf08      	it	eq
 800c252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25a:	6010      	str	r0, [r2, #0]
 800c25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c264:	b672      	cpsid	i
 800c266:	f380 8811 	msr	BASEPRI, r0
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	b662      	cpsie	i
 800c274:	f7ff fcd0 	bl	800bc18 <vTaskSwitchContext>
 800c278:	f04f 0000 	mov.w	r0, #0
 800c27c:	f380 8811 	msr	BASEPRI, r0
 800c280:	bc09      	pop	{r0, r3}
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	6808      	ldr	r0, [r1, #0]
 800c286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	f01e 0f10 	tst.w	lr, #16
 800c28e:	bf08      	it	eq
 800c290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c294:	f380 8809 	msr	PSP, r0
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop

0800c2a0 <pxCurrentTCBConst>:
 800c2a0:	20000cec 	.word	0x20000cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	b672      	cpsid	i
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	b662      	cpsie	i
 800c2c2:	607b      	str	r3, [r7, #4]
}
 800c2c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2c6:	f7ff fbed 	bl	800baa4 <xTaskIncrementTick>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d003      	beq.n	800c2d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2d0:	4b06      	ldr	r3, [pc, #24]	; (800c2ec <SysTick_Handler+0x44>)
 800c2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d6:	601a      	str	r2, [r3, #0]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	f383 8811 	msr	BASEPRI, r3
}
 800c2e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	e000ed04 	.word	0xe000ed04

0800c2f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2f4:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <vPortSetupTimerInterrupt+0x34>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2fa:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <vPortSetupTimerInterrupt+0x38>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c300:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <vPortSetupTimerInterrupt+0x3c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a0a      	ldr	r2, [pc, #40]	; (800c330 <vPortSetupTimerInterrupt+0x40>)
 800c306:	fba2 2303 	umull	r2, r3, r2, r3
 800c30a:	099b      	lsrs	r3, r3, #6
 800c30c:	4a09      	ldr	r2, [pc, #36]	; (800c334 <vPortSetupTimerInterrupt+0x44>)
 800c30e:	3b01      	subs	r3, #1
 800c310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c312:	4b04      	ldr	r3, [pc, #16]	; (800c324 <vPortSetupTimerInterrupt+0x34>)
 800c314:	2207      	movs	r2, #7
 800c316:	601a      	str	r2, [r3, #0]
}
 800c318:	bf00      	nop
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	e000e010 	.word	0xe000e010
 800c328:	e000e018 	.word	0xe000e018
 800c32c:	2000003c 	.word	0x2000003c
 800c330:	10624dd3 	.word	0x10624dd3
 800c334:	e000e014 	.word	0xe000e014

0800c338 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c338:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c348 <vPortEnableVFP+0x10>
 800c33c:	6801      	ldr	r1, [r0, #0]
 800c33e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c342:	6001      	str	r1, [r0, #0]
 800c344:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c346:	bf00      	nop
 800c348:	e000ed88 	.word	0xe000ed88

0800c34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08a      	sub	sp, #40	; 0x28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c354:	2300      	movs	r3, #0
 800c356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c358:	f7ff fae8 	bl	800b92c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c35c:	4b5b      	ldr	r3, [pc, #364]	; (800c4cc <pvPortMalloc+0x180>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c364:	f000 f91a 	bl	800c59c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c368:	4b59      	ldr	r3, [pc, #356]	; (800c4d0 <pvPortMalloc+0x184>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4013      	ands	r3, r2
 800c370:	2b00      	cmp	r3, #0
 800c372:	f040 8092 	bne.w	800c49a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01f      	beq.n	800c3bc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c37c:	2208      	movs	r2, #8
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4413      	add	r3, r2
 800c382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d016      	beq.n	800c3bc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f023 0307 	bic.w	r3, r3, #7
 800c394:	3308      	adds	r3, #8
 800c396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00c      	beq.n	800c3bc <pvPortMalloc+0x70>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	b672      	cpsid	i
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	b662      	cpsie	i
 800c3b6:	617b      	str	r3, [r7, #20]
}
 800c3b8:	bf00      	nop
 800c3ba:	e7fe      	b.n	800c3ba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d06b      	beq.n	800c49a <pvPortMalloc+0x14e>
 800c3c2:	4b44      	ldr	r3, [pc, #272]	; (800c4d4 <pvPortMalloc+0x188>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d866      	bhi.n	800c49a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3cc:	4b42      	ldr	r3, [pc, #264]	; (800c4d8 <pvPortMalloc+0x18c>)
 800c3ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3d0:	4b41      	ldr	r3, [pc, #260]	; (800c4d8 <pvPortMalloc+0x18c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3d6:	e004      	b.n	800c3e2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d903      	bls.n	800c3f4 <pvPortMalloc+0xa8>
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1f1      	bne.n	800c3d8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3f4:	4b35      	ldr	r3, [pc, #212]	; (800c4cc <pvPortMalloc+0x180>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d04d      	beq.n	800c49a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2208      	movs	r2, #8
 800c404:	4413      	add	r3, r2
 800c406:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	685a      	ldr	r2, [r3, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	1ad2      	subs	r2, r2, r3
 800c418:	2308      	movs	r3, #8
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d921      	bls.n	800c464 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4413      	add	r3, r2
 800c426:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	f003 0307 	and.w	r3, r3, #7
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <pvPortMalloc+0x100>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	b672      	cpsid	i
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	b662      	cpsie	i
 800c446:	613b      	str	r3, [r7, #16]
}
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	1ad2      	subs	r2, r2, r3
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c45e:	69b8      	ldr	r0, [r7, #24]
 800c460:	f000 f8fe 	bl	800c660 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c464:	4b1b      	ldr	r3, [pc, #108]	; (800c4d4 <pvPortMalloc+0x188>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	4a19      	ldr	r2, [pc, #100]	; (800c4d4 <pvPortMalloc+0x188>)
 800c470:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c472:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <pvPortMalloc+0x188>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	4b19      	ldr	r3, [pc, #100]	; (800c4dc <pvPortMalloc+0x190>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d203      	bcs.n	800c486 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c47e:	4b15      	ldr	r3, [pc, #84]	; (800c4d4 <pvPortMalloc+0x188>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a16      	ldr	r2, [pc, #88]	; (800c4dc <pvPortMalloc+0x190>)
 800c484:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	685a      	ldr	r2, [r3, #4]
 800c48a:	4b11      	ldr	r3, [pc, #68]	; (800c4d0 <pvPortMalloc+0x184>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	431a      	orrs	r2, r3
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	2200      	movs	r2, #0
 800c498:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c49a:	f7ff fa55 	bl	800b948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	f003 0307 	and.w	r3, r3, #7
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <pvPortMalloc+0x176>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ac:	b672      	cpsid	i
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	b662      	cpsie	i
 800c4bc:	60fb      	str	r3, [r7, #12]
}
 800c4be:	bf00      	nop
 800c4c0:	e7fe      	b.n	800c4c0 <pvPortMalloc+0x174>
	return pvReturn;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3728      	adds	r7, #40	; 0x28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	20004a28 	.word	0x20004a28
 800c4d0:	20004a34 	.word	0x20004a34
 800c4d4:	20004a2c 	.word	0x20004a2c
 800c4d8:	20004a20 	.word	0x20004a20
 800c4dc:	20004a30 	.word	0x20004a30

0800c4e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d04c      	beq.n	800c58c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4f2:	2308      	movs	r3, #8
 800c4f4:	425b      	negs	r3, r3
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	4b23      	ldr	r3, [pc, #140]	; (800c594 <vPortFree+0xb4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4013      	ands	r3, r2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10c      	bne.n	800c528 <vPortFree+0x48>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	60fb      	str	r3, [r7, #12]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00c      	beq.n	800c54a <vPortFree+0x6a>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	b672      	cpsid	i
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	b662      	cpsie	i
 800c544:	60bb      	str	r3, [r7, #8]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4b11      	ldr	r3, [pc, #68]	; (800c594 <vPortFree+0xb4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4013      	ands	r3, r2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d019      	beq.n	800c58c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d115      	bne.n	800c58c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	4b0b      	ldr	r3, [pc, #44]	; (800c594 <vPortFree+0xb4>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	43db      	mvns	r3, r3
 800c56a:	401a      	ands	r2, r3
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c570:	f7ff f9dc 	bl	800b92c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	4b07      	ldr	r3, [pc, #28]	; (800c598 <vPortFree+0xb8>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4413      	add	r3, r2
 800c57e:	4a06      	ldr	r2, [pc, #24]	; (800c598 <vPortFree+0xb8>)
 800c580:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c582:	6938      	ldr	r0, [r7, #16]
 800c584:	f000 f86c 	bl	800c660 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c588:	f7ff f9de 	bl	800b948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c58c:	bf00      	nop
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20004a34 	.word	0x20004a34
 800c598:	20004a2c 	.word	0x20004a2c

0800c59c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c5a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5a8:	4b27      	ldr	r3, [pc, #156]	; (800c648 <prvHeapInit+0xac>)
 800c5aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f003 0307 	and.w	r3, r3, #7
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00c      	beq.n	800c5d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3307      	adds	r3, #7
 800c5ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	4a1f      	ldr	r2, [pc, #124]	; (800c648 <prvHeapInit+0xac>)
 800c5cc:	4413      	add	r3, r2
 800c5ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5d4:	4a1d      	ldr	r2, [pc, #116]	; (800c64c <prvHeapInit+0xb0>)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5da:	4b1c      	ldr	r3, [pc, #112]	; (800c64c <prvHeapInit+0xb0>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5e8:	2208      	movs	r2, #8
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	1a9b      	subs	r3, r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4a15      	ldr	r2, [pc, #84]	; (800c650 <prvHeapInit+0xb4>)
 800c5fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5fe:	4b14      	ldr	r3, [pc, #80]	; (800c650 <prvHeapInit+0xb4>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2200      	movs	r2, #0
 800c604:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c606:	4b12      	ldr	r3, [pc, #72]	; (800c650 <prvHeapInit+0xb4>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	1ad2      	subs	r2, r2, r3
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c61c:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <prvHeapInit+0xb4>)
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	4a0a      	ldr	r2, [pc, #40]	; (800c654 <prvHeapInit+0xb8>)
 800c62a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	4a09      	ldr	r2, [pc, #36]	; (800c658 <prvHeapInit+0xbc>)
 800c632:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <prvHeapInit+0xc0>)
 800c636:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c63a:	601a      	str	r2, [r3, #0]
}
 800c63c:	bf00      	nop
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	20000e20 	.word	0x20000e20
 800c64c:	20004a20 	.word	0x20004a20
 800c650:	20004a28 	.word	0x20004a28
 800c654:	20004a30 	.word	0x20004a30
 800c658:	20004a2c 	.word	0x20004a2c
 800c65c:	20004a34 	.word	0x20004a34

0800c660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c668:	4b28      	ldr	r3, [pc, #160]	; (800c70c <prvInsertBlockIntoFreeList+0xac>)
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	e002      	b.n	800c674 <prvInsertBlockIntoFreeList+0x14>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d8f7      	bhi.n	800c66e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	4413      	add	r3, r2
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d108      	bne.n	800c6a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	685a      	ldr	r2, [r3, #4]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	441a      	add	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	441a      	add	r2, r3
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d118      	bne.n	800c6e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	4b15      	ldr	r3, [pc, #84]	; (800c710 <prvInsertBlockIntoFreeList+0xb0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d00d      	beq.n	800c6de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	441a      	add	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	e008      	b.n	800c6f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6de:	4b0c      	ldr	r3, [pc, #48]	; (800c710 <prvInsertBlockIntoFreeList+0xb0>)
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	e003      	b.n	800c6f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d002      	beq.n	800c6fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6fe:	bf00      	nop
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	20004a20 	.word	0x20004a20
 800c710:	20004a28 	.word	0x20004a28

0800c714 <__errno>:
 800c714:	4b01      	ldr	r3, [pc, #4]	; (800c71c <__errno+0x8>)
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	2000004c 	.word	0x2000004c

0800c720 <__libc_init_array>:
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	4d0d      	ldr	r5, [pc, #52]	; (800c758 <__libc_init_array+0x38>)
 800c724:	4c0d      	ldr	r4, [pc, #52]	; (800c75c <__libc_init_array+0x3c>)
 800c726:	1b64      	subs	r4, r4, r5
 800c728:	10a4      	asrs	r4, r4, #2
 800c72a:	2600      	movs	r6, #0
 800c72c:	42a6      	cmp	r6, r4
 800c72e:	d109      	bne.n	800c744 <__libc_init_array+0x24>
 800c730:	4d0b      	ldr	r5, [pc, #44]	; (800c760 <__libc_init_array+0x40>)
 800c732:	4c0c      	ldr	r4, [pc, #48]	; (800c764 <__libc_init_array+0x44>)
 800c734:	f000 fcf8 	bl	800d128 <_init>
 800c738:	1b64      	subs	r4, r4, r5
 800c73a:	10a4      	asrs	r4, r4, #2
 800c73c:	2600      	movs	r6, #0
 800c73e:	42a6      	cmp	r6, r4
 800c740:	d105      	bne.n	800c74e <__libc_init_array+0x2e>
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	f855 3b04 	ldr.w	r3, [r5], #4
 800c748:	4798      	blx	r3
 800c74a:	3601      	adds	r6, #1
 800c74c:	e7ee      	b.n	800c72c <__libc_init_array+0xc>
 800c74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c752:	4798      	blx	r3
 800c754:	3601      	adds	r6, #1
 800c756:	e7f2      	b.n	800c73e <__libc_init_array+0x1e>
 800c758:	0804ef18 	.word	0x0804ef18
 800c75c:	0804ef18 	.word	0x0804ef18
 800c760:	0804ef18 	.word	0x0804ef18
 800c764:	0804ef1c 	.word	0x0804ef1c

0800c768 <__retarget_lock_acquire_recursive>:
 800c768:	4770      	bx	lr

0800c76a <__retarget_lock_release_recursive>:
 800c76a:	4770      	bx	lr

0800c76c <memcpy>:
 800c76c:	440a      	add	r2, r1
 800c76e:	4291      	cmp	r1, r2
 800c770:	f100 33ff 	add.w	r3, r0, #4294967295
 800c774:	d100      	bne.n	800c778 <memcpy+0xc>
 800c776:	4770      	bx	lr
 800c778:	b510      	push	{r4, lr}
 800c77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c77e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c782:	4291      	cmp	r1, r2
 800c784:	d1f9      	bne.n	800c77a <memcpy+0xe>
 800c786:	bd10      	pop	{r4, pc}

0800c788 <memset>:
 800c788:	4402      	add	r2, r0
 800c78a:	4603      	mov	r3, r0
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d100      	bne.n	800c792 <memset+0xa>
 800c790:	4770      	bx	lr
 800c792:	f803 1b01 	strb.w	r1, [r3], #1
 800c796:	e7f9      	b.n	800c78c <memset+0x4>

0800c798 <sbrk_aligned>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	4e0e      	ldr	r6, [pc, #56]	; (800c7d4 <sbrk_aligned+0x3c>)
 800c79c:	460c      	mov	r4, r1
 800c79e:	6831      	ldr	r1, [r6, #0]
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	b911      	cbnz	r1, 800c7aa <sbrk_aligned+0x12>
 800c7a4:	f000 f8f6 	bl	800c994 <_sbrk_r>
 800c7a8:	6030      	str	r0, [r6, #0]
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f000 f8f1 	bl	800c994 <_sbrk_r>
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	d00a      	beq.n	800c7cc <sbrk_aligned+0x34>
 800c7b6:	1cc4      	adds	r4, r0, #3
 800c7b8:	f024 0403 	bic.w	r4, r4, #3
 800c7bc:	42a0      	cmp	r0, r4
 800c7be:	d007      	beq.n	800c7d0 <sbrk_aligned+0x38>
 800c7c0:	1a21      	subs	r1, r4, r0
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f000 f8e6 	bl	800c994 <_sbrk_r>
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d101      	bne.n	800c7d0 <sbrk_aligned+0x38>
 800c7cc:	f04f 34ff 	mov.w	r4, #4294967295
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	bd70      	pop	{r4, r5, r6, pc}
 800c7d4:	20004a40 	.word	0x20004a40

0800c7d8 <_malloc_r>:
 800c7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7dc:	1ccd      	adds	r5, r1, #3
 800c7de:	f025 0503 	bic.w	r5, r5, #3
 800c7e2:	3508      	adds	r5, #8
 800c7e4:	2d0c      	cmp	r5, #12
 800c7e6:	bf38      	it	cc
 800c7e8:	250c      	movcc	r5, #12
 800c7ea:	2d00      	cmp	r5, #0
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	db01      	blt.n	800c7f4 <_malloc_r+0x1c>
 800c7f0:	42a9      	cmp	r1, r5
 800c7f2:	d905      	bls.n	800c800 <_malloc_r+0x28>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c800:	4e2e      	ldr	r6, [pc, #184]	; (800c8bc <_malloc_r+0xe4>)
 800c802:	f000 f8f7 	bl	800c9f4 <__malloc_lock>
 800c806:	6833      	ldr	r3, [r6, #0]
 800c808:	461c      	mov	r4, r3
 800c80a:	bb34      	cbnz	r4, 800c85a <_malloc_r+0x82>
 800c80c:	4629      	mov	r1, r5
 800c80e:	4638      	mov	r0, r7
 800c810:	f7ff ffc2 	bl	800c798 <sbrk_aligned>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	4604      	mov	r4, r0
 800c818:	d14d      	bne.n	800c8b6 <_malloc_r+0xde>
 800c81a:	6834      	ldr	r4, [r6, #0]
 800c81c:	4626      	mov	r6, r4
 800c81e:	2e00      	cmp	r6, #0
 800c820:	d140      	bne.n	800c8a4 <_malloc_r+0xcc>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	4631      	mov	r1, r6
 800c826:	4638      	mov	r0, r7
 800c828:	eb04 0803 	add.w	r8, r4, r3
 800c82c:	f000 f8b2 	bl	800c994 <_sbrk_r>
 800c830:	4580      	cmp	r8, r0
 800c832:	d13a      	bne.n	800c8aa <_malloc_r+0xd2>
 800c834:	6821      	ldr	r1, [r4, #0]
 800c836:	3503      	adds	r5, #3
 800c838:	1a6d      	subs	r5, r5, r1
 800c83a:	f025 0503 	bic.w	r5, r5, #3
 800c83e:	3508      	adds	r5, #8
 800c840:	2d0c      	cmp	r5, #12
 800c842:	bf38      	it	cc
 800c844:	250c      	movcc	r5, #12
 800c846:	4629      	mov	r1, r5
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ffa5 	bl	800c798 <sbrk_aligned>
 800c84e:	3001      	adds	r0, #1
 800c850:	d02b      	beq.n	800c8aa <_malloc_r+0xd2>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	442b      	add	r3, r5
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	e00e      	b.n	800c878 <_malloc_r+0xa0>
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	1b52      	subs	r2, r2, r5
 800c85e:	d41e      	bmi.n	800c89e <_malloc_r+0xc6>
 800c860:	2a0b      	cmp	r2, #11
 800c862:	d916      	bls.n	800c892 <_malloc_r+0xba>
 800c864:	1961      	adds	r1, r4, r5
 800c866:	42a3      	cmp	r3, r4
 800c868:	6025      	str	r5, [r4, #0]
 800c86a:	bf18      	it	ne
 800c86c:	6059      	strne	r1, [r3, #4]
 800c86e:	6863      	ldr	r3, [r4, #4]
 800c870:	bf08      	it	eq
 800c872:	6031      	streq	r1, [r6, #0]
 800c874:	5162      	str	r2, [r4, r5]
 800c876:	604b      	str	r3, [r1, #4]
 800c878:	4638      	mov	r0, r7
 800c87a:	f104 060b 	add.w	r6, r4, #11
 800c87e:	f000 f8bf 	bl	800ca00 <__malloc_unlock>
 800c882:	f026 0607 	bic.w	r6, r6, #7
 800c886:	1d23      	adds	r3, r4, #4
 800c888:	1af2      	subs	r2, r6, r3
 800c88a:	d0b6      	beq.n	800c7fa <_malloc_r+0x22>
 800c88c:	1b9b      	subs	r3, r3, r6
 800c88e:	50a3      	str	r3, [r4, r2]
 800c890:	e7b3      	b.n	800c7fa <_malloc_r+0x22>
 800c892:	6862      	ldr	r2, [r4, #4]
 800c894:	42a3      	cmp	r3, r4
 800c896:	bf0c      	ite	eq
 800c898:	6032      	streq	r2, [r6, #0]
 800c89a:	605a      	strne	r2, [r3, #4]
 800c89c:	e7ec      	b.n	800c878 <_malloc_r+0xa0>
 800c89e:	4623      	mov	r3, r4
 800c8a0:	6864      	ldr	r4, [r4, #4]
 800c8a2:	e7b2      	b.n	800c80a <_malloc_r+0x32>
 800c8a4:	4634      	mov	r4, r6
 800c8a6:	6876      	ldr	r6, [r6, #4]
 800c8a8:	e7b9      	b.n	800c81e <_malloc_r+0x46>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	603b      	str	r3, [r7, #0]
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	f000 f8a6 	bl	800ca00 <__malloc_unlock>
 800c8b4:	e7a1      	b.n	800c7fa <_malloc_r+0x22>
 800c8b6:	6025      	str	r5, [r4, #0]
 800c8b8:	e7de      	b.n	800c878 <_malloc_r+0xa0>
 800c8ba:	bf00      	nop
 800c8bc:	20004a3c 	.word	0x20004a3c

0800c8c0 <cleanup_glue>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	6809      	ldr	r1, [r1, #0]
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	b109      	cbz	r1, 800c8ce <cleanup_glue+0xe>
 800c8ca:	f7ff fff9 	bl	800c8c0 <cleanup_glue>
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d6:	f000 b899 	b.w	800ca0c <_free_r>
	...

0800c8dc <_reclaim_reent>:
 800c8dc:	4b2c      	ldr	r3, [pc, #176]	; (800c990 <_reclaim_reent+0xb4>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4283      	cmp	r3, r0
 800c8e2:	b570      	push	{r4, r5, r6, lr}
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	d051      	beq.n	800c98c <_reclaim_reent+0xb0>
 800c8e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c8ea:	b143      	cbz	r3, 800c8fe <_reclaim_reent+0x22>
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d14a      	bne.n	800c988 <_reclaim_reent+0xac>
 800c8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8f4:	6819      	ldr	r1, [r3, #0]
 800c8f6:	b111      	cbz	r1, 800c8fe <_reclaim_reent+0x22>
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 f887 	bl	800ca0c <_free_r>
 800c8fe:	6961      	ldr	r1, [r4, #20]
 800c900:	b111      	cbz	r1, 800c908 <_reclaim_reent+0x2c>
 800c902:	4620      	mov	r0, r4
 800c904:	f000 f882 	bl	800ca0c <_free_r>
 800c908:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c90a:	b111      	cbz	r1, 800c912 <_reclaim_reent+0x36>
 800c90c:	4620      	mov	r0, r4
 800c90e:	f000 f87d 	bl	800ca0c <_free_r>
 800c912:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c914:	b111      	cbz	r1, 800c91c <_reclaim_reent+0x40>
 800c916:	4620      	mov	r0, r4
 800c918:	f000 f878 	bl	800ca0c <_free_r>
 800c91c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c91e:	b111      	cbz	r1, 800c926 <_reclaim_reent+0x4a>
 800c920:	4620      	mov	r0, r4
 800c922:	f000 f873 	bl	800ca0c <_free_r>
 800c926:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c928:	b111      	cbz	r1, 800c930 <_reclaim_reent+0x54>
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 f86e 	bl	800ca0c <_free_r>
 800c930:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c932:	b111      	cbz	r1, 800c93a <_reclaim_reent+0x5e>
 800c934:	4620      	mov	r0, r4
 800c936:	f000 f869 	bl	800ca0c <_free_r>
 800c93a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c93c:	b111      	cbz	r1, 800c944 <_reclaim_reent+0x68>
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 f864 	bl	800ca0c <_free_r>
 800c944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c946:	b111      	cbz	r1, 800c94e <_reclaim_reent+0x72>
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 f85f 	bl	800ca0c <_free_r>
 800c94e:	69a3      	ldr	r3, [r4, #24]
 800c950:	b1e3      	cbz	r3, 800c98c <_reclaim_reent+0xb0>
 800c952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c954:	4620      	mov	r0, r4
 800c956:	4798      	blx	r3
 800c958:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c95a:	b1b9      	cbz	r1, 800c98c <_reclaim_reent+0xb0>
 800c95c:	4620      	mov	r0, r4
 800c95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c962:	f7ff bfad 	b.w	800c8c0 <cleanup_glue>
 800c966:	5949      	ldr	r1, [r1, r5]
 800c968:	b941      	cbnz	r1, 800c97c <_reclaim_reent+0xa0>
 800c96a:	3504      	adds	r5, #4
 800c96c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c96e:	2d80      	cmp	r5, #128	; 0x80
 800c970:	68d9      	ldr	r1, [r3, #12]
 800c972:	d1f8      	bne.n	800c966 <_reclaim_reent+0x8a>
 800c974:	4620      	mov	r0, r4
 800c976:	f000 f849 	bl	800ca0c <_free_r>
 800c97a:	e7ba      	b.n	800c8f2 <_reclaim_reent+0x16>
 800c97c:	680e      	ldr	r6, [r1, #0]
 800c97e:	4620      	mov	r0, r4
 800c980:	f000 f844 	bl	800ca0c <_free_r>
 800c984:	4631      	mov	r1, r6
 800c986:	e7ef      	b.n	800c968 <_reclaim_reent+0x8c>
 800c988:	2500      	movs	r5, #0
 800c98a:	e7ef      	b.n	800c96c <_reclaim_reent+0x90>
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
 800c98e:	bf00      	nop
 800c990:	2000004c 	.word	0x2000004c

0800c994 <_sbrk_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d06      	ldr	r5, [pc, #24]	; (800c9b0 <_sbrk_r+0x1c>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	602b      	str	r3, [r5, #0]
 800c9a0:	f7f7 fd38 	bl	8004414 <_sbrk>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d102      	bne.n	800c9ae <_sbrk_r+0x1a>
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	b103      	cbz	r3, 800c9ae <_sbrk_r+0x1a>
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	20004a44 	.word	0x20004a44

0800c9b4 <siprintf>:
 800c9b4:	b40e      	push	{r1, r2, r3}
 800c9b6:	b500      	push	{lr}
 800c9b8:	b09c      	sub	sp, #112	; 0x70
 800c9ba:	ab1d      	add	r3, sp, #116	; 0x74
 800c9bc:	9002      	str	r0, [sp, #8]
 800c9be:	9006      	str	r0, [sp, #24]
 800c9c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9c4:	4809      	ldr	r0, [pc, #36]	; (800c9ec <siprintf+0x38>)
 800c9c6:	9107      	str	r1, [sp, #28]
 800c9c8:	9104      	str	r1, [sp, #16]
 800c9ca:	4909      	ldr	r1, [pc, #36]	; (800c9f0 <siprintf+0x3c>)
 800c9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d0:	9105      	str	r1, [sp, #20]
 800c9d2:	6800      	ldr	r0, [r0, #0]
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	a902      	add	r1, sp, #8
 800c9d8:	f000 f8c0 	bl	800cb5c <_svfiprintf_r>
 800c9dc:	9b02      	ldr	r3, [sp, #8]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	b01c      	add	sp, #112	; 0x70
 800c9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9e8:	b003      	add	sp, #12
 800c9ea:	4770      	bx	lr
 800c9ec:	2000004c 	.word	0x2000004c
 800c9f0:	ffff0208 	.word	0xffff0208

0800c9f4 <__malloc_lock>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__malloc_lock+0x8>)
 800c9f6:	f7ff beb7 	b.w	800c768 <__retarget_lock_acquire_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20004a38 	.word	0x20004a38

0800ca00 <__malloc_unlock>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__malloc_unlock+0x8>)
 800ca02:	f7ff beb2 	b.w	800c76a <__retarget_lock_release_recursive>
 800ca06:	bf00      	nop
 800ca08:	20004a38 	.word	0x20004a38

0800ca0c <_free_r>:
 800ca0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca0e:	2900      	cmp	r1, #0
 800ca10:	d044      	beq.n	800ca9c <_free_r+0x90>
 800ca12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca16:	9001      	str	r0, [sp, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca1e:	bfb8      	it	lt
 800ca20:	18e4      	addlt	r4, r4, r3
 800ca22:	f7ff ffe7 	bl	800c9f4 <__malloc_lock>
 800ca26:	4a1e      	ldr	r2, [pc, #120]	; (800caa0 <_free_r+0x94>)
 800ca28:	9801      	ldr	r0, [sp, #4]
 800ca2a:	6813      	ldr	r3, [r2, #0]
 800ca2c:	b933      	cbnz	r3, 800ca3c <_free_r+0x30>
 800ca2e:	6063      	str	r3, [r4, #4]
 800ca30:	6014      	str	r4, [r2, #0]
 800ca32:	b003      	add	sp, #12
 800ca34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca38:	f7ff bfe2 	b.w	800ca00 <__malloc_unlock>
 800ca3c:	42a3      	cmp	r3, r4
 800ca3e:	d908      	bls.n	800ca52 <_free_r+0x46>
 800ca40:	6825      	ldr	r5, [r4, #0]
 800ca42:	1961      	adds	r1, r4, r5
 800ca44:	428b      	cmp	r3, r1
 800ca46:	bf01      	itttt	eq
 800ca48:	6819      	ldreq	r1, [r3, #0]
 800ca4a:	685b      	ldreq	r3, [r3, #4]
 800ca4c:	1949      	addeq	r1, r1, r5
 800ca4e:	6021      	streq	r1, [r4, #0]
 800ca50:	e7ed      	b.n	800ca2e <_free_r+0x22>
 800ca52:	461a      	mov	r2, r3
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	b10b      	cbz	r3, 800ca5c <_free_r+0x50>
 800ca58:	42a3      	cmp	r3, r4
 800ca5a:	d9fa      	bls.n	800ca52 <_free_r+0x46>
 800ca5c:	6811      	ldr	r1, [r2, #0]
 800ca5e:	1855      	adds	r5, r2, r1
 800ca60:	42a5      	cmp	r5, r4
 800ca62:	d10b      	bne.n	800ca7c <_free_r+0x70>
 800ca64:	6824      	ldr	r4, [r4, #0]
 800ca66:	4421      	add	r1, r4
 800ca68:	1854      	adds	r4, r2, r1
 800ca6a:	42a3      	cmp	r3, r4
 800ca6c:	6011      	str	r1, [r2, #0]
 800ca6e:	d1e0      	bne.n	800ca32 <_free_r+0x26>
 800ca70:	681c      	ldr	r4, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	6053      	str	r3, [r2, #4]
 800ca76:	4421      	add	r1, r4
 800ca78:	6011      	str	r1, [r2, #0]
 800ca7a:	e7da      	b.n	800ca32 <_free_r+0x26>
 800ca7c:	d902      	bls.n	800ca84 <_free_r+0x78>
 800ca7e:	230c      	movs	r3, #12
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	e7d6      	b.n	800ca32 <_free_r+0x26>
 800ca84:	6825      	ldr	r5, [r4, #0]
 800ca86:	1961      	adds	r1, r4, r5
 800ca88:	428b      	cmp	r3, r1
 800ca8a:	bf04      	itt	eq
 800ca8c:	6819      	ldreq	r1, [r3, #0]
 800ca8e:	685b      	ldreq	r3, [r3, #4]
 800ca90:	6063      	str	r3, [r4, #4]
 800ca92:	bf04      	itt	eq
 800ca94:	1949      	addeq	r1, r1, r5
 800ca96:	6021      	streq	r1, [r4, #0]
 800ca98:	6054      	str	r4, [r2, #4]
 800ca9a:	e7ca      	b.n	800ca32 <_free_r+0x26>
 800ca9c:	b003      	add	sp, #12
 800ca9e:	bd30      	pop	{r4, r5, pc}
 800caa0:	20004a3c 	.word	0x20004a3c

0800caa4 <__ssputs_r>:
 800caa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa8:	688e      	ldr	r6, [r1, #8]
 800caaa:	429e      	cmp	r6, r3
 800caac:	4682      	mov	sl, r0
 800caae:	460c      	mov	r4, r1
 800cab0:	4690      	mov	r8, r2
 800cab2:	461f      	mov	r7, r3
 800cab4:	d838      	bhi.n	800cb28 <__ssputs_r+0x84>
 800cab6:	898a      	ldrh	r2, [r1, #12]
 800cab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cabc:	d032      	beq.n	800cb24 <__ssputs_r+0x80>
 800cabe:	6825      	ldr	r5, [r4, #0]
 800cac0:	6909      	ldr	r1, [r1, #16]
 800cac2:	eba5 0901 	sub.w	r9, r5, r1
 800cac6:	6965      	ldr	r5, [r4, #20]
 800cac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cacc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cad0:	3301      	adds	r3, #1
 800cad2:	444b      	add	r3, r9
 800cad4:	106d      	asrs	r5, r5, #1
 800cad6:	429d      	cmp	r5, r3
 800cad8:	bf38      	it	cc
 800cada:	461d      	movcc	r5, r3
 800cadc:	0553      	lsls	r3, r2, #21
 800cade:	d531      	bpl.n	800cb44 <__ssputs_r+0xa0>
 800cae0:	4629      	mov	r1, r5
 800cae2:	f7ff fe79 	bl	800c7d8 <_malloc_r>
 800cae6:	4606      	mov	r6, r0
 800cae8:	b950      	cbnz	r0, 800cb00 <__ssputs_r+0x5c>
 800caea:	230c      	movs	r3, #12
 800caec:	f8ca 3000 	str.w	r3, [sl]
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf6:	81a3      	strh	r3, [r4, #12]
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb00:	6921      	ldr	r1, [r4, #16]
 800cb02:	464a      	mov	r2, r9
 800cb04:	f7ff fe32 	bl	800c76c <memcpy>
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb12:	81a3      	strh	r3, [r4, #12]
 800cb14:	6126      	str	r6, [r4, #16]
 800cb16:	6165      	str	r5, [r4, #20]
 800cb18:	444e      	add	r6, r9
 800cb1a:	eba5 0509 	sub.w	r5, r5, r9
 800cb1e:	6026      	str	r6, [r4, #0]
 800cb20:	60a5      	str	r5, [r4, #8]
 800cb22:	463e      	mov	r6, r7
 800cb24:	42be      	cmp	r6, r7
 800cb26:	d900      	bls.n	800cb2a <__ssputs_r+0x86>
 800cb28:	463e      	mov	r6, r7
 800cb2a:	6820      	ldr	r0, [r4, #0]
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	4641      	mov	r1, r8
 800cb30:	f000 faa8 	bl	800d084 <memmove>
 800cb34:	68a3      	ldr	r3, [r4, #8]
 800cb36:	1b9b      	subs	r3, r3, r6
 800cb38:	60a3      	str	r3, [r4, #8]
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	4433      	add	r3, r6
 800cb3e:	6023      	str	r3, [r4, #0]
 800cb40:	2000      	movs	r0, #0
 800cb42:	e7db      	b.n	800cafc <__ssputs_r+0x58>
 800cb44:	462a      	mov	r2, r5
 800cb46:	f000 fab7 	bl	800d0b8 <_realloc_r>
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d1e1      	bne.n	800cb14 <__ssputs_r+0x70>
 800cb50:	6921      	ldr	r1, [r4, #16]
 800cb52:	4650      	mov	r0, sl
 800cb54:	f7ff ff5a 	bl	800ca0c <_free_r>
 800cb58:	e7c7      	b.n	800caea <__ssputs_r+0x46>
	...

0800cb5c <_svfiprintf_r>:
 800cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	4698      	mov	r8, r3
 800cb62:	898b      	ldrh	r3, [r1, #12]
 800cb64:	061b      	lsls	r3, r3, #24
 800cb66:	b09d      	sub	sp, #116	; 0x74
 800cb68:	4607      	mov	r7, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	4614      	mov	r4, r2
 800cb6e:	d50e      	bpl.n	800cb8e <_svfiprintf_r+0x32>
 800cb70:	690b      	ldr	r3, [r1, #16]
 800cb72:	b963      	cbnz	r3, 800cb8e <_svfiprintf_r+0x32>
 800cb74:	2140      	movs	r1, #64	; 0x40
 800cb76:	f7ff fe2f 	bl	800c7d8 <_malloc_r>
 800cb7a:	6028      	str	r0, [r5, #0]
 800cb7c:	6128      	str	r0, [r5, #16]
 800cb7e:	b920      	cbnz	r0, 800cb8a <_svfiprintf_r+0x2e>
 800cb80:	230c      	movs	r3, #12
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	f04f 30ff 	mov.w	r0, #4294967295
 800cb88:	e0d1      	b.n	800cd2e <_svfiprintf_r+0x1d2>
 800cb8a:	2340      	movs	r3, #64	; 0x40
 800cb8c:	616b      	str	r3, [r5, #20]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	9309      	str	r3, [sp, #36]	; 0x24
 800cb92:	2320      	movs	r3, #32
 800cb94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb98:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb9c:	2330      	movs	r3, #48	; 0x30
 800cb9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd48 <_svfiprintf_r+0x1ec>
 800cba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cba6:	f04f 0901 	mov.w	r9, #1
 800cbaa:	4623      	mov	r3, r4
 800cbac:	469a      	mov	sl, r3
 800cbae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbb2:	b10a      	cbz	r2, 800cbb8 <_svfiprintf_r+0x5c>
 800cbb4:	2a25      	cmp	r2, #37	; 0x25
 800cbb6:	d1f9      	bne.n	800cbac <_svfiprintf_r+0x50>
 800cbb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cbbc:	d00b      	beq.n	800cbd6 <_svfiprintf_r+0x7a>
 800cbbe:	465b      	mov	r3, fp
 800cbc0:	4622      	mov	r2, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	f7ff ff6d 	bl	800caa4 <__ssputs_r>
 800cbca:	3001      	adds	r0, #1
 800cbcc:	f000 80aa 	beq.w	800cd24 <_svfiprintf_r+0x1c8>
 800cbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbd2:	445a      	add	r2, fp
 800cbd4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 80a2 	beq.w	800cd24 <_svfiprintf_r+0x1c8>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbea:	f10a 0a01 	add.w	sl, sl, #1
 800cbee:	9304      	str	r3, [sp, #16]
 800cbf0:	9307      	str	r3, [sp, #28]
 800cbf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbf6:	931a      	str	r3, [sp, #104]	; 0x68
 800cbf8:	4654      	mov	r4, sl
 800cbfa:	2205      	movs	r2, #5
 800cbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc00:	4851      	ldr	r0, [pc, #324]	; (800cd48 <_svfiprintf_r+0x1ec>)
 800cc02:	f7f3 fb05 	bl	8000210 <memchr>
 800cc06:	9a04      	ldr	r2, [sp, #16]
 800cc08:	b9d8      	cbnz	r0, 800cc42 <_svfiprintf_r+0xe6>
 800cc0a:	06d0      	lsls	r0, r2, #27
 800cc0c:	bf44      	itt	mi
 800cc0e:	2320      	movmi	r3, #32
 800cc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc14:	0711      	lsls	r1, r2, #28
 800cc16:	bf44      	itt	mi
 800cc18:	232b      	movmi	r3, #43	; 0x2b
 800cc1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc22:	2b2a      	cmp	r3, #42	; 0x2a
 800cc24:	d015      	beq.n	800cc52 <_svfiprintf_r+0xf6>
 800cc26:	9a07      	ldr	r2, [sp, #28]
 800cc28:	4654      	mov	r4, sl
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	f04f 0c0a 	mov.w	ip, #10
 800cc30:	4621      	mov	r1, r4
 800cc32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc36:	3b30      	subs	r3, #48	; 0x30
 800cc38:	2b09      	cmp	r3, #9
 800cc3a:	d94e      	bls.n	800ccda <_svfiprintf_r+0x17e>
 800cc3c:	b1b0      	cbz	r0, 800cc6c <_svfiprintf_r+0x110>
 800cc3e:	9207      	str	r2, [sp, #28]
 800cc40:	e014      	b.n	800cc6c <_svfiprintf_r+0x110>
 800cc42:	eba0 0308 	sub.w	r3, r0, r8
 800cc46:	fa09 f303 	lsl.w	r3, r9, r3
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	9304      	str	r3, [sp, #16]
 800cc4e:	46a2      	mov	sl, r4
 800cc50:	e7d2      	b.n	800cbf8 <_svfiprintf_r+0x9c>
 800cc52:	9b03      	ldr	r3, [sp, #12]
 800cc54:	1d19      	adds	r1, r3, #4
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	9103      	str	r1, [sp, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfbb      	ittet	lt
 800cc5e:	425b      	neglt	r3, r3
 800cc60:	f042 0202 	orrlt.w	r2, r2, #2
 800cc64:	9307      	strge	r3, [sp, #28]
 800cc66:	9307      	strlt	r3, [sp, #28]
 800cc68:	bfb8      	it	lt
 800cc6a:	9204      	strlt	r2, [sp, #16]
 800cc6c:	7823      	ldrb	r3, [r4, #0]
 800cc6e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc70:	d10c      	bne.n	800cc8c <_svfiprintf_r+0x130>
 800cc72:	7863      	ldrb	r3, [r4, #1]
 800cc74:	2b2a      	cmp	r3, #42	; 0x2a
 800cc76:	d135      	bne.n	800cce4 <_svfiprintf_r+0x188>
 800cc78:	9b03      	ldr	r3, [sp, #12]
 800cc7a:	1d1a      	adds	r2, r3, #4
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	9203      	str	r2, [sp, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	bfb8      	it	lt
 800cc84:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc88:	3402      	adds	r4, #2
 800cc8a:	9305      	str	r3, [sp, #20]
 800cc8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd58 <_svfiprintf_r+0x1fc>
 800cc90:	7821      	ldrb	r1, [r4, #0]
 800cc92:	2203      	movs	r2, #3
 800cc94:	4650      	mov	r0, sl
 800cc96:	f7f3 fabb 	bl	8000210 <memchr>
 800cc9a:	b140      	cbz	r0, 800ccae <_svfiprintf_r+0x152>
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	eba0 000a 	sub.w	r0, r0, sl
 800cca2:	fa03 f000 	lsl.w	r0, r3, r0
 800cca6:	9b04      	ldr	r3, [sp, #16]
 800cca8:	4303      	orrs	r3, r0
 800ccaa:	3401      	adds	r4, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb2:	4826      	ldr	r0, [pc, #152]	; (800cd4c <_svfiprintf_r+0x1f0>)
 800ccb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccb8:	2206      	movs	r2, #6
 800ccba:	f7f3 faa9 	bl	8000210 <memchr>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d038      	beq.n	800cd34 <_svfiprintf_r+0x1d8>
 800ccc2:	4b23      	ldr	r3, [pc, #140]	; (800cd50 <_svfiprintf_r+0x1f4>)
 800ccc4:	bb1b      	cbnz	r3, 800cd0e <_svfiprintf_r+0x1b2>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	3307      	adds	r3, #7
 800ccca:	f023 0307 	bic.w	r3, r3, #7
 800ccce:	3308      	adds	r3, #8
 800ccd0:	9303      	str	r3, [sp, #12]
 800ccd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd4:	4433      	add	r3, r6
 800ccd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd8:	e767      	b.n	800cbaa <_svfiprintf_r+0x4e>
 800ccda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccde:	460c      	mov	r4, r1
 800cce0:	2001      	movs	r0, #1
 800cce2:	e7a5      	b.n	800cc30 <_svfiprintf_r+0xd4>
 800cce4:	2300      	movs	r3, #0
 800cce6:	3401      	adds	r4, #1
 800cce8:	9305      	str	r3, [sp, #20]
 800ccea:	4619      	mov	r1, r3
 800ccec:	f04f 0c0a 	mov.w	ip, #10
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccf6:	3a30      	subs	r2, #48	; 0x30
 800ccf8:	2a09      	cmp	r2, #9
 800ccfa:	d903      	bls.n	800cd04 <_svfiprintf_r+0x1a8>
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d0c5      	beq.n	800cc8c <_svfiprintf_r+0x130>
 800cd00:	9105      	str	r1, [sp, #20]
 800cd02:	e7c3      	b.n	800cc8c <_svfiprintf_r+0x130>
 800cd04:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd08:	4604      	mov	r4, r0
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e7f0      	b.n	800ccf0 <_svfiprintf_r+0x194>
 800cd0e:	ab03      	add	r3, sp, #12
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	462a      	mov	r2, r5
 800cd14:	4b0f      	ldr	r3, [pc, #60]	; (800cd54 <_svfiprintf_r+0x1f8>)
 800cd16:	a904      	add	r1, sp, #16
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f3af 8000 	nop.w
 800cd1e:	1c42      	adds	r2, r0, #1
 800cd20:	4606      	mov	r6, r0
 800cd22:	d1d6      	bne.n	800ccd2 <_svfiprintf_r+0x176>
 800cd24:	89ab      	ldrh	r3, [r5, #12]
 800cd26:	065b      	lsls	r3, r3, #25
 800cd28:	f53f af2c 	bmi.w	800cb84 <_svfiprintf_r+0x28>
 800cd2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd2e:	b01d      	add	sp, #116	; 0x74
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	ab03      	add	r3, sp, #12
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	462a      	mov	r2, r5
 800cd3a:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <_svfiprintf_r+0x1f8>)
 800cd3c:	a904      	add	r1, sp, #16
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f000 f87a 	bl	800ce38 <_printf_i>
 800cd44:	e7eb      	b.n	800cd1e <_svfiprintf_r+0x1c2>
 800cd46:	bf00      	nop
 800cd48:	0804eedc 	.word	0x0804eedc
 800cd4c:	0804eee6 	.word	0x0804eee6
 800cd50:	00000000 	.word	0x00000000
 800cd54:	0800caa5 	.word	0x0800caa5
 800cd58:	0804eee2 	.word	0x0804eee2

0800cd5c <_printf_common>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	4616      	mov	r6, r2
 800cd62:	4699      	mov	r9, r3
 800cd64:	688a      	ldr	r2, [r1, #8]
 800cd66:	690b      	ldr	r3, [r1, #16]
 800cd68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	bfb8      	it	lt
 800cd70:	4613      	movlt	r3, r2
 800cd72:	6033      	str	r3, [r6, #0]
 800cd74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd78:	4607      	mov	r7, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	b10a      	cbz	r2, 800cd82 <_printf_common+0x26>
 800cd7e:	3301      	adds	r3, #1
 800cd80:	6033      	str	r3, [r6, #0]
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	0699      	lsls	r1, r3, #26
 800cd86:	bf42      	ittt	mi
 800cd88:	6833      	ldrmi	r3, [r6, #0]
 800cd8a:	3302      	addmi	r3, #2
 800cd8c:	6033      	strmi	r3, [r6, #0]
 800cd8e:	6825      	ldr	r5, [r4, #0]
 800cd90:	f015 0506 	ands.w	r5, r5, #6
 800cd94:	d106      	bne.n	800cda4 <_printf_common+0x48>
 800cd96:	f104 0a19 	add.w	sl, r4, #25
 800cd9a:	68e3      	ldr	r3, [r4, #12]
 800cd9c:	6832      	ldr	r2, [r6, #0]
 800cd9e:	1a9b      	subs	r3, r3, r2
 800cda0:	42ab      	cmp	r3, r5
 800cda2:	dc26      	bgt.n	800cdf2 <_printf_common+0x96>
 800cda4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cda8:	1e13      	subs	r3, r2, #0
 800cdaa:	6822      	ldr	r2, [r4, #0]
 800cdac:	bf18      	it	ne
 800cdae:	2301      	movne	r3, #1
 800cdb0:	0692      	lsls	r2, r2, #26
 800cdb2:	d42b      	bmi.n	800ce0c <_printf_common+0xb0>
 800cdb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdb8:	4649      	mov	r1, r9
 800cdba:	4638      	mov	r0, r7
 800cdbc:	47c0      	blx	r8
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d01e      	beq.n	800ce00 <_printf_common+0xa4>
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	68e5      	ldr	r5, [r4, #12]
 800cdc6:	6832      	ldr	r2, [r6, #0]
 800cdc8:	f003 0306 	and.w	r3, r3, #6
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	bf08      	it	eq
 800cdd0:	1aad      	subeq	r5, r5, r2
 800cdd2:	68a3      	ldr	r3, [r4, #8]
 800cdd4:	6922      	ldr	r2, [r4, #16]
 800cdd6:	bf0c      	ite	eq
 800cdd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cddc:	2500      	movne	r5, #0
 800cdde:	4293      	cmp	r3, r2
 800cde0:	bfc4      	itt	gt
 800cde2:	1a9b      	subgt	r3, r3, r2
 800cde4:	18ed      	addgt	r5, r5, r3
 800cde6:	2600      	movs	r6, #0
 800cde8:	341a      	adds	r4, #26
 800cdea:	42b5      	cmp	r5, r6
 800cdec:	d11a      	bne.n	800ce24 <_printf_common+0xc8>
 800cdee:	2000      	movs	r0, #0
 800cdf0:	e008      	b.n	800ce04 <_printf_common+0xa8>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	4652      	mov	r2, sl
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	47c0      	blx	r8
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d103      	bne.n	800ce08 <_printf_common+0xac>
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295
 800ce04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce08:	3501      	adds	r5, #1
 800ce0a:	e7c6      	b.n	800cd9a <_printf_common+0x3e>
 800ce0c:	18e1      	adds	r1, r4, r3
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	2030      	movs	r0, #48	; 0x30
 800ce12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce16:	4422      	add	r2, r4
 800ce18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce20:	3302      	adds	r3, #2
 800ce22:	e7c7      	b.n	800cdb4 <_printf_common+0x58>
 800ce24:	2301      	movs	r3, #1
 800ce26:	4622      	mov	r2, r4
 800ce28:	4649      	mov	r1, r9
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	47c0      	blx	r8
 800ce2e:	3001      	adds	r0, #1
 800ce30:	d0e6      	beq.n	800ce00 <_printf_common+0xa4>
 800ce32:	3601      	adds	r6, #1
 800ce34:	e7d9      	b.n	800cdea <_printf_common+0x8e>
	...

0800ce38 <_printf_i>:
 800ce38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	7e0f      	ldrb	r7, [r1, #24]
 800ce3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce40:	2f78      	cmp	r7, #120	; 0x78
 800ce42:	4691      	mov	r9, r2
 800ce44:	4680      	mov	r8, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	469a      	mov	sl, r3
 800ce4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce4e:	d807      	bhi.n	800ce60 <_printf_i+0x28>
 800ce50:	2f62      	cmp	r7, #98	; 0x62
 800ce52:	d80a      	bhi.n	800ce6a <_printf_i+0x32>
 800ce54:	2f00      	cmp	r7, #0
 800ce56:	f000 80d8 	beq.w	800d00a <_printf_i+0x1d2>
 800ce5a:	2f58      	cmp	r7, #88	; 0x58
 800ce5c:	f000 80a3 	beq.w	800cfa6 <_printf_i+0x16e>
 800ce60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce68:	e03a      	b.n	800cee0 <_printf_i+0xa8>
 800ce6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce6e:	2b15      	cmp	r3, #21
 800ce70:	d8f6      	bhi.n	800ce60 <_printf_i+0x28>
 800ce72:	a101      	add	r1, pc, #4	; (adr r1, 800ce78 <_printf_i+0x40>)
 800ce74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce78:	0800ced1 	.word	0x0800ced1
 800ce7c:	0800cee5 	.word	0x0800cee5
 800ce80:	0800ce61 	.word	0x0800ce61
 800ce84:	0800ce61 	.word	0x0800ce61
 800ce88:	0800ce61 	.word	0x0800ce61
 800ce8c:	0800ce61 	.word	0x0800ce61
 800ce90:	0800cee5 	.word	0x0800cee5
 800ce94:	0800ce61 	.word	0x0800ce61
 800ce98:	0800ce61 	.word	0x0800ce61
 800ce9c:	0800ce61 	.word	0x0800ce61
 800cea0:	0800ce61 	.word	0x0800ce61
 800cea4:	0800cff1 	.word	0x0800cff1
 800cea8:	0800cf15 	.word	0x0800cf15
 800ceac:	0800cfd3 	.word	0x0800cfd3
 800ceb0:	0800ce61 	.word	0x0800ce61
 800ceb4:	0800ce61 	.word	0x0800ce61
 800ceb8:	0800d013 	.word	0x0800d013
 800cebc:	0800ce61 	.word	0x0800ce61
 800cec0:	0800cf15 	.word	0x0800cf15
 800cec4:	0800ce61 	.word	0x0800ce61
 800cec8:	0800ce61 	.word	0x0800ce61
 800cecc:	0800cfdb 	.word	0x0800cfdb
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	1d1a      	adds	r2, r3, #4
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	602a      	str	r2, [r5, #0]
 800ced8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cedc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cee0:	2301      	movs	r3, #1
 800cee2:	e0a3      	b.n	800d02c <_printf_i+0x1f4>
 800cee4:	6820      	ldr	r0, [r4, #0]
 800cee6:	6829      	ldr	r1, [r5, #0]
 800cee8:	0606      	lsls	r6, r0, #24
 800ceea:	f101 0304 	add.w	r3, r1, #4
 800ceee:	d50a      	bpl.n	800cf06 <_printf_i+0xce>
 800cef0:	680e      	ldr	r6, [r1, #0]
 800cef2:	602b      	str	r3, [r5, #0]
 800cef4:	2e00      	cmp	r6, #0
 800cef6:	da03      	bge.n	800cf00 <_printf_i+0xc8>
 800cef8:	232d      	movs	r3, #45	; 0x2d
 800cefa:	4276      	negs	r6, r6
 800cefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf00:	485e      	ldr	r0, [pc, #376]	; (800d07c <_printf_i+0x244>)
 800cf02:	230a      	movs	r3, #10
 800cf04:	e019      	b.n	800cf3a <_printf_i+0x102>
 800cf06:	680e      	ldr	r6, [r1, #0]
 800cf08:	602b      	str	r3, [r5, #0]
 800cf0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf0e:	bf18      	it	ne
 800cf10:	b236      	sxthne	r6, r6
 800cf12:	e7ef      	b.n	800cef4 <_printf_i+0xbc>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	6820      	ldr	r0, [r4, #0]
 800cf18:	1d19      	adds	r1, r3, #4
 800cf1a:	6029      	str	r1, [r5, #0]
 800cf1c:	0601      	lsls	r1, r0, #24
 800cf1e:	d501      	bpl.n	800cf24 <_printf_i+0xec>
 800cf20:	681e      	ldr	r6, [r3, #0]
 800cf22:	e002      	b.n	800cf2a <_printf_i+0xf2>
 800cf24:	0646      	lsls	r6, r0, #25
 800cf26:	d5fb      	bpl.n	800cf20 <_printf_i+0xe8>
 800cf28:	881e      	ldrh	r6, [r3, #0]
 800cf2a:	4854      	ldr	r0, [pc, #336]	; (800d07c <_printf_i+0x244>)
 800cf2c:	2f6f      	cmp	r7, #111	; 0x6f
 800cf2e:	bf0c      	ite	eq
 800cf30:	2308      	moveq	r3, #8
 800cf32:	230a      	movne	r3, #10
 800cf34:	2100      	movs	r1, #0
 800cf36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf3a:	6865      	ldr	r5, [r4, #4]
 800cf3c:	60a5      	str	r5, [r4, #8]
 800cf3e:	2d00      	cmp	r5, #0
 800cf40:	bfa2      	ittt	ge
 800cf42:	6821      	ldrge	r1, [r4, #0]
 800cf44:	f021 0104 	bicge.w	r1, r1, #4
 800cf48:	6021      	strge	r1, [r4, #0]
 800cf4a:	b90e      	cbnz	r6, 800cf50 <_printf_i+0x118>
 800cf4c:	2d00      	cmp	r5, #0
 800cf4e:	d04d      	beq.n	800cfec <_printf_i+0x1b4>
 800cf50:	4615      	mov	r5, r2
 800cf52:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf56:	fb03 6711 	mls	r7, r3, r1, r6
 800cf5a:	5dc7      	ldrb	r7, [r0, r7]
 800cf5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf60:	4637      	mov	r7, r6
 800cf62:	42bb      	cmp	r3, r7
 800cf64:	460e      	mov	r6, r1
 800cf66:	d9f4      	bls.n	800cf52 <_printf_i+0x11a>
 800cf68:	2b08      	cmp	r3, #8
 800cf6a:	d10b      	bne.n	800cf84 <_printf_i+0x14c>
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	07de      	lsls	r6, r3, #31
 800cf70:	d508      	bpl.n	800cf84 <_printf_i+0x14c>
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	6861      	ldr	r1, [r4, #4]
 800cf76:	4299      	cmp	r1, r3
 800cf78:	bfde      	ittt	le
 800cf7a:	2330      	movle	r3, #48	; 0x30
 800cf7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf80:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf84:	1b52      	subs	r2, r2, r5
 800cf86:	6122      	str	r2, [r4, #16]
 800cf88:	f8cd a000 	str.w	sl, [sp]
 800cf8c:	464b      	mov	r3, r9
 800cf8e:	aa03      	add	r2, sp, #12
 800cf90:	4621      	mov	r1, r4
 800cf92:	4640      	mov	r0, r8
 800cf94:	f7ff fee2 	bl	800cd5c <_printf_common>
 800cf98:	3001      	adds	r0, #1
 800cf9a:	d14c      	bne.n	800d036 <_printf_i+0x1fe>
 800cf9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa0:	b004      	add	sp, #16
 800cfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa6:	4835      	ldr	r0, [pc, #212]	; (800d07c <_printf_i+0x244>)
 800cfa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cfac:	6829      	ldr	r1, [r5, #0]
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfb4:	6029      	str	r1, [r5, #0]
 800cfb6:	061d      	lsls	r5, r3, #24
 800cfb8:	d514      	bpl.n	800cfe4 <_printf_i+0x1ac>
 800cfba:	07df      	lsls	r7, r3, #31
 800cfbc:	bf44      	itt	mi
 800cfbe:	f043 0320 	orrmi.w	r3, r3, #32
 800cfc2:	6023      	strmi	r3, [r4, #0]
 800cfc4:	b91e      	cbnz	r6, 800cfce <_printf_i+0x196>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	f023 0320 	bic.w	r3, r3, #32
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	2310      	movs	r3, #16
 800cfd0:	e7b0      	b.n	800cf34 <_printf_i+0xfc>
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	f043 0320 	orr.w	r3, r3, #32
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	2378      	movs	r3, #120	; 0x78
 800cfdc:	4828      	ldr	r0, [pc, #160]	; (800d080 <_printf_i+0x248>)
 800cfde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfe2:	e7e3      	b.n	800cfac <_printf_i+0x174>
 800cfe4:	0659      	lsls	r1, r3, #25
 800cfe6:	bf48      	it	mi
 800cfe8:	b2b6      	uxthmi	r6, r6
 800cfea:	e7e6      	b.n	800cfba <_printf_i+0x182>
 800cfec:	4615      	mov	r5, r2
 800cfee:	e7bb      	b.n	800cf68 <_printf_i+0x130>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	6826      	ldr	r6, [r4, #0]
 800cff4:	6961      	ldr	r1, [r4, #20]
 800cff6:	1d18      	adds	r0, r3, #4
 800cff8:	6028      	str	r0, [r5, #0]
 800cffa:	0635      	lsls	r5, r6, #24
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	d501      	bpl.n	800d004 <_printf_i+0x1cc>
 800d000:	6019      	str	r1, [r3, #0]
 800d002:	e002      	b.n	800d00a <_printf_i+0x1d2>
 800d004:	0670      	lsls	r0, r6, #25
 800d006:	d5fb      	bpl.n	800d000 <_printf_i+0x1c8>
 800d008:	8019      	strh	r1, [r3, #0]
 800d00a:	2300      	movs	r3, #0
 800d00c:	6123      	str	r3, [r4, #16]
 800d00e:	4615      	mov	r5, r2
 800d010:	e7ba      	b.n	800cf88 <_printf_i+0x150>
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	1d1a      	adds	r2, r3, #4
 800d016:	602a      	str	r2, [r5, #0]
 800d018:	681d      	ldr	r5, [r3, #0]
 800d01a:	6862      	ldr	r2, [r4, #4]
 800d01c:	2100      	movs	r1, #0
 800d01e:	4628      	mov	r0, r5
 800d020:	f7f3 f8f6 	bl	8000210 <memchr>
 800d024:	b108      	cbz	r0, 800d02a <_printf_i+0x1f2>
 800d026:	1b40      	subs	r0, r0, r5
 800d028:	6060      	str	r0, [r4, #4]
 800d02a:	6863      	ldr	r3, [r4, #4]
 800d02c:	6123      	str	r3, [r4, #16]
 800d02e:	2300      	movs	r3, #0
 800d030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d034:	e7a8      	b.n	800cf88 <_printf_i+0x150>
 800d036:	6923      	ldr	r3, [r4, #16]
 800d038:	462a      	mov	r2, r5
 800d03a:	4649      	mov	r1, r9
 800d03c:	4640      	mov	r0, r8
 800d03e:	47d0      	blx	sl
 800d040:	3001      	adds	r0, #1
 800d042:	d0ab      	beq.n	800cf9c <_printf_i+0x164>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	079b      	lsls	r3, r3, #30
 800d048:	d413      	bmi.n	800d072 <_printf_i+0x23a>
 800d04a:	68e0      	ldr	r0, [r4, #12]
 800d04c:	9b03      	ldr	r3, [sp, #12]
 800d04e:	4298      	cmp	r0, r3
 800d050:	bfb8      	it	lt
 800d052:	4618      	movlt	r0, r3
 800d054:	e7a4      	b.n	800cfa0 <_printf_i+0x168>
 800d056:	2301      	movs	r3, #1
 800d058:	4632      	mov	r2, r6
 800d05a:	4649      	mov	r1, r9
 800d05c:	4640      	mov	r0, r8
 800d05e:	47d0      	blx	sl
 800d060:	3001      	adds	r0, #1
 800d062:	d09b      	beq.n	800cf9c <_printf_i+0x164>
 800d064:	3501      	adds	r5, #1
 800d066:	68e3      	ldr	r3, [r4, #12]
 800d068:	9903      	ldr	r1, [sp, #12]
 800d06a:	1a5b      	subs	r3, r3, r1
 800d06c:	42ab      	cmp	r3, r5
 800d06e:	dcf2      	bgt.n	800d056 <_printf_i+0x21e>
 800d070:	e7eb      	b.n	800d04a <_printf_i+0x212>
 800d072:	2500      	movs	r5, #0
 800d074:	f104 0619 	add.w	r6, r4, #25
 800d078:	e7f5      	b.n	800d066 <_printf_i+0x22e>
 800d07a:	bf00      	nop
 800d07c:	0804eeed 	.word	0x0804eeed
 800d080:	0804eefe 	.word	0x0804eefe

0800d084 <memmove>:
 800d084:	4288      	cmp	r0, r1
 800d086:	b510      	push	{r4, lr}
 800d088:	eb01 0402 	add.w	r4, r1, r2
 800d08c:	d902      	bls.n	800d094 <memmove+0x10>
 800d08e:	4284      	cmp	r4, r0
 800d090:	4623      	mov	r3, r4
 800d092:	d807      	bhi.n	800d0a4 <memmove+0x20>
 800d094:	1e43      	subs	r3, r0, #1
 800d096:	42a1      	cmp	r1, r4
 800d098:	d008      	beq.n	800d0ac <memmove+0x28>
 800d09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0a2:	e7f8      	b.n	800d096 <memmove+0x12>
 800d0a4:	4402      	add	r2, r0
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	428a      	cmp	r2, r1
 800d0aa:	d100      	bne.n	800d0ae <memmove+0x2a>
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0b6:	e7f7      	b.n	800d0a8 <memmove+0x24>

0800d0b8 <_realloc_r>:
 800d0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0bc:	4680      	mov	r8, r0
 800d0be:	4614      	mov	r4, r2
 800d0c0:	460e      	mov	r6, r1
 800d0c2:	b921      	cbnz	r1, 800d0ce <_realloc_r+0x16>
 800d0c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	f7ff bb85 	b.w	800c7d8 <_malloc_r>
 800d0ce:	b92a      	cbnz	r2, 800d0dc <_realloc_r+0x24>
 800d0d0:	f7ff fc9c 	bl	800ca0c <_free_r>
 800d0d4:	4625      	mov	r5, r4
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0dc:	f000 f81b 	bl	800d116 <_malloc_usable_size_r>
 800d0e0:	4284      	cmp	r4, r0
 800d0e2:	4607      	mov	r7, r0
 800d0e4:	d802      	bhi.n	800d0ec <_realloc_r+0x34>
 800d0e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0ea:	d812      	bhi.n	800d112 <_realloc_r+0x5a>
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	4640      	mov	r0, r8
 800d0f0:	f7ff fb72 	bl	800c7d8 <_malloc_r>
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d0ed      	beq.n	800d0d6 <_realloc_r+0x1e>
 800d0fa:	42bc      	cmp	r4, r7
 800d0fc:	4622      	mov	r2, r4
 800d0fe:	4631      	mov	r1, r6
 800d100:	bf28      	it	cs
 800d102:	463a      	movcs	r2, r7
 800d104:	f7ff fb32 	bl	800c76c <memcpy>
 800d108:	4631      	mov	r1, r6
 800d10a:	4640      	mov	r0, r8
 800d10c:	f7ff fc7e 	bl	800ca0c <_free_r>
 800d110:	e7e1      	b.n	800d0d6 <_realloc_r+0x1e>
 800d112:	4635      	mov	r5, r6
 800d114:	e7df      	b.n	800d0d6 <_realloc_r+0x1e>

0800d116 <_malloc_usable_size_r>:
 800d116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d11a:	1f18      	subs	r0, r3, #4
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bfbc      	itt	lt
 800d120:	580b      	ldrlt	r3, [r1, r0]
 800d122:	18c0      	addlt	r0, r0, r3
 800d124:	4770      	bx	lr
	...

0800d128 <_init>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	bf00      	nop
 800d12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12e:	bc08      	pop	{r3}
 800d130:	469e      	mov	lr, r3
 800d132:	4770      	bx	lr

0800d134 <_fini>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr
