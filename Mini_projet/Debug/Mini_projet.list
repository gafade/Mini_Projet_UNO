
Mini_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00072a48  0800f298  0800f298  0001f298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08081ce0  08081ce0  000a00cc  2**0
                  CONTENTS
  4 .ARM          00000008  08081ce0  08081ce0  00091ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08081ce8  08081ce8  000a00cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08081ce8  08081ce8  00091ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08081cec  08081cec  00091cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08081cf0  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000492c  200000cc  08081dbc  000a00cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049f8  08081dbc  000a49f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a00cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032a9c  00000000  00000000  000a00fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e94  00000000  00000000  000d2b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002650  00000000  00000000  000d9a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  000dc080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fbc0  00000000  00000000  000de3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003163a  00000000  00000000  0010df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155f0  00000000  00000000  0013f5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00254bb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a438  00000000  00000000  00254c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f280 	.word	0x0800f280

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d0 	.word	0x200000d0
 800020c:	0800f280 	.word	0x0800f280

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f004 fc3b 	bl	8004e90 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f002 f8aa 	bl	8002778 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_ADC1_Init+0xa4>)
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f004 fc6f 	bl	8004f18 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f002 f89a 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000e8 	.word	0x200000e8
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001
 8000658:	10000012 	.word	0x10000012

0800065c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_ADC3_Init+0x98>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <MX_ADC3_Init+0x9c>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_ADC3_Init+0x98>)
 8000676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_ADC3_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_ADC3_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_ADC3_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC3_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_ADC3_Init+0x98>)
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <MX_ADC3_Init+0xa0>)
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_ADC3_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_ADC3_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_ADC3_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_ADC3_Init+0x98>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_ADC3_Init+0x98>)
 80006be:	f004 fbe7 	bl	8004e90 <HAL_ADC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006c8:	f002 f856 	bl	8002778 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_ADC3_Init+0x98>)
 80006de:	f004 fc1b 	bl	8004f18 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006e8:	f002 f846 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000130 	.word	0x20000130
 80006f8:	40012200 	.word	0x40012200
 80006fc:	0f000001 	.word	0x0f000001

08000700 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <HAL_ADC_MspInit+0xc8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10c      	bne.n	800073c <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a29      	ldr	r2, [pc, #164]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800073a:	e041      	b.n	80007c0 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d13c      	bne.n	80007c0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 800074c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|POTD_Pin|GPIO_PIN_9
 800078e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_ADC_MspInit+0xd4>)
 80007a4:	f006 fa9c 	bl	8006ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POTG_Pin;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ac:	2303      	movs	r3, #3
 80007ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POTG_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 80007bc:	f006 fa90 	bl	8006ce0 <HAL_GPIO_Init>
}
 80007c0:	bf00      	nop
 80007c2:	3730      	adds	r7, #48	; 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40012000 	.word	0x40012000
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40012200 	.word	0x40012200
 80007d4:	40021400 	.word	0x40021400
 80007d8:	40020000 	.word	0x40020000

080007dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_CAN1_Init+0x68>)
 80007e2:	4a19      	ldr	r2, [pc, #100]	; (8000848 <MX_CAN1_Init+0x6c>)
 80007e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_CAN1_Init+0x68>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_CAN1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_CAN1_Init+0x68>)
 80007f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_CAN1_Init+0x68>)
 80007fc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000800:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_CAN1_Init+0x68>)
 8000804:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000808:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_CAN1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_CAN1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_CAN1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_CAN1_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_CAN1_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_CAN1_Init+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_CAN1_Init+0x68>)
 8000830:	f004 fdc2 	bl	80053b8 <HAL_CAN_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800083a:	f001 ff9d 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000178 	.word	0x20000178
 8000848:	40006400 	.word	0x40006400

0800084c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_CAN_MspInit+0x8c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d130      	bne.n	80008d0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_CAN_MspInit+0x90>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <HAL_CAN_MspInit+0x90>)
 8000874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_CAN_MspInit+0x90>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_CAN_MspInit+0x90>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_CAN_MspInit+0x90>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_CAN_MspInit+0x90>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008b0:	2309      	movs	r3, #9
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_CAN_MspInit+0x94>)
 80008bc:	f006 fa10 	bl	8006ce0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 14, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	210e      	movs	r1, #14
 80008c4:	2014      	movs	r0, #20
 80008c6:	f005 fc87 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008ca:	2014      	movs	r0, #20
 80008cc:	f005 fca0 	bl	8006210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40006400 	.word	0x40006400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400

080008e4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_DMA2D_Init+0x5c>)
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <MX_DMA2D_Init+0x60>)
 80008ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_DMA2D_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_DMA2D_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_DMA2D_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_DMA2D_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_DMA2D_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_DMA2D_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_DMA2D_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_DMA2D_Init+0x5c>)
 800091a:	f005 fe45 	bl	80065a8 <HAL_DMA2D_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000924:	f001 ff28 	bl	8002778 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000928:	2101      	movs	r1, #1
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_DMA2D_Init+0x5c>)
 800092c:	f006 f8aa 	bl	8006a84 <HAL_DMA2D_ConfigLayer>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000936:	f001 ff1f 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001a0 	.word	0x200001a0
 8000944:	4002b000 	.word	0x4002b000

08000948 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_DMA2D_MspInit+0x44>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d113      	bne.n	8000982 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_DMA2D_MspInit+0x48>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_DMA2D_MspInit+0x48>)
 8000960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_DMA2D_MspInit+0x48>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	205a      	movs	r0, #90	; 0x5a
 8000978:	f005 fc2e 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800097c:	205a      	movs	r0, #90	; 0x5a
 800097e:	f005 fc47 	bl	8006210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	4002b000 	.word	0x4002b000
 8000990:	40023800 	.word	0x40023800

08000994 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_FMC_Init+0x98>)
 80009ae:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <MX_FMC_Init+0x9c>)
 80009b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_FMC_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_FMC_Init+0x98>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_FMC_Init+0x98>)
 80009c6:	2210      	movs	r2, #16
 80009c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_FMC_Init+0x98>)
 80009cc:	2240      	movs	r2, #64	; 0x40
 80009ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_FMC_Init+0x98>)
 80009d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_FMC_Init+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_FMC_Init+0x98>)
 80009e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_FMC_Init+0x98>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_FMC_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009f8:	2307      	movs	r3, #7
 80009fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a04:	2303      	movs	r3, #3
 8000a06:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_FMC_Init+0x98>)
 8000a16:	f009 fb53 	bl	800a0c0 <HAL_SDRAM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a20:	f001 feaa 	bl	8002778 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001e0 	.word	0x200001e0
 8000a30:	a0000140 	.word	0xa0000140

08000a34 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <HAL_FMC_MspInit+0x100>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d16d      	bne.n	8000b2c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a50:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <HAL_FMC_MspInit+0x100>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <HAL_FMC_MspInit+0x104>)
 8000a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a5a:	4a37      	ldr	r2, [pc, #220]	; (8000b38 <HAL_FMC_MspInit+0x104>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6393      	str	r3, [r2, #56]	; 0x38
 8000a62:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <HAL_FMC_MspInit+0x104>)
 8000a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000a6e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a80:	230c      	movs	r3, #12
 8000a82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	482c      	ldr	r0, [pc, #176]	; (8000b3c <HAL_FMC_MspInit+0x108>)
 8000a8a:	f006 f929 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000a8e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4825      	ldr	r0, [pc, #148]	; (8000b40 <HAL_FMC_MspInit+0x10c>)
 8000aaa:	f006 f919 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000aae:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ab2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481e      	ldr	r0, [pc, #120]	; (8000b44 <HAL_FMC_MspInit+0x110>)
 8000aca:	f006 f909 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ace:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ad2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <HAL_FMC_MspInit+0x114>)
 8000aea:	f006 f8f9 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000aee:	2328      	movs	r3, #40	; 0x28
 8000af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afe:	230c      	movs	r3, #12
 8000b00:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <HAL_FMC_MspInit+0x118>)
 8000b08:	f006 f8ea 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <HAL_FMC_MspInit+0x11c>)
 8000b26:	f006 f8db 	bl	8006ce0 <HAL_GPIO_Init>
 8000b2a:	e000      	b.n	8000b2e <HAL_FMC_MspInit+0xfa>
    return;
 8000b2c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000214 	.word	0x20000214
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40021400 	.word	0x40021400
 8000b4c:	40021c00 	.word	0x40021c00
 8000b50:	40020800 	.word	0x40020800

08000b54 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b5c:	f7ff ff6a 	bl	8000a34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b78:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <vApplicationGetIdleTaskMemory+0x30>)
 8000b7e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000025c 	.word	0x2000025c
 8000b98:	20000310 	.word	0x20000310

08000b9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b0a2      	sub	sp, #136	; 0x88
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex_layer */
  osMutexDef(Mutex_layer);
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  Mutex_layerHandle = osMutexCreate(osMutex(Mutex_layer));
 8000bae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00b f9f5 	bl	800bfa2 <osMutexCreate>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <MX_FREERTOS_Init+0xdc>)
 8000bbc:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 32, Message);
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_FREERTOS_Init+0xe0>)
 8000bc0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8000bca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00b f9fe 	bl	800bfd2 <osMessageCreate>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <MX_FREERTOS_Init+0xe4>)
 8000bda:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_FREERTOS_Init+0xe8>)
 8000bde:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000be2:	461d      	mov	r5, r3
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00b f973 	bl	800bee2 <osThreadCreate>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <MX_FREERTOS_Init+0xec>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* definition and creation of tache1 */
  osThreadDef(tache1, affichage_1, osPriorityAboveNormal, 0, 1024);
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_FREERTOS_Init+0xf0>)
 8000c04:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c08:	461d      	mov	r5, r3
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache1Handle = osThreadCreate(osThread(tache1), NULL);
 8000c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00b f960 	bl	800bee2 <osThreadCreate>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <MX_FREERTOS_Init+0xf4>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* definition and creation of tache3 */
  osThreadDef(tache3, update_state, osPriorityHigh, 0, 1024);
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_FREERTOS_Init+0xf8>)
 8000c2a:	f107 041c 	add.w	r4, r7, #28
 8000c2e:	461d      	mov	r5, r3
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache3Handle = osThreadCreate(osThread(tache3), NULL);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00b f94d 	bl	800bee2 <osThreadCreate>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_FREERTOS_Init+0xfc>)
 8000c4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tache4 */
  osThreadDef(tache4, touch_confirm, osPriorityAboveNormal, 0, 128);
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_FREERTOS_Init+0x100>)
 8000c50:	463c      	mov	r4, r7
 8000c52:	461d      	mov	r5, r3
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache4Handle = osThreadCreate(osThread(tache4), NULL);
 8000c60:	463b      	mov	r3, r7
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00b f93c 	bl	800bee2 <osThreadCreate>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <MX_FREERTOS_Init+0x104>)
 8000c6e:	6013      	str	r3, [r2, #0]



  /* USER CODE END RTOS_THREADS */

}
 8000c70:	bf00      	nop
 8000c72:	3788      	adds	r7, #136	; 0x88
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bdb0      	pop	{r4, r5, r7, pc}
 8000c78:	20000258 	.word	0x20000258
 8000c7c:	0800f2bc 	.word	0x0800f2bc
 8000c80:	20000254 	.word	0x20000254
 8000c84:	0800f2cc 	.word	0x0800f2cc
 8000c88:	20000244 	.word	0x20000244
 8000c8c:	0800f2e8 	.word	0x0800f2e8
 8000c90:	20000248 	.word	0x20000248
 8000c94:	0800f304 	.word	0x0800f304
 8000c98:	2000024c 	.word	0x2000024c
 8000c9c:	0800f320 	.word	0x0800f320
 8000ca0:	20000250 	.word	0x20000250

08000ca4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		//HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,1);
		//HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,0);
		osDelay(100);
 8000cac:	2064      	movs	r0, #100	; 0x64
 8000cae:	f00b f964 	bl	800bf7a <osDelay>
 8000cb2:	e7fb      	b.n	8000cac <StartDefaultTask+0x8>

08000cb4 <affichage_1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_affichage_1 */
void affichage_1(void const * argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0f2      	sub	sp, #456	; 0x1c8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000cbe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000cc2:	6018      	str	r0, [r3, #0]
	//on affiche pas la carte dessous et on laisse tach2 faire

	extern int ID;


	TickType_t LastCall=xTaskGetTickCount();
 8000cc4:	f00c fc4a 	bl	800d55c <xTaskGetTickCount>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	TickType_t value=1000;//environ 33 pour 30FPS
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4


	int nb_cartes=7;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	char text[50]={};//agit comme un buffer pour les numeros cartes en main
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000ce2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000ce6:	222e      	movs	r2, #46	; 0x2e
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00d fde8 	bl	800e8c0 <memset>
	char inter[50]={};
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000cf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000cfa:	222e      	movs	r2, #46	; 0x2e
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00d fdde 	bl	800e8c0 <memset>
	char j_1[50]={};
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000d0a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d0e:	222e      	movs	r2, #46	; 0x2e
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00d fdd4 	bl	800e8c0 <memset>
	char j_2[50]={};
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d22:	222e      	movs	r2, #46	; 0x2e
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00d fdca 	bl	800e8c0 <memset>
	char j_3[50]={};
 8000d2c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000d30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	222e      	movs	r2, #46	; 0x2e
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00d fdbe 	bl	800e8c0 <memset>
	char centre[50]={};
 8000d44:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000d48:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	3304      	adds	r3, #4
 8000d52:	222e      	movs	r2, #46	; 0x2e
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00d fdb2 	bl	800e8c0 <memset>
	char pioche[50]={};
 8000d5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000d60:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	222e      	movs	r2, #46	; 0x2e
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00d fda6 	bl	800e8c0 <memset>
	char msg[50]={};
 8000d74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000d78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	3304      	adds	r3, #4
 8000d82:	222e      	movs	r2, #46	; 0x2e
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00d fd9a 	bl	800e8c0 <memset>
	int X_main=50;
 8000d8c:	2332      	movs	r3, #50	; 0x32
 8000d8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	int Y_main=300;
 8000d92:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	for(;;)
	{
		//on affiche ici le blink du UNO,le playing flag, et la carte du dessous


		xSemaphoreTake(Mutex_layerHandle,10);
 8000d9a:	4b86      	ldr	r3, [pc, #536]	; (8000fb4 <affichage_1+0x300>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	210a      	movs	r1, #10
 8000da0:	4618      	mov	r0, r3
 8000da2:	f00b fe19 	bl	800c9d8 <xQueueSemaphoreTake>


		BSP_LCD_SelectLayer(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 f894 	bl	8002ed4 <BSP_LCD_SelectLayer>


		BSP_LCD_Clear(00);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f002 f903 	bl	8002fb8 <BSP_LCD_Clear>


		//les 7 cartes en main utilisen la var global/tableau game_state.hand
		//avec color et number (et le nombre de cartes en main/une carte de stop valeur 0?)

		sprintf(text,"        ");//bon nb d'espaces??
 8000db2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000db6:	4980      	ldr	r1, [pc, #512]	; (8000fb8 <affichage_1+0x304>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f00d fe97 	bl	800eaec <siprintf>
		sprintf(inter," ");
 8000dbe:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000dc2:	497e      	ldr	r1, [pc, #504]	; (8000fbc <affichage_1+0x308>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00d fe91 	bl	800eaec <siprintf>
		for(int i=0;i<8;i++){//[0,0] si pas de cartes
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000dd0:	e0d3      	b.n	8000f7a <affichage_1+0x2c6>

			//carte au centre, de X... et de Y...
			if (i==0){
 8000dd2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d106      	bne.n	8000de8 <affichage_1+0x134>
				X_main=200;
 8000dda:	23c8      	movs	r3, #200	; 0xc8
 8000ddc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
				Y_main=100;
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000de6:	e05b      	b.n	8000ea0 <affichage_1+0x1ec>
			}else{
				X_main=50;
 8000de8:	2332      	movs	r3, #50	; 0x32
 8000dea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
				Y_main=250;
 8000dee:	23fa      	movs	r3, #250	; 0xfa
 8000df0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				//sprintf(&text+strlen(text),"%s    %d  ",text,(char)state.cartes[i][1]);//le bon nombre espaces

				if(state.cartes[i][1]<=9 && state.cartes[i][1]>=0){//nombre
 8000df4:	4a72      	ldr	r2, [pc, #456]	; (8000fc0 <affichage_1+0x30c>)
 8000df6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e02:	2b09      	cmp	r3, #9
 8000e04:	dc17      	bgt.n	8000e36 <affichage_1+0x182>
 8000e06:	4a6e      	ldr	r2, [pc, #440]	; (8000fc0 <affichage_1+0x30c>)
 8000e08:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0e      	blt.n	8000e36 <affichage_1+0x182>
				sprintf(inter,"     %d",(char)state.cartes[i][1]);}
 8000e18:	4a69      	ldr	r2, [pc, #420]	; (8000fc0 <affichage_1+0x30c>)
 8000e1a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e2e:	4965      	ldr	r1, [pc, #404]	; (8000fc4 <affichage_1+0x310>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00d fe5b 	bl	800eaec <siprintf>
				if(state.cartes[i][1]==12){//changement sens
 8000e36:	4a62      	ldr	r2, [pc, #392]	; (8000fc0 <affichage_1+0x30c>)
 8000e38:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d105      	bne.n	8000e54 <affichage_1+0x1a0>
				sprintf(inter,"     %%");}
 8000e48:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e4c:	495e      	ldr	r1, [pc, #376]	; (8000fc8 <affichage_1+0x314>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f00d fe4c 	bl	800eaec <siprintf>
				if(state.cartes[i][1]==10){//pioche 2 cartes
 8000e54:	4a5a      	ldr	r2, [pc, #360]	; (8000fc0 <affichage_1+0x30c>)
 8000e56:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d105      	bne.n	8000e72 <affichage_1+0x1be>
				sprintf(inter,"     !");}
 8000e66:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e6a:	4958      	ldr	r1, [pc, #352]	; (8000fcc <affichage_1+0x318>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00d fe3d 	bl	800eaec <siprintf>
				if(state.cartes[i][1]==11){
 8000e72:	4a53      	ldr	r2, [pc, #332]	; (8000fc0 <affichage_1+0x30c>)
 8000e74:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e80:	2b0b      	cmp	r3, #11
 8000e82:	d105      	bne.n	8000e90 <affichage_1+0x1dc>
				sprintf(inter,"     #");}
 8000e84:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e88:	4951      	ldr	r1, [pc, #324]	; (8000fd0 <affichage_1+0x31c>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f00d fe2e 	bl	800eaec <siprintf>

				//UNE VALEUR DE 1 POUR AIT PIOCHE UNE CARTE
				//le mettre sur l'écran
				strcat(text,(char*) inter);
 8000e90:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8000e94:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00d fe46 	bl	800eb2c <strcat>
			}


			if (state.cartes[i][0]==8){//red
 8000ea0:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <affichage_1+0x30c>)
 8000ea2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d110      	bne.n	8000ed4 <affichage_1+0x220>
				BSP_LCD_DrawBitmap(X_main+i*40,Y_main,(uint8_t*) _acROUGE);
 8000eb2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ecc:	4a41      	ldr	r2, [pc, #260]	; (8000fd4 <affichage_1+0x320>)
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f002 fa06 	bl	80032e0 <BSP_LCD_DrawBitmap>
			}
			if (state.cartes[i][0]==7){//blue
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <affichage_1+0x30c>)
 8000ed6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	d110      	bne.n	8000f08 <affichage_1+0x254>
				BSP_LCD_DrawBitmap(X_main+i*40,Y_main,(uint8_t*) _acBLEU);
 8000ee6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ef8:	4413      	add	r3, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f00:	4a35      	ldr	r2, [pc, #212]	; (8000fd8 <affichage_1+0x324>)
 8000f02:	4619      	mov	r1, r3
 8000f04:	f002 f9ec 	bl	80032e0 <BSP_LCD_DrawBitmap>
			}
			if (state.cartes[i][0]==6){//green
 8000f08:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <affichage_1+0x30c>)
 8000f0a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d110      	bne.n	8000f3c <affichage_1+0x288>
				BSP_LCD_DrawBitmap(X_main+i*40,Y_main,(uint8_t*) _acVERT);
 8000f1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	461a      	mov	r2, r3
 8000f28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <affichage_1+0x328>)
 8000f36:	4619      	mov	r1, r3
 8000f38:	f002 f9d2 	bl	80032e0 <BSP_LCD_DrawBitmap>
			}
			if (state.cartes[i][0]==5){//Yelllow
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <affichage_1+0x30c>)
 8000f3e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d110      	bne.n	8000f70 <affichage_1+0x2bc>
				BSP_LCD_DrawBitmap(X_main+i*40,Y_main,(uint8_t*) _acJAUNE);
 8000f4e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f60:	4413      	add	r3, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <affichage_1+0x32c>)
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f002 f9b8 	bl	80032e0 <BSP_LCD_DrawBitmap>
		for(int i=0;i<8;i++){//[0,0] si pas de cartes
 8000f70:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f74:	3301      	adds	r3, #1
 8000f76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	f77f af27 	ble.w	8000dd2 <affichage_1+0x11e>
			}

		}
		BSP_LCD_DisplayStringAtLine(20,(uint8_t*)text);//aligné avec les trous des images
 8000f84:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f002 f948 	bl	8003220 <BSP_LCD_DisplayStringAtLine>


		//Afficher le nombre de cartes en main des autres joueurs
		//pas immédiatemetn important? on relache le mutex?

		xSemaphoreGive(Mutex_layerHandle);
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <affichage_1+0x300>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	2300      	movs	r3, #0
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f00b fa91 	bl	800c4c0 <xQueueGenericSend>
		xSemaphoreTake(Mutex_layerHandle,10);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <affichage_1+0x300>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	210a      	movs	r1, #10
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00b fd17 	bl	800c9d8 <xQueueSemaphoreTake>
		//sur des lignes différentes pour ne pas overlap?
		//aussi le nombre de cartes dans la pioche

		//i correspond à chaque joueur, de 1 à 4
		//donc grace à NOTRE numéro joueur, on en déduit pos relative
		for(int i=0;i<4;i++){
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000fb0:	e0bd      	b.n	800112e <affichage_1+0x47a>
 8000fb2:	bf00      	nop
 8000fb4:	20000258 	.word	0x20000258
 8000fb8:	0800f33c 	.word	0x0800f33c
 8000fbc:	0800f348 	.word	0x0800f348
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	0800f34c 	.word	0x0800f34c
 8000fc8:	0800f354 	.word	0x0800f354
 8000fcc:	0800f35c 	.word	0x0800f35c
 8000fd0:	0800f364 	.word	0x0800f364
 8000fd4:	080137a0 	.word	0x080137a0
 8000fd8:	0800f3e8 	.word	0x0800f3e8
 8000fdc:	0801bf10 	.word	0x0801bf10
 8000fe0:	08017b58 	.word	0x08017b58
			if(i-ID==0){}//rien faire, c'est nous, mais on l'enverra
			if((i-ID==1) || (i-ID==-3)){//position relative à gauche/suivant
 8000fe4:	4b5d      	ldr	r3, [pc, #372]	; (800115c <affichage_1+0x4a8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d007      	beq.n	8001002 <affichage_1+0x34e>
 8000ff2:	4b5a      	ldr	r3, [pc, #360]	; (800115c <affichage_1+0x4a8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f113 0f03 	cmn.w	r3, #3
 8001000:	d111      	bne.n	8001026 <affichage_1+0x372>

				sprintf(j_1,"         x%d",(char)state.nombre[i+1]);
 8001002:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001006:	3301      	adds	r3, #1
 8001008:	4a55      	ldr	r2, [pc, #340]	; (8001160 <affichage_1+0x4ac>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	461a      	mov	r2, r3
 800100e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001012:	4954      	ldr	r1, [pc, #336]	; (8001164 <affichage_1+0x4b0>)
 8001014:	4618      	mov	r0, r3
 8001016:	f00d fd69 	bl	800eaec <siprintf>
				BSP_LCD_DisplayStringAtLine(4,(uint8_t*) j_1);//LEFT MODE sous entendu
 800101a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800101e:	4619      	mov	r1, r3
 8001020:	2004      	movs	r0, #4
 8001022:	f002 f8fd 	bl	8003220 <BSP_LCD_DisplayStringAtLine>
			}
			if((i-ID)== 2 || (i-ID)== -2){//position relative en face + ou - 2/ ou c'est nous
 8001026:	4b4d      	ldr	r3, [pc, #308]	; (800115c <affichage_1+0x4a8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d007      	beq.n	8001044 <affichage_1+0x390>
 8001034:	4b49      	ldr	r3, [pc, #292]	; (800115c <affichage_1+0x4a8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f113 0f02 	cmn.w	r3, #2
 8001042:	d112      	bne.n	800106a <affichage_1+0x3b6>
				sprintf(j_2,"x%d",(char)state.nombre[i+1]);
 8001044:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001048:	3301      	adds	r3, #1
 800104a:	4a45      	ldr	r2, [pc, #276]	; (8001160 <affichage_1+0x4ac>)
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	461a      	mov	r2, r3
 8001050:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001054:	4944      	ldr	r1, [pc, #272]	; (8001168 <affichage_1+0x4b4>)
 8001056:	4618      	mov	r0, r3
 8001058:	f00d fd48 	bl	800eaec <siprintf>
				BSP_LCD_DisplayStringAt(0,1,(uint8_t*)j_2,CENTER_MODE);//les Y en pixel desormais
 800105c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001060:	2301      	movs	r3, #1
 8001062:	2101      	movs	r1, #1
 8001064:	2000      	movs	r0, #0
 8001066:	f002 f813 	bl	8003090 <BSP_LCD_DisplayStringAt>
			}
			if((i-ID)==-1 || (i-ID==3)){//position relative à Droite/precedent
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <affichage_1+0x4a8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d006      	beq.n	8001088 <affichage_1+0x3d4>
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <affichage_1+0x4a8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d112      	bne.n	80010ae <affichage_1+0x3fa>
				sprintf(j_3,"x%d",(char)state.nombre[i+1]);
 8001088:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800108c:	3301      	adds	r3, #1
 800108e:	4a34      	ldr	r2, [pc, #208]	; (8001160 <affichage_1+0x4ac>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	461a      	mov	r2, r3
 8001094:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001098:	4933      	ldr	r1, [pc, #204]	; (8001168 <affichage_1+0x4b4>)
 800109a:	4618      	mov	r0, r3
 800109c:	f00d fd26 	bl	800eaec <siprintf>
				BSP_LCD_DisplayStringAt(50,50,(uint8_t*)j_3,RIGHT_MODE);
 80010a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80010a4:	2302      	movs	r3, #2
 80010a6:	2132      	movs	r1, #50	; 0x32
 80010a8:	2032      	movs	r0, #50	; 0x32
 80010aa:	f001 fff1 	bl	8003090 <BSP_LCD_DisplayStringAt>
			}

			//Affichage de la carte au centre et de la pioche
			sprintf(pioche,"x%d",(char)state.nombre[0]);
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <affichage_1+0x4ac>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b8:	492b      	ldr	r1, [pc, #172]	; (8001168 <affichage_1+0x4b4>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00d fd16 	bl	800eaec <siprintf>
			BSP_LCD_DisplayStringAt(25,110,(char*) pioche,RIGHT_MODE);
 80010c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80010c4:	2302      	movs	r3, #2
 80010c6:	216e      	movs	r1, #110	; 0x6e
 80010c8:	2019      	movs	r0, #25
 80010ca:	f001 ffe1 	bl	8003090 <BSP_LCD_DisplayStringAt>

			sprintf(centre,"x   %d",(char)state.cartes[0][1]);
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <affichage_1+0x4ac>)
 80010d0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010dc:	4923      	ldr	r1, [pc, #140]	; (800116c <affichage_1+0x4b8>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f00d fd04 	bl	800eaec <siprintf>
			BSP_LCD_DisplayStringAt(-10,90,(char*) centre,CENTER_MODE);
 80010e4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80010e8:	2301      	movs	r3, #1
 80010ea:	215a      	movs	r1, #90	; 0x5a
 80010ec:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 80010f0:	f001 ffce 	bl	8003090 <BSP_LCD_DisplayStringAt>



			//Affichage du flag jeu en cours en fonction de state.game_state[0] qui joue

			sprintf(msg,"%d",(char)state.game_state[0]);
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <affichage_1+0x4ac>)
 80010f6:	7d5b      	ldrb	r3, [r3, #21]
 80010f8:	461a      	mov	r2, r3
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	491c      	ldr	r1, [pc, #112]	; (8001170 <affichage_1+0x4bc>)
 8001100:	4618      	mov	r0, r3
 8001102:	f00d fcf3 	bl	800eaec <siprintf>
			BSP_LCD_DisplayStringAt(-10,50,(char*) msg,CENTER_MODE);
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	2301      	movs	r3, #1
 800110c:	2132      	movs	r1, #50	; 0x32
 800110e:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001112:	f001 ffbd 	bl	8003090 <BSP_LCD_DisplayStringAt>

			xSemaphoreGive(Mutex_layerHandle);
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <affichage_1+0x4c0>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	f00b f9ce 	bl	800c4c0 <xQueueGenericSend>
		for(int i=0;i<4;i++){
 8001124:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001128:	3301      	adds	r3, #1
 800112a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800112e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001132:	2b03      	cmp	r3, #3
 8001134:	f77f af56 	ble.w	8000fe4 <affichage_1+0x330>
		}




		BSP_LCD_SetBackColor(00);
 8001138:	2000      	movs	r0, #0
 800113a:	f001 fef3 	bl	8002f24 <BSP_LCD_SetBackColor>
		xSemaphoreGive(Mutex_layerHandle);
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <affichage_1+0x4c0>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	f00b f9ba 	bl	800c4c0 <xQueueGenericSend>
		vTaskDelayUntil(&LastCall,value);
 800114c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001150:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8001154:	4618      	mov	r0, r3
 8001156:	f00c f82d 	bl	800d1b4 <vTaskDelayUntil>
		xSemaphoreTake(Mutex_layerHandle,10);
 800115a:	e61e      	b.n	8000d9a <affichage_1+0xe6>
 800115c:	20000018 	.word	0x20000018
 8001160:	20000000 	.word	0x20000000
 8001164:	0800f36c 	.word	0x0800f36c
 8001168:	0800f37c 	.word	0x0800f37c
 800116c:	0800f380 	.word	0x0800f380
 8001170:	0800f388 	.word	0x0800f388
 8001174:	20000258 	.word	0x20000258

08001178 <update_state>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_update_state */
void update_state(void const * argument)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0a2      	sub	sp, #136	; 0x88
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN update_state */

	TickType_t LastCall=xTaskGetTickCount();
 8001180:	f00c f9ec 	bl	800d55c <xTaskGetTickCount>
 8001184:	4603      	mov	r3, r0
 8001186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	TickType_t value=300;//environ 33 pour 30FPS
 800118a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800118e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84


	char msg[50]={};
 8001192:	2300      	movs	r3, #0
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001196:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800119a:	222e      	movs	r2, #46	; 0x2e
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00d fb8e 	bl	800e8c0 <memset>
	char tour[50]={};
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	222e      	movs	r2, #46	; 0x2e
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d fb85 	bl	800e8c0 <memset>


	/* Infinite loop */
	for(;;)
	{
		if(xQueueReceive(myQueue02Handle, &recu, 10)==pdPASS){//10ms au pire, plus rapide que les clics sur écran
 80011b6:	4b34      	ldr	r3, [pc, #208]	; (8001288 <update_state+0x110>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	220a      	movs	r2, #10
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00b fb23 	bl	800c80c <xQueueReceive>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d149      	bne.n	8001260 <update_state+0xe8>

		//TEST
		sprintf(msg,"on se crie %d dessus %d",(char)recu.couleur,(char)recu.playerID);
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	89bb      	ldrh	r3, [r7, #12]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80011da:	492c      	ldr	r1, [pc, #176]	; (800128c <update_state+0x114>)
 80011dc:	f00d fc86 	bl	800eaec <siprintf>
		BSP_LCD_DisplayStringAtLine(15,(char*) msg);
 80011e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e4:	4619      	mov	r1, r3
 80011e6:	200f      	movs	r0, #15
 80011e8:	f002 f81a 	bl	8003220 <BSP_LCD_DisplayStringAtLine>


		//on modifie alors le game state

		state.nombre[recu.playerID]--;//commencent à 1 donc bien l'indice
 80011ec:	89bb      	ldrh	r3, [r7, #12]
 80011ee:	4a28      	ldr	r2, [pc, #160]	; (8001290 <update_state+0x118>)
 80011f0:	5cd2      	ldrb	r2, [r2, r3]
 80011f2:	3a01      	subs	r2, #1
 80011f4:	b2d1      	uxtb	r1, r2
 80011f6:	4a26      	ldr	r2, [pc, #152]	; (8001290 <update_state+0x118>)
 80011f8:	54d1      	strb	r1, [r2, r3]

		if(recu.couleur!=0){//couleur 0 est le ppas de cartes : [0,0] pour etre sur
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <update_state+0x98>
		state.cartes[0][0]=recu.couleur;// efface la carte au centre si il n'y a rien
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	b25a      	sxtb	r2, r3
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <update_state+0x118>)
 8001206:	715a      	strb	r2, [r3, #5]
		state.cartes[0][1]=recu.valeur;
 8001208:	8a3b      	ldrh	r3, [r7, #16]
 800120a:	b25a      	sxtb	r2, r3
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <update_state+0x118>)
 800120e:	719a      	strb	r2, [r3, #6]


		if(recu.prochain==-1){
			state.game_state[1]=-1;
		}
		else{state.game_state[1]= 1;}
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <update_state+0x118>)
 8001212:	2201      	movs	r2, #1
 8001214:	759a      	strb	r2, [r3, #22]
		//MODULO 2 CAR 2 JOUEURS
		state.game_state[0]=(int)(state.game_state[0]+(int)state.game_state[1]*recu.prochain)%2+1;//pour revenir à 1 si "4 " dit +1
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <update_state+0x118>)
 8001218:	7d5b      	ldrb	r3, [r3, #21]
 800121a:	461a      	mov	r2, r3
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <update_state+0x118>)
 800121e:	7d9b      	ldrb	r3, [r3, #22]
 8001220:	8a79      	ldrh	r1, [r7, #18]
 8001222:	fb01 f303 	mul.w	r3, r1, r3
 8001226:	4413      	add	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	bfb8      	it	lt
 8001230:	425b      	neglt	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <update_state+0x118>)
 800123a:	755a      	strb	r2, [r3, #21]

		sprintf(tour,"Au tour de :  %d",(char) state.game_state[0]);
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <update_state+0x118>)
 800123e:	7d5b      	ldrb	r3, [r3, #21]
 8001240:	461a      	mov	r2, r3
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4913      	ldr	r1, [pc, #76]	; (8001294 <update_state+0x11c>)
 8001248:	4618      	mov	r0, r3
 800124a:	f00d fc4f 	bl	800eaec <siprintf>
		BSP_LCD_DisplayStringAt(-10,200,(uint8_t*) tour,CENTER_MODE);
 800124e:	f107 0218 	add.w	r2, r7, #24
 8001252:	2301      	movs	r3, #1
 8001254:	21c8      	movs	r1, #200	; 0xc8
 8001256:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800125a:	f001 ff19 	bl	8003090 <BSP_LCD_DisplayStringAt>
 800125e:	e00b      	b.n	8001278 <update_state+0x100>
	}//erreur probable car types
		else{


			sprintf(msg,"YA rien ");
 8001260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <update_state+0x120>)
 8001266:	4618      	mov	r0, r3
 8001268:	f00d fc40 	bl	800eaec <siprintf>
			BSP_LCD_DisplayStringAtLine(15,(uint8_t*) msg);
 800126c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001270:	4619      	mov	r1, r3
 8001272:	200f      	movs	r0, #15
 8001274:	f001 ffd4 	bl	8003220 <BSP_LCD_DisplayStringAtLine>
		}
		vTaskDelayUntil(&LastCall,value);
 8001278:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800127c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001280:	4618      	mov	r0, r3
 8001282:	f00b ff97 	bl	800d1b4 <vTaskDelayUntil>
		if(xQueueReceive(myQueue02Handle, &recu, 10)==pdPASS){//10ms au pire, plus rapide que les clics sur écran
 8001286:	e796      	b.n	80011b6 <update_state+0x3e>
 8001288:	20000254 	.word	0x20000254
 800128c:	0800f38c 	.word	0x0800f38c
 8001290:	20000000 	.word	0x20000000
 8001294:	0800f3a4 	.word	0x0800f3a4
 8001298:	0800f3b8 	.word	0x0800f3b8

0800129c <touch_confirm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_touch_confirm */
void touch_confirm(void const * argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN touch_confirm */
	//on ne va pas tout le temps vérifier si le joueur appuie
	//ce qui implique une tache à grande période qui verifie
	//SI est est reveillée si on touche l'écran et sa pos
	TickType_t LastCall=xTaskGetTickCount();
 80012a4:	f00c f95a 	bl	800d55c <xTaskGetTickCount>
 80012a8:	4603      	mov	r3, r0
 80012aa:	61fb      	str	r3, [r7, #28]
	TickType_t value=300;
 80012ac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012b0:	623b      	str	r3, [r7, #32]
	uint32_t truc_can;
	extern CAN_HandleTypeDef hcan1;
	extern CAN_TxHeaderTypeDef TxHeader1;

	//copie colle de MCU
	TxHeader1.StdId = 0x410;
 80012b2:	4b8a      	ldr	r3, [pc, #552]	; (80014dc <touch_confirm+0x240>)
 80012b4:	f44f 6282 	mov.w	r2, #1040	; 0x410
 80012b8:	601a      	str	r2, [r3, #0]
	TxHeader1.ExtId = 0x01; //peu importe, on est en ID 11 bits (CAN_ID_STD)
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <touch_confirm+0x240>)
 80012bc:	2201      	movs	r2, #1
 80012be:	605a      	str	r2, [r3, #4]
	TxHeader1.RTR = CAN_RTR_DATA;
 80012c0:	4b86      	ldr	r3, [pc, #536]	; (80014dc <touch_confirm+0x240>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	TxHeader1.IDE = CAN_ID_STD;
 80012c6:	4b85      	ldr	r3, [pc, #532]	; (80014dc <touch_confirm+0x240>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
	TxHeader1.DLC = 4;
 80012cc:	4b83      	ldr	r3, [pc, #524]	; (80014dc <touch_confirm+0x240>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	611a      	str	r2, [r3, #16]
	TxHeader1.TransmitGlobalTime = DISABLE;
 80012d2:	4b82      	ldr	r3, [pc, #520]	; (80014dc <touch_confirm+0x240>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	751a      	strb	r2, [r3, #20]


	int pos_carte=0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Infinite loop */
	for(;;)
	{
		pos_carte=1;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (state.game_state[0]==ID){//ID, notre propre numero de joueur
 80012e0:	4b7f      	ldr	r3, [pc, #508]	; (80014e0 <touch_confirm+0x244>)
 80012e2:	7d5b      	ldrb	r3, [r3, #21]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b7f      	ldr	r3, [pc, #508]	; (80014e4 <touch_confirm+0x248>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	f040 80ef 	bne.w	80014ce <touch_confirm+0x232>

			BSP_TS_GetState(&TS_State);//si c'est à notre tour,
 80012f0:	487d      	ldr	r0, [pc, #500]	; (80014e8 <touch_confirm+0x24c>)
 80012f2:	f002 fcf9 	bl	8003ce8 <BSP_TS_GetState>
			//on regarde si on appuie sur écran et on envoie la position des cartes
			if(TS_State.touchDetected){
 80012f6:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <touch_confirm+0x24c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80e7 	beq.w	80014ce <touch_confirm+0x232>
				//BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
				if(TS_State.touchY[0]>230){//le Ymain mais avec une marge
 8001300:	4b79      	ldr	r3, [pc, #484]	; (80014e8 <touch_confirm+0x24c>)
 8001302:	899b      	ldrh	r3, [r3, #12]
 8001304:	2be6      	cmp	r3, #230	; 0xe6
 8001306:	f240 80e2 	bls.w	80014ce <touch_confirm+0x232>
					for(int i=0;i<7;i++){//i=0 est la carte au centre donc décalage
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
 800130e:	e02e      	b.n	800136e <touch_confirm+0xd2>
						if(TS_State.touchX[0]>50+(i+1)*40 && TS_State.touchX[0]<50+(i+1+1)*40){
 8001310:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <touch_confirm+0x24c>)
 8001312:	885b      	ldrh	r3, [r3, #2]
 8001314:	4619      	mov	r1, r3
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	3332      	adds	r3, #50	; 0x32
 8001324:	4299      	cmp	r1, r3
 8001326:	dd1f      	ble.n	8001368 <touch_confirm+0xcc>
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	1c9a      	adds	r2, r3, #2
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	3331      	adds	r3, #49	; 0x31
 8001336:	4a6c      	ldr	r2, [pc, #432]	; (80014e8 <touch_confirm+0x24c>)
 8001338:	8852      	ldrh	r2, [r2, #2]
 800133a:	4293      	cmp	r3, r2
 800133c:	db14      	blt.n	8001368 <touch_confirm+0xcc>
							action.couleur=state.cartes[i+1][0];//on check sur quelle carte on a appuyé et
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	3301      	adds	r3, #1
 8001342:	4a67      	ldr	r2, [pc, #412]	; (80014e0 <touch_confirm+0x244>)
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800134c:	b29b      	uxth	r3, r3
 800134e:	827b      	strh	r3, [r7, #18]
							action.valeur=state.cartes[i+1][1];//on stocke ses parametres
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	3301      	adds	r3, #1
 8001354:	4a62      	ldr	r2, [pc, #392]	; (80014e0 <touch_confirm+0x244>)
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800135e:	b29b      	uxth	r3, r3
 8001360:	82bb      	strh	r3, [r7, #20]
							pos_carte=i+1;
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	3301      	adds	r3, #1
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
					for(int i=0;i<7;i++){//i=0 est la carte au centre donc décalage
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	3301      	adds	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	2b06      	cmp	r3, #6
 8001372:	ddcd      	ble.n	8001310 <touch_confirm+0x74>
					//pas 00
					//fonctionne sur le tas


				//on checck si le action est valide avant de l'envoyer
				if(state.cartes[0][0]==action.couleur || state.cartes[0][1] ==action.valeur ){
 8001374:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <touch_confirm+0x244>)
 8001376:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800137a:	461a      	mov	r2, r3
 800137c:	8a7b      	ldrh	r3, [r7, #18]
 800137e:	429a      	cmp	r2, r3
 8001380:	d006      	beq.n	8001390 <touch_confirm+0xf4>
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <touch_confirm+0x244>)
 8001384:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001388:	461a      	mov	r2, r3
 800138a:	8abb      	ldrh	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	d14f      	bne.n	8001430 <touch_confirm+0x194>


				//maintenant on a touché une carte légale
				//on enleve de la main
				state.cartes[pos_carte][0]=0;
 8001390:	4a53      	ldr	r2, [pc, #332]	; (80014e0 <touch_confirm+0x244>)
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	2200      	movs	r2, #0
 800139a:	715a      	strb	r2, [r3, #5]
				state.cartes[pos_carte][1]=0;
 800139c:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <touch_confirm+0x244>)
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	2200      	movs	r2, #0
 80013a6:	719a      	strb	r2, [r3, #6]

				//on prépare le reste de la chaine à envoyer
				action.playerID=ID;
 80013a8:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <touch_confirm+0x248>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	823b      	strh	r3, [r7, #16]

				if (action.valeur<0){//carte sens inverse
				action.prochain=-1;}
				if (action.valeur==10){
 80013b0:	8abb      	ldrh	r3, [r7, #20]
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d101      	bne.n	80013ba <touch_confirm+0x11e>
					action.prochain=1;//+1 normal
 80013b6:	2301      	movs	r3, #1
 80013b8:	82fb      	strh	r3, [r7, #22]
				}
				if(action.valeur==11){
 80013ba:	8abb      	ldrh	r3, [r7, #20]
 80013bc:	2b0b      	cmp	r3, #11
 80013be:	d101      	bne.n	80013c4 <touch_confirm+0x128>
					action.prochain=2;//+2passe tour
 80013c0:	2302      	movs	r3, #2
 80013c2:	82fb      	strh	r3, [r7, #22]

				//+1 si normal;+2 si passe *(-1) si changement de sense

				//valeur intermediaire si coup illegal? action.couleur=
				// ENVOYER SUR LE BUS CAN
				TxData1[0] = action.playerID;
 80013c4:	8a3b      	ldrh	r3, [r7, #16]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	733b      	strb	r3, [r7, #12]
				TxData1[1] = action.couleur;
 80013ca:	8a7b      	ldrh	r3, [r7, #18]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	737b      	strb	r3, [r7, #13]
				TxData1[2] = action.valeur;
 80013d0:	8abb      	ldrh	r3, [r7, #20]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
				TxData1[3] = action.prochain;
 80013d6:	8afb      	ldrh	r3, [r7, #22]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	73fb      	strb	r3, [r7, #15]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &truc_can);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	493d      	ldr	r1, [pc, #244]	; (80014dc <touch_confirm+0x240>)
 80013e6:	4841      	ldr	r0, [pc, #260]	; (80014ec <touch_confirm+0x250>)
 80013e8:	f004 fa06 	bl	80057f8 <HAL_CAN_AddTxMessage>

				//on a encore dans le if carte legale



				if(action.couleur!=0){//couleur 0 est le pas de cartes/pioche? : [0,0] pour etre sur
 80013ec:	8a7b      	ldrh	r3, [r7, #18]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <touch_confirm+0x166>
						state.cartes[0][0]=action.couleur;// efface la carte au centre si il n'y a rien
 80013f2:	8a7b      	ldrh	r3, [r7, #18]
 80013f4:	b25a      	sxtb	r2, r3
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <touch_confirm+0x244>)
 80013f8:	715a      	strb	r2, [r3, #5]
						state.cartes[0][1]=action.valeur;
 80013fa:	8abb      	ldrh	r3, [r7, #20]
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <touch_confirm+0x244>)
 8001400:	719a      	strb	r2, [r3, #6]


				if(action.prochain==-1){
					state.game_state[1]=-1;
				}
				else{state.game_state[1]= 1;}
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <touch_confirm+0x244>)
 8001404:	2201      	movs	r2, #1
 8001406:	759a      	strb	r2, [r3, #22]
				//MODULO 2 CAR 2 JOUEURS
				state.game_state[0]=(int)(state.game_state[0]+(int)state.game_state[1]*action.prochain)%2+1;//pour revenir à 1 si "4 " dit +1
 8001408:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <touch_confirm+0x244>)
 800140a:	7d5b      	ldrb	r3, [r3, #21]
 800140c:	461a      	mov	r2, r3
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <touch_confirm+0x244>)
 8001410:	7d9b      	ldrb	r3, [r3, #22]
 8001412:	8af9      	ldrh	r1, [r7, #22]
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	4413      	add	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	bfb8      	it	lt
 8001422:	425b      	neglt	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3301      	adds	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <touch_confirm+0x244>)
 800142c:	755a      	strb	r2, [r3, #21]
 800142e:	e04e      	b.n	80014ce <touch_confirm+0x232>




				}
				else if(TS_State.touchY[0]>100 && TS_State.touchY[0]<200){
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <touch_confirm+0x24c>)
 8001432:	899b      	ldrh	r3, [r3, #12]
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d94a      	bls.n	80014ce <touch_confirm+0x232>
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <touch_confirm+0x24c>)
 800143a:	899b      	ldrh	r3, [r3, #12]
 800143c:	2bc7      	cmp	r3, #199	; 0xc7
 800143e:	d846      	bhi.n	80014ce <touch_confirm+0x232>
					//piochage de cartes
					if(TS_State.touchX[0]>300 && TS_State.touchX[0]<450){
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <touch_confirm+0x24c>)
 8001442:	885b      	ldrh	r3, [r3, #2]
 8001444:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001448:	d941      	bls.n	80014ce <touch_confirm+0x232>
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <touch_confirm+0x24c>)
 800144c:	885b      	ldrh	r3, [r3, #2]
 800144e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001452:	d23c      	bcs.n	80014ce <touch_confirm+0x232>
						//on a correctement appuyé et on envoie

						//on cherche la carte en main vide
						for(int i=0;i<7;i++){//7 cartes maxi, sinon on envoie pioche de 0 cartes
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
 8001458:	e018      	b.n	800148c <touch_confirm+0x1f0>
							if (state.cartes[i+1][0]==0 && state.cartes[i+1][1]==0){//vide
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	3301      	adds	r3, #1
 800145e:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <touch_confirm+0x244>)
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10c      	bne.n	8001486 <touch_confirm+0x1ea>
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	3301      	adds	r3, #1
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <touch_confirm+0x244>)
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <touch_confirm+0x1ea>
								pos_carte=i+1;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
								break;
 8001484:	e005      	b.n	8001492 <touch_confirm+0x1f6>
						for(int i=0;i<7;i++){//7 cartes maxi, sinon on envoie pioche de 0 cartes
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	3301      	adds	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	2b06      	cmp	r3, #6
 8001490:	dde3      	ble.n	800145a <touch_confirm+0x1be>


						//UNE VALEUR DE 1 POUR AIT PIOCHE UNE CARTE

						//on envoie sur le CAN on a pioché 1 carte
						action.playerID=ID;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <touch_confirm+0x248>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	823b      	strh	r3, [r7, #16]
						action.couleur=0;//pioche
 800149a:	2300      	movs	r3, #0
 800149c:	827b      	strh	r3, [r7, #18]
						action.valeur=1;//on a pioché 1 carte puis fin de notre tour
 800149e:	2301      	movs	r3, #1
 80014a0:	82bb      	strh	r3, [r7, #20]
						action.prochain=1;//sens normal
 80014a2:	2301      	movs	r3, #1
 80014a4:	82fb      	strh	r3, [r7, #22]

						TxData1[0] = action.playerID;
 80014a6:	8a3b      	ldrh	r3, [r7, #16]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	733b      	strb	r3, [r7, #12]
						TxData1[1] = action.couleur;
 80014ac:	8a7b      	ldrh	r3, [r7, #18]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	737b      	strb	r3, [r7, #13]
						TxData1[2] = action.valeur;
 80014b2:	8abb      	ldrh	r3, [r7, #20]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	73bb      	strb	r3, [r7, #14]
						TxData1[3] = action.prochain;
 80014b8:	8afb      	ldrh	r3, [r7, #22]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	73fb      	strb	r3, [r7, #15]
						HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &truc_can);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	4905      	ldr	r1, [pc, #20]	; (80014dc <touch_confirm+0x240>)
 80014c8:	4808      	ldr	r0, [pc, #32]	; (80014ec <touch_confirm+0x250>)
 80014ca:	f004 f995 	bl	80057f8 <HAL_CAN_AddTxMessage>

			}
		}
		}

		vTaskDelayUntil(&LastCall,value);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00b fe6d 	bl	800d1b4 <vTaskDelayUntil>
		pos_carte=1;
 80014da:	e6ff      	b.n	80012dc <touch_confirm+0x40>
 80014dc:	20000614 	.word	0x20000614
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000018 	.word	0x20000018
 80014e8:	20000218 	.word	0x20000218
 80014ec:	20000178 	.word	0x20000178

080014f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80014fa:	20c8      	movs	r0, #200	; 0xc8
 80014fc:	f001 fbe6 	bl	8002ccc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001500:	f000 fa7a 	bl	80019f8 <ft5336_I2C_InitializeIfRequired>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001534:	2300      	movs	r3, #0
 8001536:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001538:	f000 fa5e 	bl	80019f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e010      	b.n	8001564 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	21a8      	movs	r1, #168	; 0xa8
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fba1 	bl	8002c90 <TS_IO_Read>
 800154e:	4603      	mov	r3, r0
 8001550:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001552:	7b7b      	ldrb	r3, [r7, #13]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b51      	cmp	r3, #81	; 0x51
 8001558:	d101      	bne.n	800155e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3301      	adds	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d802      	bhi.n	8001570 <ft5336_ReadID+0x4e>
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0e8      	beq.n	8001542 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001570:	7b7b      	ldrb	r3, [r7, #13]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	b29b      	uxth	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fa44 	bl	8001a18 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f932 	bl	80017fc <ft5336_TS_DisableIT>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2102      	movs	r1, #2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fb6b 	bl	8002c90 <TS_IO_Read>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d901      	bls.n	80015d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <ft5336_TS_DetectTouch+0x50>)
 80015dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <ft5336_TS_DetectTouch+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000510 	.word	0x20000510

080015f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001616:	4b6d      	ldr	r3, [pc, #436]	; (80017cc <ft5336_TS_GetXY+0x1d8>)
 8001618:	789a      	ldrb	r2, [r3, #2]
 800161a:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <ft5336_TS_GetXY+0x1d8>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	429a      	cmp	r2, r3
 8001620:	f080 80cf 	bcs.w	80017c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <ft5336_TS_GetXY+0x1d8>)
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	2b09      	cmp	r3, #9
 800162a:	d871      	bhi.n	8001710 <ft5336_TS_GetXY+0x11c>
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <ft5336_TS_GetXY+0x40>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	0800165d 	.word	0x0800165d
 8001638:	0800166f 	.word	0x0800166f
 800163c:	08001681 	.word	0x08001681
 8001640:	08001693 	.word	0x08001693
 8001644:	080016a5 	.word	0x080016a5
 8001648:	080016b7 	.word	0x080016b7
 800164c:	080016c9 	.word	0x080016c9
 8001650:	080016db 	.word	0x080016db
 8001654:	080016ed 	.word	0x080016ed
 8001658:	080016ff 	.word	0x080016ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800165c:	2304      	movs	r3, #4
 800165e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001660:	2303      	movs	r3, #3
 8001662:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001664:	2306      	movs	r3, #6
 8001666:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001668:	2305      	movs	r3, #5
 800166a:	753b      	strb	r3, [r7, #20]
      break;
 800166c:	e051      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800166e:	230a      	movs	r3, #10
 8001670:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001672:	2309      	movs	r3, #9
 8001674:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001676:	230c      	movs	r3, #12
 8001678:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800167a:	230b      	movs	r3, #11
 800167c:	753b      	strb	r3, [r7, #20]
      break;
 800167e:	e048      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001680:	2310      	movs	r3, #16
 8001682:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001684:	230f      	movs	r3, #15
 8001686:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001688:	2312      	movs	r3, #18
 800168a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800168c:	2311      	movs	r3, #17
 800168e:	753b      	strb	r3, [r7, #20]
      break;
 8001690:	e03f      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001692:	2316      	movs	r3, #22
 8001694:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001696:	2315      	movs	r3, #21
 8001698:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800169a:	2318      	movs	r3, #24
 800169c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800169e:	2317      	movs	r3, #23
 80016a0:	753b      	strb	r3, [r7, #20]
      break;
 80016a2:	e036      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80016a4:	231c      	movs	r3, #28
 80016a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80016a8:	231b      	movs	r3, #27
 80016aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80016ac:	231e      	movs	r3, #30
 80016ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80016b0:	231d      	movs	r3, #29
 80016b2:	753b      	strb	r3, [r7, #20]
      break;
 80016b4:	e02d      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80016b6:	2322      	movs	r3, #34	; 0x22
 80016b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80016ba:	2321      	movs	r3, #33	; 0x21
 80016bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80016be:	2324      	movs	r3, #36	; 0x24
 80016c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80016c2:	2323      	movs	r3, #35	; 0x23
 80016c4:	753b      	strb	r3, [r7, #20]
      break;
 80016c6:	e024      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80016c8:	2328      	movs	r3, #40	; 0x28
 80016ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80016cc:	2327      	movs	r3, #39	; 0x27
 80016ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80016d0:	232a      	movs	r3, #42	; 0x2a
 80016d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80016d4:	2329      	movs	r3, #41	; 0x29
 80016d6:	753b      	strb	r3, [r7, #20]
      break;
 80016d8:	e01b      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80016da:	232e      	movs	r3, #46	; 0x2e
 80016dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80016de:	232d      	movs	r3, #45	; 0x2d
 80016e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80016e2:	2330      	movs	r3, #48	; 0x30
 80016e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80016e6:	232f      	movs	r3, #47	; 0x2f
 80016e8:	753b      	strb	r3, [r7, #20]
      break;
 80016ea:	e012      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80016ec:	2334      	movs	r3, #52	; 0x34
 80016ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80016f0:	2333      	movs	r3, #51	; 0x33
 80016f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80016f4:	2336      	movs	r3, #54	; 0x36
 80016f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80016f8:	2335      	movs	r3, #53	; 0x35
 80016fa:	753b      	strb	r3, [r7, #20]
      break;
 80016fc:	e009      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80016fe:	233a      	movs	r3, #58	; 0x3a
 8001700:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001702:	2339      	movs	r3, #57	; 0x39
 8001704:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001706:	233c      	movs	r3, #60	; 0x3c
 8001708:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800170a:	233b      	movs	r3, #59	; 0x3b
 800170c:	753b      	strb	r3, [r7, #20]
      break;
 800170e:	e000      	b.n	8001712 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001710:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	7dfa      	ldrb	r2, [r7, #23]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f001 fab8 	bl	8002c90 <TS_IO_Read>
 8001720:	4603      	mov	r3, r0
 8001722:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001724:	7cfb      	ldrb	r3, [r7, #19]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 800172c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	7dba      	ldrb	r2, [r7, #22]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 faaa 	bl	8002c90 <TS_IO_Read>
 800173c:	4603      	mov	r3, r0
 800173e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001740:	7cfb      	ldrb	r3, [r7, #19]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800174a:	b21a      	sxth	r2, r3
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b21b      	sxth	r3, r3
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 800175a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	7d7a      	ldrb	r2, [r7, #21]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fa8f 	bl	8002c90 <TS_IO_Read>
 8001772:	4603      	mov	r3, r0
 8001774:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001776:	7cfb      	ldrb	r3, [r7, #19]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 800177e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	7d3a      	ldrb	r2, [r7, #20]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fa81 	bl	8002c90 <TS_IO_Read>
 800178e:	4603      	mov	r3, r0
 8001790:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001792:	7cfb      	ldrb	r3, [r7, #19]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800179c:	b21a      	sxth	r2, r3
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 80017ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <ft5336_TS_GetXY+0x1dc>)
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <ft5336_TS_GetXY+0x1d8>)
 80017b8:	789b      	ldrb	r3, [r3, #2]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b03      	ldr	r3, [pc, #12]	; (80017cc <ft5336_TS_GetXY+0x1d8>)
 80017c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000510 	.word	0x20000510
 80017d0:	20000514 	.word	0x20000514

080017d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	21a4      	movs	r1, #164	; 0xa4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fa34 	bl	8002c5c <TS_IO_Write>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	21a4      	movs	r1, #164	; 0xa4
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fa20 	bl	8002c5c <TS_IO_Write>
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	6039      	str	r1, [r7, #0]
 800185c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fa11 	bl	8002c90 <TS_IO_Read>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4603      	mov	r3, r0
 8001892:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <ft5336_TS_GetTouchInfo+0x158>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	461a      	mov	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f080 8090 	bcs.w	80019d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d85d      	bhi.n	8001974 <ft5336_TS_GetTouchInfo+0xf0>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	080018f7 	.word	0x080018f7
 80018c8:	08001905 	.word	0x08001905
 80018cc:	08001913 	.word	0x08001913
 80018d0:	08001921 	.word	0x08001921
 80018d4:	0800192f 	.word	0x0800192f
 80018d8:	0800193d 	.word	0x0800193d
 80018dc:	0800194b 	.word	0x0800194b
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001967 	.word	0x08001967
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80018e8:	2303      	movs	r3, #3
 80018ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80018ec:	2307      	movs	r3, #7
 80018ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80018f0:	2308      	movs	r3, #8
 80018f2:	757b      	strb	r3, [r7, #21]
      break;
 80018f4:	e03f      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80018f6:	2309      	movs	r3, #9
 80018f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80018fa:	230d      	movs	r3, #13
 80018fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80018fe:	230e      	movs	r3, #14
 8001900:	757b      	strb	r3, [r7, #21]
      break;
 8001902:	e038      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001904:	230f      	movs	r3, #15
 8001906:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001908:	2313      	movs	r3, #19
 800190a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800190c:	2314      	movs	r3, #20
 800190e:	757b      	strb	r3, [r7, #21]
      break;
 8001910:	e031      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001912:	2315      	movs	r3, #21
 8001914:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001916:	2319      	movs	r3, #25
 8001918:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800191a:	231a      	movs	r3, #26
 800191c:	757b      	strb	r3, [r7, #21]
      break;
 800191e:	e02a      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001920:	231b      	movs	r3, #27
 8001922:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001924:	231f      	movs	r3, #31
 8001926:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001928:	2320      	movs	r3, #32
 800192a:	757b      	strb	r3, [r7, #21]
      break;
 800192c:	e023      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800192e:	2321      	movs	r3, #33	; 0x21
 8001930:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001932:	2325      	movs	r3, #37	; 0x25
 8001934:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001936:	2326      	movs	r3, #38	; 0x26
 8001938:	757b      	strb	r3, [r7, #21]
      break;
 800193a:	e01c      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800193c:	2327      	movs	r3, #39	; 0x27
 800193e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001940:	232b      	movs	r3, #43	; 0x2b
 8001942:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001944:	232c      	movs	r3, #44	; 0x2c
 8001946:	757b      	strb	r3, [r7, #21]
      break;
 8001948:	e015      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800194a:	232d      	movs	r3, #45	; 0x2d
 800194c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800194e:	2331      	movs	r3, #49	; 0x31
 8001950:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001952:	2332      	movs	r3, #50	; 0x32
 8001954:	757b      	strb	r3, [r7, #21]
      break;
 8001956:	e00e      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001958:	2333      	movs	r3, #51	; 0x33
 800195a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800195c:	2337      	movs	r3, #55	; 0x37
 800195e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001960:	2338      	movs	r3, #56	; 0x38
 8001962:	757b      	strb	r3, [r7, #21]
      break;
 8001964:	e007      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001966:	2339      	movs	r3, #57	; 0x39
 8001968:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800196a:	233d      	movs	r3, #61	; 0x3d
 800196c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800196e:	233e      	movs	r3, #62	; 0x3e
 8001970:	757b      	strb	r3, [r7, #21]
      break;
 8001972:	e000      	b.n	8001976 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001974:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	7dfa      	ldrb	r2, [r7, #23]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f001 f986 	bl	8002c90 <TS_IO_Read>
 8001984:	4603      	mov	r3, r0
 8001986:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001988:	7d3b      	ldrb	r3, [r7, #20]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	119b      	asrs	r3, r3, #6
 800198e:	f003 0203 	and.w	r2, r3, #3
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	7dba      	ldrb	r2, [r7, #22]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 f976 	bl	8002c90 <TS_IO_Read>
 80019a4:	4603      	mov	r3, r0
 80019a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80019a8:	7d3b      	ldrb	r3, [r7, #20]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	7d7a      	ldrb	r2, [r7, #21]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 f968 	bl	8002c90 <TS_IO_Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80019c4:	7d3b      	ldrb	r3, [r7, #20]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	111b      	asrs	r3, r3, #4
 80019ca:	f003 0204 	and.w	r2, r3, #4
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000510 	.word	0x20000510

080019e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000510 	.word	0x20000510

080019f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80019fc:	f7ff fff0 	bl	80019e0 <ft5336_Get_I2C_InitializedStatus>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001a06:	f001 f91f 	bl	8002c48 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001a0a:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
  }
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000510 	.word	0x20000510

08001a18 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b090      	sub	sp, #64	; 0x40
 8001a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4bac      	ldr	r3, [pc, #688]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4aab      	ldr	r2, [pc, #684]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4ba9      	ldr	r3, [pc, #676]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a62:	4ba6      	ldr	r3, [pc, #664]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4aa5      	ldr	r2, [pc, #660]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4ba3      	ldr	r3, [pc, #652]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4ba0      	ldr	r3, [pc, #640]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a9f      	ldr	r2, [pc, #636]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b9d      	ldr	r3, [pc, #628]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	4b9a      	ldr	r3, [pc, #616]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a99      	ldr	r2, [pc, #612]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b97      	ldr	r3, [pc, #604]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a93      	ldr	r2, [pc, #588]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b8e      	ldr	r3, [pc, #568]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a8d      	ldr	r2, [pc, #564]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a87      	ldr	r2, [pc, #540]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a81      	ldr	r2, [pc, #516]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a7b      	ldr	r2, [pc, #492]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a75      	ldr	r2, [pc, #468]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a6f      	ldr	r2, [pc, #444]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <MX_GPIO_Init+0x2c8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	486a      	ldr	r0, [pc, #424]	; (8001d00 <MX_GPIO_Init+0x2cc>)
 8001b58:	f005 fb7a 	bl	8007250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b62:	4868      	ldr	r0, [pc, #416]	; (8001d04 <MX_GPIO_Init+0x2d0>)
 8001b64:	f005 fb74 	bl	8007250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b78:	2309      	movs	r3, #9
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4861      	ldr	r0, [pc, #388]	; (8001d08 <MX_GPIO_Init+0x2d4>)
 8001b84:	f005 f8ac 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8001b88:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4859      	ldr	r0, [pc, #356]	; (8001d0c <MX_GPIO_Init+0x2d8>)
 8001ba6:	f005 f89b 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB13 PB12 PB10
                           PB1 PB0 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_10
 8001baa:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	484f      	ldr	r0, [pc, #316]	; (8001d04 <MX_GPIO_Init+0x2d0>)
 8001bc8:	f005 f88a 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP2_Pin;
 8001bcc:	2310      	movs	r3, #16
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4849      	ldr	r0, [pc, #292]	; (8001d04 <MX_GPIO_Init+0x2d0>)
 8001be0:	f005 f87e 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4844      	ldr	r0, [pc, #272]	; (8001d10 <MX_GPIO_Init+0x2dc>)
 8001c00:	f005 f86e 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001c04:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c16:	230c      	movs	r3, #12
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	483c      	ldr	r0, [pc, #240]	; (8001d14 <MX_GPIO_Init+0x2e0>)
 8001c22:	f005 f85d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c26:	2360      	movs	r3, #96	; 0x60
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c36:	230d      	movs	r3, #13
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4831      	ldr	r0, [pc, #196]	; (8001d08 <MX_GPIO_Init+0x2d4>)
 8001c42:	f005 f84d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c56:	230a      	movs	r3, #10
 8001c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4828      	ldr	r0, [pc, #160]	; (8001d04 <MX_GPIO_Init+0x2d0>)
 8001c62:	f005 f83d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8001c66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4825      	ldr	r0, [pc, #148]	; (8001d18 <MX_GPIO_Init+0x2e4>)
 8001c84:	f005 f82c 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI4 PI5 PI7 PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8001c88:	23f0      	movs	r3, #240	; 0xf0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c98:	230a      	movs	r3, #10
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4817      	ldr	r0, [pc, #92]	; (8001d00 <MX_GPIO_Init+0x2cc>)
 8001ca4:	f005 f81c 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4811      	ldr	r0, [pc, #68]	; (8001d0c <MX_GPIO_Init+0x2d8>)
 8001cc6:	f005 f80b 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cda:	230d      	movs	r3, #13
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <MX_GPIO_Init+0x2dc>)
 8001ce6:	f004 fffb 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e00f      	b.n	8001d1c <MX_GPIO_Init+0x2e8>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d1e:	230d      	movs	r3, #13
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4868      	ldr	r0, [pc, #416]	; (8001ecc <MX_GPIO_Init+0x498>)
 8001d2a:	f004 ffd9 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	4619      	mov	r1, r3
 8001d48:	4861      	ldr	r0, [pc, #388]	; (8001ed0 <MX_GPIO_Init+0x49c>)
 8001d4a:	f004 ffc9 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	485b      	ldr	r0, [pc, #364]	; (8001ed4 <MX_GPIO_Init+0x4a0>)
 8001d66:	f004 ffbb 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH12 PH9 PH11
                           PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11
 8001d6a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d7c:	230d      	movs	r3, #13
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4854      	ldr	r0, [pc, #336]	; (8001ed8 <MX_GPIO_Init+0x4a4>)
 8001d88:	f004 ffaa 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	484c      	ldr	r0, [pc, #304]	; (8001ed8 <MX_GPIO_Init+0x4a4>)
 8001da8:	f004 ff9a 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BP3_Pin|BP1_Pin;
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4843      	ldr	r0, [pc, #268]	; (8001ecc <MX_GPIO_Init+0x498>)
 8001dc0:	f004 ff8e 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dd4:	230a      	movs	r3, #10
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	483f      	ldr	r0, [pc, #252]	; (8001edc <MX_GPIO_Init+0x4a8>)
 8001de0:	f004 ff7e 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001de4:	2332      	movs	r3, #50	; 0x32
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001df4:	230b      	movs	r3, #11
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4837      	ldr	r0, [pc, #220]	; (8001edc <MX_GPIO_Init+0x4a8>)
 8001e00:	f004 ff6e 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e04:	2304      	movs	r3, #4
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e14:	2309      	movs	r3, #9
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4830      	ldr	r0, [pc, #192]	; (8001ee0 <MX_GPIO_Init+0x4ac>)
 8001e20:	f004 ff5e 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001e24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e36:	2309      	movs	r3, #9
 8001e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4823      	ldr	r0, [pc, #140]	; (8001ed0 <MX_GPIO_Init+0x49c>)
 8001e42:	f004 ff4d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001e46:	2386      	movs	r3, #134	; 0x86
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e56:	230b      	movs	r3, #11
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <MX_GPIO_Init+0x4b0>)
 8001e62:	f004 ff3d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e66:	2350      	movs	r3, #80	; 0x50
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e76:	230d      	movs	r3, #13
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4818      	ldr	r0, [pc, #96]	; (8001ee4 <MX_GPIO_Init+0x4b0>)
 8001e82:	f004 ff2d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001e86:	2328      	movs	r3, #40	; 0x28
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e96:	230a      	movs	r3, #10
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <MX_GPIO_Init+0x4b0>)
 8001ea2:	f004 ff1d 	bl	8006ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001ea6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <MX_GPIO_Init+0x4ac>)
 8001ec0:	f004 ff0e 	bl	8006ce0 <HAL_GPIO_Init>

}
 8001ec4:	bf00      	nop
 8001ec6:	3740      	adds	r7, #64	; 0x40
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40021c00 	.word	0x40021c00
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <MX_I2C3_Init+0x78>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <MX_I2C3_Init+0x7c>)
 8001ef6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f22:	480e      	ldr	r0, [pc, #56]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f24:	f005 f9ae 	bl	8007284 <HAL_I2C_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f2e:	f000 fc23 	bl	8002778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f36:	f005 ff3b 	bl	8007db0 <HAL_I2CEx_ConfigAnalogFilter>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f40:	f000 fc1a 	bl	8002778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f44:	2100      	movs	r1, #0
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_I2C3_Init+0x74>)
 8001f48:	f005 ff7d 	bl	8007e46 <HAL_I2CEx_ConfigDigitalFilter>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001f52:	f000 fc11 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000518 	.word	0x20000518
 8001f60:	40005c00 	.word	0x40005c00
 8001f64:	00c0eaff 	.word	0x00c0eaff

08001f68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0aa      	sub	sp, #168	; 0xa8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2284      	movs	r2, #132	; 0x84
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00c fc99 	bl	800e8c0 <memset>
  if(i2cHandle->Instance==I2C3)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_I2C_MspInit+0xb4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d13c      	bne.n	8002012 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f007 f82e 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fb2:	f000 fbe1 	bl	8002778 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_I2C_MspInit+0xb8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_I2C_MspInit+0xb8>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0xb8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001fce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480b      	ldr	r0, [pc, #44]	; (8002024 <HAL_I2C_MspInit+0xbc>)
 8001ff6:	f004 fe73 	bl	8006ce0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_I2C_MspInit+0xb8>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0xb8>)
 8002000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_I2C_MspInit+0xb8>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002012:	bf00      	nop
 8002014:	37a8      	adds	r7, #168	; 0xa8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40005c00 	.word	0x40005c00
 8002020:	40023800 	.word	0x40023800
 8002024:	40021c00 	.word	0x40021c00

08002028 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_I2C_MspDeInit+0x38>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10e      	bne.n	8002058 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_I2C_MspDeInit+0x3c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_I2C_MspDeInit+0x3c>)
 8002040:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <HAL_I2C_MspDeInit+0x40>)
 800204a:	f004 fff5 	bl	8007038 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800204e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_I2C_MspDeInit+0x40>)
 8002054:	f004 fff0 	bl	8007038 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40005c00 	.word	0x40005c00
 8002064:	40023800 	.word	0x40023800
 8002068:	40021c00 	.word	0x40021c00

0800206c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2234      	movs	r2, #52	; 0x34
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00c fc21 	bl	800e8c0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <MX_LTDC_Init+0xfc>)
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <MX_LTDC_Init+0x100>)
 8002082:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002084:	4b38      	ldr	r3, [pc, #224]	; (8002168 <MX_LTDC_Init+0xfc>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <MX_LTDC_Init+0xfc>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <MX_LTDC_Init+0xfc>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002096:	4b34      	ldr	r3, [pc, #208]	; (8002168 <MX_LTDC_Init+0xfc>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MX_LTDC_Init+0xfc>)
 800209e:	2228      	movs	r2, #40	; 0x28
 80020a0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020a4:	2209      	movs	r2, #9
 80020a6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020aa:	2235      	movs	r2, #53	; 0x35
 80020ac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020b0:	220b      	movs	r2, #11
 80020b2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020b6:	f240 2215 	movw	r2, #533	; 0x215
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020be:	f240 121b 	movw	r2, #283	; 0x11b
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020c6:	f240 2235 	movw	r2, #565	; 0x235
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020ce:	f240 121d 	movw	r2, #285	; 0x11d
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80020ec:	481e      	ldr	r0, [pc, #120]	; (8002168 <MX_LTDC_Init+0xfc>)
 80020ee:	f005 fef7 	bl	8007ee0 <HAL_LTDC_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80020f8:	f000 fb3e 	bl	8002778 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002100:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002104:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800210a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800210e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002110:	2302      	movs	r3, #2
 8002112:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002114:	23ff      	movs	r3, #255	; 0xff
 8002116:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800211c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002120:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002122:	2307      	movs	r3, #7
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002126:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800212c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002132:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_LTDC_Init+0xfc>)
 8002152:	f006 f857 	bl	8008204 <HAL_LTDC_ConfigLayer>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800215c:	f000 fb0c 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	3738      	adds	r7, #56	; 0x38
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000056c 	.word	0x2000056c
 800216c:	40016800 	.word	0x40016800

08002170 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_LTDC_MspInit+0x174>)
 800218e:	4293      	cmp	r3, r2
 8002190:	f040 80a3 	bne.w	80022da <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002194:	4b54      	ldr	r3, [pc, #336]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	4a53      	ldr	r2, [pc, #332]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 800219a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219e:	6453      	str	r3, [r2, #68]	; 0x44
 80021a0:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ac:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a4d      	ldr	r2, [pc, #308]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b45      	ldr	r3, [pc, #276]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80021dc:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a41      	ldr	r2, [pc, #260]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f4:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	4a3b      	ldr	r2, [pc, #236]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 80021fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_LTDC_MspInit+0x178>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002224:	2310      	movs	r3, #16
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002234:	230e      	movs	r3, #14
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	482b      	ldr	r0, [pc, #172]	; (80022ec <HAL_LTDC_MspInit+0x17c>)
 8002240:	f004 fd4e 	bl	8006ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8002244:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002256:	230e      	movs	r3, #14
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	4823      	ldr	r0, [pc, #140]	; (80022f0 <HAL_LTDC_MspInit+0x180>)
 8002262:	f004 fd3d 	bl	8006ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8002266:	23f7      	movs	r3, #247	; 0xf7
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002276:	230e      	movs	r3, #14
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	481c      	ldr	r0, [pc, #112]	; (80022f4 <HAL_LTDC_MspInit+0x184>)
 8002282:	f004 fd2d 	bl	8006ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002298:	2309      	movs	r3, #9
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4815      	ldr	r0, [pc, #84]	; (80022f8 <HAL_LTDC_MspInit+0x188>)
 80022a4:	f004 fd1c 	bl	8006ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80022a8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ba:	230e      	movs	r3, #14
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <HAL_LTDC_MspInit+0x18c>)
 80022c6:	f004 fd0b 	bl	8006ce0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2105      	movs	r1, #5
 80022ce:	2058      	movs	r0, #88	; 0x58
 80022d0:	f003 ff82 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80022d4:	2058      	movs	r0, #88	; 0x58
 80022d6:	f003 ff9b 	bl	8006210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	3738      	adds	r7, #56	; 0x38
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40016800 	.word	0x40016800
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40022400 	.word	0x40022400
 80022f4:	40022800 	.word	0x40022800
 80022f8:	40021800 	.word	0x40021800
 80022fc:	40022000 	.word	0x40022000

08002300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b0ab      	sub	sp, #172	; 0xac
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char text[50]={};
 8002306:	2300      	movs	r3, #0
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
 800230a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800230e:	222e      	movs	r2, #46	; 0x2e
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f00c fad4 	bl	800e8c0 <memset>
	char text2[50]={};
 8002318:	2300      	movs	r3, #0
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002320:	222e      	movs	r2, #46	; 0x2e
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f00c facb 	bl	800e8c0 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002338:	2301      	movs	r3, #1
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800233c:	2300      	movs	r3, #0
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002340:	f002 fd55 	bl	8004dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002344:	f000 f918 	bl	8002578 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002348:	f000 f988 	bl	800265c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800234c:	f7ff fb72 	bl	8001a34 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002350:	f7fe f984 	bl	800065c <MX_ADC3_Init>
  MX_DMA2D_Init();
 8002354:	f7fe fac6 	bl	80008e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002358:	f7fe fb1c 	bl	8000994 <MX_FMC_Init>
  MX_I2C3_Init();
 800235c:	f7ff fdc4 	bl	8001ee8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002360:	f7ff fe84 	bl	800206c <MX_LTDC_Init>
  MX_RTC_Init();
 8002364:	f000 fa48 	bl	80027f8 <MX_RTC_Init>
  MX_TIM1_Init();
 8002368:	f002 f82c 	bl	80043c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800236c:	f002 f8d6 	bl	800451c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002370:	f002 f94a 	bl	8004608 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002374:	f002 f996 	bl	80046a4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002378:	f002 fa0c 	bl	8004794 <MX_TIM8_Init>
  MX_TIM12_Init();
 800237c:	f002 fa5e 	bl	800483c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002380:	f002 fbd8 	bl	8004b34 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002384:	f002 fc0e 	bl	8004ba4 <MX_USART6_UART_Init>
  MX_CAN1_Init();
 8002388:	f7fe fa28 	bl	80007dc <MX_CAN1_Init>
  MX_ADC1_Init();
 800238c:	f7fe f912 	bl	80005b4 <MX_ADC1_Init>
  MX_RNG_Init();
 8002390:	f000 f9f8 	bl	8002784 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8002394:	f000 fca6 	bl	8002ce4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002398:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800239c:	2000      	movs	r0, #0
 800239e:	f000 fd39 	bl	8002e14 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80023a2:	f000 fd0f 	bl	8002dc4 <BSP_LCD_GetXSize>
 80023a6:	4604      	mov	r4, r0
 80023a8:	f000 fd20 	bl	8002dec <BSP_LCD_GetYSize>
 80023ac:	4603      	mov	r3, r0
 80023ae:	fb04 f303 	mul.w	r3, r4, r3
 80023b2:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4619      	mov	r1, r3
 80023ba:	2001      	movs	r0, #1
 80023bc:	f000 fd2a 	bl	8002e14 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80023c0:	f001 f840 	bl	8003444 <BSP_LCD_DisplayOn>


	//layer 0 : table background,UNO,pioche,cartes adversaires
	BSP_LCD_SelectLayer(0);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f000 fd85 	bl	8002ed4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_RED);
 80023ca:	485e      	ldr	r0, [pc, #376]	; (8002544 <main+0x244>)
 80023cc:	f000 fdf4 	bl	8002fb8 <BSP_LCD_Clear>
	BSP_LCD_DrawBitmap(0,0,(uint8_t*)_actable);
 80023d0:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <main+0x248>)
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 ff83 	bl	80032e0 <BSP_LCD_DrawBitmap>


	//layer 1 : carte dessous,playing flag,UNO blink
	BSP_LCD_SelectLayer(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 fd7a 	bl	8002ed4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 fde9 	bl	8002fb8 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80023e6:	4859      	ldr	r0, [pc, #356]	; (800254c <main+0x24c>)
 80023e8:	f000 fdb6 	bl	8002f58 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80023ec:	4858      	ldr	r0, [pc, #352]	; (8002550 <main+0x250>)
 80023ee:	f000 fd81 	bl	8002ef4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f000 fd96 	bl	8002f24 <BSP_LCD_SetBackColor>




	//begin touchscreen
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80023f8:	f000 fce4 	bl	8002dc4 <BSP_LCD_GetXSize>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b29c      	uxth	r4, r3
 8002400:	f000 fcf4 	bl	8002dec <BSP_LCD_GetYSize>
 8002404:	4603      	mov	r3, r0
 8002406:	b29b      	uxth	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	4620      	mov	r0, r4
 800240c:	f001 fc2c 	bl	8003c68 <BSP_TS_Init>
	/* Commencer le bus CAN
	 *
	 *
	 */
	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002418:	2301      	movs	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000; //ON ECOUTE TOUT
 800241c:	2300      	movs	r3, #0
 800241e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002430:	2301      	movs	r3, #1
 8002432:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002434:	230e      	movs	r3, #14
 8002436:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4845      	ldr	r0, [pc, #276]	; (8002554 <main+0x254>)
 800243e:	f003 f8b7 	bl	80055b0 <HAL_CAN_ConfigFilter>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <main+0x14c>
		/* Filter configuration Error */
		Error_Handler();
 8002448:	f000 f996 	bl	8002778 <Error_Handler>
	}

	//IL FAUT QUAND MEME ACTIVER LA RECEPTION
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800244c:	2102      	movs	r1, #2
 800244e:	4841      	ldr	r0, [pc, #260]	; (8002554 <main+0x254>)
 8002450:	f003 fbb4 	bl	8005bbc <HAL_CAN_ActivateNotification>



	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002454:	483f      	ldr	r0, [pc, #252]	; (8002554 <main+0x254>)
 8002456:	f003 f98b 	bl	8005770 <HAL_CAN_Start>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <main+0x164>
		/* Start Error */
		Error_Handler();
 8002460:	f000 f98a 	bl	8002778 <Error_Handler>
	}
	TxHeader1.StdId = 0x410;//importance du MESSAGE
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <main+0x258>)
 8002466:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800246a:	601a      	str	r2, [r3, #0]
	TxHeader1.ExtId = 0x01; //peu importe, on est en ID 11 bits (CAN_ID_STD)
 800246c:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <main+0x258>)
 800246e:	2201      	movs	r2, #1
 8002470:	605a      	str	r2, [r3, #4]
	TxHeader1.RTR = CAN_RTR_DATA;
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <main+0x258>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
	TxHeader1.IDE = CAN_ID_STD;
 8002478:	4b37      	ldr	r3, [pc, #220]	; (8002558 <main+0x258>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
	TxHeader1.DLC = 4;//data length
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <main+0x258>)
 8002480:	2204      	movs	r2, #4
 8002482:	611a      	str	r2, [r3, #16]
	TxHeader1.TransmitGlobalTime = DISABLE;
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <main+0x258>)
 8002486:	2200      	movs	r2, #0
 8002488:	751a      	strb	r2, [r3, #20]


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800248a:	f7fe fb87 	bl	8000b9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800248e:	f009 fd21 	bl	800bed4 <osKernelStart>


	while (1)
	{
		//   RECEVOIR
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData)
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <main+0x25c>)
 8002494:	4a32      	ldr	r2, [pc, #200]	; (8002560 <main+0x260>)
 8002496:	2100      	movs	r1, #0
 8002498:	482e      	ldr	r0, [pc, #184]	; (8002554 <main+0x254>)
 800249a:	f003 fa7d 	bl	8005998 <HAL_CAN_GetRxMessage>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d131      	bne.n	8002508 <main+0x208>
				== HAL_OK) {
			//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

			sprintf(text, "ID %3X data ", (unsigned int)RxHeader.StdId);
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <main+0x260>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024ac:	492d      	ldr	r1, [pc, #180]	; (8002564 <main+0x264>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f00c fb1c 	bl	800eaec <siprintf>

			for (i = 0; i < RxHeader.DLC; i++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80024ba:	e018      	b.n	80024ee <main+0x1ee>
				sprintf(text2, "%2X ", RxData[i]);
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <main+0x25c>)
 80024be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024cc:	4926      	ldr	r1, [pc, #152]	; (8002568 <main+0x268>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00c fb0c 	bl	800eaec <siprintf>
				strcat(text, text2);
 80024d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80024d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f00c fb24 	bl	800eb2c <strcat>
			for (i = 0; i < RxHeader.DLC; i++) {
 80024e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024e8:	3301      	adds	r3, #1
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <main+0x260>)
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3e0      	bcc.n	80024bc <main+0x1bc>
			}

			BSP_LCD_DisplayStringAt(10, 255, (uint8_t*) text, LEFT_MODE);
 80024fa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80024fe:	2303      	movs	r3, #3
 8002500:	21ff      	movs	r1, #255	; 0xff
 8002502:	200a      	movs	r0, #10
 8002504:	f000 fdc4 	bl	8003090 <BSP_LCD_DisplayStringAt>
		}

		//     ENVOYER
		TxData1[0] = (2000) >> 8; //valeur de 0 à 3000 en 0.1 km/h (avec offset de -2000)
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <main+0x26c>)
 800250a:	2207      	movs	r2, #7
 800250c:	701a      	strb	r2, [r3, #0]
		TxData1[1] = (2000) & 0xFF; //valeur de 0 à 3000 en 0.1 km/h (avec offset de -2000)
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <main+0x26c>)
 8002510:	22d0      	movs	r2, #208	; 0xd0
 8002512:	705a      	strb	r2, [r3, #1]
		TxData1[2] = (20000) >> 8; // valeur de -12000 à 12000 en tour/min (avec offset de -20000)
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <main+0x26c>)
 8002516:	224e      	movs	r2, #78	; 0x4e
 8002518:	709a      	strb	r2, [r3, #2]
		TxData1[3] = (20000) ;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <main+0x26c>)
 800251c:	2220      	movs	r2, #32
 800251e:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &truc_can);
 8002520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002524:	4a11      	ldr	r2, [pc, #68]	; (800256c <main+0x26c>)
 8002526:	490c      	ldr	r1, [pc, #48]	; (8002558 <main+0x258>)
 8002528:	480a      	ldr	r0, [pc, #40]	; (8002554 <main+0x254>)
 800252a:	f003 f965 	bl	80057f8 <HAL_CAN_AddTxMessage>


		TxData2[0] = 2500; //valeur de 0 à 3000 en 0.1 km/h (avec offset de -2000)
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <main+0x270>)
 8002530:	22c4      	movs	r2, #196	; 0xc4
 8002532:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2, &truc_can);
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <main+0x270>)
 800253a:	490e      	ldr	r1, [pc, #56]	; (8002574 <main+0x274>)
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <main+0x254>)
 800253e:	f003 f95b 	bl	80057f8 <HAL_CAN_AddTxMessage>
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData)
 8002542:	e7a6      	b.n	8002492 <main+0x192>
 8002544:	ffff0000 	.word	0xffff0000
 8002548:	080202c8 	.word	0x080202c8
 800254c:	2000004c 	.word	0x2000004c
 8002550:	ff0000ff 	.word	0xff0000ff
 8002554:	20000178 	.word	0x20000178
 8002558:	20000614 	.word	0x20000614
 800255c:	2000066c 	.word	0x2000066c
 8002560:	20000644 	.word	0x20000644
 8002564:	0800f3c4 	.word	0x0800f3c4
 8002568:	0800f3d4 	.word	0x0800f3d4
 800256c:	20000660 	.word	0x20000660
 8002570:	20000664 	.word	0x20000664
 8002574:	2000062c 	.word	0x2000062c

08002578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b094      	sub	sp, #80	; 0x50
 800257c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257e:	f107 0320 	add.w	r3, r7, #32
 8002582:	2230      	movs	r2, #48	; 0x30
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f00c f99a 	bl	800e8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800259c:	f006 f818 	bl	80085d0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <SystemClock_Config+0xdc>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <SystemClock_Config+0xdc>)
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <SystemClock_Config+0xdc>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <SystemClock_Config+0xe0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <SystemClock_Config+0xe0>)
 80025be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <SystemClock_Config+0xe0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80025d0:	2309      	movs	r3, #9
 80025d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025da:	2301      	movs	r3, #1
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025de:	2302      	movs	r3, #2
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80025e8:	2319      	movs	r3, #25
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80025ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025f2:	2302      	movs	r3, #2
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80025f6:	2309      	movs	r3, #9
 80025f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fa:	f107 0320 	add.w	r3, r7, #32
 80025fe:	4618      	mov	r0, r3
 8002600:	f006 f846 	bl	8008690 <HAL_RCC_OscConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800260a:	f000 f8b5 	bl	8002778 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800260e:	f005 ffef 	bl	80085f0 <HAL_PWREx_EnableOverDrive>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002618:	f000 f8ae 	bl	8002778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261c:	230f      	movs	r3, #15
 800261e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002620:	2302      	movs	r3, #2
 8002622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800262c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800262e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2106      	movs	r1, #6
 800263a:	4618      	mov	r0, r3
 800263c:	f006 facc 	bl	8008bd8 <HAL_RCC_ClockConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002646:	f000 f897 	bl	8002778 <Error_Handler>
  }
}
 800264a:	bf00      	nop
 800264c:	3750      	adds	r7, #80	; 0x50
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000

0800265c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0a2      	sub	sp, #136	; 0x88
 8002660:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2284      	movs	r2, #132	; 0x84
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f00c f929 	bl	800e8c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <PeriphCommonClock_Config+0x54>)
 8002670:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002672:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002676:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002678:	2305      	movs	r3, #5
 800267a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800267c:	2302      	movs	r3, #2
 800267e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002680:	2303      	movs	r3, #3
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800268e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f006 fcb5 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 80026a4:	f000 f868 	bl	8002778 <Error_Handler>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3788      	adds	r7, #136	; 0x88
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	00200008 	.word	0x00200008

080026b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b09a      	sub	sp, #104	; 0x68
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[4];

	char test[50]={};
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	f107 0318 	add.w	r3, r7, #24
 80026c4:	222e      	movs	r2, #46	; 0x2e
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00c f8f9 	bl	800e8c0 <memset>

	extern osMessageQId myQueue02Handle;
	//extern osMessageQId MessagerieBatterieHandle;

	Message coup={1,0,0,0};
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	811a      	strh	r2, [r3, #8]
 80026da:	2301      	movs	r3, #1
 80026dc:	813b      	strh	r3, [r7, #8]
	//alumé LED

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80026de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026e2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026e6:	2100      	movs	r1, #0
 80026e8:	4817      	ldr	r0, [pc, #92]	; (8002748 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80026ea:	f003 f955 	bl	8005998 <HAL_CAN_GetRxMessage>
	//if (RxHeader.StdId == 0x410 ) {//égal un autre joueur != notre
		coup.playerID=RxData[0];
 80026ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	813b      	strh	r3, [r7, #8]
		coup.couleur=RxData[1];
 80026f6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	817b      	strh	r3, [r7, #10]
		coup.valeur=RxData[2];
 80026fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002702:	b29b      	uxth	r3, r3
 8002704:	81bb      	strh	r3, [r7, #12]
		coup.prochain=RxData[3];
 8002706:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800270a:	b29b      	uxth	r3, r3
 800270c:	81fb      	strh	r3, [r7, #14]
		sprintf(test,"x%d",(char) coup.prochain);
 800270e:	89fb      	ldrh	r3, [r7, #14]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800271a:	4618      	mov	r0, r3
 800271c:	f00c f9e6 	bl	800eaec <siprintf>
		BSP_LCD_DisplayStringAt(-10,70,(uint8_t*) test ,CENTER_MODE);
 8002720:	f107 0214 	add.w	r2, r7, #20
 8002724:	2301      	movs	r3, #1
 8002726:	2146      	movs	r1, #70	; 0x46
 8002728:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800272c:	f000 fcb0 	bl	8003090 <BSP_LCD_DisplayStringAt>
		xQueueSendFromISR(myQueue02Handle, &coup, NULL);
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f107 0108 	add.w	r1, r7, #8
 8002738:	2300      	movs	r3, #0
 800273a:	2200      	movs	r2, #0
 800273c:	f009 ffc6 	bl	800c6cc <xQueueGenericSendFromISR>
	//}
	//if (RxHeader.StdId == 0x310) {//à notre id, on ignore
	//	NiveauBatterie = RxData[0];
	//	xQueueSendFromISR(myQueue02Handle, &, NULL);
	//}
}
 8002740:	bf00      	nop
 8002742:	3768      	adds	r7, #104	; 0x68
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000178 	.word	0x20000178
 800274c:	0800f3dc 	.word	0x0800f3dc
 8002750:	20000254 	.word	0x20000254

08002754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002766:	f002 fb4f 	bl	8004e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40001000 	.word	0x40001000

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800277c:	b672      	cpsid	i
}
 800277e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002780:	e7fe      	b.n	8002780 <Error_Handler+0x8>
	...

08002784 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_RNG_Init+0x20>)
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <MX_RNG_Init+0x24>)
 800278c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_RNG_Init+0x20>)
 8002790:	f007 f82a 	bl	80097e8 <HAL_RNG_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800279a:	f7ff ffed 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000670 	.word	0x20000670
 80027a8:	50060800 	.word	0x50060800

080027ac <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_RNG_MspInit+0x44>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d113      	bne.n	80027e6 <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_RNG_MspInit+0x48>)
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_RNG_MspInit+0x48>)
 80027c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c8:	6353      	str	r3, [r2, #52]	; 0x34
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RNG_MspInit+0x48>)
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2105      	movs	r1, #5
 80027da:	2050      	movs	r0, #80	; 0x50
 80027dc:	f003 fcfc 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80027e0:	2050      	movs	r0, #80	; 0x50
 80027e2:	f003 fd15 	bl	8006210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	50060800 	.word	0x50060800
 80027f4:	40023800 	.word	0x40023800

080027f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b090      	sub	sp, #64	; 0x40
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80027fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002812:	463b      	mov	r3, r7
 8002814:	2228      	movs	r2, #40	; 0x28
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f00c f851 	bl	800e8c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800281e:	4b46      	ldr	r3, [pc, #280]	; (8002938 <MX_RTC_Init+0x140>)
 8002820:	4a46      	ldr	r2, [pc, #280]	; (800293c <MX_RTC_Init+0x144>)
 8002822:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <MX_RTC_Init+0x140>)
 8002826:	2200      	movs	r2, #0
 8002828:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <MX_RTC_Init+0x140>)
 800282c:	227f      	movs	r2, #127	; 0x7f
 800282e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <MX_RTC_Init+0x140>)
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <MX_RTC_Init+0x140>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <MX_RTC_Init+0x140>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <MX_RTC_Init+0x140>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002848:	483b      	ldr	r0, [pc, #236]	; (8002938 <MX_RTC_Init+0x140>)
 800284a:	f007 f863 	bl	8009914 <HAL_RTC_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002854:	f7ff ff90 	bl	8002778 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800286a:	2300      	movs	r3, #0
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002876:	2201      	movs	r2, #1
 8002878:	4619      	mov	r1, r3
 800287a:	482f      	ldr	r0, [pc, #188]	; (8002938 <MX_RTC_Init+0x140>)
 800287c:	f007 f8ce 	bl	8009a1c <HAL_RTC_SetTime>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002886:	f7ff ff77 	bl	8002778 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a6:	2201      	movs	r2, #1
 80028a8:	4619      	mov	r1, r3
 80028aa:	4823      	ldr	r0, [pc, #140]	; (8002938 <MX_RTC_Init+0x140>)
 80028ac:	f007 f950 	bl	8009b50 <HAL_RTC_SetDate>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80028b6:	f7ff ff5f 	bl	8002778 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80028be:	2300      	movs	r3, #0
 80028c0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80028e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80028ea:	463b      	mov	r3, r7
 80028ec:	2201      	movs	r2, #1
 80028ee:	4619      	mov	r1, r3
 80028f0:	4811      	ldr	r0, [pc, #68]	; (8002938 <MX_RTC_Init+0x140>)
 80028f2:	f007 f9b1 	bl	8009c58 <HAL_RTC_SetAlarm>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80028fc:	f7ff ff3c 	bl	8002778 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002906:	463b      	mov	r3, r7
 8002908:	2201      	movs	r2, #1
 800290a:	4619      	mov	r1, r3
 800290c:	480a      	ldr	r0, [pc, #40]	; (8002938 <MX_RTC_Init+0x140>)
 800290e:	f007 f9a3 	bl	8009c58 <HAL_RTC_SetAlarm>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002918:	f7ff ff2e 	bl	8002778 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800291c:	2202      	movs	r2, #2
 800291e:	2100      	movs	r1, #0
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_RTC_Init+0x140>)
 8002922:	f007 fb65 	bl	8009ff0 <HAL_RTCEx_SetTimeStamp>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 800292c:	f7ff ff24 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	3740      	adds	r7, #64	; 0x40
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000680 	.word	0x20000680
 800293c:	40002800 	.word	0x40002800

08002940 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0a4      	sub	sp, #144	; 0x90
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2284      	movs	r2, #132	; 0x84
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f00b ffb5 	bl	800e8c0 <memset>
  if(rtcHandle->Instance==RTC)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_RTC_MspInit+0x54>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d114      	bne.n	800298a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002960:	2320      	movs	r3, #32
 8002962:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4618      	mov	r0, r3
 8002970:	f006 fb4a 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800297a:	f7ff fefd 	bl	8002778 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RTC_MspInit+0x58>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_RTC_MspInit+0x58>)
 8002984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800298a:	bf00      	nop
 800298c:	3790      	adds	r7, #144	; 0x90
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40002800 	.word	0x40002800
 8002998:	40023800 	.word	0x40023800

0800299c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a51      	ldr	r2, [pc, #324]	; (8002aec <I2Cx_MspInit+0x150>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d14d      	bne.n	8002a48 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <I2Cx_MspInit+0x154>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <I2Cx_MspInit+0x154>)
 80029b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b6:	6313      	str	r3, [r2, #48]	; 0x30
 80029b8:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <I2Cx_MspInit+0x154>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80029c8:	2312      	movs	r3, #18
 80029ca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80029d0:	2302      	movs	r3, #2
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80029d4:	2304      	movs	r3, #4
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	4845      	ldr	r0, [pc, #276]	; (8002af4 <I2Cx_MspInit+0x158>)
 80029e0:	f004 f97e 	bl	8006ce0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80029e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	4840      	ldr	r0, [pc, #256]	; (8002af4 <I2Cx_MspInit+0x158>)
 80029f2:	f004 f975 	bl	8006ce0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <I2Cx_MspInit+0x154>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a3d      	ldr	r2, [pc, #244]	; (8002af0 <I2Cx_MspInit+0x154>)
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a18:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002a1a:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4a34      	ldr	r2, [pc, #208]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a24:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	210f      	movs	r1, #15
 8002a2a:	2048      	movs	r0, #72	; 0x48
 8002a2c:	f003 fbd4 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002a30:	2048      	movs	r0, #72	; 0x48
 8002a32:	f003 fbed 	bl	8006210 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	210f      	movs	r1, #15
 8002a3a:	2049      	movs	r0, #73	; 0x49
 8002a3c:	f003 fbcc 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002a40:	2049      	movs	r0, #73	; 0x49
 8002a42:	f003 fbe5 	bl	8006210 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002a46:	e04d      	b.n	8002ae4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002a48:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a64:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a66:	2312      	movs	r3, #18
 8002a68:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002a72:	2304      	movs	r3, #4
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	481e      	ldr	r0, [pc, #120]	; (8002af8 <I2Cx_MspInit+0x15c>)
 8002a7e:	f004 f92f 	bl	8006ce0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	481a      	ldr	r0, [pc, #104]	; (8002af8 <I2Cx_MspInit+0x15c>)
 8002a90:	f004 f926 	bl	8006ce0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <I2Cx_MspInit+0x154>)
 8002abe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ac2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	201f      	movs	r0, #31
 8002aca:	f003 fb85 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002ace:	201f      	movs	r0, #31
 8002ad0:	f003 fb9e 	bl	8006210 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	2020      	movs	r0, #32
 8002ada:	f003 fb7d 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002ade:	2020      	movs	r0, #32
 8002ae0:	f003 fb96 	bl	8006210 <HAL_NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200006a0 	.word	0x200006a0
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40021c00 	.word	0x40021c00
 8002af8:	40020400 	.word	0x40020400

08002afc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f004 feab 	bl	8007860 <HAL_I2C_GetState>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d125      	bne.n	8002b5c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <I2Cx_Init+0x68>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <I2Cx_Init+0x6c>)
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e002      	b.n	8002b26 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <I2Cx_Init+0x70>)
 8002b24:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <I2Cx_Init+0x74>)
 8002b2a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff23 	bl	800299c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f004 fb94 	bl	8007284 <HAL_I2C_Init>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200006a0 	.word	0x200006a0
 8002b68:	40005c00 	.word	0x40005c00
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	40912732 	.word	0x40912732

08002b74 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af04      	add	r7, sp, #16
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	72fb      	strb	r3, [r7, #11]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	b299      	uxth	r1, r3
 8002b96:	88f8      	ldrh	r0, [r7, #6]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4603      	mov	r3, r0
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f004 fd3e 	bl	800762c <HAL_I2C_Mem_Read>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f832 	bl	8002c28 <I2Cx_Error>
  }
  return status;    
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	af04      	add	r7, sp, #16
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	4608      	mov	r0, r1
 8002bd8:	4611      	mov	r1, r2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	72fb      	strb	r3, [r7, #11]
 8002be0:	460b      	mov	r3, r1
 8002be2:	813b      	strh	r3, [r7, #8]
 8002be4:	4613      	mov	r3, r2
 8002be6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	b299      	uxth	r1, r3
 8002bf0:	88f8      	ldrh	r0, [r7, #6]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4603      	mov	r3, r0
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f004 fbfd 	bl	8007404 <HAL_I2C_Mem_Write>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002c14:	7afb      	ldrb	r3, [r7, #11]
 8002c16:	4619      	mov	r1, r3
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f805 	bl	8002c28 <I2Cx_Error>
  }
  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 fbb5 	bl	80073a4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ff5e 	bl	8002afc <I2Cx_Init>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <TS_IO_Init+0x10>)
 8002c4e:	f7ff ff55 	bl	8002afc <I2Cx_Init>
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200006a0 	.word	0x200006a0

08002c5c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
 8002c66:	460b      	mov	r3, r1
 8002c68:	71bb      	strb	r3, [r7, #6]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	79f9      	ldrb	r1, [r7, #7]
 8002c74:	2301      	movs	r3, #1
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	1d7b      	adds	r3, r7, #5
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4803      	ldr	r0, [pc, #12]	; (8002c8c <TS_IO_Write+0x30>)
 8002c80:	f7ff ffa5 	bl	8002bce <I2Cx_WriteMultiple>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200006a0 	.word	0x200006a0

08002c90 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	4603      	mov	r3, r0
 8002c98:	460a      	mov	r2, r1
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002ca4:	79bb      	ldrb	r3, [r7, #6]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	79f9      	ldrb	r1, [r7, #7]
 8002caa:	2301      	movs	r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	f107 030f 	add.w	r3, r7, #15
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <TS_IO_Read+0x38>)
 8002cb8:	f7ff ff5c 	bl	8002b74 <I2Cx_ReadMultiple>

  return read_value;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200006a0 	.word	0x200006a0

08002ccc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f002 f8b7 	bl	8004e48 <HAL_Delay>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002cea:	2228      	movs	r2, #40	; 0x28
 8002cec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002cf0:	2209      	movs	r2, #9
 8002cf2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002cf6:	2235      	movs	r2, #53	; 0x35
 8002cf8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002cfc:	220b      	movs	r2, #11
 8002cfe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d02:	f240 121b 	movw	r2, #283	; 0x11b
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d0a:	f240 2215 	movw	r2, #533	; 0x215
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d12:	f240 121d 	movw	r2, #285	; 0x11d
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d1a:	f240 2235 	movw	r2, #565	; 0x235
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d20:	2100      	movs	r1, #0
 8002d22:	4823      	ldr	r0, [pc, #140]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d24:	f000 fc86 	bl	8003634 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d32:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002d36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <BSP_LCD_Init+0xd0>)
 8002d6c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d6e:	4810      	ldr	r0, [pc, #64]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d70:	f005 fa86 	bl	8008280 <HAL_LTDC_GetState>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d7e:	f000 fb7f 	bl	8003480 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002d82:	480b      	ldr	r0, [pc, #44]	; (8002db0 <BSP_LCD_Init+0xcc>)
 8002d84:	f005 f8ac 	bl	8007ee0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d8e:	480a      	ldr	r0, [pc, #40]	; (8002db8 <BSP_LCD_Init+0xd4>)
 8002d90:	f004 fa5e 	bl	8007250 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002d94:	2201      	movs	r2, #1
 8002d96:	2108      	movs	r1, #8
 8002d98:	4808      	ldr	r0, [pc, #32]	; (8002dbc <BSP_LCD_Init+0xd8>)
 8002d9a:	f004 fa59 	bl	8007250 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d9e:	f000 fdad 	bl	80038fc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002da2:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <BSP_LCD_Init+0xdc>)
 8002da4:	f000 f8d8 	bl	8002f58 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200006f4 	.word	0x200006f4
 8002db4:	40016800 	.word	0x40016800
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40022800 	.word	0x40022800
 8002dc0:	20000044 	.word	0x20000044

08002dc4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <BSP_LCD_GetXSize+0x20>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <BSP_LCD_GetXSize+0x24>)
 8002dce:	2134      	movs	r1, #52	; 0x34
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3360      	adds	r3, #96	; 0x60
 8002dd8:	681b      	ldr	r3, [r3, #0]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	200007dc 	.word	0x200007dc
 8002de8:	200006f4 	.word	0x200006f4

08002dec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <BSP_LCD_GetYSize+0x20>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <BSP_LCD_GetYSize+0x24>)
 8002df6:	2134      	movs	r1, #52	; 0x34
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3364      	adds	r3, #100	; 0x64
 8002e00:	681b      	ldr	r3, [r3, #0]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	200007dc 	.word	0x200007dc
 8002e10:	200006f4 	.word	0x200006f4

08002e14 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b090      	sub	sp, #64	; 0x40
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002e24:	f7ff ffce 	bl	8002dc4 <BSP_LCD_GetXSize>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e30:	f7ff ffdc 	bl	8002dec <BSP_LCD_GetYSize>
 8002e34:	4603      	mov	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002e40:	23ff      	movs	r3, #255	; 0xff
 8002e42:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e60:	2307      	movs	r3, #7
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002e64:	f7ff ffae 	bl	8002dc4 <BSP_LCD_GetXSize>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002e6c:	f7ff ffbe 	bl	8002dec <BSP_LCD_GetYSize>
 8002e70:	4603      	mov	r3, r0
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4812      	ldr	r0, [pc, #72]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002e7e:	f005 f9c1 	bl	8008204 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	4911      	ldr	r1, [pc, #68]	; (8002ecc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3304      	adds	r3, #4
 8002e92:	f04f 32ff 	mov.w	r2, #4294967295
 8002e96:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	490c      	ldr	r1, [pc, #48]	; (8002ecc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002eaa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	4907      	ldr	r1, [pc, #28]	; (8002ecc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ebe:	601a      	str	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	3740      	adds	r7, #64	; 0x40
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200006f4 	.word	0x200006f4
 8002ecc:	200007e0 	.word	0x200007e0
 8002ed0:	20000044 	.word	0x20000044

08002ed4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <BSP_LCD_SelectLayer+0x1c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
} 
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200007dc 	.word	0x200007dc

08002ef4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <BSP_LCD_SetTextColor+0x28>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <BSP_LCD_SetTextColor+0x2c>)
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	200007dc 	.word	0x200007dc
 8002f20:	200007e0 	.word	0x200007e0

08002f24 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <BSP_LCD_SetBackColor+0x2c>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4908      	ldr	r1, [pc, #32]	; (8002f54 <BSP_LCD_SetBackColor+0x30>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200007dc 	.word	0x200007dc
 8002f54:	200007e0 	.word	0x200007e0

08002f58 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <BSP_LCD_SetFont+0x2c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4908      	ldr	r1, [pc, #32]	; (8002f88 <BSP_LCD_SetFont+0x30>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3308      	adds	r3, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	200007dc 	.word	0x200007dc
 8002f88:	200007e0 	.word	0x200007e0

08002f8c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <BSP_LCD_GetFont+0x24>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <BSP_LCD_GetFont+0x28>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	200007dc 	.word	0x200007dc
 8002fb4:	200007e0 	.word	0x200007e0

08002fb8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <BSP_LCD_Clear+0x48>)
 8002fc2:	681c      	ldr	r4, [r3, #0]
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <BSP_LCD_Clear+0x48>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <BSP_LCD_Clear+0x4c>)
 8002fca:	2134      	movs	r1, #52	; 0x34
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461e      	mov	r6, r3
 8002fd8:	f7ff fef4 	bl	8002dc4 <BSP_LCD_GetXSize>
 8002fdc:	4605      	mov	r5, r0
 8002fde:	f7ff ff05 	bl	8002dec <BSP_LCD_GetYSize>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	462a      	mov	r2, r5
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f000 fbf2 	bl	80037dc <LL_FillBuffer>
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003000:	200007dc 	.word	0x200007dc
 8003004:	200006f4 	.word	0x200006f4

08003008 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	80fb      	strh	r3, [r7, #6]
 8003012:	460b      	mov	r3, r1
 8003014:	80bb      	strh	r3, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <BSP_LCD_DisplayChar+0x80>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	491b      	ldr	r1, [pc, #108]	; (800308c <BSP_LCD_DisplayChar+0x84>)
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3308      	adds	r3, #8
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <BSP_LCD_DisplayChar+0x80>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4c14      	ldr	r4, [pc, #80]	; (800308c <BSP_LCD_DisplayChar+0x84>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4423      	add	r3, r4
 8003046:	3308      	adds	r3, #8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800304c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <BSP_LCD_DisplayChar+0x80>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <BSP_LCD_DisplayChar+0x84>)
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4423      	add	r3, r4
 8003060:	3308      	adds	r3, #8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	889b      	ldrh	r3, [r3, #4]
 8003066:	3307      	adds	r3, #7
 8003068:	2b00      	cmp	r3, #0
 800306a:	da00      	bge.n	800306e <BSP_LCD_DisplayChar+0x66>
 800306c:	3307      	adds	r3, #7
 800306e:	10db      	asrs	r3, r3, #3
 8003070:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003074:	18ca      	adds	r2, r1, r3
 8003076:	88b9      	ldrh	r1, [r7, #4]
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 faf6 	bl	800366c <DrawChar>
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	200007dc 	.word	0x200007dc
 800308c:	200007e0 	.word	0x200007e0

08003090 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	461a      	mov	r2, r3
 800309a:	4603      	mov	r3, r0
 800309c:	81fb      	strh	r3, [r7, #14]
 800309e:	460b      	mov	r3, r1
 80030a0:	81bb      	strh	r3, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80030a6:	2301      	movs	r3, #1
 80030a8:	83fb      	strh	r3, [r7, #30]
 80030aa:	2300      	movs	r3, #0
 80030ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80030ba:	e002      	b.n	80030c2 <BSP_LCD_DisplayStringAt+0x32>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3301      	adds	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	617a      	str	r2, [r7, #20]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f6      	bne.n	80030bc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80030ce:	f7ff fe79 	bl	8002dc4 <BSP_LCD_GetXSize>
 80030d2:	4601      	mov	r1, r0
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4850      	ldr	r0, [pc, #320]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4403      	add	r3, r0
 80030e4:	3308      	adds	r3, #8
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	889b      	ldrh	r3, [r3, #4]
 80030ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ee:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d01c      	beq.n	8003130 <BSP_LCD_DisplayStringAt+0xa0>
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	dc33      	bgt.n	8003162 <BSP_LCD_DisplayStringAt+0xd2>
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d002      	beq.n	8003104 <BSP_LCD_DisplayStringAt+0x74>
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d019      	beq.n	8003136 <BSP_LCD_DisplayStringAt+0xa6>
 8003102:	e02e      	b.n	8003162 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad1      	subs	r1, r2, r3
 800310a:	4b43      	ldr	r3, [pc, #268]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4843      	ldr	r0, [pc, #268]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4403      	add	r3, r0
 800311a:	3308      	adds	r3, #8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	889b      	ldrh	r3, [r3, #4]
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	4413      	add	r3, r2
 800312c:	83fb      	strh	r3, [r7, #30]
      break;
 800312e:	e01b      	b.n	8003168 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	83fb      	strh	r3, [r7, #30]
      break;
 8003134:	e018      	b.n	8003168 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	b299      	uxth	r1, r3
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4836      	ldr	r0, [pc, #216]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4403      	add	r3, r0
 800314e:	3308      	adds	r3, #8
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	fb11 f303 	smulbb	r3, r1, r3
 8003158:	b29a      	uxth	r2, r3
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	83fb      	strh	r3, [r7, #30]
      break;
 8003160:	e002      	b.n	8003168 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	83fb      	strh	r3, [r7, #30]
      break;
 8003166:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003168:	8bfb      	ldrh	r3, [r7, #30]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <BSP_LCD_DisplayStringAt+0xe6>
 800316e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da1d      	bge.n	80031b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800317a:	e01a      	b.n	80031b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	89b9      	ldrh	r1, [r7, #12]
 8003182:	8bfb      	ldrh	r3, [r7, #30]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff3f 	bl	8003008 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4923      	ldr	r1, [pc, #140]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3308      	adds	r3, #8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	889a      	ldrh	r2, [r3, #4]
 80031a0:	8bfb      	ldrh	r3, [r7, #30]
 80031a2:	4413      	add	r3, r2
 80031a4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
    i++;
 80031ac:	8bbb      	ldrh	r3, [r7, #28]
 80031ae:	3301      	adds	r3, #1
 80031b0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2dc      	uxtb	r4, r3
 80031c0:	f7ff fe00 	bl	8002dc4 <BSP_LCD_GetXSize>
 80031c4:	8bb9      	ldrh	r1, [r7, #28]
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4d14      	ldr	r5, [pc, #80]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	442b      	add	r3, r5
 80031d6:	3308      	adds	r3, #8
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	889b      	ldrh	r3, [r3, #4]
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	1ac3      	subs	r3, r0, r3
 80031e2:	b299      	uxth	r1, r3
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	480c      	ldr	r0, [pc, #48]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4403      	add	r3, r0
 80031f4:	3308      	adds	r3, #8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	4299      	cmp	r1, r3
 80031fc:	bf2c      	ite	cs
 80031fe:	2301      	movcs	r3, #1
 8003200:	2300      	movcc	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4023      	ands	r3, r4
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1b7      	bne.n	800317c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	200007dc 	.word	0x200007dc
 800321c:	200007e0 	.word	0x200007e0

08003220 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800322c:	f7ff feae 	bl	8002f8c <BSP_LCD_GetFont>
 8003230:	4603      	mov	r3, r0
 8003232:	88db      	ldrh	r3, [r3, #6]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	fb12 f303 	smulbb	r3, r2, r3
 800323a:	b299      	uxth	r1, r3
 800323c:	2303      	movs	r3, #3
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	2000      	movs	r0, #0
 8003242:	f7ff ff25 	bl	8003090 <BSP_LCD_DisplayStringAt>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	603a      	str	r2, [r7, #0]
 800325a:	80fb      	strh	r3, [r7, #6]
 800325c:	460b      	mov	r3, r1
 800325e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <BSP_LCD_DrawPixel+0x88>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <BSP_LCD_DrawPixel+0x8c>)
 8003266:	2134      	movs	r1, #52	; 0x34
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3348      	adds	r3, #72	; 0x48
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d116      	bne.n	80032a4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <BSP_LCD_DrawPixel+0x88>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <BSP_LCD_DrawPixel+0x8c>)
 800327c:	2134      	movs	r1, #52	; 0x34
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	88bd      	ldrh	r5, [r7, #4]
 800328a:	f7ff fd9b 	bl	8002dc4 <BSP_LCD_GetXSize>
 800328e:	4603      	mov	r3, r0
 8003290:	fb03 f205 	mul.w	r2, r3, r5
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	4413      	add	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4423      	add	r3, r4
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b292      	uxth	r2, r2
 80032a0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80032a2:	e015      	b.n	80032d0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <BSP_LCD_DrawPixel+0x88>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <BSP_LCD_DrawPixel+0x8c>)
 80032aa:	2134      	movs	r1, #52	; 0x34
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	335c      	adds	r3, #92	; 0x5c
 80032b4:	681c      	ldr	r4, [r3, #0]
 80032b6:	88bd      	ldrh	r5, [r7, #4]
 80032b8:	f7ff fd84 	bl	8002dc4 <BSP_LCD_GetXSize>
 80032bc:	4603      	mov	r3, r0
 80032be:	fb03 f205 	mul.w	r2, r3, r5
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4423      	add	r3, r4
 80032ca:	461a      	mov	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}
 80032d8:	200007dc 	.word	0x200007dc
 80032dc:	200006f4 	.word	0x200006f4

080032e0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b08b      	sub	sp, #44	; 0x2c
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	330a      	adds	r3, #10
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	330b      	adds	r3, #11
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	330c      	adds	r3, #12
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	330d      	adds	r3, #13
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	061b      	lsls	r3, r3, #24
 8003324:	4413      	add	r3, r2
 8003326:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3312      	adds	r3, #18
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3313      	adds	r3, #19
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3314      	adds	r3, #20
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	441a      	add	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3315      	adds	r3, #21
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	061b      	lsls	r3, r3, #24
 800334c:	4413      	add	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3316      	adds	r3, #22
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3317      	adds	r3, #23
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3318      	adds	r3, #24
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	441a      	add	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3319      	adds	r3, #25
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	331c      	adds	r3, #28
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	331d      	adds	r3, #29
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4413      	add	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <BSP_LCD_DrawBitmap+0x15c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <BSP_LCD_DrawBitmap+0x160>)
 8003392:	2134      	movs	r1, #52	; 0x34
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	335c      	adds	r3, #92	; 0x5c
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	f7ff fd11 	bl	8002dc4 <BSP_LCD_GetXSize>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	fb03 f202 	mul.w	r2, r3, r2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4423      	add	r3, r4
 80033b2:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	3b20      	subs	r3, #32
 80033b8:	2b07      	cmp	r3, #7
 80033ba:	d802      	bhi.n	80033c2 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	e008      	b.n	80033d4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	3b10      	subs	r3, #16
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	d802      	bhi.n	80033d0 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80033ca:	2302      	movs	r3, #2
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e001      	b.n	80033d4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80033d0:	2301      	movs	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	08d2      	lsrs	r2, r2, #3
 80033e2:	fb03 f202 	mul.w	r2, r3, r2
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	4413      	add	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e018      	b.n	8003428 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80033f6:	6a39      	ldr	r1, [r7, #32]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa39 	bl	8003874 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003402:	f7ff fcdf 	bl	8002dc4 <BSP_LCD_GetXSize>
 8003406:	4603      	mov	r3, r0
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	4413      	add	r3, r2
 800340e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	425b      	negs	r3, r3
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	3301      	adds	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	d3e2      	bcc.n	80033f6 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	372c      	adds	r7, #44	; 0x2c
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop
 800343c:	200007dc 	.word	0x200007dc
 8003440:	200006f4 	.word	0x200006f4

08003444 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <BSP_LCD_DisplayOn+0x30>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <BSP_LCD_DisplayOn+0x30>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003458:	2201      	movs	r2, #1
 800345a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800345e:	4806      	ldr	r0, [pc, #24]	; (8003478 <BSP_LCD_DisplayOn+0x34>)
 8003460:	f003 fef6 	bl	8007250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003464:	2201      	movs	r2, #1
 8003466:	2108      	movs	r1, #8
 8003468:	4804      	ldr	r0, [pc, #16]	; (800347c <BSP_LCD_DisplayOn+0x38>)
 800346a:	f003 fef1 	bl	8007250 <HAL_GPIO_WritePin>
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200006f4 	.word	0x200006f4
 8003478:	40022000 	.word	0x40022000
 800347c:	40022800 	.word	0x40022800

08003480 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b090      	sub	sp, #64	; 0x40
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800348a:	4b64      	ldr	r3, [pc, #400]	; (800361c <BSP_LCD_MspInit+0x19c>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a63      	ldr	r2, [pc, #396]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b61      	ldr	r3, [pc, #388]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80034a2:	4b5e      	ldr	r3, [pc, #376]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a5d      	ldr	r2, [pc, #372]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b5b      	ldr	r3, [pc, #364]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ba:	4b58      	ldr	r3, [pc, #352]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a57      	ldr	r2, [pc, #348]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034c0:	f043 0310 	orr.w	r3, r3, #16
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b55      	ldr	r3, [pc, #340]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034d2:	4b52      	ldr	r3, [pc, #328]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a51      	ldr	r2, [pc, #324]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80034ea:	4b4c      	ldr	r3, [pc, #304]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a4b      	ldr	r2, [pc, #300]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b49      	ldr	r3, [pc, #292]	; (800361c <BSP_LCD_MspInit+0x19c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003502:	4b46      	ldr	r3, [pc, #280]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a45      	ldr	r2, [pc, #276]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b43      	ldr	r3, [pc, #268]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800351a:	4b40      	ldr	r3, [pc, #256]	; (800361c <BSP_LCD_MspInit+0x19c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a39      	ldr	r2, [pc, #228]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <BSP_LCD_MspInit+0x19c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a33      	ldr	r2, [pc, #204]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <BSP_LCD_MspInit+0x19c>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003562:	2310      	movs	r3, #16
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800356e:	2302      	movs	r3, #2
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003572:	230e      	movs	r3, #14
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800357a:	4619      	mov	r1, r3
 800357c:	4828      	ldr	r0, [pc, #160]	; (8003620 <BSP_LCD_MspInit+0x1a0>)
 800357e:	f003 fbaf 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800358c:	2309      	movs	r3, #9
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003594:	4619      	mov	r1, r3
 8003596:	4823      	ldr	r0, [pc, #140]	; (8003624 <BSP_LCD_MspInit+0x1a4>)
 8003598:	f003 fba2 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800359c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035a6:	230e      	movs	r3, #14
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80035aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ae:	4619      	mov	r1, r3
 80035b0:	481d      	ldr	r0, [pc, #116]	; (8003628 <BSP_LCD_MspInit+0x1a8>)
 80035b2:	f003 fb95 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80035b6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035c0:	230e      	movs	r3, #14
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80035c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c8:	4619      	mov	r1, r3
 80035ca:	4818      	ldr	r0, [pc, #96]	; (800362c <BSP_LCD_MspInit+0x1ac>)
 80035cc:	f003 fb88 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80035d0:	23f7      	movs	r3, #247	; 0xf7
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035d8:	230e      	movs	r3, #14
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80035dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e0:	4619      	mov	r1, r3
 80035e2:	4813      	ldr	r0, [pc, #76]	; (8003630 <BSP_LCD_MspInit+0x1b0>)
 80035e4:	f003 fb7c 	bl	8006ce0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80035e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80035ee:	2301      	movs	r3, #1
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80035f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f6:	4619      	mov	r1, r3
 80035f8:	480b      	ldr	r0, [pc, #44]	; (8003628 <BSP_LCD_MspInit+0x1a8>)
 80035fa:	f003 fb71 	bl	8006ce0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80035fe:	2308      	movs	r3, #8
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003602:	2301      	movs	r3, #1
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360a:	4619      	mov	r1, r3
 800360c:	4808      	ldr	r0, [pc, #32]	; (8003630 <BSP_LCD_MspInit+0x1b0>)
 800360e:	f003 fb67 	bl	8006ce0 <HAL_GPIO_Init>
}
 8003612:	bf00      	nop
 8003614:	3740      	adds	r7, #64	; 0x40
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	40021000 	.word	0x40021000
 8003624:	40021800 	.word	0x40021800
 8003628:	40022000 	.word	0x40022000
 800362c:	40022400 	.word	0x40022400
 8003630:	40022800 	.word	0x40022800

08003634 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <BSP_LCD_ClockConfig+0x34>)
 8003640:	2208      	movs	r2, #8
 8003642:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <BSP_LCD_ClockConfig+0x34>)
 8003646:	22c0      	movs	r2, #192	; 0xc0
 8003648:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <BSP_LCD_ClockConfig+0x34>)
 800364c:	2205      	movs	r2, #5
 800364e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <BSP_LCD_ClockConfig+0x34>)
 8003652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003658:	4803      	ldr	r0, [pc, #12]	; (8003668 <BSP_LCD_ClockConfig+0x34>)
 800365a:	f005 fcd5 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200007f8 	.word	0x200007f8

0800366c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	603a      	str	r2, [r7, #0]
 8003676:	80fb      	strh	r3, [r7, #6]
 8003678:	460b      	mov	r3, r1
 800367a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <DrawChar+0x168>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4953      	ldr	r1, [pc, #332]	; (80037d8 <DrawChar+0x16c>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	88db      	ldrh	r3, [r3, #6]
 800369a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <DrawChar+0x168>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <DrawChar+0x16c>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	889b      	ldrh	r3, [r3, #4]
 80036b2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80036b4:	8a3b      	ldrh	r3, [r7, #16]
 80036b6:	3307      	adds	r3, #7
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da00      	bge.n	80036be <DrawChar+0x52>
 80036bc:	3307      	adds	r3, #7
 80036be:	10db      	asrs	r3, r3, #3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8a3b      	ldrh	r3, [r7, #16]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e076      	b.n	80037c2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80036d4:	8a3b      	ldrh	r3, [r7, #16]
 80036d6:	3307      	adds	r3, #7
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da00      	bge.n	80036de <DrawChar+0x72>
 80036dc:	3307      	adds	r3, #7
 80036de:	10db      	asrs	r3, r3, #3
 80036e0:	461a      	mov	r2, r3
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80036ee:	8a3b      	ldrh	r3, [r7, #16]
 80036f0:	3307      	adds	r3, #7
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da00      	bge.n	80036f8 <DrawChar+0x8c>
 80036f6:	3307      	adds	r3, #7
 80036f8:	10db      	asrs	r3, r3, #3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d002      	beq.n	8003704 <DrawChar+0x98>
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d004      	beq.n	800370c <DrawChar+0xa0>
 8003702:	e00c      	b.n	800371e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
      break;
 800370a:	e016      	b.n	800373a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	3201      	adds	r2, #1
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	e00d      	b.n	800373a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	041a      	lsls	r2, r3, #16
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	3202      	adds	r2, #2
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
      break;
 8003738:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e036      	b.n	80037ae <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003740:	8a3a      	ldrh	r2, [r7, #16]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	4413      	add	r3, r2
 800374a:	3b01      	subs	r3, #1
 800374c:	2201      	movs	r2, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	461a      	mov	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	b29a      	uxth	r2, r3
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	4413      	add	r3, r2
 8003764:	b298      	uxth	r0, r3
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <DrawChar+0x168>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <DrawChar+0x16c>)
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	88bb      	ldrh	r3, [r7, #4]
 800377a:	4619      	mov	r1, r3
 800377c:	f7ff fd68 	bl	8003250 <BSP_LCD_DrawPixel>
 8003780:	e012      	b.n	80037a8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	b29a      	uxth	r2, r3
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4413      	add	r3, r2
 800378a:	b298      	uxth	r0, r3
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <DrawChar+0x168>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4911      	ldr	r1, [pc, #68]	; (80037d8 <DrawChar+0x16c>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3304      	adds	r3, #4
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	88bb      	ldrh	r3, [r7, #4]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7ff fd54 	bl	8003250 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	8a3b      	ldrh	r3, [r7, #16]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3c4      	bcc.n	8003740 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	3301      	adds	r3, #1
 80037ba:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	8a7b      	ldrh	r3, [r7, #18]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d384      	bcc.n	80036d4 <DrawChar+0x68>
  }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200007dc 	.word	0x200007dc
 80037d8:	200007e0 	.word	0x200007e0

080037dc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <LL_FillBuffer+0x88>)
 80037ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037f0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <LL_FillBuffer+0x8c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <LL_FillBuffer+0x90>)
 80037f8:	2134      	movs	r1, #52	; 0x34
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3348      	adds	r3, #72	; 0x48
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d103      	bne.n	8003810 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <LL_FillBuffer+0x88>)
 800380a:	2202      	movs	r2, #2
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	e002      	b.n	8003816 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <LL_FillBuffer+0x88>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <LL_FillBuffer+0x88>)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <LL_FillBuffer+0x88>)
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <LL_FillBuffer+0x94>)
 8003820:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003822:	4810      	ldr	r0, [pc, #64]	; (8003864 <LL_FillBuffer+0x88>)
 8003824:	f002 fec0 	bl	80065a8 <HAL_DMA2D_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	480c      	ldr	r0, [pc, #48]	; (8003864 <LL_FillBuffer+0x88>)
 8003832:	f003 f927 	bl	8006a84 <HAL_DMA2D_ConfigLayer>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10e      	bne.n	800385a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69f9      	ldr	r1, [r7, #28]
 8003846:	4807      	ldr	r0, [pc, #28]	; (8003864 <LL_FillBuffer+0x88>)
 8003848:	f002 fef8 	bl	800663c <HAL_DMA2D_Start>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003852:	210a      	movs	r1, #10
 8003854:	4803      	ldr	r0, [pc, #12]	; (8003864 <LL_FillBuffer+0x88>)
 8003856:	f002 ff1c 	bl	8006692 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000079c 	.word	0x2000079c
 8003868:	200007dc 	.word	0x200007dc
 800386c:	200006f4 	.word	0x200006f4
 8003870:	4002b000 	.word	0x4002b000

08003874 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003882:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 8003884:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003888:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003890:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038b0:	4a11      	ldr	r2, [pc, #68]	; (80038f8 <LL_ConvertLineToARGB8888+0x84>)
 80038b2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80038b4:	480f      	ldr	r0, [pc, #60]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038b6:	f002 fe77 	bl	80065a8 <HAL_DMA2D_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d115      	bne.n	80038ec <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80038c0:	2101      	movs	r1, #1
 80038c2:	480c      	ldr	r0, [pc, #48]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038c4:	f003 f8de 	bl	8006a84 <HAL_DMA2D_ConfigLayer>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	2301      	movs	r3, #1
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4806      	ldr	r0, [pc, #24]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038da:	f002 feaf 	bl	800663c <HAL_DMA2D_Start>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80038e4:	210a      	movs	r1, #10
 80038e6:	4803      	ldr	r0, [pc, #12]	; (80038f4 <LL_ConvertLineToARGB8888+0x80>)
 80038e8:	f002 fed3 	bl	8006692 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000079c 	.word	0x2000079c
 80038f8:	4002b000 	.word	0x4002b000

080038fc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003902:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <BSP_SDRAM_Init+0xb0>)
 8003904:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003906:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003908:	2202      	movs	r2, #2
 800390a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800390e:	2207      	movs	r2, #7
 8003910:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003914:	2204      	movs	r2, #4
 8003916:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800391a:	2207      	movs	r2, #7
 800391c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003920:	2202      	movs	r2, #2
 8003922:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003926:	2202      	movs	r2, #2
 8003928:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800392c:	2202      	movs	r2, #2
 800392e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800393e:	2204      	movs	r2, #4
 8003940:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003944:	2210      	movs	r2, #16
 8003946:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003954:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003958:	2200      	movs	r2, #0
 800395a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800395e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003962:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003972:	2100      	movs	r1, #0
 8003974:	480c      	ldr	r0, [pc, #48]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003976:	f000 f87f 	bl	8003a78 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800397a:	490d      	ldr	r1, [pc, #52]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800397c:	480a      	ldr	r0, [pc, #40]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800397e:	f006 fb9f 	bl	800a0c0 <HAL_SDRAM_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <BSP_SDRAM_Init+0xb8>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <BSP_SDRAM_Init+0xb8>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003996:	f240 6003 	movw	r0, #1539	; 0x603
 800399a:	f000 f80d 	bl	80039b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <BSP_SDRAM_Init+0xb8>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000087c 	.word	0x2000087c
 80039ac:	a0000140 	.word	0xa0000140
 80039b0:	200008b0 	.word	0x200008b0
 80039b4:	20000054 	.word	0x20000054

080039b8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039cc:	2210      	movs	r2, #16
 80039ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039d6:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e0:	4923      	ldr	r1, [pc, #140]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e2:	4824      	ldr	r0, [pc, #144]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039e4:	f006 fba0 	bl	800a128 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f001 fa2d 	bl	8004e48 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f6:	2210      	movs	r2, #16
 80039f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0a:	4919      	ldr	r1, [pc, #100]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0c:	4819      	ldr	r0, [pc, #100]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a0e:	f006 fb8b 	bl	800a128 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a14:	2203      	movs	r2, #3
 8003a16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a20:	2208      	movs	r2, #8
 8003a22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2e:	4910      	ldr	r1, [pc, #64]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a30:	4810      	ldr	r0, [pc, #64]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a32:	f006 fb79 	bl	800a128 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a36:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003a3a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3e:	2204      	movs	r2, #4
 8003a40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a44:	2210      	movs	r2, #16
 8003a46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a52:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a58:	4905      	ldr	r1, [pc, #20]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5a:	4806      	ldr	r0, [pc, #24]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a5c:	f006 fb64 	bl	800a128 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4804      	ldr	r0, [pc, #16]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a64:	f006 fb95 	bl	800a192 <HAL_SDRAM_ProgramRefreshRate>
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200008cc 	.word	0x200008cc
 8003a74:	2000087c 	.word	0x2000087c

08003a78 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a82:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	4a6f      	ldr	r2, [pc, #444]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6393      	str	r3, [r2, #56]	; 0x38
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a69      	ldr	r2, [pc, #420]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab2:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a63      	ldr	r2, [pc, #396]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aca:	4b5e      	ldr	r3, [pc, #376]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a5d      	ldr	r2, [pc, #372]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b5b      	ldr	r3, [pc, #364]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ae2:	4b58      	ldr	r3, [pc, #352]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a57      	ldr	r2, [pc, #348]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003afa:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a51      	ldr	r2, [pc, #324]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b00:	f043 0320 	orr.w	r3, r3, #32
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b12:	4b4c      	ldr	r3, [pc, #304]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a4b      	ldr	r2, [pc, #300]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b2a:	4b46      	ldr	r3, [pc, #280]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a45      	ldr	r2, [pc, #276]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b43      	ldr	r3, [pc, #268]	; (8003c44 <BSP_SDRAM_MspInit+0x1cc>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b46:	2301      	movs	r3, #1
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b4e:	230c      	movs	r3, #12
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b52:	2308      	movs	r3, #8
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	483a      	ldr	r0, [pc, #232]	; (8003c48 <BSP_SDRAM_MspInit+0x1d0>)
 8003b5e:	f003 f8bf 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b62:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4837      	ldr	r0, [pc, #220]	; (8003c4c <BSP_SDRAM_MspInit+0x1d4>)
 8003b70:	f003 f8b6 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b74:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4833      	ldr	r0, [pc, #204]	; (8003c50 <BSP_SDRAM_MspInit+0x1d8>)
 8003b82:	f003 f8ad 	bl	8006ce0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003b86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b90:	4619      	mov	r1, r3
 8003b92:	4830      	ldr	r0, [pc, #192]	; (8003c54 <BSP_SDRAM_MspInit+0x1dc>)
 8003b94:	f003 f8a4 	bl	8006ce0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003b98:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	482c      	ldr	r0, [pc, #176]	; (8003c58 <BSP_SDRAM_MspInit+0x1e0>)
 8003ba6:	f003 f89b 	bl	8006ce0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003baa:	2328      	movs	r3, #40	; 0x28
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4829      	ldr	r0, [pc, #164]	; (8003c5c <BSP_SDRAM_MspInit+0x1e4>)
 8003bb6:	f003 f893 	bl	8006ce0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bcc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bd4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bdc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003be0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003be4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003be6:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003bec:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bf2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <BSP_SDRAM_MspInit+0x1ec>)
 8003c10:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c1e:	4810      	ldr	r0, [pc, #64]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c20:	f002 fbb2 	bl	8006388 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c24:	480e      	ldr	r0, [pc, #56]	; (8003c60 <BSP_SDRAM_MspInit+0x1e8>)
 8003c26:	f002 fb01 	bl	800622c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	210f      	movs	r1, #15
 8003c2e:	2038      	movs	r0, #56	; 0x38
 8003c30:	f002 fad2 	bl	80061d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c34:	2038      	movs	r0, #56	; 0x38
 8003c36:	f002 faeb 	bl	8006210 <HAL_NVIC_EnableIRQ>
}
 8003c3a:	bf00      	nop
 8003c3c:	3740      	adds	r7, #64	; 0x40
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	40020c00 	.word	0x40020c00
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40021400 	.word	0x40021400
 8003c58:	40021800 	.word	0x40021800
 8003c5c:	40021c00 	.word	0x40021c00
 8003c60:	200008dc 	.word	0x200008dc
 8003c64:	40026410 	.word	0x40026410

08003c68 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460a      	mov	r2, r1
 8003c72:	80fb      	strh	r3, [r7, #6]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <BSP_TS_Init+0x68>)
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c82:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <BSP_TS_Init+0x6c>)
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <BSP_TS_Init+0x70>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2070      	movs	r0, #112	; 0x70
 8003c8e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <BSP_TS_Init+0x70>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2070      	movs	r0, #112	; 0x70
 8003c96:	4798      	blx	r3
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b51      	cmp	r3, #81	; 0x51
 8003c9c:	d111      	bne.n	8003cc2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <BSP_TS_Init+0x74>)
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <BSP_TS_Init+0x70>)
 8003ca2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <BSP_TS_Init+0x78>)
 8003ca6:	2270      	movs	r2, #112	; 0x70
 8003ca8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <BSP_TS_Init+0x7c>)
 8003cac:	2208      	movs	r2, #8
 8003cae:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <BSP_TS_Init+0x74>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <BSP_TS_Init+0x78>)
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4798      	blx	r3
 8003cc0:	e001      	b.n	8003cc6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000940 	.word	0x20000940
 8003cd4:	20000942 	.word	0x20000942
 8003cd8:	2000001c 	.word	0x2000001c
 8003cdc:	2000093c 	.word	0x2000093c
 8003ce0:	20000945 	.word	0x20000945
 8003ce4:	20000944 	.word	0x20000944

08003ce8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b097      	sub	sp, #92	; 0x5c
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003d02:	4bb4      	ldr	r3, [pc, #720]	; (8003fd4 <BSP_TS_GetState+0x2ec>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	4ab3      	ldr	r2, [pc, #716]	; (8003fd8 <BSP_TS_GetState+0x2f0>)
 8003d0a:	7812      	ldrb	r2, [r2, #0]
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4798      	blx	r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8196 	beq.w	8004050 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d28:	e185      	b.n	8004036 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003d2a:	4baa      	ldr	r3, [pc, #680]	; (8003fd4 <BSP_TS_GetState+0x2ec>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	4aa9      	ldr	r2, [pc, #676]	; (8003fd8 <BSP_TS_GetState+0x2f0>)
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	b290      	uxth	r0, r2
 8003d36:	f107 0120 	add.w	r1, r7, #32
 8003d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3c:	0052      	lsls	r2, r2, #1
 8003d3e:	188c      	adds	r4, r1, r2
 8003d40:	f107 0114 	add.w	r1, r7, #20
 8003d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d46:	0052      	lsls	r2, r2, #1
 8003d48:	440a      	add	r2, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003d4e:	4ba3      	ldr	r3, [pc, #652]	; (8003fdc <BSP_TS_GetState+0x2f4>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d117      	bne.n	8003d86 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	3350      	adds	r3, #80	; 0x50
 8003d5c:	443b      	add	r3, r7
 8003d5e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	3350      	adds	r3, #80	; 0x50
 8003d68:	443b      	add	r3, r7
 8003d6a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	3350      	adds	r3, #80	; 0x50
 8003d74:	443b      	add	r3, r7
 8003d76:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	3350      	adds	r3, #80	; 0x50
 8003d80:	443b      	add	r3, r7
 8003d82:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003d86:	4b95      	ldr	r3, [pc, #596]	; (8003fdc <BSP_TS_GetState+0x2f4>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	3350      	adds	r3, #80	; 0x50
 8003d98:	443b      	add	r3, r7
 8003d9a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003d9e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	3350      	adds	r3, #80	; 0x50
 8003daa:	443b      	add	r3, r7
 8003dac:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003db0:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <BSP_TS_GetState+0x2f4>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	3350      	adds	r3, #80	; 0x50
 8003dc2:	443b      	add	r3, r7
 8003dc4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003dc8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	3350      	adds	r3, #80	; 0x50
 8003dd4:	443b      	add	r3, r7
 8003dd6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003dda:	4b80      	ldr	r3, [pc, #512]	; (8003fdc <BSP_TS_GetState+0x2f4>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	3350      	adds	r3, #80	; 0x50
 8003dec:	443b      	add	r3, r7
 8003dee:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	3350      	adds	r3, #80	; 0x50
 8003df8:	443b      	add	r3, r7
 8003dfa:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	3350      	adds	r3, #80	; 0x50
 8003e04:	443b      	add	r3, r7
 8003e06:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	3350      	adds	r3, #80	; 0x50
 8003e10:	443b      	add	r3, r7
 8003e12:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	3350      	adds	r3, #80	; 0x50
 8003e1c:	443b      	add	r3, r7
 8003e1e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <BSP_TS_GetState+0x2f8>)
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	d90d      	bls.n	8003e4c <BSP_TS_GetState+0x164>
 8003e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	3350      	adds	r3, #80	; 0x50
 8003e36:	443b      	add	r3, r7
 8003e38:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003e3c:	4968      	ldr	r1, [pc, #416]	; (8003fe0 <BSP_TS_GetState+0x2f8>)
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	e00c      	b.n	8003e66 <BSP_TS_GetState+0x17e>
 8003e4c:	4a64      	ldr	r2, [pc, #400]	; (8003fe0 <BSP_TS_GetState+0x2f8>)
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	3350      	adds	r3, #80	; 0x50
 8003e5c:	443b      	add	r3, r7
 8003e5e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	3350      	adds	r3, #80	; 0x50
 8003e70:	443b      	add	r3, r7
 8003e72:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003e76:	4619      	mov	r1, r3
 8003e78:	4a5a      	ldr	r2, [pc, #360]	; (8003fe4 <BSP_TS_GetState+0x2fc>)
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e80:	4299      	cmp	r1, r3
 8003e82:	d90d      	bls.n	8003ea0 <BSP_TS_GetState+0x1b8>
 8003e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	3350      	adds	r3, #80	; 0x50
 8003e8a:	443b      	add	r3, r7
 8003e8c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003e90:	4954      	ldr	r1, [pc, #336]	; (8003fe4 <BSP_TS_GetState+0x2fc>)
 8003e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	e00c      	b.n	8003eba <BSP_TS_GetState+0x1d2>
 8003ea0:	4a50      	ldr	r2, [pc, #320]	; (8003fe4 <BSP_TS_GetState+0x2fc>)
 8003ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	3350      	adds	r3, #80	; 0x50
 8003eb0:	443b      	add	r3, r7
 8003eb2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003ebe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003ec2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ec6:	4413      	add	r3, r2
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	dd15      	ble.n	8003ef8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	3350      	adds	r3, #80	; 0x50
 8003ed2:	443b      	add	r3, r7
 8003ed4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <BSP_TS_GetState+0x2f8>)
 8003edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	3350      	adds	r3, #80	; 0x50
 8003ee8:	443b      	add	r3, r7
 8003eea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <BSP_TS_GetState+0x2fc>)
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003ef8:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <BSP_TS_GetState+0x2f0>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b70      	cmp	r3, #112	; 0x70
 8003efe:	d119      	bne.n	8003f34 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	3350      	adds	r3, #80	; 0x50
 8003f06:	443b      	add	r3, r7
 8003f08:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	460a      	mov	r2, r1
 8003f16:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	3350      	adds	r3, #80	; 0x50
 8003f1e:	443b      	add	r3, r7
 8003f20:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	3304      	adds	r3, #4
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	460a      	mov	r2, r1
 8003f30:	809a      	strh	r2, [r3, #4]
 8003f32:	e022      	b.n	8003f7a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <BSP_TS_GetState+0x300>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <BSP_TS_GetState+0x2f8>)
 8003f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	0b1b      	lsrs	r3, r3, #12
 8003f48:	b299      	uxth	r1, r3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	460a      	mov	r2, r1
 8003f54:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <BSP_TS_GetState+0x304>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <BSP_TS_GetState+0x2fc>)
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	0b1b      	lsrs	r3, r3, #12
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f70:	3304      	adds	r3, #4
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	460a      	mov	r2, r1
 8003f78:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <BSP_TS_GetState+0x2f0>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b298      	uxth	r0, r3
 8003f80:	f107 010c 	add.w	r1, r7, #12
 8003f84:	f107 0210 	add.w	r2, r7, #16
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f92:	f7fd fc77 	bl	8001884 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	b2d9      	uxtb	r1, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3316      	adds	r3, #22
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	b2d9      	uxtb	r1, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fae:	4413      	add	r3, r2
 8003fb0:	3320      	adds	r3, #32
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d835      	bhi.n	8004028 <BSP_TS_GetState+0x340>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <BSP_TS_GetState+0x2dc>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	0800400d 	.word	0x0800400d
 8003fd0:	0800401b 	.word	0x0800401b
 8003fd4:	2000093c 	.word	0x2000093c
 8003fd8:	20000945 	.word	0x20000945
 8003fdc:	20000944 	.word	0x20000944
 8003fe0:	20000948 	.word	0x20000948
 8003fe4:	2000095c 	.word	0x2000095c
 8003fe8:	20000940 	.word	0x20000940
 8003fec:	20000942 	.word	0x20000942
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff4:	4413      	add	r3, r2
 8003ff6:	331b      	adds	r3, #27
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
          break;
 8003ffc:	e018      	b.n	8004030 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004002:	4413      	add	r3, r2
 8004004:	331b      	adds	r3, #27
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
          break;
 800400a:	e011      	b.n	8004030 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	4413      	add	r3, r2
 8004012:	331b      	adds	r3, #27
 8004014:	2203      	movs	r2, #3
 8004016:	701a      	strb	r2, [r3, #0]
          break;
 8004018:	e00a      	b.n	8004030 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401e:	4413      	add	r3, r2
 8004020:	331b      	adds	r3, #27
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
          break;
 8004026:	e003      	b.n	8004030 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800402e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004032:	3301      	adds	r3, #1
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403e:	4293      	cmp	r3, r2
 8004040:	f4ff ae73 	bcc.w	8003d2a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f809 	bl	800405c <BSP_TS_Get_GestureId>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004050:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004054:	4618      	mov	r0, r3
 8004056:	3754      	adds	r7, #84	; 0x54
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}

0800405c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800406c:	4b3b      	ldr	r3, [pc, #236]	; (800415c <BSP_TS_Get_GestureId+0x100>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f107 0208 	add.w	r2, r7, #8
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd fbea 	bl	8001852 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b49      	cmp	r3, #73	; 0x49
 8004082:	d05e      	beq.n	8004142 <BSP_TS_Get_GestureId+0xe6>
 8004084:	2b49      	cmp	r3, #73	; 0x49
 8004086:	d860      	bhi.n	800414a <BSP_TS_Get_GestureId+0xee>
 8004088:	2b1c      	cmp	r3, #28
 800408a:	d83f      	bhi.n	800410c <BSP_TS_Get_GestureId+0xb0>
 800408c:	2b1c      	cmp	r3, #28
 800408e:	d85c      	bhi.n	800414a <BSP_TS_Get_GestureId+0xee>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <BSP_TS_Get_GestureId+0x3c>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	08004113 	.word	0x08004113
 800409c:	0800414b 	.word	0x0800414b
 80040a0:	0800414b 	.word	0x0800414b
 80040a4:	0800414b 	.word	0x0800414b
 80040a8:	0800414b 	.word	0x0800414b
 80040ac:	0800414b 	.word	0x0800414b
 80040b0:	0800414b 	.word	0x0800414b
 80040b4:	0800414b 	.word	0x0800414b
 80040b8:	0800414b 	.word	0x0800414b
 80040bc:	0800414b 	.word	0x0800414b
 80040c0:	0800414b 	.word	0x0800414b
 80040c4:	0800414b 	.word	0x0800414b
 80040c8:	0800414b 	.word	0x0800414b
 80040cc:	0800414b 	.word	0x0800414b
 80040d0:	0800414b 	.word	0x0800414b
 80040d4:	0800414b 	.word	0x0800414b
 80040d8:	0800411b 	.word	0x0800411b
 80040dc:	0800414b 	.word	0x0800414b
 80040e0:	0800414b 	.word	0x0800414b
 80040e4:	0800414b 	.word	0x0800414b
 80040e8:	08004123 	.word	0x08004123
 80040ec:	0800414b 	.word	0x0800414b
 80040f0:	0800414b 	.word	0x0800414b
 80040f4:	0800414b 	.word	0x0800414b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800414b 	.word	0x0800414b
 8004100:	0800414b 	.word	0x0800414b
 8004104:	0800414b 	.word	0x0800414b
 8004108:	08004133 	.word	0x08004133
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d014      	beq.n	800413a <BSP_TS_Get_GestureId+0xde>
 8004110:	e01b      	b.n	800414a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004118:	e01a      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004120:	e016      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004128:	e012      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004130:	e00e      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004138:	e00a      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2205      	movs	r2, #5
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004140:	e006      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2206      	movs	r2, #6
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004148:	e002      	b.n	8004150 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      break;
 800414e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000945 	.word	0x20000945

08004160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_MspInit+0x4c>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	4a10      	ldr	r2, [pc, #64]	; (80041ac <HAL_MspInit+0x4c>)
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004170:	6413      	str	r3, [r2, #64]	; 0x40
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <HAL_MspInit+0x4c>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_MspInit+0x4c>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <HAL_MspInit+0x4c>)
 8004184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004188:	6453      	str	r3, [r2, #68]	; 0x44
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_MspInit+0x4c>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	210f      	movs	r1, #15
 800419a:	f06f 0001 	mvn.w	r0, #1
 800419e:	f002 f81b 	bl	80061d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800

080041b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	; 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <HAL_InitTick+0xe0>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	4a32      	ldr	r2, [pc, #200]	; (8004290 <HAL_InitTick+0xe0>)
 80041c6:	f043 0310 	orr.w	r3, r3, #16
 80041ca:	6413      	str	r3, [r2, #64]	; 0x40
 80041cc:	4b30      	ldr	r3, [pc, #192]	; (8004290 <HAL_InitTick+0xe0>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041d8:	f107 0210 	add.w	r2, r7, #16
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 fede 	bl	8008fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80041f2:	f004 feaf 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 80041f6:	6378      	str	r0, [r7, #52]	; 0x34
 80041f8:	e004      	b.n	8004204 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80041fa:	f004 feab 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 80041fe:	4603      	mov	r3, r0
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_InitTick+0xe4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0c9b      	lsrs	r3, r3, #18
 800420e:	3b01      	subs	r3, #1
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_InitTick+0xe8>)
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_InitTick+0xec>)
 8004216:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004218:	4b1f      	ldr	r3, [pc, #124]	; (8004298 <HAL_InitTick+0xe8>)
 800421a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800421e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004220:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_InitTick+0xe8>)
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_InitTick+0xe8>)
 8004228:	2200      	movs	r2, #0
 800422a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_InitTick+0xe8>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_InitTick+0xe8>)
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004238:	4817      	ldr	r0, [pc, #92]	; (8004298 <HAL_InitTick+0xe8>)
 800423a:	f005 ffd2 	bl	800a1e2 <HAL_TIM_Base_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004244:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11b      	bne.n	8004284 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800424c:	4812      	ldr	r0, [pc, #72]	; (8004298 <HAL_InitTick+0xe8>)
 800424e:	f006 f81f 	bl	800a290 <HAL_TIM_Base_Start_IT>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800425c:	2b00      	cmp	r3, #0
 800425e:	d111      	bne.n	8004284 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004260:	2036      	movs	r0, #54	; 0x36
 8004262:	f001 ffd5 	bl	8006210 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d808      	bhi.n	800427e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800426c:	2200      	movs	r2, #0
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	2036      	movs	r0, #54	; 0x36
 8004272:	f001 ffb1 	bl	80061d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <HAL_InitTick+0xf0>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e002      	b.n	8004284 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004284:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004288:	4618      	mov	r0, r3
 800428a:	3738      	adds	r7, #56	; 0x38
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	431bde83 	.word	0x431bde83
 8004298:	20000970 	.word	0x20000970
 800429c:	40001000 	.word	0x40001000
 80042a0:	2000005c 	.word	0x2000005c

080042a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042a8:	e7fe      	b.n	80042a8 <NMI_Handler+0x4>

080042aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ae:	e7fe      	b.n	80042ae <HardFault_Handler+0x4>

080042b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042b4:	e7fe      	b.n	80042b4 <MemManage_Handler+0x4>

080042b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042ba:	e7fe      	b.n	80042ba <BusFault_Handler+0x4>

080042bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042c0:	e7fe      	b.n	80042c0 <UsageFault_Handler+0x4>

080042c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <CAN1_RX0_IRQHandler+0x10>)
 80042d6:	f001 fc97 	bl	8005c08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000178 	.word	0x20000178

080042e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <TIM6_DAC_IRQHandler+0x10>)
 80042ea:	f006 f8a0 	bl	800a42e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000970 	.word	0x20000970

080042f8 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <RNG_IRQHandler+0x10>)
 80042fe:	f005 fa9d 	bl	800983c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000670 	.word	0x20000670

0800430c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <LTDC_IRQHandler+0x10>)
 8004312:	f003 feb5 	bl	8008080 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000056c 	.word	0x2000056c

08004320 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <DMA2D_IRQHandler+0x10>)
 8004326:	f002 fa9d 	bl	8006864 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200001a0 	.word	0x200001a0

08004334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <_sbrk+0x5c>)
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <_sbrk+0x60>)
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <_sbrk+0x64>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <_sbrk+0x64>)
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <_sbrk+0x68>)
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	429a      	cmp	r2, r3
 8004362:	d207      	bcs.n	8004374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004364:	f00a fa72 	bl	800e84c <__errno>
 8004368:	4603      	mov	r3, r0
 800436a:	220c      	movs	r2, #12
 800436c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e009      	b.n	8004388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <_sbrk+0x64>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <_sbrk+0x64>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <_sbrk+0x64>)
 8004384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004386:	68fb      	ldr	r3, [r7, #12]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20050000 	.word	0x20050000
 8004394:	00000400 	.word	0x00000400
 8004398:	200009bc 	.word	0x200009bc
 800439c:	200049f8 	.word	0x200049f8

080043a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <SystemInit+0x20>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <SystemInit+0x20>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b09a      	sub	sp, #104	; 0x68
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
 80043f4:	615a      	str	r2, [r3, #20]
 80043f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	222c      	movs	r2, #44	; 0x2c
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f00a fa5e 	bl	800e8c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004404:	4b43      	ldr	r3, [pc, #268]	; (8004514 <MX_TIM1_Init+0x150>)
 8004406:	4a44      	ldr	r2, [pc, #272]	; (8004518 <MX_TIM1_Init+0x154>)
 8004408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <MX_TIM1_Init+0x150>)
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b40      	ldr	r3, [pc, #256]	; (8004514 <MX_TIM1_Init+0x150>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <MX_TIM1_Init+0x150>)
 8004418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441e:	4b3d      	ldr	r3, [pc, #244]	; (8004514 <MX_TIM1_Init+0x150>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <MX_TIM1_Init+0x150>)
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442a:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <MX_TIM1_Init+0x150>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004430:	4838      	ldr	r0, [pc, #224]	; (8004514 <MX_TIM1_Init+0x150>)
 8004432:	f005 fed6 	bl	800a1e2 <HAL_TIM_Base_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800443c:	f7fe f99c 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004444:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800444a:	4619      	mov	r1, r3
 800444c:	4831      	ldr	r0, [pc, #196]	; (8004514 <MX_TIM1_Init+0x150>)
 800444e:	f006 fa21 	bl	800a894 <HAL_TIM_ConfigClockSource>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004458:	f7fe f98e 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800445c:	482d      	ldr	r0, [pc, #180]	; (8004514 <MX_TIM1_Init+0x150>)
 800445e:	f005 ff8f 	bl	800a380 <HAL_TIM_PWM_Init>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004468:	f7fe f986 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446c:	2300      	movs	r3, #0
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004478:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800447c:	4619      	mov	r1, r3
 800447e:	4825      	ldr	r0, [pc, #148]	; (8004514 <MX_TIM1_Init+0x150>)
 8004480:	f006 fe92 	bl	800b1a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800448a:	f7fe f975 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800448e:	2360      	movs	r3, #96	; 0x60
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004496:	2300      	movs	r3, #0
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800449a:	2300      	movs	r3, #0
 800449c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	4619      	mov	r1, r3
 80044b2:	4818      	ldr	r0, [pc, #96]	; (8004514 <MX_TIM1_Init+0x150>)
 80044b4:	f006 f8da 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80044be:	f7fe f95b 	bl	8002778 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80044e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4807      	ldr	r0, [pc, #28]	; (8004514 <MX_TIM1_Init+0x150>)
 80044f8:	f006 fee4 	bl	800b2c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8004502:	f7fe f939 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004506:	4803      	ldr	r0, [pc, #12]	; (8004514 <MX_TIM1_Init+0x150>)
 8004508:	f000 fa6c 	bl	80049e4 <HAL_TIM_MspPostInit>

}
 800450c:	bf00      	nop
 800450e:	3768      	adds	r7, #104	; 0x68
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	200009c0 	.word	0x200009c0
 8004518:	40010000 	.word	0x40010000

0800451c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	; 0x38
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004530:	f107 031c 	add.w	r3, r7, #28
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800453c:	463b      	mov	r3, r7
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	609a      	str	r2, [r3, #8]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	611a      	str	r2, [r3, #16]
 800454a:	615a      	str	r2, [r3, #20]
 800454c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800454e:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <MX_TIM2_Init+0xe8>)
 8004550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004556:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <MX_TIM2_Init+0xe8>)
 8004558:	2200      	movs	r2, #0
 800455a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <MX_TIM2_Init+0xe8>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <MX_TIM2_Init+0xe8>)
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800456a:	4b26      	ldr	r3, [pc, #152]	; (8004604 <MX_TIM2_Init+0xe8>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <MX_TIM2_Init+0xe8>)
 8004572:	2200      	movs	r2, #0
 8004574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004576:	4823      	ldr	r0, [pc, #140]	; (8004604 <MX_TIM2_Init+0xe8>)
 8004578:	f005 fe33 	bl	800a1e2 <HAL_TIM_Base_Init>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004582:	f7fe f8f9 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800458c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004590:	4619      	mov	r1, r3
 8004592:	481c      	ldr	r0, [pc, #112]	; (8004604 <MX_TIM2_Init+0xe8>)
 8004594:	f006 f97e 	bl	800a894 <HAL_TIM_ConfigClockSource>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800459e:	f7fe f8eb 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80045a2:	4818      	ldr	r0, [pc, #96]	; (8004604 <MX_TIM2_Init+0xe8>)
 80045a4:	f005 feec 	bl	800a380 <HAL_TIM_PWM_Init>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80045ae:	f7fe f8e3 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045ba:	f107 031c 	add.w	r3, r7, #28
 80045be:	4619      	mov	r1, r3
 80045c0:	4810      	ldr	r0, [pc, #64]	; (8004604 <MX_TIM2_Init+0xe8>)
 80045c2:	f006 fdf1 	bl	800b1a8 <HAL_TIMEx_MasterConfigSynchronization>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80045cc:	f7fe f8d4 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045d0:	2360      	movs	r3, #96	; 0x60
 80045d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045e0:	463b      	mov	r3, r7
 80045e2:	2200      	movs	r2, #0
 80045e4:	4619      	mov	r1, r3
 80045e6:	4807      	ldr	r0, [pc, #28]	; (8004604 <MX_TIM2_Init+0xe8>)
 80045e8:	f006 f840 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80045f2:	f7fe f8c1 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045f6:	4803      	ldr	r0, [pc, #12]	; (8004604 <MX_TIM2_Init+0xe8>)
 80045f8:	f000 f9f4 	bl	80049e4 <HAL_TIM_MspPostInit>

}
 80045fc:	bf00      	nop
 80045fe:	3738      	adds	r7, #56	; 0x38
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000a0c 	.word	0x20000a0c

08004608 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800460e:	f107 0310 	add.w	r3, r7, #16
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <MX_TIM3_Init+0x94>)
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <MX_TIM3_Init+0x98>)
 800462a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <MX_TIM3_Init+0x94>)
 800462e:	2200      	movs	r2, #0
 8004630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <MX_TIM3_Init+0x94>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <MX_TIM3_Init+0x94>)
 800463a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800463e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004640:	4b16      	ldr	r3, [pc, #88]	; (800469c <MX_TIM3_Init+0x94>)
 8004642:	2200      	movs	r2, #0
 8004644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <MX_TIM3_Init+0x94>)
 8004648:	2200      	movs	r2, #0
 800464a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800464c:	4813      	ldr	r0, [pc, #76]	; (800469c <MX_TIM3_Init+0x94>)
 800464e:	f005 fdc8 	bl	800a1e2 <HAL_TIM_Base_Init>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004658:	f7fe f88e 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004662:	f107 0310 	add.w	r3, r7, #16
 8004666:	4619      	mov	r1, r3
 8004668:	480c      	ldr	r0, [pc, #48]	; (800469c <MX_TIM3_Init+0x94>)
 800466a:	f006 f913 	bl	800a894 <HAL_TIM_ConfigClockSource>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004674:	f7fe f880 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	4619      	mov	r1, r3
 8004684:	4805      	ldr	r0, [pc, #20]	; (800469c <MX_TIM3_Init+0x94>)
 8004686:	f006 fd8f 	bl	800b1a8 <HAL_TIMEx_MasterConfigSynchronization>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004690:	f7fe f872 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004694:	bf00      	nop
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000a58 	.word	0x20000a58
 80046a0:	40000400 	.word	0x40000400

080046a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	; 0x38
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b8:	f107 031c 	add.w	r3, r7, #28
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046c4:	463b      	mov	r3, r7
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	60da      	str	r2, [r3, #12]
 80046d0:	611a      	str	r2, [r3, #16]
 80046d2:	615a      	str	r2, [r3, #20]
 80046d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80046d6:	4b2d      	ldr	r3, [pc, #180]	; (800478c <MX_TIM5_Init+0xe8>)
 80046d8:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <MX_TIM5_Init+0xec>)
 80046da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80046dc:	4b2b      	ldr	r3, [pc, #172]	; (800478c <MX_TIM5_Init+0xe8>)
 80046de:	2200      	movs	r2, #0
 80046e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e2:	4b2a      	ldr	r3, [pc, #168]	; (800478c <MX_TIM5_Init+0xe8>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80046e8:	4b28      	ldr	r3, [pc, #160]	; (800478c <MX_TIM5_Init+0xe8>)
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f0:	4b26      	ldr	r3, [pc, #152]	; (800478c <MX_TIM5_Init+0xe8>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f6:	4b25      	ldr	r3, [pc, #148]	; (800478c <MX_TIM5_Init+0xe8>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80046fc:	4823      	ldr	r0, [pc, #140]	; (800478c <MX_TIM5_Init+0xe8>)
 80046fe:	f005 fd70 	bl	800a1e2 <HAL_TIM_Base_Init>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8004708:	f7fe f836 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800470c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004716:	4619      	mov	r1, r3
 8004718:	481c      	ldr	r0, [pc, #112]	; (800478c <MX_TIM5_Init+0xe8>)
 800471a:	f006 f8bb 	bl	800a894 <HAL_TIM_ConfigClockSource>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8004724:	f7fe f828 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004728:	4818      	ldr	r0, [pc, #96]	; (800478c <MX_TIM5_Init+0xe8>)
 800472a:	f005 fe29 	bl	800a380 <HAL_TIM_PWM_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8004734:	f7fe f820 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004740:	f107 031c 	add.w	r3, r7, #28
 8004744:	4619      	mov	r1, r3
 8004746:	4811      	ldr	r0, [pc, #68]	; (800478c <MX_TIM5_Init+0xe8>)
 8004748:	f006 fd2e 	bl	800b1a8 <HAL_TIMEx_MasterConfigSynchronization>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8004752:	f7fe f811 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004756:	2360      	movs	r3, #96	; 0x60
 8004758:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004766:	463b      	mov	r3, r7
 8004768:	220c      	movs	r2, #12
 800476a:	4619      	mov	r1, r3
 800476c:	4807      	ldr	r0, [pc, #28]	; (800478c <MX_TIM5_Init+0xe8>)
 800476e:	f005 ff7d 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8004778:	f7fd fffe 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800477c:	4803      	ldr	r0, [pc, #12]	; (800478c <MX_TIM5_Init+0xe8>)
 800477e:	f000 f931 	bl	80049e4 <HAL_TIM_MspPostInit>

}
 8004782:	bf00      	nop
 8004784:	3738      	adds	r7, #56	; 0x38
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000aa4 	.word	0x20000aa4
 8004790:	40000c00 	.word	0x40000c00

08004794 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800479a:	f107 0310 	add.w	r3, r7, #16
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a8:	1d3b      	adds	r3, r7, #4
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <MX_TIM8_Init+0xa4>)
 80047b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80047d2:	4b18      	ldr	r3, [pc, #96]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d8:	4b16      	ldr	r3, [pc, #88]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80047de:	4815      	ldr	r0, [pc, #84]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047e0:	f005 fcff 	bl	800a1e2 <HAL_TIM_Base_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80047ea:	f7fd ffc5 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	4619      	mov	r1, r3
 80047fa:	480e      	ldr	r0, [pc, #56]	; (8004834 <MX_TIM8_Init+0xa0>)
 80047fc:	f006 f84a 	bl	800a894 <HAL_TIM_ConfigClockSource>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004806:	f7fd ffb7 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4806      	ldr	r0, [pc, #24]	; (8004834 <MX_TIM8_Init+0xa0>)
 800481c:	f006 fcc4 	bl	800b1a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004826:	f7fd ffa7 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800482a:	bf00      	nop
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000af0 	.word	0x20000af0
 8004838:	40010400 	.word	0x40010400

0800483c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004854:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <MX_TIM12_Init+0x84>)
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <MX_TIM12_Init+0x88>)
 8004858:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800485a:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <MX_TIM12_Init+0x84>)
 800485c:	2200      	movs	r2, #0
 800485e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <MX_TIM12_Init+0x84>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <MX_TIM12_Init+0x84>)
 8004868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800486c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <MX_TIM12_Init+0x84>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <MX_TIM12_Init+0x84>)
 8004876:	2200      	movs	r2, #0
 8004878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800487a:	4811      	ldr	r0, [pc, #68]	; (80048c0 <MX_TIM12_Init+0x84>)
 800487c:	f005 fd80 	bl	800a380 <HAL_TIM_PWM_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004886:	f7fd ff77 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800488a:	2360      	movs	r3, #96	; 0x60
 800488c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	2200      	movs	r2, #0
 800489e:	4619      	mov	r1, r3
 80048a0:	4807      	ldr	r0, [pc, #28]	; (80048c0 <MX_TIM12_Init+0x84>)
 80048a2:	f005 fee3 	bl	800a66c <HAL_TIM_PWM_ConfigChannel>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80048ac:	f7fd ff64 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80048b0:	4803      	ldr	r0, [pc, #12]	; (80048c0 <MX_TIM12_Init+0x84>)
 80048b2:	f000 f897 	bl	80049e4 <HAL_TIM_MspPostInit>

}
 80048b6:	bf00      	nop
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000b3c 	.word	0x20000b3c
 80048c4:	40001800 	.word	0x40001800

080048c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <HAL_TIM_Base_MspInit+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10c      	bne.n	80048f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6453      	str	r3, [r2, #68]	; 0x44
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80048f2:	e046      	b.n	8004982 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d10c      	bne.n	8004918 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	69bb      	ldr	r3, [r7, #24]
}
 8004916:	e034      	b.n	8004982 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_TIM_Base_MspInit+0xd0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d10c      	bne.n	800493c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	697b      	ldr	r3, [r7, #20]
}
 800493a:	e022      	b.n	8004982 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_TIM_Base_MspInit+0xd4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10c      	bne.n	8004960 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	4a12      	ldr	r2, [pc, #72]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	6413      	str	r3, [r2, #64]	; 0x40
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
}
 800495e:	e010      	b.n	8004982 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <HAL_TIM_Base_MspInit+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10b      	bne.n	8004982 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	6453      	str	r3, [r2, #68]	; 0x44
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_TIM_Base_MspInit+0xcc>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40023800 	.word	0x40023800
 8004998:	40000400 	.word	0x40000400
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400

080049a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_TIM_PWM_MspInit+0x38>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10b      	bne.n	80049ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40001800 	.word	0x40001800
 80049e0:	40023800 	.word	0x40023800

080049e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08c      	sub	sp, #48	; 0x30
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ec:	f107 031c 	add.w	r3, r7, #28
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a45      	ldr	r2, [pc, #276]	; (8004b18 <HAL_TIM_MspPostInit+0x134>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d11d      	bne.n	8004a42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	4a44      	ldr	r2, [pc, #272]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6313      	str	r3, [r2, #48]	; 0x30
 8004a12:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a24:	2302      	movs	r3, #2
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a30:	2301      	movs	r3, #1
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a34:	f107 031c 	add.w	r3, r7, #28
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4839      	ldr	r0, [pc, #228]	; (8004b20 <HAL_TIM_MspPostInit+0x13c>)
 8004a3c:	f002 f950 	bl	8006ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004a40:	e065      	b.n	8004b0e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d11d      	bne.n	8004a88 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4c:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6313      	str	r3, [r2, #48]	; 0x30
 8004a58:	4b30      	ldr	r3, [pc, #192]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a72:	2300      	movs	r3, #0
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a76:	2301      	movs	r3, #1
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7a:	f107 031c 	add.w	r3, r7, #28
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4827      	ldr	r0, [pc, #156]	; (8004b20 <HAL_TIM_MspPostInit+0x13c>)
 8004a82:	f002 f92d 	bl	8006ce0 <HAL_GPIO_Init>
}
 8004a86:	e042      	b.n	8004b0e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM5)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HAL_TIM_MspPostInit+0x140>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d11c      	bne.n	8004acc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004aba:	2302      	movs	r3, #2
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4818      	ldr	r0, [pc, #96]	; (8004b28 <HAL_TIM_MspPostInit+0x144>)
 8004ac6:	f002 f90b 	bl	8006ce0 <HAL_GPIO_Init>
}
 8004aca:	e020      	b.n	8004b0e <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM12)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <HAL_TIM_MspPostInit+0x148>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d11b      	bne.n	8004b0e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_TIM_MspPostInit+0x138>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004aee:	2340      	movs	r3, #64	; 0x40
 8004af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af2:	2302      	movs	r3, #2
 8004af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afa:	2300      	movs	r3, #0
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004afe:	2309      	movs	r3, #9
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004b02:	f107 031c 	add.w	r3, r7, #28
 8004b06:	4619      	mov	r1, r3
 8004b08:	4809      	ldr	r0, [pc, #36]	; (8004b30 <HAL_TIM_MspPostInit+0x14c>)
 8004b0a:	f002 f8e9 	bl	8006ce0 <HAL_GPIO_Init>
}
 8004b0e:	bf00      	nop
 8004b10:	3730      	adds	r7, #48	; 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40020000 	.word	0x40020000
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40001800 	.word	0x40001800
 8004b30:	40021c00 	.word	0x40021c00

08004b34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b3a:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <MX_USART1_UART_Init+0x6c>)
 8004b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b3e:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b46:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b4c:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b5a:	220c      	movs	r2, #12
 8004b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b64:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b72:	2230      	movs	r2, #48	; 0x30
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b84:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b86:	4805      	ldr	r0, [pc, #20]	; (8004b9c <MX_USART1_UART_Init+0x68>)
 8004b88:	f006 fc38 	bl	800b3fc <HAL_UART_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8004b92:	f7fd fdf1 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000b88 	.word	0x20000b88
 8004ba0:	40011000 	.word	0x40011000

08004ba4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ba8:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <MX_USART6_UART_Init+0x64>)
 8004bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bca:	220c      	movs	r2, #12
 8004bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004be2:	2220      	movs	r2, #32
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004be8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <MX_USART6_UART_Init+0x60>)
 8004bf0:	f006 fc04 	bl	800b3fc <HAL_UART_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_USART6_UART_Init+0x5a>
  {
    Error_Handler();
 8004bfa:	f7fd fdbd 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000c10 	.word	0x20000c10
 8004c08:	40011400 	.word	0x40011400

08004c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b0ae      	sub	sp, #184	; 0xb8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c24:	f107 0320 	add.w	r3, r7, #32
 8004c28:	2284      	movs	r2, #132	; 0x84
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f009 fe47 	bl	800e8c0 <memset>
  if(uartHandle->Instance==USART1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a53      	ldr	r2, [pc, #332]	; (8004d84 <HAL_UART_MspInit+0x178>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d15d      	bne.n	8004cf8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c40:	2300      	movs	r3, #0
 8004c42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c44:	f107 0320 	add.w	r3, r7, #32
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f004 f9dd 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004c54:	f7fd fd90 	bl	8002778 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c5e:	f043 0310 	orr.w	r3, r3, #16
 8004c62:	6453      	str	r3, [r2, #68]	; 0x44
 8004c64:	4b48      	ldr	r3, [pc, #288]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c70:	4b45      	ldr	r3, [pc, #276]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4a44      	ldr	r2, [pc, #272]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c76:	f043 0302 	orr.w	r3, r3, #2
 8004c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7c:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c88:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4a3e      	ldr	r2, [pc, #248]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6313      	str	r3, [r2, #48]	; 0x30
 8004c94:	4b3c      	ldr	r3, [pc, #240]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cb8:	2307      	movs	r3, #7
 8004cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4831      	ldr	r0, [pc, #196]	; (8004d8c <HAL_UART_MspInit+0x180>)
 8004cc6:	f002 f80b 	bl	8006ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ce4:	2307      	movs	r3, #7
 8004ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4827      	ldr	r0, [pc, #156]	; (8004d90 <HAL_UART_MspInit+0x184>)
 8004cf2:	f001 fff5 	bl	8006ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004cf6:	e040      	b.n	8004d7a <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <HAL_UART_MspInit+0x188>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d13b      	bne.n	8004d7a <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d06:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d0c:	f107 0320 	add.w	r3, r7, #32
 8004d10:	4618      	mov	r0, r3
 8004d12:	f004 f979 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004d1c:	f7fd fd2c 	bl	8002778 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004d26:	f043 0320 	orr.w	r3, r3, #32
 8004d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2c:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6313      	str	r3, [r2, #48]	; 0x30
 8004d44:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_UART_MspInit+0x17c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004d50:	23c0      	movs	r3, #192	; 0xc0
 8004d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d56:	2302      	movs	r3, #2
 8004d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d62:	2303      	movs	r3, #3
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004d68:	2308      	movs	r3, #8
 8004d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4808      	ldr	r0, [pc, #32]	; (8004d98 <HAL_UART_MspInit+0x18c>)
 8004d76:	f001 ffb3 	bl	8006ce0 <HAL_GPIO_Init>
}
 8004d7a:	bf00      	nop
 8004d7c:	37b8      	adds	r7, #184	; 0xb8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40011000 	.word	0x40011000
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40020400 	.word	0x40020400
 8004d90:	40020000 	.word	0x40020000
 8004d94:	40011400 	.word	0x40011400
 8004d98:	40020800 	.word	0x40020800

08004d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004da2:	490e      	ldr	r1, [pc, #56]	; (8004ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004da4:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004da8:	e002      	b.n	8004db0 <LoopCopyDataInit>

08004daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dae:	3304      	adds	r3, #4

08004db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004db4:	d3f9      	bcc.n	8004daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004db6:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004db8:	4c0b      	ldr	r4, [pc, #44]	; (8004de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dbc:	e001      	b.n	8004dc2 <LoopFillZerobss>

08004dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc0:	3204      	adds	r2, #4

08004dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dc4:	d3fb      	bcc.n	8004dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dc6:	f7ff faeb 	bl	80043a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dca:	f009 fd45 	bl	800e858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dce:	f7fd fa97 	bl	8002300 <main>
  bx  lr    
 8004dd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ddc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8004de0:	08081cf0 	.word	0x08081cf0
  ldr r2, =_sbss
 8004de4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8004de8:	200049f8 	.word	0x200049f8

08004dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dec:	e7fe      	b.n	8004dec <ADC_IRQHandler>

08004dee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004df2:	2003      	movs	r0, #3
 8004df4:	f001 f9e5 	bl	80061c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004df8:	200f      	movs	r0, #15
 8004dfa:	f7ff f9d9 	bl	80041b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dfe:	f7ff f9af 	bl	8004160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_IncTick+0x20>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_IncTick+0x24>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_IncTick+0x24>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000060 	.word	0x20000060
 8004e2c:	20000c98 	.word	0x20000c98

08004e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return uwTick;
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_GetTick+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000c98 	.word	0x20000c98

08004e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e50:	f7ff ffee 	bl	8004e30 <HAL_GetTick>
 8004e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d005      	beq.n	8004e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <HAL_Delay+0x44>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e6e:	bf00      	nop
 8004e70:	f7ff ffde 	bl	8004e30 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d8f7      	bhi.n	8004e70 <HAL_Delay+0x28>
  {
  }
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000060 	.word	0x20000060

08004e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e031      	b.n	8004f0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fb fc26 	bl	8000700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d116      	bne.n	8004efc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_ADC_Init+0x84>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	f043 0202 	orr.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f970 	bl	80051c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8004efa:	e001      	b.n	8004f00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	ffffeefd 	.word	0xffffeefd

08004f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e136      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x28a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	d93a      	bls.n	8004fba <HAL_ADC_ConfigChannel+0xa2>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4c:	d035      	beq.n	8004fba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68d9      	ldr	r1, [r3, #12]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	3b1e      	subs	r3, #30
 8004f64:	2207      	movs	r2, #7
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	400a      	ands	r2, r1
 8004f72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a8d      	ldr	r2, [pc, #564]	; (80051b0 <HAL_ADC_ConfigChannel+0x298>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10a      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68d9      	ldr	r1, [r3, #12]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	061a      	lsls	r2, r3, #24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f92:	e035      	b.n	8005000 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68d9      	ldr	r1, [r3, #12]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4403      	add	r3, r0
 8004fac:	3b1e      	subs	r3, #30
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fb8:	e022      	b.n	8005000 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6919      	ldr	r1, [r3, #16]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	2207      	movs	r2, #7
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	400a      	ands	r2, r1
 8004fdc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6919      	ldr	r1, [r3, #16]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4403      	add	r3, r0
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b06      	cmp	r3, #6
 8005006:	d824      	bhi.n	8005052 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	3b05      	subs	r3, #5
 800501a:	221f      	movs	r2, #31
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43da      	mvns	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	400a      	ands	r2, r1
 8005028:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	4618      	mov	r0, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	3b05      	subs	r3, #5
 8005044:	fa00 f203 	lsl.w	r2, r0, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	635a      	str	r2, [r3, #52]	; 0x34
 8005050:	e04c      	b.n	80050ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d824      	bhi.n	80050a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	3b23      	subs	r3, #35	; 0x23
 800506c:	221f      	movs	r2, #31
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43da      	mvns	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	400a      	ands	r2, r1
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	4618      	mov	r0, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	3b23      	subs	r3, #35	; 0x23
 8005096:	fa00 f203 	lsl.w	r2, r0, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
 80050a2:	e023      	b.n	80050ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	3b41      	subs	r3, #65	; 0x41
 80050b6:	221f      	movs	r2, #31
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43da      	mvns	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	400a      	ands	r2, r1
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4618      	mov	r0, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	3b41      	subs	r3, #65	; 0x41
 80050e0:	fa00 f203 	lsl.w	r2, r0, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <HAL_ADC_ConfigChannel+0x29c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10a      	bne.n	800510c <HAL_ADC_ConfigChannel+0x1f4>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fe:	d105      	bne.n	800510c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a2c      	ldr	r2, [pc, #176]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005106:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800510a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <HAL_ADC_ConfigChannel+0x29c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10f      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x21e>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b12      	cmp	r3, #18
 800511c:	d10b      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005124:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005128:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005134:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <HAL_ADC_ConfigChannel+0x29c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d12b      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x280>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_ADC_ConfigChannel+0x298>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <HAL_ADC_ConfigChannel+0x23a>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b11      	cmp	r3, #17
 8005150:	d122      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005158:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800515c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800515e:	4b16      	ldr	r3, [pc, #88]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005168:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <HAL_ADC_ConfigChannel+0x298>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d111      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_ADC_ConfigChannel+0x2a4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0c9a      	lsrs	r2, r3, #18
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800518a:	e002      	b.n	8005192 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3b01      	subs	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f9      	bne.n	800518c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	10000012 	.word	0x10000012
 80051b4:	40012000 	.word	0x40012000
 80051b8:	40012300 	.word	0x40012300
 80051bc:	20000058 	.word	0x20000058
 80051c0:	431bde83 	.word	0x431bde83

080051c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80051cc:	4b78      	ldr	r3, [pc, #480]	; (80053b0 <ADC_Init+0x1ec>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a77      	ldr	r2, [pc, #476]	; (80053b0 <ADC_Init+0x1ec>)
 80051d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80051d8:	4b75      	ldr	r3, [pc, #468]	; (80053b0 <ADC_Init+0x1ec>)
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4973      	ldr	r1, [pc, #460]	; (80053b0 <ADC_Init+0x1ec>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	021a      	lsls	r2, r3, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800523a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6899      	ldr	r1, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	4a58      	ldr	r2, [pc, #352]	; (80053b4 <ADC_Init+0x1f0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6899      	ldr	r1, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	e00f      	b.n	80052be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0202 	bic.w	r2, r2, #2
 80052cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6899      	ldr	r1, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	005a      	lsls	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800530a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	3b01      	subs	r3, #1
 8005318:	035a      	lsls	r2, r3, #13
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	e007      	b.n	8005334 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	3b01      	subs	r3, #1
 8005350:	051a      	lsls	r2, r3, #20
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005376:	025a      	lsls	r2, r3, #9
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	029a      	lsls	r2, r3, #10
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40012300 	.word	0x40012300
 80053b4:	0f000001 	.word	0x0f000001

080053b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0ed      	b.n	80055a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fb fa38 	bl	800084c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053ec:	f7ff fd20 	bl	8004e30 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053f2:	e012      	b.n	800541a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053f4:	f7ff fd1c 	bl	8004e30 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b0a      	cmp	r3, #10
 8005400:	d90b      	bls.n	800541a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2205      	movs	r2, #5
 8005412:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0c5      	b.n	80055a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0e5      	beq.n	80053f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0202 	bic.w	r2, r2, #2
 8005436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005438:	f7ff fcfa 	bl	8004e30 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800543e:	e012      	b.n	8005466 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005440:	f7ff fcf6 	bl	8004e30 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b0a      	cmp	r3, #10
 800544c:	d90b      	bls.n	8005466 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2205      	movs	r2, #5
 800545e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e09f      	b.n	80055a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7e1b      	ldrb	r3, [r3, #24]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d108      	bne.n	800548e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e007      	b.n	800549e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7e5b      	ldrb	r3, [r3, #25]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d108      	bne.n	80054b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e007      	b.n	80054c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7e9b      	ldrb	r3, [r3, #26]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0220 	orr.w	r2, r2, #32
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e007      	b.n	80054f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0220 	bic.w	r2, r2, #32
 80054f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7edb      	ldrb	r3, [r3, #27]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d108      	bne.n	800550c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0210 	bic.w	r2, r2, #16
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e007      	b.n	800551c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0210 	orr.w	r2, r2, #16
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7f1b      	ldrb	r3, [r3, #28]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d108      	bne.n	8005536 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0208 	orr.w	r2, r2, #8
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e007      	b.n	8005546 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0208 	bic.w	r2, r2, #8
 8005544:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	7f5b      	ldrb	r3, [r3, #29]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d108      	bne.n	8005560 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0204 	orr.w	r2, r2, #4
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e007      	b.n	8005570 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0204 	bic.w	r2, r2, #4
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	ea42 0103 	orr.w	r1, r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d003      	beq.n	80055d6 <HAL_CAN_ConfigFilter+0x26>
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	f040 80be 	bne.w	8005752 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_CAN_ConfigFilter+0x1bc>)
 80055d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	431a      	orrs	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2201      	movs	r2, #1
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	43db      	mvns	r3, r3
 8005628:	401a      	ands	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d123      	bne.n	8005680 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800565a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3248      	adds	r2, #72	; 0x48
 8005660:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005674:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005676:	6979      	ldr	r1, [r7, #20]
 8005678:	3348      	adds	r3, #72	; 0x48
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d122      	bne.n	80056ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	431a      	orrs	r2, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80056a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	3248      	adds	r2, #72	; 0x48
 80056ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80056c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80056c4:	6979      	ldr	r1, [r7, #20]
 80056c6:	3348      	adds	r3, #72	; 0x48
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	440b      	add	r3, r1
 80056cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	43db      	mvns	r3, r3
 80056e0:	401a      	ands	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80056e8:	e007      	b.n	80056fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	43db      	mvns	r3, r3
 800570c:	401a      	ands	r2, r3
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005714:	e007      	b.n	8005726 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	431a      	orrs	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	431a      	orrs	r2, r3
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005744:	f023 0201 	bic.w	r2, r3, #1
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e006      	b.n	8005760 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
  }
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40006400 	.word	0x40006400

08005770 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d12e      	bne.n	80057e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800579c:	f7ff fb48 	bl	8004e30 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80057a2:	e012      	b.n	80057ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80057a4:	f7ff fb44 	bl	8004e30 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	d90b      	bls.n	80057ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2205      	movs	r2, #5
 80057c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e012      	b.n	80057f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e006      	b.n	80057f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	; 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800580c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005816:	7ffb      	ldrb	r3, [r7, #31]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d003      	beq.n	8005824 <HAL_CAN_AddTxMessage+0x2c>
 800581c:	7ffb      	ldrb	r3, [r7, #31]
 800581e:	2b02      	cmp	r3, #2
 8005820:	f040 80ad 	bne.w	800597e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8095 	beq.w	800596e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	0e1b      	lsrs	r3, r3, #24
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800584e:	2201      	movs	r2, #1
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	409a      	lsls	r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10d      	bne.n	800587c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	6809      	ldr	r1, [r1, #0]
 800586e:	431a      	orrs	r2, r3
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	3318      	adds	r3, #24
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	440b      	add	r3, r1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e00f      	b.n	800589c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005886:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005890:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3318      	adds	r3, #24
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	440b      	add	r3, r1
 800589a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	3318      	adds	r3, #24
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	440b      	add	r3, r1
 80058ac:	3304      	adds	r3, #4
 80058ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	7d1b      	ldrb	r3, [r3, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d111      	bne.n	80058dc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3318      	adds	r3, #24
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	3304      	adds	r3, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	6811      	ldr	r1, [r2, #0]
 80058cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3318      	adds	r3, #24
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	440b      	add	r3, r1
 80058d8:	3304      	adds	r3, #4
 80058da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3307      	adds	r3, #7
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	061a      	lsls	r2, r3, #24
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3306      	adds	r3, #6
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3305      	adds	r3, #5
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	4313      	orrs	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	3204      	adds	r2, #4
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	4610      	mov	r0, r2
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	6811      	ldr	r1, [r2, #0]
 8005904:	ea43 0200 	orr.w	r2, r3, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	440b      	add	r3, r1
 800590e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005912:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3303      	adds	r3, #3
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	061a      	lsls	r2, r3, #24
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3302      	adds	r3, #2
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3301      	adds	r3, #1
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	4313      	orrs	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	7812      	ldrb	r2, [r2, #0]
 8005934:	4610      	mov	r0, r2
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	6811      	ldr	r1, [r2, #0]
 800593a:	ea43 0200 	orr.w	r2, r3, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	440b      	add	r3, r1
 8005944:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005948:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3318      	adds	r3, #24
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	4413      	add	r3, r2
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6811      	ldr	r1, [r2, #0]
 800595c:	f043 0201 	orr.w	r2, r3, #1
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	3318      	adds	r3, #24
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	440b      	add	r3, r1
 8005968:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e00e      	b.n	800598c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e006      	b.n	800598c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3724      	adds	r7, #36	; 0x24
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d003      	beq.n	80059bc <HAL_CAN_GetRxMessage+0x24>
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	f040 80f3 	bne.w	8005ba2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d116      	bne.n	80059fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0e7      	b.n	8005bb0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d107      	bne.n	80059fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e0d8      	b.n	8005bb0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	331b      	adds	r3, #27
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	4413      	add	r3, r2
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0204 	and.w	r2, r3, #4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10c      	bne.n	8005a36 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	331b      	adds	r3, #27
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4413      	add	r3, r2
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	0d5b      	lsrs	r3, r3, #21
 8005a2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e00b      	b.n	8005a4e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	331b      	adds	r3, #27
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	4413      	add	r3, r2
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	331b      	adds	r3, #27
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	4413      	add	r3, r2
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0202 	and.w	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	331b      	adds	r3, #27
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	4413      	add	r3, r2
 8005a70:	3304      	adds	r3, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	331b      	adds	r3, #27
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	331b      	adds	r3, #27
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0a1a      	lsrs	r2, r3, #8
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	0c1a      	lsrs	r2, r3, #16
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	3302      	adds	r3, #2
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	0e1a      	lsrs	r2, r3, #24
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	3303      	adds	r3, #3
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	3304      	adds	r3, #4
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	0a1a      	lsrs	r2, r3, #8
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	3305      	adds	r3, #5
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	0c1a      	lsrs	r2, r3, #16
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	3306      	adds	r3, #6
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	0e1a      	lsrs	r2, r3, #24
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	3307      	adds	r3, #7
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0220 	orr.w	r2, r2, #32
 8005b8a:	60da      	str	r2, [r3, #12]
 8005b8c:	e007      	b.n	8005b9e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0220 	orr.w	r2, r2, #32
 8005b9c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e006      	b.n	8005bb0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bcc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d002      	beq.n	8005bda <HAL_CAN_ActivateNotification+0x1e>
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d109      	bne.n	8005bee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6959      	ldr	r1, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e006      	b.n	8005bfc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
  }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d07c      	beq.n	8005d48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d023      	beq.n	8005ca0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f983 	bl	8005f76 <HAL_CAN_TxMailbox0CompleteCallback>
 8005c70:	e016      	b.n	8005ca0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	e00c      	b.n	8005ca0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
 8005c98:	e002      	b.n	8005ca0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f989 	bl	8005fb2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d024      	beq.n	8005cf4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f963 	bl	8005f8a <HAL_CAN_TxMailbox1CompleteCallback>
 8005cc4:	e016      	b.n	8005cf4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	e00c      	b.n	8005cf4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	e002      	b.n	8005cf4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f969 	bl	8005fc6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d024      	beq.n	8005d48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f943 	bl	8005f9e <HAL_CAN_TxMailbox2CompleteCallback>
 8005d18:	e016      	b.n	8005d48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2c:	e00c      	b.n	8005d48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d40:	e002      	b.n	8005d48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f949 	bl	8005fda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2210      	movs	r2, #16
 8005d6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2208      	movs	r2, #8
 8005d86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f930 	bl	8005fee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc fc84 	bl	80026b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2208      	movs	r2, #8
 8005dea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f912 	bl	8006016 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8f9 	bl	8006002 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8fc 	bl	800602a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d006      	beq.n	8005e54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8f5 	bl	800603e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d07b      	beq.n	8005f56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d072      	beq.n	8005f4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f043 0302 	orr.w	r3, r3, #2
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	f043 0304 	orr.w	r3, r3, #4
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d043      	beq.n	8005f4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d03e      	beq.n	8005f4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed6:	2b60      	cmp	r3, #96	; 0x60
 8005ed8:	d02b      	beq.n	8005f32 <HAL_CAN_IRQHandler+0x32a>
 8005eda:	2b60      	cmp	r3, #96	; 0x60
 8005edc:	d82e      	bhi.n	8005f3c <HAL_CAN_IRQHandler+0x334>
 8005ede:	2b50      	cmp	r3, #80	; 0x50
 8005ee0:	d022      	beq.n	8005f28 <HAL_CAN_IRQHandler+0x320>
 8005ee2:	2b50      	cmp	r3, #80	; 0x50
 8005ee4:	d82a      	bhi.n	8005f3c <HAL_CAN_IRQHandler+0x334>
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d019      	beq.n	8005f1e <HAL_CAN_IRQHandler+0x316>
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d826      	bhi.n	8005f3c <HAL_CAN_IRQHandler+0x334>
 8005eee:	2b30      	cmp	r3, #48	; 0x30
 8005ef0:	d010      	beq.n	8005f14 <HAL_CAN_IRQHandler+0x30c>
 8005ef2:	2b30      	cmp	r3, #48	; 0x30
 8005ef4:	d822      	bhi.n	8005f3c <HAL_CAN_IRQHandler+0x334>
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d002      	beq.n	8005f00 <HAL_CAN_IRQHandler+0x2f8>
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d005      	beq.n	8005f0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005efe:	e01d      	b.n	8005f3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f043 0308 	orr.w	r3, r3, #8
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f08:	e019      	b.n	8005f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	f043 0310 	orr.w	r3, r3, #16
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f12:	e014      	b.n	8005f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f043 0320 	orr.w	r3, r3, #32
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f1c:	e00f      	b.n	8005f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f26:	e00a      	b.n	8005f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f30:	e005      	b.n	8005f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f3a:	e000      	b.n	8005f3e <HAL_CAN_IRQHandler+0x336>
            break;
 8005f3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2204      	movs	r2, #4
 8005f54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f872 	bl	8006052 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <__NVIC_SetPriorityGrouping+0x40>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006084:	4013      	ands	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <__NVIC_SetPriorityGrouping+0x44>)
 8006092:	4313      	orrs	r3, r2
 8006094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006096:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <__NVIC_SetPriorityGrouping+0x40>)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	60d3      	str	r3, [r2, #12]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	e000ed00 	.word	0xe000ed00
 80060ac:	05fa0000 	.word	0x05fa0000

080060b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <__NVIC_GetPriorityGrouping+0x18>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	f003 0307 	and.w	r3, r3, #7
}
 80060be:	4618      	mov	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	e000ed00 	.word	0xe000ed00

080060cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	db0b      	blt.n	80060f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	f003 021f 	and.w	r2, r3, #31
 80060e4:	4907      	ldr	r1, [pc, #28]	; (8006104 <__NVIC_EnableIRQ+0x38>)
 80060e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2001      	movs	r0, #1
 80060ee:	fa00 f202 	lsl.w	r2, r0, r2
 80060f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	e000e100 	.word	0xe000e100

08006108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	6039      	str	r1, [r7, #0]
 8006112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006118:	2b00      	cmp	r3, #0
 800611a:	db0a      	blt.n	8006132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	b2da      	uxtb	r2, r3
 8006120:	490c      	ldr	r1, [pc, #48]	; (8006154 <__NVIC_SetPriority+0x4c>)
 8006122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006126:	0112      	lsls	r2, r2, #4
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	440b      	add	r3, r1
 800612c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006130:	e00a      	b.n	8006148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	4908      	ldr	r1, [pc, #32]	; (8006158 <__NVIC_SetPriority+0x50>)
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	3b04      	subs	r3, #4
 8006140:	0112      	lsls	r2, r2, #4
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	440b      	add	r3, r1
 8006146:	761a      	strb	r2, [r3, #24]
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	e000e100 	.word	0xe000e100
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800615c:	b480      	push	{r7}
 800615e:	b089      	sub	sp, #36	; 0x24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f1c3 0307 	rsb	r3, r3, #7
 8006176:	2b04      	cmp	r3, #4
 8006178:	bf28      	it	cs
 800617a:	2304      	movcs	r3, #4
 800617c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3304      	adds	r3, #4
 8006182:	2b06      	cmp	r3, #6
 8006184:	d902      	bls.n	800618c <NVIC_EncodePriority+0x30>
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3b03      	subs	r3, #3
 800618a:	e000      	b.n	800618e <NVIC_EncodePriority+0x32>
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43da      	mvns	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	401a      	ands	r2, r3
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061a4:	f04f 31ff 	mov.w	r1, #4294967295
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	fa01 f303 	lsl.w	r3, r1, r3
 80061ae:	43d9      	mvns	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b4:	4313      	orrs	r3, r2
         );
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3724      	adds	r7, #36	; 0x24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff ff4c 	bl	8006068 <__NVIC_SetPriorityGrouping>
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061ea:	f7ff ff61 	bl	80060b0 <__NVIC_GetPriorityGrouping>
 80061ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6978      	ldr	r0, [r7, #20]
 80061f6:	f7ff ffb1 	bl	800615c <NVIC_EncodePriority>
 80061fa:	4602      	mov	r2, r0
 80061fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006200:	4611      	mov	r1, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff ff80 	bl	8006108 <__NVIC_SetPriority>
}
 8006208:	bf00      	nop
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff ff54 	bl	80060cc <__NVIC_EnableIRQ>
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006238:	f7fe fdfa 	bl	8004e30 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e099      	b.n	800637c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006268:	e00f      	b.n	800628a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800626a:	f7fe fde1 	bl	8004e30 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b05      	cmp	r3, #5
 8006276:	d908      	bls.n	800628a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2203      	movs	r2, #3
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e078      	b.n	800637c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e8      	bne.n	800626a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4b38      	ldr	r3, [pc, #224]	; (8006384 <HAL_DMA_Init+0x158>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d107      	bne.n	80062f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	4313      	orrs	r3, r2
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0307 	bic.w	r3, r3, #7
 800630a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	2b04      	cmp	r3, #4
 800631c:	d117      	bne.n	800634e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f8bd 	bl	80064b0 <DMA_CheckFifoParam>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d008      	beq.n	800634e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800634a:	2301      	movs	r3, #1
 800634c:	e016      	b.n	800637c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f874 	bl	8006444 <DMA_CalcBaseAndBitshift>
 800635c:	4603      	mov	r3, r0
 800635e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	223f      	movs	r2, #63	; 0x3f
 8006366:	409a      	lsls	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f010803f 	.word	0xf010803f

08006388 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e050      	b.n	800643c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d101      	bne.n	80063aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
 80063a8:	e048      	b.n	800643c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2200      	movs	r2, #0
 80063d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2200      	movs	r2, #0
 80063e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2221      	movs	r2, #33	; 0x21
 80063e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f82a 	bl	8006444 <DMA_CalcBaseAndBitshift>
 80063f0:	4603      	mov	r3, r0
 80063f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f8:	223f      	movs	r2, #63	; 0x3f
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	3b10      	subs	r3, #16
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <DMA_CalcBaseAndBitshift+0x60>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	091b      	lsrs	r3, r3, #4
 800645c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800645e:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <DMA_CalcBaseAndBitshift+0x64>)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d908      	bls.n	8006484 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <DMA_CalcBaseAndBitshift+0x68>)
 800647a:	4013      	ands	r3, r2
 800647c:	1d1a      	adds	r2, r3, #4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	659a      	str	r2, [r3, #88]	; 0x58
 8006482:	e006      	b.n	8006492 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <DMA_CalcBaseAndBitshift+0x68>)
 800648c:	4013      	ands	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	aaaaaaab 	.word	0xaaaaaaab
 80064a8:	08081c44 	.word	0x08081c44
 80064ac:	fffffc00 	.word	0xfffffc00

080064b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d11f      	bne.n	800650a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d856      	bhi.n	800657e <DMA_CheckFifoParam+0xce>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <DMA_CheckFifoParam+0x28>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064e9 	.word	0x080064e9
 80064dc:	080064fb 	.word	0x080064fb
 80064e0:	080064e9 	.word	0x080064e9
 80064e4:	0800657f 	.word	0x0800657f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d046      	beq.n	8006582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f8:	e043      	b.n	8006582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006502:	d140      	bne.n	8006586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006508:	e03d      	b.n	8006586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006512:	d121      	bne.n	8006558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d837      	bhi.n	800658a <DMA_CheckFifoParam+0xda>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <DMA_CheckFifoParam+0x70>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	08006537 	.word	0x08006537
 8006528:	08006531 	.word	0x08006531
 800652c:	08006549 	.word	0x08006549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
      break;
 8006534:	e030      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d025      	beq.n	800658e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006546:	e022      	b.n	800658e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006550:	d11f      	bne.n	8006592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006556:	e01c      	b.n	8006592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d903      	bls.n	8006566 <DMA_CheckFifoParam+0xb6>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d003      	beq.n	800656c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006564:	e018      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	73fb      	strb	r3, [r7, #15]
      break;
 800656a:	e015      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
      break;
 800657c:	e00b      	b.n	8006596 <DMA_CheckFifoParam+0xe6>
      break;
 800657e:	bf00      	nop
 8006580:	e00a      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      break;
 8006582:	bf00      	nop
 8006584:	e008      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      break;
 8006586:	bf00      	nop
 8006588:	e006      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      break;
 800658a:	bf00      	nop
 800658c:	e004      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      break;
 800658e:	bf00      	nop
 8006590:	e002      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      break;   
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <DMA_CheckFifoParam+0xe8>
      break;
 8006596:	bf00      	nop
    }
  } 
  
  return status; 
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e039      	b.n	800662e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fa f9ba 	bl	8000948 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	f023 0107 	bic.w	r1, r3, #7
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660e:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <HAL_DMA2D_Init+0x90>)
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68d1      	ldr	r1, [r2, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	430b      	orrs	r3, r1
 800661c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	ffffc000 	.word	0xffffc000

0800663c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_DMA2D_Start+0x1c>
 8006654:	2302      	movs	r3, #2
 8006656:	e018      	b.n	800668a <HAL_DMA2D_Start+0x4e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fa98 	bl	8006ba8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b086      	sub	sp, #24
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d056      	beq.n	800675c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ae:	f7fe fbbf 	bl	8004e30 <HAL_GetTick>
 80066b2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80066b4:	e04b      	b.n	800674e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d023      	beq.n	8006710 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d6:	f043 0202 	orr.w	r2, r3, #2
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	f043 0201 	orr.w	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2221      	movs	r2, #33	; 0x21
 80066fa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2204      	movs	r2, #4
 8006700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0a5      	b.n	800685c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d01a      	beq.n	800674e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006718:	f7fe fb8a 	bl	8004e30 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <HAL_DMA2D_PollForTransfer+0x9c>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2203      	movs	r2, #3
 800673e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e086      	b.n	800685c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ac      	beq.n	80066b6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d061      	beq.n	8006842 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800677e:	f7fe fb57 	bl	8004e30 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006784:	e056      	b.n	8006834 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02e      	beq.n	80067f6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	f043 0204 	orr.w	r2, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	f043 0202 	orr.w	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2229      	movs	r2, #41	; 0x29
 80067e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e032      	b.n	800685c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d01a      	beq.n	8006834 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fe fb17 	bl	8004e30 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <HAL_DMA2D_PollForTransfer+0x182>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10f      	bne.n	8006834 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006818:	f043 0220 	orr.w	r2, r3, #32
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2203      	movs	r2, #3
 8006824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e013      	b.n	800685c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0a1      	beq.n	8006786 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2212      	movs	r2, #18
 8006848:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d026      	beq.n	80068d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d021      	beq.n	80068d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800689e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a4:	f043 0201 	orr.w	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2204      	movs	r2, #4
 80068b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d026      	beq.n	800692c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d021      	beq.n	800692c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2220      	movs	r2, #32
 80068fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	f043 0202 	orr.w	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2204      	movs	r2, #4
 8006910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d026      	beq.n	8006984 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800693c:	2b00      	cmp	r3, #0
 800693e:	d021      	beq.n	8006984 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2208      	movs	r2, #8
 8006956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	f043 0204 	orr.w	r2, r3, #4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2204      	movs	r2, #4
 8006968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d013      	beq.n	80069b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2204      	movs	r2, #4
 80069ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f853 	bl	8006a5c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d024      	beq.n	8006a0a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01f      	beq.n	8006a0a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80069d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2202      	movs	r2, #2
 80069e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01f      	beq.n	8006a54 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01a      	beq.n	8006a54 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2210      	movs	r2, #16
 8006a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f80e 	bl	8006a70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_DMA2D_ConfigLayer+0x20>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e079      	b.n	8006b98 <HAL_DMA2D_ConfigLayer+0x114>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	3318      	adds	r3, #24
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	041b      	lsls	r3, r3, #16
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006ace:	4b35      	ldr	r3, [pc, #212]	; (8006ba4 <HAL_DMA2D_ConfigLayer+0x120>)
 8006ad0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b0a      	cmp	r3, #10
 8006ad8:	d003      	beq.n	8006ae2 <HAL_DMA2D_ConfigLayer+0x5e>
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b09      	cmp	r3, #9
 8006ae0:	d107      	bne.n	8006af2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e005      	b.n	8006afe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d120      	bne.n	8006b46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	ea02 0103 	and.w	r1, r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b0a      	cmp	r3, #10
 8006b2c:	d003      	beq.n	8006b36 <HAL_DMA2D_ConfigLayer+0xb2>
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d127      	bne.n	8006b86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28
 8006b44:	e01f      	b.n	8006b86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	ea02 0103 	and.w	r1, r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b0a      	cmp	r3, #10
 8006b6e:	d003      	beq.n	8006b78 <HAL_DMA2D_ConfigLayer+0xf4>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d106      	bne.n	8006b86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006b84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	ff03000f 	.word	0xff03000f

08006ba8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08b      	sub	sp, #44	; 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	041a      	lsls	r2, r3, #16
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006be0:	d174      	bne.n	8006ccc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006be8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bf0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bf8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	e053      	b.n	8006cc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d106      	bne.n	8006c30 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	e048      	b.n	8006cc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d111      	bne.n	8006c5c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	0cdb      	lsrs	r3, r3, #19
 8006c3c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	0a9b      	lsrs	r3, r3, #10
 8006c42:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	08db      	lsrs	r3, r3, #3
 8006c48:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	02db      	lsls	r3, r3, #11
 8006c52:	4313      	orrs	r3, r2
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5a:	e032      	b.n	8006cc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d117      	bne.n	8006c94 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	0fdb      	lsrs	r3, r3, #31
 8006c68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	0cdb      	lsrs	r3, r3, #19
 8006c6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	0adb      	lsrs	r3, r3, #11
 8006c74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	08db      	lsrs	r3, r3, #3
 8006c7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	431a      	orrs	r2, r3
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	03db      	lsls	r3, r3, #15
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
 8006c92:	e016      	b.n	8006cc2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	0f1b      	lsrs	r3, r3, #28
 8006c98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	0d1b      	lsrs	r3, r3, #20
 8006c9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	0b1b      	lsrs	r3, r3, #12
 8006ca4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	091b      	lsrs	r3, r3, #4
 8006caa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	011a      	lsls	r2, r3, #4
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006cca:	e003      	b.n	8006cd4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	60da      	str	r2, [r3, #12]
}
 8006cd4:	bf00      	nop
 8006cd6:	372c      	adds	r7, #44	; 0x2c
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b089      	sub	sp, #36	; 0x24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	e175      	b.n	8006fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006d00:	2201      	movs	r2, #1
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4013      	ands	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	f040 8164 	bne.w	8006fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d005      	beq.n	8006d36 <HAL_GPIO_Init+0x56>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d130      	bne.n	8006d98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2203      	movs	r2, #3
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	43db      	mvns	r3, r3
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	091b      	lsrs	r3, r3, #4
 8006d82:	f003 0201 	and.w	r2, r3, #1
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d017      	beq.n	8006dd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	2203      	movs	r2, #3
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	43db      	mvns	r3, r3
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	4013      	ands	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d123      	bne.n	8006e28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	08da      	lsrs	r2, r3, #3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3208      	adds	r2, #8
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	220f      	movs	r2, #15
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	4013      	ands	r3, r2
 8006e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	fa02 f303 	lsl.w	r3, r2, r3
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	08da      	lsrs	r2, r3, #3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3208      	adds	r2, #8
 8006e22:	69b9      	ldr	r1, [r7, #24]
 8006e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	2203      	movs	r2, #3
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f003 0203 	and.w	r2, r3, #3
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80be 	beq.w	8006fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e6a:	4b66      	ldr	r3, [pc, #408]	; (8007004 <HAL_GPIO_Init+0x324>)
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	4a65      	ldr	r2, [pc, #404]	; (8007004 <HAL_GPIO_Init+0x324>)
 8006e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e74:	6453      	str	r3, [r2, #68]	; 0x44
 8006e76:	4b63      	ldr	r3, [pc, #396]	; (8007004 <HAL_GPIO_Init+0x324>)
 8006e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006e82:	4a61      	ldr	r2, [pc, #388]	; (8007008 <HAL_GPIO_Init+0x328>)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	089b      	lsrs	r3, r3, #2
 8006e88:	3302      	adds	r3, #2
 8006e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	220f      	movs	r2, #15
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a58      	ldr	r2, [pc, #352]	; (800700c <HAL_GPIO_Init+0x32c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d037      	beq.n	8006f1e <HAL_GPIO_Init+0x23e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a57      	ldr	r2, [pc, #348]	; (8007010 <HAL_GPIO_Init+0x330>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d031      	beq.n	8006f1a <HAL_GPIO_Init+0x23a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a56      	ldr	r2, [pc, #344]	; (8007014 <HAL_GPIO_Init+0x334>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d02b      	beq.n	8006f16 <HAL_GPIO_Init+0x236>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a55      	ldr	r2, [pc, #340]	; (8007018 <HAL_GPIO_Init+0x338>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d025      	beq.n	8006f12 <HAL_GPIO_Init+0x232>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a54      	ldr	r2, [pc, #336]	; (800701c <HAL_GPIO_Init+0x33c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01f      	beq.n	8006f0e <HAL_GPIO_Init+0x22e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a53      	ldr	r2, [pc, #332]	; (8007020 <HAL_GPIO_Init+0x340>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d019      	beq.n	8006f0a <HAL_GPIO_Init+0x22a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a52      	ldr	r2, [pc, #328]	; (8007024 <HAL_GPIO_Init+0x344>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <HAL_GPIO_Init+0x226>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a51      	ldr	r2, [pc, #324]	; (8007028 <HAL_GPIO_Init+0x348>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00d      	beq.n	8006f02 <HAL_GPIO_Init+0x222>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a50      	ldr	r2, [pc, #320]	; (800702c <HAL_GPIO_Init+0x34c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <HAL_GPIO_Init+0x21e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a4f      	ldr	r2, [pc, #316]	; (8007030 <HAL_GPIO_Init+0x350>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d101      	bne.n	8006efa <HAL_GPIO_Init+0x21a>
 8006ef6:	2309      	movs	r3, #9
 8006ef8:	e012      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006efa:	230a      	movs	r3, #10
 8006efc:	e010      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006efe:	2308      	movs	r3, #8
 8006f00:	e00e      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f02:	2307      	movs	r3, #7
 8006f04:	e00c      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f06:	2306      	movs	r3, #6
 8006f08:	e00a      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f0a:	2305      	movs	r3, #5
 8006f0c:	e008      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f0e:	2304      	movs	r3, #4
 8006f10:	e006      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f12:	2303      	movs	r3, #3
 8006f14:	e004      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e002      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <HAL_GPIO_Init+0x240>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	f002 0203 	and.w	r2, r2, #3
 8006f26:	0092      	lsls	r2, r2, #2
 8006f28:	4093      	lsls	r3, r2
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006f30:	4935      	ldr	r1, [pc, #212]	; (8007008 <HAL_GPIO_Init+0x328>)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	089b      	lsrs	r3, r3, #2
 8006f36:	3302      	adds	r3, #2
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f3e:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f62:	4a34      	ldr	r2, [pc, #208]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f68:	4b32      	ldr	r3, [pc, #200]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f8c:	4a29      	ldr	r2, [pc, #164]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f92:	4b28      	ldr	r3, [pc, #160]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006fb6:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fbc:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006fe0:	4a14      	ldr	r2, [pc, #80]	; (8007034 <HAL_GPIO_Init+0x354>)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b0f      	cmp	r3, #15
 8006ff0:	f67f ae86 	bls.w	8006d00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	3724      	adds	r7, #36	; 0x24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800
 8007008:	40013800 	.word	0x40013800
 800700c:	40020000 	.word	0x40020000
 8007010:	40020400 	.word	0x40020400
 8007014:	40020800 	.word	0x40020800
 8007018:	40020c00 	.word	0x40020c00
 800701c:	40021000 	.word	0x40021000
 8007020:	40021400 	.word	0x40021400
 8007024:	40021800 	.word	0x40021800
 8007028:	40021c00 	.word	0x40021c00
 800702c:	40022000 	.word	0x40022000
 8007030:	40022400 	.word	0x40022400
 8007034:	40013c00 	.word	0x40013c00

08007038 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800704a:	2300      	movs	r3, #0
 800704c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e0d9      	b.n	8007208 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007054:	2201      	movs	r2, #1
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4013      	ands	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	f040 80c9 	bne.w	8007202 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007070:	4a6b      	ldr	r2, [pc, #428]	; (8007220 <HAL_GPIO_DeInit+0x1e8>)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	089b      	lsrs	r3, r3, #2
 8007076:	3302      	adds	r3, #2
 8007078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	220f      	movs	r2, #15
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	4013      	ands	r3, r2
 8007090:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a63      	ldr	r2, [pc, #396]	; (8007224 <HAL_GPIO_DeInit+0x1ec>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d037      	beq.n	800710a <HAL_GPIO_DeInit+0xd2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a62      	ldr	r2, [pc, #392]	; (8007228 <HAL_GPIO_DeInit+0x1f0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d031      	beq.n	8007106 <HAL_GPIO_DeInit+0xce>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a61      	ldr	r2, [pc, #388]	; (800722c <HAL_GPIO_DeInit+0x1f4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d02b      	beq.n	8007102 <HAL_GPIO_DeInit+0xca>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a60      	ldr	r2, [pc, #384]	; (8007230 <HAL_GPIO_DeInit+0x1f8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d025      	beq.n	80070fe <HAL_GPIO_DeInit+0xc6>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a5f      	ldr	r2, [pc, #380]	; (8007234 <HAL_GPIO_DeInit+0x1fc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d01f      	beq.n	80070fa <HAL_GPIO_DeInit+0xc2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a5e      	ldr	r2, [pc, #376]	; (8007238 <HAL_GPIO_DeInit+0x200>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d019      	beq.n	80070f6 <HAL_GPIO_DeInit+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a5d      	ldr	r2, [pc, #372]	; (800723c <HAL_GPIO_DeInit+0x204>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <HAL_GPIO_DeInit+0xba>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a5c      	ldr	r2, [pc, #368]	; (8007240 <HAL_GPIO_DeInit+0x208>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00d      	beq.n	80070ee <HAL_GPIO_DeInit+0xb6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a5b      	ldr	r2, [pc, #364]	; (8007244 <HAL_GPIO_DeInit+0x20c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <HAL_GPIO_DeInit+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a5a      	ldr	r2, [pc, #360]	; (8007248 <HAL_GPIO_DeInit+0x210>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d101      	bne.n	80070e6 <HAL_GPIO_DeInit+0xae>
 80070e2:	2309      	movs	r3, #9
 80070e4:	e012      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070e6:	230a      	movs	r3, #10
 80070e8:	e010      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070ea:	2308      	movs	r3, #8
 80070ec:	e00e      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070ee:	2307      	movs	r3, #7
 80070f0:	e00c      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070f2:	2306      	movs	r3, #6
 80070f4:	e00a      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070f6:	2305      	movs	r3, #5
 80070f8:	e008      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070fa:	2304      	movs	r3, #4
 80070fc:	e006      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 80070fe:	2303      	movs	r3, #3
 8007100:	e004      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 8007102:	2302      	movs	r3, #2
 8007104:	e002      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <HAL_GPIO_DeInit+0xd4>
 800710a:	2300      	movs	r3, #0
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	f002 0203 	and.w	r2, r2, #3
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	4093      	lsls	r3, r2
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	d132      	bne.n	8007182 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800711c:	4b4b      	ldr	r3, [pc, #300]	; (800724c <HAL_GPIO_DeInit+0x214>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	43db      	mvns	r3, r3
 8007124:	4949      	ldr	r1, [pc, #292]	; (800724c <HAL_GPIO_DeInit+0x214>)
 8007126:	4013      	ands	r3, r2
 8007128:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800712a:	4b48      	ldr	r3, [pc, #288]	; (800724c <HAL_GPIO_DeInit+0x214>)
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	43db      	mvns	r3, r3
 8007132:	4946      	ldr	r1, [pc, #280]	; (800724c <HAL_GPIO_DeInit+0x214>)
 8007134:	4013      	ands	r3, r2
 8007136:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007138:	4b44      	ldr	r3, [pc, #272]	; (800724c <HAL_GPIO_DeInit+0x214>)
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	43db      	mvns	r3, r3
 8007140:	4942      	ldr	r1, [pc, #264]	; (800724c <HAL_GPIO_DeInit+0x214>)
 8007142:	4013      	ands	r3, r2
 8007144:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007146:	4b41      	ldr	r3, [pc, #260]	; (800724c <HAL_GPIO_DeInit+0x214>)
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	43db      	mvns	r3, r3
 800714e:	493f      	ldr	r1, [pc, #252]	; (800724c <HAL_GPIO_DeInit+0x214>)
 8007150:	4013      	ands	r3, r2
 8007152:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	220f      	movs	r2, #15
 800715e:	fa02 f303 	lsl.w	r3, r2, r3
 8007162:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007164:	4a2e      	ldr	r2, [pc, #184]	; (8007220 <HAL_GPIO_DeInit+0x1e8>)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	089b      	lsrs	r3, r3, #2
 800716a:	3302      	adds	r3, #2
 800716c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	43da      	mvns	r2, r3
 8007174:	482a      	ldr	r0, [pc, #168]	; (8007220 <HAL_GPIO_DeInit+0x1e8>)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	089b      	lsrs	r3, r3, #2
 800717a:	400a      	ands	r2, r1
 800717c:	3302      	adds	r3, #2
 800717e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	2103      	movs	r1, #3
 800718c:	fa01 f303 	lsl.w	r3, r1, r3
 8007190:	43db      	mvns	r3, r3
 8007192:	401a      	ands	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	08da      	lsrs	r2, r3, #3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3208      	adds	r2, #8
 80071a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	220f      	movs	r2, #15
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	43db      	mvns	r3, r3
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	08d2      	lsrs	r2, r2, #3
 80071b8:	4019      	ands	r1, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3208      	adds	r2, #8
 80071be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	2103      	movs	r1, #3
 80071cc:	fa01 f303 	lsl.w	r3, r1, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	401a      	ands	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	2101      	movs	r1, #1
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	fa01 f303 	lsl.w	r3, r1, r3
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	2103      	movs	r1, #3
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	43db      	mvns	r3, r3
 80071fc:	401a      	ands	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	3301      	adds	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b0f      	cmp	r3, #15
 800720c:	f67f af22 	bls.w	8007054 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40013800 	.word	0x40013800
 8007224:	40020000 	.word	0x40020000
 8007228:	40020400 	.word	0x40020400
 800722c:	40020800 	.word	0x40020800
 8007230:	40020c00 	.word	0x40020c00
 8007234:	40021000 	.word	0x40021000
 8007238:	40021400 	.word	0x40021400
 800723c:	40021800 	.word	0x40021800
 8007240:	40021c00 	.word	0x40021c00
 8007244:	40022000 	.word	0x40022000
 8007248:	40022400 	.word	0x40022400
 800724c:	40013c00 	.word	0x40013c00

08007250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
 800725c:	4613      	mov	r3, r2
 800725e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007260:	787b      	ldrb	r3, [r7, #1]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007266:	887a      	ldrh	r2, [r7, #2]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800726c:	e003      	b.n	8007276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800726e:	887b      	ldrh	r3, [r7, #2]
 8007270:	041a      	lsls	r2, r3, #16
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	619a      	str	r2, [r3, #24]
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e07f      	b.n	8007396 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fa fe5c 	bl	8001f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2224      	movs	r2, #36	; 0x24
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d107      	bne.n	80072fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072fa:	609a      	str	r2, [r3, #8]
 80072fc:	e006      	b.n	800730c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800730a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d104      	bne.n	800731e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800731c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6859      	ldr	r1, [r3, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <HAL_I2C_Init+0x11c>)
 800732a:	430b      	orrs	r3, r1
 800732c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800733c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69d9      	ldr	r1, [r3, #28]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	02008000 	.word	0x02008000

080073a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e021      	b.n	80073fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2224      	movs	r2, #36	; 0x24
 80073ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0201 	bic.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fa fe2a 	bl	8002028 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af02      	add	r7, sp, #8
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	461a      	mov	r2, r3
 8007412:	4603      	mov	r3, r0
 8007414:	817b      	strh	r3, [r7, #10]
 8007416:	460b      	mov	r3, r1
 8007418:	813b      	strh	r3, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b20      	cmp	r3, #32
 8007428:	f040 80f9 	bne.w	800761e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_I2C_Mem_Write+0x34>
 8007432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0ed      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_I2C_Mem_Write+0x4e>
 800744e:	2302      	movs	r3, #2
 8007450:	e0e6      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800745a:	f7fd fce9 	bl	8004e30 <HAL_GetTick>
 800745e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	2319      	movs	r3, #25
 8007466:	2201      	movs	r2, #1
 8007468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fad1 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e0d1      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2221      	movs	r2, #33	; 0x21
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2240      	movs	r2, #64	; 0x40
 8007488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a3a      	ldr	r2, [r7, #32]
 8007496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800749c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074a4:	88f8      	ldrh	r0, [r7, #6]
 80074a6:	893a      	ldrh	r2, [r7, #8]
 80074a8:	8979      	ldrh	r1, [r7, #10]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4603      	mov	r3, r0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f9e1 	bl	800787c <I2C_RequestMemoryWrite>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0a9      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2bff      	cmp	r3, #255	; 0xff
 80074d4:	d90e      	bls.n	80074f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	8979      	ldrh	r1, [r7, #10]
 80074e4:	2300      	movs	r3, #0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fc2d 	bl	8007d4c <I2C_TransferConfig>
 80074f2:	e00f      	b.n	8007514 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	b2da      	uxtb	r2, r3
 8007504:	8979      	ldrh	r1, [r7, #10]
 8007506:	2300      	movs	r3, #0
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fc1c 	bl	8007d4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fabb 	bl	8007a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e07b      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d034      	beq.n	80075cc <HAL_I2C_Mem_Write+0x1c8>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d130      	bne.n	80075cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	2200      	movs	r2, #0
 8007572:	2180      	movs	r1, #128	; 0x80
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 fa4d 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e04d      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007588:	b29b      	uxth	r3, r3
 800758a:	2bff      	cmp	r3, #255	; 0xff
 800758c:	d90e      	bls.n	80075ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	22ff      	movs	r2, #255	; 0xff
 8007592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007598:	b2da      	uxtb	r2, r3
 800759a:	8979      	ldrh	r1, [r7, #10]
 800759c:	2300      	movs	r3, #0
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fbd1 	bl	8007d4c <I2C_TransferConfig>
 80075aa:	e00f      	b.n	80075cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	8979      	ldrh	r1, [r7, #10]
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fbc0 	bl	8007d4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d19e      	bne.n	8007514 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fa9a 	bl	8007b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e01a      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2220      	movs	r2, #32
 80075f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6859      	ldr	r1, [r3, #4]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <HAL_I2C_Mem_Write+0x224>)
 80075fe:	400b      	ands	r3, r1
 8007600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e000      	b.n	8007620 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800761e:	2302      	movs	r3, #2
  }
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	fe00e800 	.word	0xfe00e800

0800762c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	461a      	mov	r2, r3
 800763a:	4603      	mov	r3, r0
 800763c:	817b      	strh	r3, [r7, #10]
 800763e:	460b      	mov	r3, r1
 8007640:	813b      	strh	r3, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b20      	cmp	r3, #32
 8007650:	f040 80fd 	bne.w	800784e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_I2C_Mem_Read+0x34>
 800765a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d105      	bne.n	800766c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007666:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0f1      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_I2C_Mem_Read+0x4e>
 8007676:	2302      	movs	r3, #2
 8007678:	e0ea      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007682:	f7fd fbd5 	bl	8004e30 <HAL_GetTick>
 8007686:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	2319      	movs	r3, #25
 800768e:	2201      	movs	r2, #1
 8007690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f9bd 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0d5      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2222      	movs	r2, #34	; 0x22
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2240      	movs	r2, #64	; 0x40
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a3a      	ldr	r2, [r7, #32]
 80076be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076cc:	88f8      	ldrh	r0, [r7, #6]
 80076ce:	893a      	ldrh	r2, [r7, #8]
 80076d0:	8979      	ldrh	r1, [r7, #10]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4603      	mov	r3, r0
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f921 	bl	8007924 <I2C_RequestMemoryRead>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0ad      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2bff      	cmp	r3, #255	; 0xff
 80076fc:	d90e      	bls.n	800771c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	22ff      	movs	r2, #255	; 0xff
 8007702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007708:	b2da      	uxtb	r2, r3
 800770a:	8979      	ldrh	r1, [r7, #10]
 800770c:	4b52      	ldr	r3, [pc, #328]	; (8007858 <HAL_I2C_Mem_Read+0x22c>)
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fb19 	bl	8007d4c <I2C_TransferConfig>
 800771a:	e00f      	b.n	800773c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772a:	b2da      	uxtb	r2, r3
 800772c:	8979      	ldrh	r1, [r7, #10]
 800772e:	4b4a      	ldr	r3, [pc, #296]	; (8007858 <HAL_I2C_Mem_Read+0x22c>)
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb08 	bl	8007d4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	2200      	movs	r2, #0
 8007744:	2104      	movs	r1, #4
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f964 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e07c      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d034      	beq.n	80077fc <HAL_I2C_Mem_Read+0x1d0>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d130      	bne.n	80077fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	2200      	movs	r2, #0
 80077a2:	2180      	movs	r1, #128	; 0x80
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f935 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e04d      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	d90e      	bls.n	80077dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	22ff      	movs	r2, #255	; 0xff
 80077c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	8979      	ldrh	r1, [r7, #10]
 80077cc:	2300      	movs	r3, #0
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fab9 	bl	8007d4c <I2C_TransferConfig>
 80077da:	e00f      	b.n	80077fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	8979      	ldrh	r1, [r7, #10]
 80077ee:	2300      	movs	r3, #0
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 faa8 	bl	8007d4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d19a      	bne.n	800773c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f982 	bl	8007b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e01a      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2220      	movs	r2, #32
 8007820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6859      	ldr	r1, [r3, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <HAL_I2C_Mem_Read+0x230>)
 800782e:	400b      	ands	r3, r1
 8007830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e000      	b.n	8007850 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800784e:	2302      	movs	r3, #2
  }
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	80002400 	.word	0x80002400
 800785c:	fe00e800 	.word	0xfe00e800

08007860 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800786e:	b2db      	uxtb	r3, r3
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4603      	mov	r3, r0
 800788c:	817b      	strh	r3, [r7, #10]
 800788e:	460b      	mov	r3, r1
 8007890:	813b      	strh	r3, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	8979      	ldrh	r1, [r7, #10]
 800789c:	4b20      	ldr	r3, [pc, #128]	; (8007920 <I2C_RequestMemoryWrite+0xa4>)
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fa51 	bl	8007d4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f8f0 	bl	8007a94 <I2C_WaitOnTXISFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e02c      	b.n	8007918 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d105      	bne.n	80078d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	629a      	str	r2, [r3, #40]	; 0x28
 80078ce:	e015      	b.n	80078fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078d0:	893b      	ldrh	r3, [r7, #8]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f8d6 	bl	8007a94 <I2C_WaitOnTXISFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e012      	b.n	8007918 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078f2:	893b      	ldrh	r3, [r7, #8]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2200      	movs	r2, #0
 8007904:	2180      	movs	r1, #128	; 0x80
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f884 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	80002000 	.word	0x80002000

08007924 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	4608      	mov	r0, r1
 800792e:	4611      	mov	r1, r2
 8007930:	461a      	mov	r2, r3
 8007932:	4603      	mov	r3, r0
 8007934:	817b      	strh	r3, [r7, #10]
 8007936:	460b      	mov	r3, r1
 8007938:	813b      	strh	r3, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	8979      	ldrh	r1, [r7, #10]
 8007944:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <I2C_RequestMemoryRead+0xa4>)
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	2300      	movs	r3, #0
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f9fe 	bl	8007d4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	69b9      	ldr	r1, [r7, #24]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f89d 	bl	8007a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e02c      	b.n	80079be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d105      	bne.n	8007976 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800796a:	893b      	ldrh	r3, [r7, #8]
 800796c:	b2da      	uxtb	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	629a      	str	r2, [r3, #40]	; 0x28
 8007974:	e015      	b.n	80079a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007976:	893b      	ldrh	r3, [r7, #8]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	b29b      	uxth	r3, r3
 800797c:	b2da      	uxtb	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	69b9      	ldr	r1, [r7, #24]
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f883 	bl	8007a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e012      	b.n	80079be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007998:	893b      	ldrh	r3, [r7, #8]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2200      	movs	r2, #0
 80079aa:	2140      	movs	r1, #64	; 0x40
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f831 	bl	8007a14 <I2C_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	80002000 	.word	0x80002000

080079cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d103      	bne.n	80079ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d007      	beq.n	8007a08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	619a      	str	r2, [r3, #24]
  }
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a24:	e022      	b.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d01e      	beq.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2e:	f7fd f9ff 	bl	8004e30 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d302      	bcc.n	8007a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d113      	bne.n	8007a6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a48:	f043 0220 	orr.w	r2, r3, #32
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e00f      	b.n	8007a8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d0cd      	beq.n	8007a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007aa0:	e02c      	b.n	8007afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 f870 	bl	8007b8c <I2C_IsErrorOccurred>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e02a      	b.n	8007b0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d01e      	beq.n	8007afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007abe:	f7fd f9b7 	bl	8004e30 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d113      	bne.n	8007afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e007      	b.n	8007b0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d1cb      	bne.n	8007aa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b20:	e028      	b.n	8007b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f830 	bl	8007b8c <I2C_IsErrorOccurred>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e026      	b.n	8007b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b36:	f7fd f97b 	bl	8004e30 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d302      	bcc.n	8007b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d113      	bne.n	8007b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	f043 0220 	orr.w	r2, r3, #32
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e007      	b.n	8007b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d1cf      	bne.n	8007b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	; 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d068      	beq.n	8007c8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bc0:	e049      	b.n	8007c56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d045      	beq.n	8007c56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7fd f931 	bl	8004e30 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <I2C_IsErrorOccurred+0x54>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d13a      	bne.n	8007c56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c02:	d121      	bne.n	8007c48 <I2C_IsErrorOccurred+0xbc>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c0a:	d01d      	beq.n	8007c48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007c0c:	7cfb      	ldrb	r3, [r7, #19]
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d01a      	beq.n	8007c48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007c22:	f7fd f905 	bl	8004e30 <HAL_GetTick>
 8007c26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c28:	e00e      	b.n	8007c48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007c2a:	f7fd f901 	bl	8004e30 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b19      	cmp	r3, #25
 8007c36:	d907      	bls.n	8007c48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	f043 0320 	orr.w	r3, r3, #32
 8007c3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007c46:	e006      	b.n	8007c56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d1e9      	bne.n	8007c2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f003 0320 	and.w	r3, r3, #32
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d003      	beq.n	8007c6c <I2C_IsErrorOccurred+0xe0>
 8007c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0aa      	beq.n	8007bc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	f043 0304 	orr.w	r3, r3, #4
 8007c82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f043 0308 	orr.w	r3, r3, #8
 8007cc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f043 0302 	orr.w	r3, r3, #2
 8007ce6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01c      	beq.n	8007d3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff fe63 	bl	80079cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6859      	ldr	r1, [r3, #4]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <I2C_IsErrorOccurred+0x1bc>)
 8007d12:	400b      	ands	r3, r1
 8007d14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	fe00e800 	.word	0xfe00e800

08007d4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	817b      	strh	r3, [r7, #10]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d5e:	897b      	ldrh	r3, [r7, #10]
 8007d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d64:	7a7b      	ldrb	r3, [r7, #9]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	0d5b      	lsrs	r3, r3, #21
 8007d86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007d8a:	4b08      	ldr	r3, [pc, #32]	; (8007dac <I2C_TransferConfig+0x60>)
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	ea02 0103 	and.w	r1, r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	03ff63ff 	.word	0x03ff63ff

08007db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d138      	bne.n	8007e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e032      	b.n	8007e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2224      	movs	r2, #36	; 0x24
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d139      	bne.n	8007ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e033      	b.n	8007ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2224      	movs	r2, #36	; 0x24
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e000      	b.n	8007ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ed0:	2302      	movs	r3, #2
  }
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e0bf      	b.n	8008072 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fa f932 	bl	8002170 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007f22:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6999      	ldr	r1, [r3, #24]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f38:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6899      	ldr	r1, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b4a      	ldr	r3, [pc, #296]	; (800807c <HAL_LTDC_Init+0x19c>)
 8007f54:	400b      	ands	r3, r1
 8007f56:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	041b      	lsls	r3, r3, #16
 8007f5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6899      	ldr	r1, [r3, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68d9      	ldr	r1, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b3e      	ldr	r3, [pc, #248]	; (800807c <HAL_LTDC_Init+0x19c>)
 8007f82:	400b      	ands	r3, r1
 8007f84:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68d9      	ldr	r1, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6919      	ldr	r1, [r3, #16]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4b33      	ldr	r3, [pc, #204]	; (800807c <HAL_LTDC_Init+0x19c>)
 8007fb0:	400b      	ands	r3, r1
 8007fb2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6919      	ldr	r1, [r3, #16]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6959      	ldr	r1, [r3, #20]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b27      	ldr	r3, [pc, #156]	; (800807c <HAL_LTDC_Init+0x19c>)
 8007fde:	400b      	ands	r3, r1
 8007fe0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	041b      	lsls	r3, r3, #16
 8007fe8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6959      	ldr	r1, [r3, #20]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008010:	041b      	lsls	r3, r3, #16
 8008012:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0206 	orr.w	r2, r2, #6
 800804e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	f000f800 	.word	0xf000f800

08008080 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008096:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d023      	beq.n	80080ea <HAL_LTDC_IRQHandler+0x6a>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01e      	beq.n	80080ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2204      	movs	r2, #4
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080ca:	f043 0201 	orr.w	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2204      	movs	r2, #4
 80080d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f86f 	bl	80081c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d023      	beq.n	800813c <HAL_LTDC_IRQHandler+0xbc>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01e      	beq.n	800813c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0202 	bic.w	r2, r2, #2
 800810c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2202      	movs	r2, #2
 8008114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800811c:	f043 0202 	orr.w	r2, r3, #2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2204      	movs	r2, #4
 800812a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f846 	bl	80081c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01b      	beq.n	800817e <HAL_LTDC_IRQHandler+0xfe>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d016      	beq.n	800817e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 0201 	bic.w	r2, r2, #1
 800815e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2201      	movs	r2, #1
 8008166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f82f 	bl	80081dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01b      	beq.n	80081c0 <HAL_LTDC_IRQHandler+0x140>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d016      	beq.n	80081c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0208 	bic.w	r2, r2, #8
 80081a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2208      	movs	r2, #8
 80081a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f818 	bl	80081f0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008204:	b5b0      	push	{r4, r5, r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <HAL_LTDC_ConfigLayer+0x1a>
 800821a:	2302      	movs	r3, #2
 800821c:	e02c      	b.n	8008278 <HAL_LTDC_ConfigLayer+0x74>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2134      	movs	r1, #52	; 0x34
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	4413      	add	r3, r2
 800823a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4614      	mov	r4, r2
 8008242:	461d      	mov	r5, r3
 8008244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800824a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800824c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800824e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f81f 	bl	800829c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2201      	movs	r2, #1
 8008264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bdb0      	pop	{r4, r5, r7, pc}

08008280 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800828e:	b2db      	uxtb	r3, r3
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800829c:	b480      	push	{r7}
 800829e:	b089      	sub	sp, #36	; 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b8:	4413      	add	r3, r2
 80082ba:	041b      	lsls	r3, r3, #16
 80082bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	01db      	lsls	r3, r3, #7
 80082c8:	4413      	add	r3, r2
 80082ca:	3384      	adds	r3, #132	; 0x84
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	4611      	mov	r1, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	01d2      	lsls	r2, r2, #7
 80082d8:	440a      	add	r2, r1
 80082da:	3284      	adds	r2, #132	; 0x84
 80082dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082f2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082f4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	01db      	lsls	r3, r3, #7
 8008300:	440b      	add	r3, r1
 8008302:	3384      	adds	r3, #132	; 0x84
 8008304:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800830a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800831a:	4413      	add	r3, r2
 800831c:	041b      	lsls	r3, r3, #16
 800831e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	01db      	lsls	r3, r3, #7
 800832a:	4413      	add	r3, r2
 800832c:	3384      	adds	r3, #132	; 0x84
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	4611      	mov	r1, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	01d2      	lsls	r2, r2, #7
 800833a:	440a      	add	r2, r1
 800833c:	3284      	adds	r2, #132	; 0x84
 800833e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008342:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008352:	4413      	add	r3, r2
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4619      	mov	r1, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	01db      	lsls	r3, r3, #7
 8008360:	440b      	add	r3, r1
 8008362:	3384      	adds	r3, #132	; 0x84
 8008364:	4619      	mov	r1, r3
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4313      	orrs	r3, r2
 800836a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	01db      	lsls	r3, r3, #7
 8008376:	4413      	add	r3, r2
 8008378:	3384      	adds	r3, #132	; 0x84
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	4611      	mov	r1, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	01d2      	lsls	r2, r2, #7
 8008386:	440a      	add	r2, r1
 8008388:	3284      	adds	r2, #132	; 0x84
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	01db      	lsls	r3, r3, #7
 800839a:	4413      	add	r3, r2
 800839c:	3384      	adds	r3, #132	; 0x84
 800839e:	461a      	mov	r2, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	01db      	lsls	r3, r3, #7
 80083cc:	4413      	add	r3, r2
 80083ce:	3384      	adds	r3, #132	; 0x84
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	01db      	lsls	r3, r3, #7
 80083dc:	4413      	add	r3, r2
 80083de:	3384      	adds	r3, #132	; 0x84
 80083e0:	461a      	mov	r2, r3
 80083e2:	2300      	movs	r3, #0
 80083e4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083ec:	461a      	mov	r2, r3
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	431a      	orrs	r2, r3
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	01db      	lsls	r3, r3, #7
 8008400:	440b      	add	r3, r1
 8008402:	3384      	adds	r3, #132	; 0x84
 8008404:	4619      	mov	r1, r3
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	01db      	lsls	r3, r3, #7
 8008416:	4413      	add	r3, r2
 8008418:	3384      	adds	r3, #132	; 0x84
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	4611      	mov	r1, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	01d2      	lsls	r2, r2, #7
 8008426:	440a      	add	r2, r1
 8008428:	3284      	adds	r2, #132	; 0x84
 800842a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800842e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	01db      	lsls	r3, r3, #7
 800843a:	4413      	add	r3, r2
 800843c:	3384      	adds	r3, #132	; 0x84
 800843e:	461a      	mov	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	01db      	lsls	r3, r3, #7
 8008450:	4413      	add	r3, r2
 8008452:	3384      	adds	r3, #132	; 0x84
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4619      	mov	r1, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	01db      	lsls	r3, r3, #7
 8008460:	440b      	add	r3, r1
 8008462:	3384      	adds	r3, #132	; 0x84
 8008464:	4619      	mov	r1, r3
 8008466:	4b58      	ldr	r3, [pc, #352]	; (80085c8 <LTDC_SetConfig+0x32c>)
 8008468:	4013      	ands	r3, r2
 800846a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	68f9      	ldr	r1, [r7, #12]
 8008476:	6809      	ldr	r1, [r1, #0]
 8008478:	4608      	mov	r0, r1
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	01c9      	lsls	r1, r1, #7
 800847e:	4401      	add	r1, r0
 8008480:	3184      	adds	r1, #132	; 0x84
 8008482:	4313      	orrs	r3, r2
 8008484:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	01db      	lsls	r3, r3, #7
 8008490:	4413      	add	r3, r2
 8008492:	3384      	adds	r3, #132	; 0x84
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	01db      	lsls	r3, r3, #7
 80084a0:	4413      	add	r3, r2
 80084a2:	3384      	adds	r3, #132	; 0x84
 80084a4:	461a      	mov	r2, r3
 80084a6:	2300      	movs	r3, #0
 80084a8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	01db      	lsls	r3, r3, #7
 80084b4:	4413      	add	r3, r2
 80084b6:	3384      	adds	r3, #132	; 0x84
 80084b8:	461a      	mov	r2, r3
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80084c8:	2304      	movs	r3, #4
 80084ca:	61fb      	str	r3, [r7, #28]
 80084cc:	e01b      	b.n	8008506 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d102      	bne.n	80084dc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80084d6:	2303      	movs	r3, #3
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e014      	b.n	8008506 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d00b      	beq.n	80084fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d007      	beq.n	80084fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d003      	beq.n	80084fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084f8:	2b07      	cmp	r3, #7
 80084fa:	d102      	bne.n	8008502 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80084fc:	2302      	movs	r3, #2
 80084fe:	61fb      	str	r3, [r7, #28]
 8008500:	e001      	b.n	8008506 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008502:	2301      	movs	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	01db      	lsls	r3, r3, #7
 8008510:	4413      	add	r3, r2
 8008512:	3384      	adds	r3, #132	; 0x84
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	4611      	mov	r1, r2
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	01d2      	lsls	r2, r2, #7
 8008520:	440a      	add	r2, r1
 8008522:	3284      	adds	r2, #132	; 0x84
 8008524:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008528:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6859      	ldr	r1, [r3, #4]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	1acb      	subs	r3, r1, r3
 8008540:	69f9      	ldr	r1, [r7, #28]
 8008542:	fb01 f303 	mul.w	r3, r1, r3
 8008546:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008548:	68f9      	ldr	r1, [r7, #12]
 800854a:	6809      	ldr	r1, [r1, #0]
 800854c:	4608      	mov	r0, r1
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	01c9      	lsls	r1, r1, #7
 8008552:	4401      	add	r1, r0
 8008554:	3184      	adds	r1, #132	; 0x84
 8008556:	4313      	orrs	r3, r2
 8008558:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	01db      	lsls	r3, r3, #7
 8008564:	4413      	add	r3, r2
 8008566:	3384      	adds	r3, #132	; 0x84
 8008568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	01db      	lsls	r3, r3, #7
 8008574:	440b      	add	r3, r1
 8008576:	3384      	adds	r3, #132	; 0x84
 8008578:	4619      	mov	r1, r3
 800857a:	4b14      	ldr	r3, [pc, #80]	; (80085cc <LTDC_SetConfig+0x330>)
 800857c:	4013      	ands	r3, r2
 800857e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	01db      	lsls	r3, r3, #7
 800858a:	4413      	add	r3, r2
 800858c:	3384      	adds	r3, #132	; 0x84
 800858e:	461a      	mov	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	01db      	lsls	r3, r3, #7
 80085a0:	4413      	add	r3, r2
 80085a2:	3384      	adds	r3, #132	; 0x84
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	4611      	mov	r1, r2
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	01d2      	lsls	r2, r2, #7
 80085b0:	440a      	add	r2, r1
 80085b2:	3284      	adds	r2, #132	; 0x84
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	6013      	str	r3, [r2, #0]
}
 80085ba:	bf00      	nop
 80085bc:	3724      	adds	r7, #36	; 0x24
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	fffff8f8 	.word	0xfffff8f8
 80085cc:	fffff800 	.word	0xfffff800

080085d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d4:	4b05      	ldr	r3, [pc, #20]	; (80085ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a04      	ldr	r2, [pc, #16]	; (80085ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085de:	6013      	str	r3, [r2, #0]
}
 80085e0:	bf00      	nop
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	40007000 	.word	0x40007000

080085f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <HAL_PWREx_EnableOverDrive+0x98>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	4a22      	ldr	r2, [pc, #136]	; (8008688 <HAL_PWREx_EnableOverDrive+0x98>)
 8008600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008604:	6413      	str	r3, [r2, #64]	; 0x40
 8008606:	4b20      	ldr	r3, [pc, #128]	; (8008688 <HAL_PWREx_EnableOverDrive+0x98>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008612:	4b1e      	ldr	r3, [pc, #120]	; (800868c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1d      	ldr	r2, [pc, #116]	; (800868c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800861c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800861e:	f7fc fc07 	bl	8004e30 <HAL_GetTick>
 8008622:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008624:	e009      	b.n	800863a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008626:	f7fc fc03 	bl	8004e30 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008634:	d901      	bls.n	800863a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e022      	b.n	8008680 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800863a:	4b14      	ldr	r3, [pc, #80]	; (800868c <HAL_PWREx_EnableOverDrive+0x9c>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008646:	d1ee      	bne.n	8008626 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008648:	4b10      	ldr	r3, [pc, #64]	; (800868c <HAL_PWREx_EnableOverDrive+0x9c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a0f      	ldr	r2, [pc, #60]	; (800868c <HAL_PWREx_EnableOverDrive+0x9c>)
 800864e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008652:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008654:	f7fc fbec 	bl	8004e30 <HAL_GetTick>
 8008658:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800865a:	e009      	b.n	8008670 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800865c:	f7fc fbe8 	bl	8004e30 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866a:	d901      	bls.n	8008670 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e007      	b.n	8008680 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867c:	d1ee      	bne.n	800865c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40023800 	.word	0x40023800
 800868c:	40007000 	.word	0x40007000

08008690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e291      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 8087 	beq.w	80087c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086b4:	4b96      	ldr	r3, [pc, #600]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f003 030c 	and.w	r3, r3, #12
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d00c      	beq.n	80086da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086c0:	4b93      	ldr	r3, [pc, #588]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 030c 	and.w	r3, r3, #12
 80086c8:	2b08      	cmp	r3, #8
 80086ca:	d112      	bne.n	80086f2 <HAL_RCC_OscConfig+0x62>
 80086cc:	4b90      	ldr	r3, [pc, #576]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d8:	d10b      	bne.n	80086f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086da:	4b8d      	ldr	r3, [pc, #564]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d06c      	beq.n	80087c0 <HAL_RCC_OscConfig+0x130>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d168      	bne.n	80087c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e26b      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fa:	d106      	bne.n	800870a <HAL_RCC_OscConfig+0x7a>
 80086fc:	4b84      	ldr	r3, [pc, #528]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a83      	ldr	r2, [pc, #524]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	e02e      	b.n	8008768 <HAL_RCC_OscConfig+0xd8>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10c      	bne.n	800872c <HAL_RCC_OscConfig+0x9c>
 8008712:	4b7f      	ldr	r3, [pc, #508]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a7e      	ldr	r2, [pc, #504]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	4b7c      	ldr	r3, [pc, #496]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a7b      	ldr	r2, [pc, #492]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	e01d      	b.n	8008768 <HAL_RCC_OscConfig+0xd8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008734:	d10c      	bne.n	8008750 <HAL_RCC_OscConfig+0xc0>
 8008736:	4b76      	ldr	r3, [pc, #472]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a75      	ldr	r2, [pc, #468]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800873c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	4b73      	ldr	r3, [pc, #460]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a72      	ldr	r2, [pc, #456]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	e00b      	b.n	8008768 <HAL_RCC_OscConfig+0xd8>
 8008750:	4b6f      	ldr	r3, [pc, #444]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a6e      	ldr	r2, [pc, #440]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	4b6c      	ldr	r3, [pc, #432]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a6b      	ldr	r2, [pc, #428]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d013      	beq.n	8008798 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008770:	f7fc fb5e 	bl	8004e30 <HAL_GetTick>
 8008774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008776:	e008      	b.n	800878a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008778:	f7fc fb5a 	bl	8004e30 <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b64      	cmp	r3, #100	; 0x64
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e21f      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800878a:	4b61      	ldr	r3, [pc, #388]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0f0      	beq.n	8008778 <HAL_RCC_OscConfig+0xe8>
 8008796:	e014      	b.n	80087c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7fc fb4a 	bl	8004e30 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a0:	f7fc fb46 	bl	8004e30 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b64      	cmp	r3, #100	; 0x64
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e20b      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087b2:	4b57      	ldr	r3, [pc, #348]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x110>
 80087be:	e000      	b.n	80087c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d069      	beq.n	80088a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087ce:	4b50      	ldr	r3, [pc, #320]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 030c 	and.w	r3, r3, #12
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087da:	4b4d      	ldr	r3, [pc, #308]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 030c 	and.w	r3, r3, #12
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d11c      	bne.n	8008820 <HAL_RCC_OscConfig+0x190>
 80087e6:	4b4a      	ldr	r3, [pc, #296]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d116      	bne.n	8008820 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087f2:	4b47      	ldr	r3, [pc, #284]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_RCC_OscConfig+0x17a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d001      	beq.n	800880a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e1df      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800880a:	4b41      	ldr	r3, [pc, #260]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	493d      	ldr	r1, [pc, #244]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800881a:	4313      	orrs	r3, r2
 800881c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881e:	e040      	b.n	80088a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d023      	beq.n	8008870 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008828:	4b39      	ldr	r3, [pc, #228]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a38      	ldr	r2, [pc, #224]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fc fafc 	bl	8004e30 <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800883c:	f7fc faf8 	bl	8004e30 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e1bd      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800884e:	4b30      	ldr	r3, [pc, #192]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0f0      	beq.n	800883c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800885a:	4b2d      	ldr	r3, [pc, #180]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4929      	ldr	r1, [pc, #164]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 800886a:	4313      	orrs	r3, r2
 800886c:	600b      	str	r3, [r1, #0]
 800886e:	e018      	b.n	80088a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008870:	4b27      	ldr	r3, [pc, #156]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a26      	ldr	r2, [pc, #152]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008876:	f023 0301 	bic.w	r3, r3, #1
 800887a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7fc fad8 	bl	8004e30 <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008884:	f7fc fad4 	bl	8004e30 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e199      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008896:	4b1e      	ldr	r3, [pc, #120]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f0      	bne.n	8008884 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d038      	beq.n	8008920 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d019      	beq.n	80088ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088b6:	4b16      	ldr	r3, [pc, #88]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80088b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ba:	4a15      	ldr	r2, [pc, #84]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80088bc:	f043 0301 	orr.w	r3, r3, #1
 80088c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c2:	f7fc fab5 	bl	8004e30 <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088ca:	f7fc fab1 	bl	8004e30 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e176      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088dc:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80088de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f0      	beq.n	80088ca <HAL_RCC_OscConfig+0x23a>
 80088e8:	e01a      	b.n	8008920 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80088ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ee:	4a08      	ldr	r2, [pc, #32]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f6:	f7fc fa9b 	bl	8004e30 <HAL_GetTick>
 80088fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088fc:	e00a      	b.n	8008914 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088fe:	f7fc fa97 	bl	8004e30 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d903      	bls.n	8008914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e15c      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
 8008910:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008914:	4b91      	ldr	r3, [pc, #580]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1ee      	bne.n	80088fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80a4 	beq.w	8008a76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800892e:	4b8b      	ldr	r3, [pc, #556]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10d      	bne.n	8008956 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800893a:	4b88      	ldr	r3, [pc, #544]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	4a87      	ldr	r2, [pc, #540]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008944:	6413      	str	r3, [r2, #64]	; 0x40
 8008946:	4b85      	ldr	r3, [pc, #532]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800894e:	60bb      	str	r3, [r7, #8]
 8008950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008956:	4b82      	ldr	r3, [pc, #520]	; (8008b60 <HAL_RCC_OscConfig+0x4d0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895e:	2b00      	cmp	r3, #0
 8008960:	d118      	bne.n	8008994 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008962:	4b7f      	ldr	r3, [pc, #508]	; (8008b60 <HAL_RCC_OscConfig+0x4d0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a7e      	ldr	r2, [pc, #504]	; (8008b60 <HAL_RCC_OscConfig+0x4d0>)
 8008968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800896c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800896e:	f7fc fa5f 	bl	8004e30 <HAL_GetTick>
 8008972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008976:	f7fc fa5b 	bl	8004e30 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b64      	cmp	r3, #100	; 0x64
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e120      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008988:	4b75      	ldr	r3, [pc, #468]	; (8008b60 <HAL_RCC_OscConfig+0x4d0>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d106      	bne.n	80089aa <HAL_RCC_OscConfig+0x31a>
 800899c:	4b6f      	ldr	r3, [pc, #444]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 800899e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a0:	4a6e      	ldr	r2, [pc, #440]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	6713      	str	r3, [r2, #112]	; 0x70
 80089a8:	e02d      	b.n	8008a06 <HAL_RCC_OscConfig+0x376>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10c      	bne.n	80089cc <HAL_RCC_OscConfig+0x33c>
 80089b2:	4b6a      	ldr	r3, [pc, #424]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b6:	4a69      	ldr	r2, [pc, #420]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	6713      	str	r3, [r2, #112]	; 0x70
 80089be:	4b67      	ldr	r3, [pc, #412]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	4a66      	ldr	r2, [pc, #408]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089c4:	f023 0304 	bic.w	r3, r3, #4
 80089c8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ca:	e01c      	b.n	8008a06 <HAL_RCC_OscConfig+0x376>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	2b05      	cmp	r3, #5
 80089d2:	d10c      	bne.n	80089ee <HAL_RCC_OscConfig+0x35e>
 80089d4:	4b61      	ldr	r3, [pc, #388]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d8:	4a60      	ldr	r2, [pc, #384]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089da:	f043 0304 	orr.w	r3, r3, #4
 80089de:	6713      	str	r3, [r2, #112]	; 0x70
 80089e0:	4b5e      	ldr	r3, [pc, #376]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e4:	4a5d      	ldr	r2, [pc, #372]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	6713      	str	r3, [r2, #112]	; 0x70
 80089ec:	e00b      	b.n	8008a06 <HAL_RCC_OscConfig+0x376>
 80089ee:	4b5b      	ldr	r3, [pc, #364]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	4a5a      	ldr	r2, [pc, #360]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089f4:	f023 0301 	bic.w	r3, r3, #1
 80089f8:	6713      	str	r3, [r2, #112]	; 0x70
 80089fa:	4b58      	ldr	r3, [pc, #352]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 80089fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fe:	4a57      	ldr	r2, [pc, #348]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a00:	f023 0304 	bic.w	r3, r3, #4
 8008a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d015      	beq.n	8008a3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0e:	f7fc fa0f 	bl	8004e30 <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a14:	e00a      	b.n	8008a2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a16:	f7fc fa0b 	bl	8004e30 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d901      	bls.n	8008a2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e0ce      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2c:	4b4b      	ldr	r3, [pc, #300]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0ee      	beq.n	8008a16 <HAL_RCC_OscConfig+0x386>
 8008a38:	e014      	b.n	8008a64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3a:	f7fc f9f9 	bl	8004e30 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a40:	e00a      	b.n	8008a58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7fc f9f5 	bl	8004e30 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e0b8      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a58:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1ee      	bne.n	8008a42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d105      	bne.n	8008a76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a6a:	4b3c      	ldr	r3, [pc, #240]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	4a3b      	ldr	r2, [pc, #236]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80a4 	beq.w	8008bc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 030c 	and.w	r3, r3, #12
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d06b      	beq.n	8008b64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d149      	bne.n	8008b28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a94:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a30      	ldr	r2, [pc, #192]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7fc f9c6 	bl	8004e30 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa8:	f7fc f9c2 	bl	8004e30 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e087      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aba:	4b28      	ldr	r3, [pc, #160]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f0      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	019b      	lsls	r3, r3, #6
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	085b      	lsrs	r3, r3, #1
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	041b      	lsls	r3, r3, #16
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	061b      	lsls	r3, r3, #24
 8008aea:	4313      	orrs	r3, r2
 8008aec:	4a1b      	ldr	r2, [pc, #108]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008aee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008af2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008af4:	4b19      	ldr	r3, [pc, #100]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b00:	f7fc f996 	bl	8004e30 <HAL_GetTick>
 8008b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b06:	e008      	b.n	8008b1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b08:	f7fc f992 	bl	8004e30 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e057      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b1a:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0f0      	beq.n	8008b08 <HAL_RCC_OscConfig+0x478>
 8008b26:	e04f      	b.n	8008bc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b28:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a0b      	ldr	r2, [pc, #44]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b34:	f7fc f97c 	bl	8004e30 <HAL_GetTick>
 8008b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b3a:	e008      	b.n	8008b4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b3c:	f7fc f978 	bl	8004e30 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d901      	bls.n	8008b4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e03d      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b4e:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <HAL_RCC_OscConfig+0x4cc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f0      	bne.n	8008b3c <HAL_RCC_OscConfig+0x4ac>
 8008b5a:	e035      	b.n	8008bc8 <HAL_RCC_OscConfig+0x538>
 8008b5c:	40023800 	.word	0x40023800
 8008b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008b64:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <HAL_RCC_OscConfig+0x544>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d028      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d121      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d11a      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b94:	4013      	ands	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d111      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	085b      	lsrs	r3, r3, #1
 8008bac:	3b01      	subs	r3, #1
 8008bae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d107      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d001      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40023800 	.word	0x40023800

08008bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0d0      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bf0:	4b6a      	ldr	r3, [pc, #424]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d910      	bls.n	8008c20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bfe:	4b67      	ldr	r3, [pc, #412]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f023 020f 	bic.w	r2, r3, #15
 8008c06:	4965      	ldr	r1, [pc, #404]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0e:	4b63      	ldr	r3, [pc, #396]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d001      	beq.n	8008c20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e0b8      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d020      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c38:	4b59      	ldr	r3, [pc, #356]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	4a58      	ldr	r2, [pc, #352]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c50:	4b53      	ldr	r3, [pc, #332]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	4a52      	ldr	r2, [pc, #328]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c5c:	4b50      	ldr	r3, [pc, #320]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	494d      	ldr	r1, [pc, #308]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d040      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d107      	bne.n	8008c92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c82:	4b47      	ldr	r3, [pc, #284]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d115      	bne.n	8008cba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e07f      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d107      	bne.n	8008caa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c9a:	4b41      	ldr	r3, [pc, #260]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d109      	bne.n	8008cba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e073      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008caa:	4b3d      	ldr	r3, [pc, #244]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e06b      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cba:	4b39      	ldr	r3, [pc, #228]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f023 0203 	bic.w	r2, r3, #3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	4936      	ldr	r1, [pc, #216]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ccc:	f7fc f8b0 	bl	8004e30 <HAL_GetTick>
 8008cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cd2:	e00a      	b.n	8008cea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cd4:	f7fc f8ac 	bl	8004e30 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e053      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cea:	4b2d      	ldr	r3, [pc, #180]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 020c 	and.w	r2, r3, #12
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d1eb      	bne.n	8008cd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cfc:	4b27      	ldr	r3, [pc, #156]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d210      	bcs.n	8008d2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d0a:	4b24      	ldr	r3, [pc, #144]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f023 020f 	bic.w	r2, r3, #15
 8008d12:	4922      	ldr	r1, [pc, #136]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d1a:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d001      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e032      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d38:	4b19      	ldr	r3, [pc, #100]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	4916      	ldr	r1, [pc, #88]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	490e      	ldr	r1, [pc, #56]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d6a:	f000 f821 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	091b      	lsrs	r3, r3, #4
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	490a      	ldr	r1, [pc, #40]	; (8008da4 <HAL_RCC_ClockConfig+0x1cc>)
 8008d7c:	5ccb      	ldrb	r3, [r1, r3]
 8008d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d82:	4a09      	ldr	r2, [pc, #36]	; (8008da8 <HAL_RCC_ClockConfig+0x1d0>)
 8008d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <HAL_RCC_ClockConfig+0x1d4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fb fa10 	bl	80041b0 <HAL_InitTick>

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40023c00 	.word	0x40023c00
 8008da0:	40023800 	.word	0x40023800
 8008da4:	08081c2c 	.word	0x08081c2c
 8008da8:	20000058 	.word	0x20000058
 8008dac:	2000005c 	.word	0x2000005c

08008db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008db4:	b090      	sub	sp, #64	; 0x40
 8008db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dc8:	4b59      	ldr	r3, [pc, #356]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f003 030c 	and.w	r3, r3, #12
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d00d      	beq.n	8008df0 <HAL_RCC_GetSysClockFreq+0x40>
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	f200 80a1 	bhi.w	8008f1c <HAL_RCC_GetSysClockFreq+0x16c>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <HAL_RCC_GetSysClockFreq+0x34>
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d003      	beq.n	8008dea <HAL_RCC_GetSysClockFreq+0x3a>
 8008de2:	e09b      	b.n	8008f1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008de4:	4b53      	ldr	r3, [pc, #332]	; (8008f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008de8:	e09b      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dea:	4b53      	ldr	r3, [pc, #332]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008dee:	e098      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008df0:	4b4f      	ldr	r3, [pc, #316]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008df8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008dfa:	4b4d      	ldr	r3, [pc, #308]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d028      	beq.n	8008e58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e06:	4b4a      	ldr	r3, [pc, #296]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	099b      	lsrs	r3, r3, #6
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	623b      	str	r3, [r7, #32]
 8008e10:	627a      	str	r2, [r7, #36]	; 0x24
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4b47      	ldr	r3, [pc, #284]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e1c:	fb03 f201 	mul.w	r2, r3, r1
 8008e20:	2300      	movs	r3, #0
 8008e22:	fb00 f303 	mul.w	r3, r0, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	4a43      	ldr	r2, [pc, #268]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8008e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e30:	460a      	mov	r2, r1
 8008e32:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e36:	4413      	add	r3, r2
 8008e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	61fa      	str	r2, [r7, #28]
 8008e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008e4a:	f7f7 fa31 	bl	80002b0 <__aeabi_uldivmod>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4613      	mov	r3, r2
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e56:	e053      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e58:	4b35      	ldr	r3, [pc, #212]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	099b      	lsrs	r3, r3, #6
 8008e5e:	2200      	movs	r2, #0
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	617a      	str	r2, [r7, #20]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e6a:	f04f 0b00 	mov.w	fp, #0
 8008e6e:	4652      	mov	r2, sl
 8008e70:	465b      	mov	r3, fp
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f04f 0100 	mov.w	r1, #0
 8008e7a:	0159      	lsls	r1, r3, #5
 8008e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e80:	0150      	lsls	r0, r2, #5
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	ebb2 080a 	subs.w	r8, r2, sl
 8008e8a:	eb63 090b 	sbc.w	r9, r3, fp
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008ea2:	ebb2 0408 	subs.w	r4, r2, r8
 8008ea6:	eb63 0509 	sbc.w	r5, r3, r9
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	00eb      	lsls	r3, r5, #3
 8008eb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eb8:	00e2      	lsls	r2, r4, #3
 8008eba:	4614      	mov	r4, r2
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	eb14 030a 	adds.w	r3, r4, sl
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	eb45 030b 	adc.w	r3, r5, fp
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	028b      	lsls	r3, r1, #10
 8008eda:	4621      	mov	r1, r4
 8008edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	028a      	lsls	r2, r1, #10
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eea:	2200      	movs	r2, #0
 8008eec:	60bb      	str	r3, [r7, #8]
 8008eee:	60fa      	str	r2, [r7, #12]
 8008ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ef4:	f7f7 f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4613      	mov	r3, r2
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	0c1b      	lsrs	r3, r3, #16
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f1a:	e002      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f1c:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3740      	adds	r7, #64	; 0x40
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f2e:	bf00      	nop
 8008f30:	40023800 	.word	0x40023800
 8008f34:	00f42400 	.word	0x00f42400
 8008f38:	017d7840 	.word	0x017d7840

08008f3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f40:	4b03      	ldr	r3, [pc, #12]	; (8008f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f42:	681b      	ldr	r3, [r3, #0]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000058 	.word	0x20000058

08008f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f58:	f7ff fff0 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	0a9b      	lsrs	r3, r3, #10
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	4903      	ldr	r1, [pc, #12]	; (8008f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f6a:	5ccb      	ldrb	r3, [r1, r3]
 8008f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40023800 	.word	0x40023800
 8008f78:	08081c3c 	.word	0x08081c3c

08008f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f80:	f7ff ffdc 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	0b5b      	lsrs	r3, r3, #13
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	4903      	ldr	r1, [pc, #12]	; (8008fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	40023800 	.word	0x40023800
 8008fa0:	08081c3c 	.word	0x08081c3c

08008fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	220f      	movs	r2, #15
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008fb4:	4b12      	ldr	r3, [pc, #72]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0203 	and.w	r2, r3, #3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008fc0:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	08db      	lsrs	r3, r3, #3
 8008fde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008fe6:	4b07      	ldr	r3, [pc, #28]	; (8009004 <HAL_RCC_GetClockConfig+0x60>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 020f 	and.w	r2, r3, #15
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	601a      	str	r2, [r3, #0]
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	40023800 	.word	0x40023800
 8009004:	40023c00 	.word	0x40023c00

08009008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d012      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009030:	4b69      	ldr	r3, [pc, #420]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	4a68      	ldr	r2, [pc, #416]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009036:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800903a:	6093      	str	r3, [r2, #8]
 800903c:	4b66      	ldr	r3, [pc, #408]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009044:	4964      	ldr	r1, [pc, #400]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009046:	4313      	orrs	r3, r2
 8009048:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d017      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009062:	4b5d      	ldr	r3, [pc, #372]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009070:	4959      	ldr	r1, [pc, #356]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009072:	4313      	orrs	r3, r2
 8009074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009080:	d101      	bne.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009082:	2301      	movs	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800908e:	2301      	movs	r3, #1
 8009090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d017      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800909e:	4b4e      	ldr	r3, [pc, #312]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	494a      	ldr	r1, [pc, #296]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090bc:	d101      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80090be:	2301      	movs	r3, #1
 80090c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80090ca:	2301      	movs	r3, #1
 80090cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 808b 	beq.w	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090ec:	4b3a      	ldr	r3, [pc, #232]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	4a39      	ldr	r2, [pc, #228]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090f6:	6413      	str	r3, [r2, #64]	; 0x40
 80090f8:	4b37      	ldr	r3, [pc, #220]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009100:	60bb      	str	r3, [r7, #8]
 8009102:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009104:	4b35      	ldr	r3, [pc, #212]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a34      	ldr	r2, [pc, #208]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800910a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800910e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009110:	f7fb fe8e 	bl	8004e30 <HAL_GetTick>
 8009114:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009116:	e008      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009118:	f7fb fe8a 	bl	8004e30 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b64      	cmp	r3, #100	; 0x64
 8009124:	d901      	bls.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e357      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800912a:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0f0      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009136:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d035      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	429a      	cmp	r2, r3
 8009152:	d02e      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009154:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800915c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800915e:	4b1e      	ldr	r3, [pc, #120]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009162:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009168:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800916a:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	4a1a      	ldr	r2, [pc, #104]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009176:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800917c:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800917e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b01      	cmp	r3, #1
 8009186:	d114      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7fb fe52 	bl	8004e30 <HAL_GetTick>
 800918c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800918e:	e00a      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009190:	f7fb fe4e 	bl	8004e30 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	f241 3288 	movw	r2, #5000	; 0x1388
 800919e:	4293      	cmp	r3, r2
 80091a0:	d901      	bls.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e319      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0ee      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091be:	d111      	bne.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80091ce:	400b      	ands	r3, r1
 80091d0:	4901      	ldr	r1, [pc, #4]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	608b      	str	r3, [r1, #8]
 80091d6:	e00b      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80091d8:	40023800 	.word	0x40023800
 80091dc:	40007000 	.word	0x40007000
 80091e0:	0ffffcff 	.word	0x0ffffcff
 80091e4:	4baa      	ldr	r3, [pc, #680]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	4aa9      	ldr	r2, [pc, #676]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091ee:	6093      	str	r3, [r2, #8]
 80091f0:	4ba7      	ldr	r3, [pc, #668]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091fc:	49a4      	ldr	r1, [pc, #656]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b00      	cmp	r3, #0
 800920c:	d010      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800920e:	4ba0      	ldr	r3, [pc, #640]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009214:	4a9e      	ldr	r2, [pc, #632]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800921a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800921e:	4b9c      	ldr	r3, [pc, #624]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009220:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	4999      	ldr	r1, [pc, #612]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800923c:	4b94      	ldr	r3, [pc, #592]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800923e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800924a:	4991      	ldr	r1, [pc, #580]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800924c:	4313      	orrs	r3, r2
 800924e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800925e:	4b8c      	ldr	r3, [pc, #560]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926c:	4988      	ldr	r1, [pc, #544]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009280:	4b83      	ldr	r3, [pc, #524]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928e:	4980      	ldr	r1, [pc, #512]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009290:	4313      	orrs	r3, r2
 8009292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092a2:	4b7b      	ldr	r3, [pc, #492]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b0:	4977      	ldr	r1, [pc, #476]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092c4:	4b72      	ldr	r3, [pc, #456]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ca:	f023 0203 	bic.w	r2, r3, #3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d2:	496f      	ldr	r1, [pc, #444]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80092e6:	4b6a      	ldr	r3, [pc, #424]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ec:	f023 020c 	bic.w	r2, r3, #12
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f4:	4966      	ldr	r1, [pc, #408]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009308:	4b61      	ldr	r3, [pc, #388]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009316:	495e      	ldr	r1, [pc, #376]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800932a:	4b59      	ldr	r3, [pc, #356]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009338:	4955      	ldr	r1, [pc, #340]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800934c:	4b50      	ldr	r3, [pc, #320]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935a:	494d      	ldr	r1, [pc, #308]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800936e:	4b48      	ldr	r3, [pc, #288]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009374:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800937c:	4944      	ldr	r1, [pc, #272]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009390:	4b3f      	ldr	r3, [pc, #252]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009396:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939e:	493c      	ldr	r1, [pc, #240]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80093b2:	4b37      	ldr	r3, [pc, #220]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c0:	4933      	ldr	r1, [pc, #204]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093d4:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e2:	492b      	ldr	r1, [pc, #172]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d011      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80093f6:	4b26      	ldr	r3, [pc, #152]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009404:	4922      	ldr	r1, [pc, #136]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009414:	d101      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009416:	2301      	movs	r3, #1
 8009418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0308 	and.w	r3, r3, #8
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009426:	2301      	movs	r3, #1
 8009428:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009436:	4b16      	ldr	r3, [pc, #88]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009444:	4912      	ldr	r1, [pc, #72]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009446:	4313      	orrs	r3, r2
 8009448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009458:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009468:	4909      	ldr	r1, [pc, #36]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d006      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80d9 	beq.w	8009636 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a01      	ldr	r2, [pc, #4]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800948a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800948e:	e001      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009490:	40023800 	.word	0x40023800
 8009494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009496:	f7fb fccb 	bl	8004e30 <HAL_GetTick>
 800949a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800949c:	e008      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800949e:	f7fb fcc7 	bl	8004e30 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b64      	cmp	r3, #100	; 0x64
 80094aa:	d901      	bls.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e194      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094b0:	4b6c      	ldr	r3, [pc, #432]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1f0      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d021      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11d      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80094d0:	4b64      	ldr	r3, [pc, #400]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80094de:	4b61      	ldr	r3, [pc, #388]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e4:	0e1b      	lsrs	r3, r3, #24
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	019a      	lsls	r2, r3, #6
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	041b      	lsls	r3, r3, #16
 80094f6:	431a      	orrs	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	061b      	lsls	r3, r3, #24
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	071b      	lsls	r3, r3, #28
 8009504:	4957      	ldr	r1, [pc, #348]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009520:	d00a      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800952a:	2b00      	cmp	r3, #0
 800952c:	d02e      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009536:	d129      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009538:	4b4a      	ldr	r3, [pc, #296]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800953a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009546:	4b47      	ldr	r3, [pc, #284]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800954c:	0f1b      	lsrs	r3, r3, #28
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	019a      	lsls	r2, r3, #6
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	041b      	lsls	r3, r3, #16
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	061b      	lsls	r3, r3, #24
 8009566:	431a      	orrs	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	071b      	lsls	r3, r3, #28
 800956c:	493d      	ldr	r1, [pc, #244]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009574:	4b3b      	ldr	r3, [pc, #236]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957a:	f023 021f 	bic.w	r2, r3, #31
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	3b01      	subs	r3, #1
 8009584:	4937      	ldr	r1, [pc, #220]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009586:	4313      	orrs	r3, r2
 8009588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01d      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009598:	4b32      	ldr	r3, [pc, #200]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800959a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959e:	0e1b      	lsrs	r3, r3, #24
 80095a0:	f003 030f 	and.w	r3, r3, #15
 80095a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095a6:	4b2f      	ldr	r3, [pc, #188]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ac:	0f1b      	lsrs	r3, r3, #28
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	019a      	lsls	r2, r3, #6
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	041b      	lsls	r3, r3, #16
 80095c0:	431a      	orrs	r2, r3
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	061b      	lsls	r3, r3, #24
 80095c6:	431a      	orrs	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	071b      	lsls	r3, r3, #28
 80095cc:	4925      	ldr	r1, [pc, #148]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d011      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	019a      	lsls	r2, r3, #6
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	061b      	lsls	r3, r3, #24
 80095f4:	431a      	orrs	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	071b      	lsls	r3, r3, #28
 80095fc:	4919      	ldr	r1, [pc, #100]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009604:	4b17      	ldr	r3, [pc, #92]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800960a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800960e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009610:	f7fb fc0e 	bl	8004e30 <HAL_GetTick>
 8009614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009616:	e008      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009618:	f7fb fc0a 	bl	8004e30 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b64      	cmp	r3, #100	; 0x64
 8009624:	d901      	bls.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e0d7      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0f0      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b01      	cmp	r3, #1
 800963a:	f040 80cd 	bne.w	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a08      	ldr	r2, [pc, #32]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800964a:	f7fb fbf1 	bl	8004e30 <HAL_GetTick>
 800964e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009650:	e00a      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009652:	f7fb fbed 	bl	8004e30 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b64      	cmp	r3, #100	; 0x64
 800965e:	d903      	bls.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e0ba      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009664:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009668:	4b5e      	ldr	r3, [pc, #376]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009674:	d0ed      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009692:	2b00      	cmp	r3, #0
 8009694:	d02e      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d12a      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800969e:	4b51      	ldr	r3, [pc, #324]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a4:	0c1b      	lsrs	r3, r3, #16
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80096ac:	4b4d      	ldr	r3, [pc, #308]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b2:	0f1b      	lsrs	r3, r3, #28
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	019a      	lsls	r2, r3, #6
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	041b      	lsls	r3, r3, #16
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	061b      	lsls	r3, r3, #24
 80096cc:	431a      	orrs	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	071b      	lsls	r3, r3, #28
 80096d2:	4944      	ldr	r1, [pc, #272]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80096da:	4b42      	ldr	r3, [pc, #264]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e8:	3b01      	subs	r3, #1
 80096ea:	021b      	lsls	r3, r3, #8
 80096ec:	493d      	ldr	r1, [pc, #244]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d022      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009708:	d11d      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800970a:	4b36      	ldr	r3, [pc, #216]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800970c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009718:	4b32      	ldr	r3, [pc, #200]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800971a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971e:	0f1b      	lsrs	r3, r3, #28
 8009720:	f003 0307 	and.w	r3, r3, #7
 8009724:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	019a      	lsls	r2, r3, #6
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	041b      	lsls	r3, r3, #16
 8009732:	431a      	orrs	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	061b      	lsls	r3, r3, #24
 8009738:	431a      	orrs	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	071b      	lsls	r3, r3, #28
 800973e:	4929      	ldr	r1, [pc, #164]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009740:	4313      	orrs	r3, r2
 8009742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d028      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009752:	4b24      	ldr	r3, [pc, #144]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009758:	0e1b      	lsrs	r3, r3, #24
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009760:	4b20      	ldr	r3, [pc, #128]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	019a      	lsls	r2, r3, #6
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	431a      	orrs	r2, r3
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	071b      	lsls	r3, r3, #28
 8009786:	4917      	ldr	r1, [pc, #92]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009788:	4313      	orrs	r3, r2
 800978a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800978e:	4b15      	ldr	r3, [pc, #84]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	4911      	ldr	r1, [pc, #68]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80097a4:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a0e      	ldr	r2, [pc, #56]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b0:	f7fb fb3e 	bl	8004e30 <HAL_GetTick>
 80097b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097b6:	e008      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80097b8:	f7fb fb3a 	bl	8004e30 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b64      	cmp	r3, #100	; 0x64
 80097c4:	d901      	bls.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e007      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097ca:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d6:	d1ef      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	40023800 	.word	0x40023800

080097e8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e01c      	b.n	8009834 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	795b      	ldrb	r3, [r3, #5]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7f8 ffce 	bl	80027ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0204 	orr.w	r2, r2, #4
 8009824:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b20      	cmp	r3, #32
 8009854:	d105      	bne.n	8009862 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2210      	movs	r2, #16
 800985a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800985c:	2301      	movs	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	e00b      	b.n	800987a <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986c:	2b40      	cmp	r3, #64	; 0x40
 800986e:	d104      	bne.n	800987a <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2208      	movs	r2, #8
 8009874:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8009876:	2301      	movs	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d10b      	bne.n	8009898 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2204      	movs	r2, #4
 8009884:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f839 	bl	80098fe <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8009894:	605a      	str	r2, [r3, #4]

    return;
 8009896:	e024      	b.n	80098e2 <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d11d      	bne.n	80098e2 <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0208 	bic.w	r2, r2, #8
 80098b4:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	795b      	ldrb	r3, [r3, #5]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d00b      	beq.n	80098e2 <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f803 	bl	80098e8 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
	...

08009914 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e071      	b.n	8009a0e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7f5b      	ldrb	r3, [r3, #29]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d105      	bne.n	8009940 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7f9 f800 	bl	8002940 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b10      	cmp	r3, #16
 8009952:	d053      	beq.n	80099fc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	22ca      	movs	r2, #202	; 0xca
 800995a:	625a      	str	r2, [r3, #36]	; 0x24
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2253      	movs	r2, #83	; 0x53
 8009962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fac9 	bl	8009efc <RTC_EnterInitMode>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d12a      	bne.n	80099ca <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6899      	ldr	r1, [r3, #8]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b26      	ldr	r3, [pc, #152]	; (8009a18 <HAL_RTC_Init+0x104>)
 8009980:	400b      	ands	r3, r1
 8009982:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6899      	ldr	r1, [r3, #8]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	431a      	orrs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	68d2      	ldr	r2, [r2, #12]
 80099aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6919      	ldr	r1, [r3, #16]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	041a      	lsls	r2, r3, #16
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fad2 	bl	8009f6a <RTC_ExitInitMode>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d110      	bne.n	80099f2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0208 	bic.w	r2, r2, #8
 80099de:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	22ff      	movs	r2, #255	; 0xff
 80099f8:	625a      	str	r2, [r3, #36]	; 0x24
 80099fa:	e001      	b.n	8009a00 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d102      	bne.n	8009a0c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	ff8fffbf 	.word	0xff8fffbf

08009a1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	7f1b      	ldrb	r3, [r3, #28]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_RTC_SetTime+0x1c>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e085      	b.n	8009b44 <HAL_RTC_SetTime+0x128>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2202      	movs	r2, #2
 8009a42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d126      	bne.n	8009a98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 faa6 	bl	8009fb4 <RTC_ByteToBcd2>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fa9f 	bl	8009fb4 <RTC_ByteToBcd2>
 8009a76:	4603      	mov	r3, r0
 8009a78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009a7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	789b      	ldrb	r3, [r3, #2]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fa97 	bl	8009fb4 <RTC_ByteToBcd2>
 8009a86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	78db      	ldrb	r3, [r3, #3]
 8009a90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	e018      	b.n	8009aca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009ab8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009abe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	78db      	ldrb	r3, [r3, #3]
 8009ac4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	22ca      	movs	r2, #202	; 0xca
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2253      	movs	r2, #83	; 0x53
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 fa0e 	bl	8009efc <RTC_EnterInitMode>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009ae4:	7cfb      	ldrb	r3, [r7, #19]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d11e      	bne.n	8009b28 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	6979      	ldr	r1, [r7, #20]
 8009af0:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <HAL_RTC_SetTime+0x130>)
 8009af2:	400b      	ands	r3, r1
 8009af4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6899      	ldr	r1, [r3, #8]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	431a      	orrs	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fa23 	bl	8009f6a <RTC_ExitInitMode>
 8009b24:	4603      	mov	r3, r0
 8009b26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b28:	7cfb      	ldrb	r3, [r7, #19]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d102      	bne.n	8009b34 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2201      	movs	r2, #1
 8009b32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	22ff      	movs	r2, #255	; 0xff
 8009b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	771a      	strb	r2, [r3, #28]

  return status;
 8009b42:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd90      	pop	{r4, r7, pc}
 8009b4c:	007f7f7f 	.word	0x007f7f7f

08009b50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b50:	b590      	push	{r4, r7, lr}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	7f1b      	ldrb	r3, [r3, #28]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d101      	bne.n	8009b6c <HAL_RTC_SetDate+0x1c>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e06f      	b.n	8009c4c <HAL_RTC_SetDate+0xfc>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2202      	movs	r2, #2
 8009b76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10e      	bne.n	8009b9c <HAL_RTC_SetDate+0x4c>
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d008      	beq.n	8009b9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	f023 0310 	bic.w	r3, r3, #16
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	330a      	adds	r3, #10
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d11c      	bne.n	8009bdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	78db      	ldrb	r3, [r3, #3]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fa04 	bl	8009fb4 <RTC_ByteToBcd2>
 8009bac:	4603      	mov	r3, r0
 8009bae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f9fd 	bl	8009fb4 <RTC_ByteToBcd2>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009bbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	789b      	ldrb	r3, [r3, #2]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f9f5 	bl	8009fb4 <RTC_ByteToBcd2>
 8009bca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009bcc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	e00e      	b.n	8009bfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	78db      	ldrb	r3, [r3, #3]
 8009be0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	785b      	ldrb	r3, [r3, #1]
 8009be6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009be8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009bee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	22ca      	movs	r2, #202	; 0xca
 8009c00:	625a      	str	r2, [r3, #36]	; 0x24
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2253      	movs	r2, #83	; 0x53
 8009c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f976 	bl	8009efc <RTC_EnterInitMode>
 8009c10:	4603      	mov	r3, r0
 8009c12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009c14:	7cfb      	ldrb	r3, [r7, #19]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10a      	bne.n	8009c30 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <HAL_RTC_SetDate+0x104>)
 8009c22:	400b      	ands	r3, r1
 8009c24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f000 f99f 	bl	8009f6a <RTC_ExitInitMode>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009c30:	7cfb      	ldrb	r3, [r7, #19]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	22ff      	movs	r2, #255	; 0xff
 8009c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	771a      	strb	r2, [r3, #28]

  return status;
 8009c4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	371c      	adds	r7, #28
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd90      	pop	{r4, r7, pc}
 8009c54:	00ffff3f 	.word	0x00ffff3f

08009c58 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009c58:	b590      	push	{r4, r7, lr}
 8009c5a:	b089      	sub	sp, #36	; 0x24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	7f1b      	ldrb	r3, [r3, #28]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d101      	bne.n	8009c7c <HAL_RTC_SetAlarm+0x24>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e113      	b.n	8009ea4 <HAL_RTC_SetAlarm+0x24c>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2202      	movs	r2, #2
 8009c86:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d137      	bne.n	8009cfe <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f984 	bl	8009fb4 <RTC_ByteToBcd2>
 8009cac:	4603      	mov	r3, r0
 8009cae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 f97d 	bl	8009fb4 <RTC_ByteToBcd2>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009cbe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	789b      	ldrb	r3, [r3, #2]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 f975 	bl	8009fb4 <RTC_ByteToBcd2>
 8009cca:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009ccc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	78db      	ldrb	r3, [r3, #3]
 8009cd4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009cd6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f967 	bl	8009fb4 <RTC_ByteToBcd2>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009cea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009cf2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	61fb      	str	r3, [r7, #28]
 8009cfc:	e023      	b.n	8009d46 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009d1e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009d24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	78db      	ldrb	r3, [r3, #3]
 8009d2a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009d2c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d34:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009d36:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009d3c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009d42:	4313      	orrs	r3, r2
 8009d44:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	22ca      	movs	r2, #202	; 0xca
 8009d58:	625a      	str	r2, [r3, #36]	; 0x24
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2253      	movs	r2, #83	; 0x53
 8009d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d6a:	d148      	bne.n	8009dfe <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d7a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689a      	ldr	r2, [r3, #8]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d8a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009d9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d9e:	f7fb f847 	bl	8004e30 <HAL_GetTick>
 8009da2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009da4:	e013      	b.n	8009dce <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009da6:	f7fb f843 	bl	8004e30 <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db4:	d90b      	bls.n	8009dce <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	22ff      	movs	r2, #255	; 0xff
 8009dbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2203      	movs	r2, #3
 8009dc2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e06a      	b.n	8009ea4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0e4      	beq.n	8009da6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	e047      	b.n	8009e8e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e0c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e1c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009e2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e30:	f7fa fffe 	bl	8004e30 <HAL_GetTick>
 8009e34:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009e36:	e013      	b.n	8009e60 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e38:	f7fa fffa 	bl	8004e30 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e46:	d90b      	bls.n	8009e60 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2203      	movs	r2, #3
 8009e54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e021      	b.n	8009ea4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0e4      	beq.n	8009e38 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689a      	ldr	r2, [r3, #8]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3724      	adds	r7, #36	; 0x24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd90      	pop	{r4, r7, pc}

08009eac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ec6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ec8:	f7fa ffb2 	bl	8004e30 <HAL_GetTick>
 8009ecc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ece:	e009      	b.n	8009ee4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ed0:	f7fa ffae 	bl	8004e30 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ede:	d901      	bls.n	8009ee4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e007      	b.n	8009ef4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0ee      	beq.n	8009ed0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d122      	bne.n	8009f60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f2a:	f7fa ff81 	bl	8004e30 <HAL_GetTick>
 8009f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f30:	e00c      	b.n	8009f4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f32:	f7fa ff7d 	bl	8004e30 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f40:	d904      	bls.n	8009f4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2204      	movs	r2, #4
 8009f46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d102      	bne.n	8009f60 <RTC_EnterInitMode+0x64>
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d1e8      	bne.n	8009f32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 0320 	and.w	r3, r3, #32
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff89 	bl	8009eac <HAL_RTC_WaitForSynchro>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d004      	beq.n	8009faa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009fc2:	e005      	b.n	8009fd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	3b0a      	subs	r3, #10
 8009fce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	2b09      	cmp	r3, #9
 8009fd4:	d8f6      	bhi.n	8009fc4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	011b      	lsls	r3, r3, #4
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	b2db      	uxtb	r3, r3
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	7f1b      	ldrb	r3, [r3, #28]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d101      	bne.n	800a00c <HAL_RTCEx_SetTimeStamp+0x1c>
 800a008:	2302      	movs	r3, #2
 800a00a:	e050      	b.n	800a0ae <HAL_RTCEx_SetTimeStamp+0xbe>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2201      	movs	r2, #1
 800a010:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2202      	movs	r2, #2
 800a016:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0206 	bic.w	r2, r2, #6
 800a026:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	430a      	orrs	r2, r1
 800a036:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	4b1f      	ldr	r3, [pc, #124]	; (800a0bc <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a040:	4013      	ands	r3, r2
 800a042:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4313      	orrs	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	22ca      	movs	r2, #202	; 0xca
 800a052:	625a      	str	r2, [r3, #36]	; 0x24
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2253      	movs	r2, #83	; 0x53
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800a074:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800a086:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a096:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	22ff      	movs	r2, #255	; 0xff
 800a09e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	fffff7f7 	.word	0xfffff7f7

0800a0c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e025      	b.n	800a120 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7f6 fd33 	bl	8000b54 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f001 fdcd 	bl	800bca0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	461a      	mov	r2, r3
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	f001 fe21 	bl	800bd58 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a13a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d101      	bne.n	800a146 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a142:	2302      	movs	r3, #2
 800a144:	e021      	b.n	800a18a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d002      	beq.n	800a152 <HAL_SDRAM_SendCommand+0x2a>
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b05      	cmp	r3, #5
 800a150:	d118      	bne.n	800a184 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2202      	movs	r2, #2
 800a156:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	4618      	mov	r0, r3
 800a164:	f001 fe62 	bl	800be2c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d104      	bne.n	800a17a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2205      	movs	r2, #5
 800a174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a178:	e006      	b.n	800a188 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a182:	e001      	b.n	800a188 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d101      	bne.n	800a1ac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e016      	b.n	800a1da <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d10f      	bne.n	800a1d8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f001 fe54 	bl	800be74 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e000      	b.n	800a1da <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e049      	b.n	800a288 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7fa fb5d 	bl	80048c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2202      	movs	r2, #2
 800a212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f000 fc29 	bl	800aa78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d001      	beq.n	800a2a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e054      	b.n	800a352 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68da      	ldr	r2, [r3, #12]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0201 	orr.w	r2, r2, #1
 800a2be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a26      	ldr	r2, [pc, #152]	; (800a360 <HAL_TIM_Base_Start_IT+0xd0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d022      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d2:	d01d      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a22      	ldr	r2, [pc, #136]	; (800a364 <HAL_TIM_Base_Start_IT+0xd4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d018      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a21      	ldr	r2, [pc, #132]	; (800a368 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d013      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a1f      	ldr	r2, [pc, #124]	; (800a36c <HAL_TIM_Base_Start_IT+0xdc>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d00e      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a1e      	ldr	r2, [pc, #120]	; (800a370 <HAL_TIM_Base_Start_IT+0xe0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d009      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a1c      	ldr	r2, [pc, #112]	; (800a374 <HAL_TIM_Base_Start_IT+0xe4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d004      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x80>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a1b      	ldr	r2, [pc, #108]	; (800a378 <HAL_TIM_Base_Start_IT+0xe8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d115      	bne.n	800a33c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	4b19      	ldr	r3, [pc, #100]	; (800a37c <HAL_TIM_Base_Start_IT+0xec>)
 800a318:	4013      	ands	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b06      	cmp	r3, #6
 800a320:	d015      	beq.n	800a34e <HAL_TIM_Base_Start_IT+0xbe>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a328:	d011      	beq.n	800a34e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0201 	orr.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a33a:	e008      	b.n	800a34e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0201 	orr.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	e000      	b.n	800a350 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a34e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	40010000 	.word	0x40010000
 800a364:	40000400 	.word	0x40000400
 800a368:	40000800 	.word	0x40000800
 800a36c:	40000c00 	.word	0x40000c00
 800a370:	40010400 	.word	0x40010400
 800a374:	40014000 	.word	0x40014000
 800a378:	40001800 	.word	0x40001800
 800a37c:	00010007 	.word	0x00010007

0800a380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e049      	b.n	800a426 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d106      	bne.n	800a3ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7fa fafc 	bl	80049a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f000 fb5a 	bl	800aa78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b082      	sub	sp, #8
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b02      	cmp	r3, #2
 800a442:	d122      	bne.n	800a48a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d11b      	bne.n	800a48a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f06f 0202 	mvn.w	r2, #2
 800a45a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fae3 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a476:	e005      	b.n	800a484 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fad5 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fae6 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b04      	cmp	r3, #4
 800a496:	d122      	bne.n	800a4de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f003 0304 	and.w	r3, r3, #4
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d11b      	bne.n	800a4de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f06f 0204 	mvn.w	r2, #4
 800a4ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fab9 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a4ca:	e005      	b.n	800a4d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 faab 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fabc 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f003 0308 	and.w	r3, r3, #8
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d122      	bne.n	800a532 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b08      	cmp	r3, #8
 800a4f8:	d11b      	bne.n	800a532 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f06f 0208 	mvn.w	r2, #8
 800a502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2204      	movs	r2, #4
 800a508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fa8f 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a51e:	e005      	b.n	800a52c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fa81 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa92 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 0310 	and.w	r3, r3, #16
 800a53c:	2b10      	cmp	r3, #16
 800a53e:	d122      	bne.n	800a586 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	f003 0310 	and.w	r3, r3, #16
 800a54a:	2b10      	cmp	r3, #16
 800a54c:	d11b      	bne.n	800a586 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f06f 0210 	mvn.w	r2, #16
 800a556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2208      	movs	r2, #8
 800a55c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fa65 	bl	800aa3c <HAL_TIM_IC_CaptureCallback>
 800a572:	e005      	b.n	800a580 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fa57 	bl	800aa28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa68 	bl	800aa50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b01      	cmp	r3, #1
 800a592:	d10e      	bne.n	800a5b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d107      	bne.n	800a5b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f06f 0201 	mvn.w	r2, #1
 800a5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7f8 f8d1 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5bc:	2b80      	cmp	r3, #128	; 0x80
 800a5be:	d10e      	bne.n	800a5de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ca:	2b80      	cmp	r3, #128	; 0x80
 800a5cc:	d107      	bne.n	800a5de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fefb 	bl	800b3d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ec:	d10e      	bne.n	800a60c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f8:	2b80      	cmp	r3, #128	; 0x80
 800a5fa:	d107      	bne.n	800a60c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 feee 	bl	800b3e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a616:	2b40      	cmp	r3, #64	; 0x40
 800a618:	d10e      	bne.n	800a638 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	d107      	bne.n	800a638 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa16 	bl	800aa64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	f003 0320 	and.w	r3, r3, #32
 800a642:	2b20      	cmp	r3, #32
 800a644:	d10e      	bne.n	800a664 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b20      	cmp	r3, #32
 800a652:	d107      	bne.n	800a664 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f06f 0220 	mvn.w	r2, #32
 800a65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 feae 	bl	800b3c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a686:	2302      	movs	r3, #2
 800a688:	e0ff      	b.n	800a88a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b14      	cmp	r3, #20
 800a696:	f200 80f0 	bhi.w	800a87a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a87b 	.word	0x0800a87b
 800a6a8:	0800a87b 	.word	0x0800a87b
 800a6ac:	0800a87b 	.word	0x0800a87b
 800a6b0:	0800a735 	.word	0x0800a735
 800a6b4:	0800a87b 	.word	0x0800a87b
 800a6b8:	0800a87b 	.word	0x0800a87b
 800a6bc:	0800a87b 	.word	0x0800a87b
 800a6c0:	0800a777 	.word	0x0800a777
 800a6c4:	0800a87b 	.word	0x0800a87b
 800a6c8:	0800a87b 	.word	0x0800a87b
 800a6cc:	0800a87b 	.word	0x0800a87b
 800a6d0:	0800a7b7 	.word	0x0800a7b7
 800a6d4:	0800a87b 	.word	0x0800a87b
 800a6d8:	0800a87b 	.word	0x0800a87b
 800a6dc:	0800a87b 	.word	0x0800a87b
 800a6e0:	0800a7f9 	.word	0x0800a7f9
 800a6e4:	0800a87b 	.word	0x0800a87b
 800a6e8:	0800a87b 	.word	0x0800a87b
 800a6ec:	0800a87b 	.word	0x0800a87b
 800a6f0:	0800a839 	.word	0x0800a839
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fa5c 	bl	800abb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699a      	ldr	r2, [r3, #24]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0208 	orr.w	r2, r2, #8
 800a70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699a      	ldr	r2, [r3, #24]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0204 	bic.w	r2, r2, #4
 800a71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6999      	ldr	r1, [r3, #24]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	619a      	str	r2, [r3, #24]
      break;
 800a732:	e0a5      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68b9      	ldr	r1, [r7, #8]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 faae 	bl	800ac9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6999      	ldr	r1, [r3, #24]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	021a      	lsls	r2, r3, #8
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	619a      	str	r2, [r3, #24]
      break;
 800a774:	e084      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68b9      	ldr	r1, [r7, #8]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fb05 	bl	800ad8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69da      	ldr	r2, [r3, #28]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0208 	orr.w	r2, r2, #8
 800a790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69da      	ldr	r2, [r3, #28]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0204 	bic.w	r2, r2, #4
 800a7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69d9      	ldr	r1, [r3, #28]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	61da      	str	r2, [r3, #28]
      break;
 800a7b4:	e064      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 fb5b 	bl	800ae78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69da      	ldr	r2, [r3, #28]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69da      	ldr	r2, [r3, #28]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69d9      	ldr	r1, [r3, #28]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	021a      	lsls	r2, r3, #8
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	61da      	str	r2, [r3, #28]
      break;
 800a7f6:	e043      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fb92 	bl	800af28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0204 	bic.w	r2, r2, #4
 800a822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a836:	e023      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fbc4 	bl	800afcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	021a      	lsls	r2, r3, #8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a878:	e002      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	75fb      	strb	r3, [r7, #23]
      break;
 800a87e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop

0800a894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1c>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e0b4      	b.n	800aa1a <HAL_TIM_ConfigClockSource+0x186>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	4b56      	ldr	r3, [pc, #344]	; (800aa24 <HAL_TIM_ConfigClockSource+0x190>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e8:	d03e      	beq.n	800a968 <HAL_TIM_ConfigClockSource+0xd4>
 800a8ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ee:	f200 8087 	bhi.w	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a8f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f6:	f000 8086 	beq.w	800aa06 <HAL_TIM_ConfigClockSource+0x172>
 800a8fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8fe:	d87f      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a900:	2b70      	cmp	r3, #112	; 0x70
 800a902:	d01a      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0xa6>
 800a904:	2b70      	cmp	r3, #112	; 0x70
 800a906:	d87b      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a908:	2b60      	cmp	r3, #96	; 0x60
 800a90a:	d050      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0x11a>
 800a90c:	2b60      	cmp	r3, #96	; 0x60
 800a90e:	d877      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a910:	2b50      	cmp	r3, #80	; 0x50
 800a912:	d03c      	beq.n	800a98e <HAL_TIM_ConfigClockSource+0xfa>
 800a914:	2b50      	cmp	r3, #80	; 0x50
 800a916:	d873      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a918:	2b40      	cmp	r3, #64	; 0x40
 800a91a:	d058      	beq.n	800a9ce <HAL_TIM_ConfigClockSource+0x13a>
 800a91c:	2b40      	cmp	r3, #64	; 0x40
 800a91e:	d86f      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a920:	2b30      	cmp	r3, #48	; 0x30
 800a922:	d064      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x15a>
 800a924:	2b30      	cmp	r3, #48	; 0x30
 800a926:	d86b      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	d060      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x15a>
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d867      	bhi.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
 800a930:	2b00      	cmp	r3, #0
 800a932:	d05c      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x15a>
 800a934:	2b10      	cmp	r3, #16
 800a936:	d05a      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x15a>
 800a938:	e062      	b.n	800aa00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	6899      	ldr	r1, [r3, #8]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f000 fc0d 	bl	800b168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a95c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	609a      	str	r2, [r3, #8]
      break;
 800a966:	e04f      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	6899      	ldr	r1, [r3, #8]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f000 fbf6 	bl	800b168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	689a      	ldr	r2, [r3, #8]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a98a:	609a      	str	r2, [r3, #8]
      break;
 800a98c:	e03c      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	6859      	ldr	r1, [r3, #4]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f000 fb6a 	bl	800b074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2150      	movs	r1, #80	; 0x50
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fbc3 	bl	800b132 <TIM_ITRx_SetConfig>
      break;
 800a9ac:	e02c      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	6859      	ldr	r1, [r3, #4]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f000 fb89 	bl	800b0d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2160      	movs	r1, #96	; 0x60
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fbb3 	bl	800b132 <TIM_ITRx_SetConfig>
      break;
 800a9cc:	e01c      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6859      	ldr	r1, [r3, #4]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f000 fb4a 	bl	800b074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2140      	movs	r1, #64	; 0x40
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fba3 	bl	800b132 <TIM_ITRx_SetConfig>
      break;
 800a9ec:	e00c      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f000 fb9a 	bl	800b132 <TIM_ITRx_SetConfig>
      break;
 800a9fe:	e003      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	73fb      	strb	r3, [r7, #15]
      break;
 800aa04:	e000      	b.n	800aa08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	fffeff88 	.word	0xfffeff88

0800aa28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a40      	ldr	r2, [pc, #256]	; (800ab8c <TIM_Base_SetConfig+0x114>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d013      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa96:	d00f      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a3d      	ldr	r2, [pc, #244]	; (800ab90 <TIM_Base_SetConfig+0x118>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00b      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a3c      	ldr	r2, [pc, #240]	; (800ab94 <TIM_Base_SetConfig+0x11c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d007      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a3b      	ldr	r2, [pc, #236]	; (800ab98 <TIM_Base_SetConfig+0x120>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d003      	beq.n	800aab8 <TIM_Base_SetConfig+0x40>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a3a      	ldr	r2, [pc, #232]	; (800ab9c <TIM_Base_SetConfig+0x124>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d108      	bne.n	800aaca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a2f      	ldr	r2, [pc, #188]	; (800ab8c <TIM_Base_SetConfig+0x114>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d02b      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad8:	d027      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a2c      	ldr	r2, [pc, #176]	; (800ab90 <TIM_Base_SetConfig+0x118>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d023      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a2b      	ldr	r2, [pc, #172]	; (800ab94 <TIM_Base_SetConfig+0x11c>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d01f      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <TIM_Base_SetConfig+0x120>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d01b      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a29      	ldr	r2, [pc, #164]	; (800ab9c <TIM_Base_SetConfig+0x124>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d017      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a28      	ldr	r2, [pc, #160]	; (800aba0 <TIM_Base_SetConfig+0x128>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d013      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a27      	ldr	r2, [pc, #156]	; (800aba4 <TIM_Base_SetConfig+0x12c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00f      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a26      	ldr	r2, [pc, #152]	; (800aba8 <TIM_Base_SetConfig+0x130>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00b      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a25      	ldr	r2, [pc, #148]	; (800abac <TIM_Base_SetConfig+0x134>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d007      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a24      	ldr	r2, [pc, #144]	; (800abb0 <TIM_Base_SetConfig+0x138>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d003      	beq.n	800ab2a <TIM_Base_SetConfig+0xb2>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a23      	ldr	r2, [pc, #140]	; (800abb4 <TIM_Base_SetConfig+0x13c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d108      	bne.n	800ab3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a0a      	ldr	r2, [pc, #40]	; (800ab8c <TIM_Base_SetConfig+0x114>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d003      	beq.n	800ab70 <TIM_Base_SetConfig+0xf8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a0c      	ldr	r2, [pc, #48]	; (800ab9c <TIM_Base_SetConfig+0x124>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d103      	bne.n	800ab78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	691a      	ldr	r2, [r3, #16]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	615a      	str	r2, [r3, #20]
}
 800ab7e:	bf00      	nop
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	40010000 	.word	0x40010000
 800ab90:	40000400 	.word	0x40000400
 800ab94:	40000800 	.word	0x40000800
 800ab98:	40000c00 	.word	0x40000c00
 800ab9c:	40010400 	.word	0x40010400
 800aba0:	40014000 	.word	0x40014000
 800aba4:	40014400 	.word	0x40014400
 800aba8:	40014800 	.word	0x40014800
 800abac:	40001800 	.word	0x40001800
 800abb0:	40001c00 	.word	0x40001c00
 800abb4:	40002000 	.word	0x40002000

0800abb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	f023 0201 	bic.w	r2, r3, #1
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4b2b      	ldr	r3, [pc, #172]	; (800ac90 <TIM_OC1_SetConfig+0xd8>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f023 0302 	bic.w	r3, r3, #2
 800ac00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a21      	ldr	r2, [pc, #132]	; (800ac94 <TIM_OC1_SetConfig+0xdc>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d003      	beq.n	800ac1c <TIM_OC1_SetConfig+0x64>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a20      	ldr	r2, [pc, #128]	; (800ac98 <TIM_OC1_SetConfig+0xe0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d10c      	bne.n	800ac36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f023 0308 	bic.w	r3, r3, #8
 800ac22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f023 0304 	bic.w	r3, r3, #4
 800ac34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a16      	ldr	r2, [pc, #88]	; (800ac94 <TIM_OC1_SetConfig+0xdc>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_OC1_SetConfig+0x8e>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a15      	ldr	r2, [pc, #84]	; (800ac98 <TIM_OC1_SetConfig+0xe0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d111      	bne.n	800ac6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	621a      	str	r2, [r3, #32]
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	fffeff8f 	.word	0xfffeff8f
 800ac94:	40010000 	.word	0x40010000
 800ac98:	40010400 	.word	0x40010400

0800ac9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	f023 0210 	bic.w	r2, r3, #16
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	4b2e      	ldr	r3, [pc, #184]	; (800ad80 <TIM_OC2_SetConfig+0xe4>)
 800acc8:	4013      	ands	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	021b      	lsls	r3, r3, #8
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f023 0320 	bic.w	r3, r3, #32
 800ace6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	011b      	lsls	r3, r3, #4
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a23      	ldr	r2, [pc, #140]	; (800ad84 <TIM_OC2_SetConfig+0xe8>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d003      	beq.n	800ad04 <TIM_OC2_SetConfig+0x68>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a22      	ldr	r2, [pc, #136]	; (800ad88 <TIM_OC2_SetConfig+0xec>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d10d      	bne.n	800ad20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <TIM_OC2_SetConfig+0xe8>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d003      	beq.n	800ad30 <TIM_OC2_SetConfig+0x94>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <TIM_OC2_SetConfig+0xec>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d113      	bne.n	800ad58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	621a      	str	r2, [r3, #32]
}
 800ad72:	bf00      	nop
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	feff8fff 	.word	0xfeff8fff
 800ad84:	40010000 	.word	0x40010000
 800ad88:	40010400 	.word	0x40010400

0800ad8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4b2d      	ldr	r3, [pc, #180]	; (800ae6c <TIM_OC3_SetConfig+0xe0>)
 800adb8:	4013      	ands	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800add4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	4313      	orrs	r3, r2
 800ade0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a22      	ldr	r2, [pc, #136]	; (800ae70 <TIM_OC3_SetConfig+0xe4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d003      	beq.n	800adf2 <TIM_OC3_SetConfig+0x66>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a21      	ldr	r2, [pc, #132]	; (800ae74 <TIM_OC3_SetConfig+0xe8>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d10d      	bne.n	800ae0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a17      	ldr	r2, [pc, #92]	; (800ae70 <TIM_OC3_SetConfig+0xe4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d003      	beq.n	800ae1e <TIM_OC3_SetConfig+0x92>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a16      	ldr	r2, [pc, #88]	; (800ae74 <TIM_OC3_SetConfig+0xe8>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d113      	bne.n	800ae46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	011b      	lsls	r3, r3, #4
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	011b      	lsls	r3, r3, #4
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	621a      	str	r2, [r3, #32]
}
 800ae60:	bf00      	nop
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	fffeff8f 	.word	0xfffeff8f
 800ae70:	40010000 	.word	0x40010000
 800ae74:	40010400 	.word	0x40010400

0800ae78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4b1e      	ldr	r3, [pc, #120]	; (800af1c <TIM_OC4_SetConfig+0xa4>)
 800aea4:	4013      	ands	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	021b      	lsls	r3, r3, #8
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	031b      	lsls	r3, r3, #12
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a13      	ldr	r2, [pc, #76]	; (800af20 <TIM_OC4_SetConfig+0xa8>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d003      	beq.n	800aee0 <TIM_OC4_SetConfig+0x68>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a12      	ldr	r2, [pc, #72]	; (800af24 <TIM_OC4_SetConfig+0xac>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d109      	bne.n	800aef4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	019b      	lsls	r3, r3, #6
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	feff8fff 	.word	0xfeff8fff
 800af20:	40010000 	.word	0x40010000
 800af24:	40010400 	.word	0x40010400

0800af28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	4b1b      	ldr	r3, [pc, #108]	; (800afc0 <TIM_OC5_SetConfig+0x98>)
 800af54:	4013      	ands	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800af68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	4313      	orrs	r3, r2
 800af74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a12      	ldr	r2, [pc, #72]	; (800afc4 <TIM_OC5_SetConfig+0x9c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d003      	beq.n	800af86 <TIM_OC5_SetConfig+0x5e>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a11      	ldr	r2, [pc, #68]	; (800afc8 <TIM_OC5_SetConfig+0xa0>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d109      	bne.n	800af9a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	621a      	str	r2, [r3, #32]
}
 800afb4:	bf00      	nop
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	fffeff8f 	.word	0xfffeff8f
 800afc4:	40010000 	.word	0x40010000
 800afc8:	40010400 	.word	0x40010400

0800afcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4b1c      	ldr	r3, [pc, #112]	; (800b068 <TIM_OC6_SetConfig+0x9c>)
 800aff8:	4013      	ands	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	051b      	lsls	r3, r3, #20
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4313      	orrs	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a13      	ldr	r2, [pc, #76]	; (800b06c <TIM_OC6_SetConfig+0xa0>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d003      	beq.n	800b02c <TIM_OC6_SetConfig+0x60>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a12      	ldr	r2, [pc, #72]	; (800b070 <TIM_OC6_SetConfig+0xa4>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d109      	bne.n	800b040 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	029b      	lsls	r3, r3, #10
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	621a      	str	r2, [r3, #32]
}
 800b05a:	bf00      	nop
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	feff8fff 	.word	0xfeff8fff
 800b06c:	40010000 	.word	0x40010000
 800b070:	40010400 	.word	0x40010400

0800b074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	f023 0201 	bic.w	r2, r3, #1
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b09e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	011b      	lsls	r3, r3, #4
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f023 030a 	bic.w	r3, r3, #10
 800b0b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	621a      	str	r2, [r3, #32]
}
 800b0c6:	bf00      	nop
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b087      	sub	sp, #28
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f023 0210 	bic.w	r2, r3, #16
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6a1b      	ldr	r3, [r3, #32]
 800b0f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	031b      	lsls	r3, r3, #12
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4313      	orrs	r3, r2
 800b106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b10e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	011b      	lsls	r3, r3, #4
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	621a      	str	r2, [r3, #32]
}
 800b126:	bf00      	nop
 800b128:	371c      	adds	r7, #28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b132:	b480      	push	{r7}
 800b134:	b085      	sub	sp, #20
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4313      	orrs	r3, r2
 800b150:	f043 0307 	orr.w	r3, r3, #7
 800b154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	609a      	str	r2, [r3, #8]
}
 800b15c:	bf00      	nop
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	021a      	lsls	r2, r3, #8
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	431a      	orrs	r2, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	4313      	orrs	r3, r2
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	4313      	orrs	r3, r2
 800b194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	609a      	str	r2, [r3, #8]
}
 800b19c:	bf00      	nop
 800b19e:	371c      	adds	r7, #28
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d101      	bne.n	800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1bc:	2302      	movs	r3, #2
 800b1be:	e06d      	b.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a30      	ldr	r2, [pc, #192]	; (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d004      	beq.n	800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a2f      	ldr	r2, [pc, #188]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d108      	bne.n	800b206 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b1fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a20      	ldr	r2, [pc, #128]	; (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d022      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b232:	d01d      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a1d      	ldr	r2, [pc, #116]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d018      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a1c      	ldr	r2, [pc, #112]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d013      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1a      	ldr	r2, [pc, #104]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d00e      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a15      	ldr	r2, [pc, #84]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d009      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a16      	ldr	r2, [pc, #88]	; (800b2bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d004      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a15      	ldr	r2, [pc, #84]	; (800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d10c      	bne.n	800b28a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	40010000 	.word	0x40010000
 800b2ac:	40010400 	.word	0x40010400
 800b2b0:	40000400 	.word	0x40000400
 800b2b4:	40000800 	.word	0x40000800
 800b2b8:	40000c00 	.word	0x40000c00
 800b2bc:	40014000 	.word	0x40014000
 800b2c0:	40001800 	.word	0x40001800

0800b2c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d101      	bne.n	800b2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e065      	b.n	800b3ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	041b      	lsls	r3, r3, #16
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a16      	ldr	r2, [pc, #88]	; (800b3b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d004      	beq.n	800b36e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a14      	ldr	r2, [pc, #80]	; (800b3bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d115      	bne.n	800b39a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	051b      	lsls	r3, r3, #20
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	4313      	orrs	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	40010000 	.word	0x40010000
 800b3bc:	40010400 	.word	0x40010400

0800b3c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e040      	b.n	800b490 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b412:	2b00      	cmp	r3, #0
 800b414:	d106      	bne.n	800b424 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7f9 fbf4 	bl	8004c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2224      	movs	r2, #36	; 0x24
 800b428:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f022 0201 	bic.w	r2, r2, #1
 800b438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f82c 	bl	800b498 <UART_SetConfig>
 800b440:	4603      	mov	r3, r0
 800b442:	2b01      	cmp	r3, #1
 800b444:	d101      	bne.n	800b44a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e022      	b.n	800b490 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fa84 	bl	800b960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fb0b 	bl	800baa4 <UART_CheckIdleState>
 800b48e:	4603      	mov	r3, r0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	4ba6      	ldr	r3, [pc, #664]	; (800b75c <UART_SetConfig+0x2c4>)
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	6812      	ldr	r2, [r2, #0]
 800b4ca:	6979      	ldr	r1, [r7, #20]
 800b4cc:	430b      	orrs	r3, r1
 800b4ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68da      	ldr	r2, [r3, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	430a      	orrs	r2, r1
 800b508:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a94      	ldr	r2, [pc, #592]	; (800b760 <UART_SetConfig+0x2c8>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d120      	bne.n	800b556 <UART_SetConfig+0xbe>
 800b514:	4b93      	ldr	r3, [pc, #588]	; (800b764 <UART_SetConfig+0x2cc>)
 800b516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d816      	bhi.n	800b550 <UART_SetConfig+0xb8>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <UART_SetConfig+0x90>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b539 	.word	0x0800b539
 800b52c:	0800b545 	.word	0x0800b545
 800b530:	0800b53f 	.word	0x0800b53f
 800b534:	0800b54b 	.word	0x0800b54b
 800b538:	2301      	movs	r3, #1
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e150      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b53e:	2302      	movs	r3, #2
 800b540:	77fb      	strb	r3, [r7, #31]
 800b542:	e14d      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b544:	2304      	movs	r3, #4
 800b546:	77fb      	strb	r3, [r7, #31]
 800b548:	e14a      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b54a:	2308      	movs	r3, #8
 800b54c:	77fb      	strb	r3, [r7, #31]
 800b54e:	e147      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b550:	2310      	movs	r3, #16
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	e144      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a83      	ldr	r2, [pc, #524]	; (800b768 <UART_SetConfig+0x2d0>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d132      	bne.n	800b5c6 <UART_SetConfig+0x12e>
 800b560:	4b80      	ldr	r3, [pc, #512]	; (800b764 <UART_SetConfig+0x2cc>)
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b566:	f003 030c 	and.w	r3, r3, #12
 800b56a:	2b0c      	cmp	r3, #12
 800b56c:	d828      	bhi.n	800b5c0 <UART_SetConfig+0x128>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <UART_SetConfig+0xdc>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b5a9 	.word	0x0800b5a9
 800b578:	0800b5c1 	.word	0x0800b5c1
 800b57c:	0800b5c1 	.word	0x0800b5c1
 800b580:	0800b5c1 	.word	0x0800b5c1
 800b584:	0800b5b5 	.word	0x0800b5b5
 800b588:	0800b5c1 	.word	0x0800b5c1
 800b58c:	0800b5c1 	.word	0x0800b5c1
 800b590:	0800b5c1 	.word	0x0800b5c1
 800b594:	0800b5af 	.word	0x0800b5af
 800b598:	0800b5c1 	.word	0x0800b5c1
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c1 	.word	0x0800b5c1
 800b5a4:	0800b5bb 	.word	0x0800b5bb
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	77fb      	strb	r3, [r7, #31]
 800b5ac:	e118      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	77fb      	strb	r3, [r7, #31]
 800b5b2:	e115      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b5b4:	2304      	movs	r3, #4
 800b5b6:	77fb      	strb	r3, [r7, #31]
 800b5b8:	e112      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b5ba:	2308      	movs	r3, #8
 800b5bc:	77fb      	strb	r3, [r7, #31]
 800b5be:	e10f      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b5c0:	2310      	movs	r3, #16
 800b5c2:	77fb      	strb	r3, [r7, #31]
 800b5c4:	e10c      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a68      	ldr	r2, [pc, #416]	; (800b76c <UART_SetConfig+0x2d4>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d120      	bne.n	800b612 <UART_SetConfig+0x17a>
 800b5d0:	4b64      	ldr	r3, [pc, #400]	; (800b764 <UART_SetConfig+0x2cc>)
 800b5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b5da:	2b30      	cmp	r3, #48	; 0x30
 800b5dc:	d013      	beq.n	800b606 <UART_SetConfig+0x16e>
 800b5de:	2b30      	cmp	r3, #48	; 0x30
 800b5e0:	d814      	bhi.n	800b60c <UART_SetConfig+0x174>
 800b5e2:	2b20      	cmp	r3, #32
 800b5e4:	d009      	beq.n	800b5fa <UART_SetConfig+0x162>
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d810      	bhi.n	800b60c <UART_SetConfig+0x174>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <UART_SetConfig+0x15c>
 800b5ee:	2b10      	cmp	r3, #16
 800b5f0:	d006      	beq.n	800b600 <UART_SetConfig+0x168>
 800b5f2:	e00b      	b.n	800b60c <UART_SetConfig+0x174>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e0f2      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	e0ef      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b600:	2304      	movs	r3, #4
 800b602:	77fb      	strb	r3, [r7, #31]
 800b604:	e0ec      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b606:	2308      	movs	r3, #8
 800b608:	77fb      	strb	r3, [r7, #31]
 800b60a:	e0e9      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b60c:	2310      	movs	r3, #16
 800b60e:	77fb      	strb	r3, [r7, #31]
 800b610:	e0e6      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a56      	ldr	r2, [pc, #344]	; (800b770 <UART_SetConfig+0x2d8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d120      	bne.n	800b65e <UART_SetConfig+0x1c6>
 800b61c:	4b51      	ldr	r3, [pc, #324]	; (800b764 <UART_SetConfig+0x2cc>)
 800b61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b626:	2bc0      	cmp	r3, #192	; 0xc0
 800b628:	d013      	beq.n	800b652 <UART_SetConfig+0x1ba>
 800b62a:	2bc0      	cmp	r3, #192	; 0xc0
 800b62c:	d814      	bhi.n	800b658 <UART_SetConfig+0x1c0>
 800b62e:	2b80      	cmp	r3, #128	; 0x80
 800b630:	d009      	beq.n	800b646 <UART_SetConfig+0x1ae>
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d810      	bhi.n	800b658 <UART_SetConfig+0x1c0>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d002      	beq.n	800b640 <UART_SetConfig+0x1a8>
 800b63a:	2b40      	cmp	r3, #64	; 0x40
 800b63c:	d006      	beq.n	800b64c <UART_SetConfig+0x1b4>
 800b63e:	e00b      	b.n	800b658 <UART_SetConfig+0x1c0>
 800b640:	2300      	movs	r3, #0
 800b642:	77fb      	strb	r3, [r7, #31]
 800b644:	e0cc      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b646:	2302      	movs	r3, #2
 800b648:	77fb      	strb	r3, [r7, #31]
 800b64a:	e0c9      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b64c:	2304      	movs	r3, #4
 800b64e:	77fb      	strb	r3, [r7, #31]
 800b650:	e0c6      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b652:	2308      	movs	r3, #8
 800b654:	77fb      	strb	r3, [r7, #31]
 800b656:	e0c3      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b658:	2310      	movs	r3, #16
 800b65a:	77fb      	strb	r3, [r7, #31]
 800b65c:	e0c0      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a44      	ldr	r2, [pc, #272]	; (800b774 <UART_SetConfig+0x2dc>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d125      	bne.n	800b6b4 <UART_SetConfig+0x21c>
 800b668:	4b3e      	ldr	r3, [pc, #248]	; (800b764 <UART_SetConfig+0x2cc>)
 800b66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b676:	d017      	beq.n	800b6a8 <UART_SetConfig+0x210>
 800b678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b67c:	d817      	bhi.n	800b6ae <UART_SetConfig+0x216>
 800b67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b682:	d00b      	beq.n	800b69c <UART_SetConfig+0x204>
 800b684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b688:	d811      	bhi.n	800b6ae <UART_SetConfig+0x216>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <UART_SetConfig+0x1fe>
 800b68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b692:	d006      	beq.n	800b6a2 <UART_SetConfig+0x20a>
 800b694:	e00b      	b.n	800b6ae <UART_SetConfig+0x216>
 800b696:	2300      	movs	r3, #0
 800b698:	77fb      	strb	r3, [r7, #31]
 800b69a:	e0a1      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b69c:	2302      	movs	r3, #2
 800b69e:	77fb      	strb	r3, [r7, #31]
 800b6a0:	e09e      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6a2:	2304      	movs	r3, #4
 800b6a4:	77fb      	strb	r3, [r7, #31]
 800b6a6:	e09b      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	77fb      	strb	r3, [r7, #31]
 800b6ac:	e098      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6ae:	2310      	movs	r3, #16
 800b6b0:	77fb      	strb	r3, [r7, #31]
 800b6b2:	e095      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a2f      	ldr	r2, [pc, #188]	; (800b778 <UART_SetConfig+0x2e0>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d125      	bne.n	800b70a <UART_SetConfig+0x272>
 800b6be:	4b29      	ldr	r3, [pc, #164]	; (800b764 <UART_SetConfig+0x2cc>)
 800b6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b6c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6cc:	d017      	beq.n	800b6fe <UART_SetConfig+0x266>
 800b6ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6d2:	d817      	bhi.n	800b704 <UART_SetConfig+0x26c>
 800b6d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d8:	d00b      	beq.n	800b6f2 <UART_SetConfig+0x25a>
 800b6da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6de:	d811      	bhi.n	800b704 <UART_SetConfig+0x26c>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <UART_SetConfig+0x254>
 800b6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e8:	d006      	beq.n	800b6f8 <UART_SetConfig+0x260>
 800b6ea:	e00b      	b.n	800b704 <UART_SetConfig+0x26c>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	e076      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	77fb      	strb	r3, [r7, #31]
 800b6f6:	e073      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	77fb      	strb	r3, [r7, #31]
 800b6fc:	e070      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b6fe:	2308      	movs	r3, #8
 800b700:	77fb      	strb	r3, [r7, #31]
 800b702:	e06d      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b704:	2310      	movs	r3, #16
 800b706:	77fb      	strb	r3, [r7, #31]
 800b708:	e06a      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1b      	ldr	r2, [pc, #108]	; (800b77c <UART_SetConfig+0x2e4>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d138      	bne.n	800b786 <UART_SetConfig+0x2ee>
 800b714:	4b13      	ldr	r3, [pc, #76]	; (800b764 <UART_SetConfig+0x2cc>)
 800b716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b71a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b71e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b722:	d017      	beq.n	800b754 <UART_SetConfig+0x2bc>
 800b724:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b728:	d82a      	bhi.n	800b780 <UART_SetConfig+0x2e8>
 800b72a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b72e:	d00b      	beq.n	800b748 <UART_SetConfig+0x2b0>
 800b730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b734:	d824      	bhi.n	800b780 <UART_SetConfig+0x2e8>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <UART_SetConfig+0x2aa>
 800b73a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b73e:	d006      	beq.n	800b74e <UART_SetConfig+0x2b6>
 800b740:	e01e      	b.n	800b780 <UART_SetConfig+0x2e8>
 800b742:	2300      	movs	r3, #0
 800b744:	77fb      	strb	r3, [r7, #31]
 800b746:	e04b      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b748:	2302      	movs	r3, #2
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	e048      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b74e:	2304      	movs	r3, #4
 800b750:	77fb      	strb	r3, [r7, #31]
 800b752:	e045      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b754:	2308      	movs	r3, #8
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e042      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b75a:	bf00      	nop
 800b75c:	efff69f3 	.word	0xefff69f3
 800b760:	40011000 	.word	0x40011000
 800b764:	40023800 	.word	0x40023800
 800b768:	40004400 	.word	0x40004400
 800b76c:	40004800 	.word	0x40004800
 800b770:	40004c00 	.word	0x40004c00
 800b774:	40005000 	.word	0x40005000
 800b778:	40011400 	.word	0x40011400
 800b77c:	40007800 	.word	0x40007800
 800b780:	2310      	movs	r3, #16
 800b782:	77fb      	strb	r3, [r7, #31]
 800b784:	e02c      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a72      	ldr	r2, [pc, #456]	; (800b954 <UART_SetConfig+0x4bc>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d125      	bne.n	800b7dc <UART_SetConfig+0x344>
 800b790:	4b71      	ldr	r3, [pc, #452]	; (800b958 <UART_SetConfig+0x4c0>)
 800b792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b79a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b79e:	d017      	beq.n	800b7d0 <UART_SetConfig+0x338>
 800b7a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b7a4:	d817      	bhi.n	800b7d6 <UART_SetConfig+0x33e>
 800b7a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7aa:	d00b      	beq.n	800b7c4 <UART_SetConfig+0x32c>
 800b7ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b0:	d811      	bhi.n	800b7d6 <UART_SetConfig+0x33e>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <UART_SetConfig+0x326>
 800b7b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7ba:	d006      	beq.n	800b7ca <UART_SetConfig+0x332>
 800b7bc:	e00b      	b.n	800b7d6 <UART_SetConfig+0x33e>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	77fb      	strb	r3, [r7, #31]
 800b7c2:	e00d      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	77fb      	strb	r3, [r7, #31]
 800b7c8:	e00a      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b7ca:	2304      	movs	r3, #4
 800b7cc:	77fb      	strb	r3, [r7, #31]
 800b7ce:	e007      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b7d0:	2308      	movs	r3, #8
 800b7d2:	77fb      	strb	r3, [r7, #31]
 800b7d4:	e004      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b7d6:	2310      	movs	r3, #16
 800b7d8:	77fb      	strb	r3, [r7, #31]
 800b7da:	e001      	b.n	800b7e0 <UART_SetConfig+0x348>
 800b7dc:	2310      	movs	r3, #16
 800b7de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e8:	d15b      	bne.n	800b8a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b7ea:	7ffb      	ldrb	r3, [r7, #31]
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	d828      	bhi.n	800b842 <UART_SetConfig+0x3aa>
 800b7f0:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <UART_SetConfig+0x360>)
 800b7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f6:	bf00      	nop
 800b7f8:	0800b81d 	.word	0x0800b81d
 800b7fc:	0800b825 	.word	0x0800b825
 800b800:	0800b82d 	.word	0x0800b82d
 800b804:	0800b843 	.word	0x0800b843
 800b808:	0800b833 	.word	0x0800b833
 800b80c:	0800b843 	.word	0x0800b843
 800b810:	0800b843 	.word	0x0800b843
 800b814:	0800b843 	.word	0x0800b843
 800b818:	0800b83b 	.word	0x0800b83b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b81c:	f7fd fb9a 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 800b820:	61b8      	str	r0, [r7, #24]
        break;
 800b822:	e013      	b.n	800b84c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b824:	f7fd fbaa 	bl	8008f7c <HAL_RCC_GetPCLK2Freq>
 800b828:	61b8      	str	r0, [r7, #24]
        break;
 800b82a:	e00f      	b.n	800b84c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b82c:	4b4b      	ldr	r3, [pc, #300]	; (800b95c <UART_SetConfig+0x4c4>)
 800b82e:	61bb      	str	r3, [r7, #24]
        break;
 800b830:	e00c      	b.n	800b84c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b832:	f7fd fabd 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 800b836:	61b8      	str	r0, [r7, #24]
        break;
 800b838:	e008      	b.n	800b84c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b83a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b83e:	61bb      	str	r3, [r7, #24]
        break;
 800b840:	e004      	b.n	800b84c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	77bb      	strb	r3, [r7, #30]
        break;
 800b84a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d074      	beq.n	800b93c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	005a      	lsls	r2, r3, #1
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	441a      	add	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	fbb2 f3f3 	udiv	r3, r2, r3
 800b866:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2b0f      	cmp	r3, #15
 800b86c:	d916      	bls.n	800b89c <UART_SetConfig+0x404>
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b874:	d212      	bcs.n	800b89c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	f023 030f 	bic.w	r3, r3, #15
 800b87e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	b29b      	uxth	r3, r3
 800b886:	f003 0307 	and.w	r3, r3, #7
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	89fb      	ldrh	r3, [r7, #14]
 800b88e:	4313      	orrs	r3, r2
 800b890:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	89fa      	ldrh	r2, [r7, #14]
 800b898:	60da      	str	r2, [r3, #12]
 800b89a:	e04f      	b.n	800b93c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	77bb      	strb	r3, [r7, #30]
 800b8a0:	e04c      	b.n	800b93c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8a2:	7ffb      	ldrb	r3, [r7, #31]
 800b8a4:	2b08      	cmp	r3, #8
 800b8a6:	d828      	bhi.n	800b8fa <UART_SetConfig+0x462>
 800b8a8:	a201      	add	r2, pc, #4	; (adr r2, 800b8b0 <UART_SetConfig+0x418>)
 800b8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ae:	bf00      	nop
 800b8b0:	0800b8d5 	.word	0x0800b8d5
 800b8b4:	0800b8dd 	.word	0x0800b8dd
 800b8b8:	0800b8e5 	.word	0x0800b8e5
 800b8bc:	0800b8fb 	.word	0x0800b8fb
 800b8c0:	0800b8eb 	.word	0x0800b8eb
 800b8c4:	0800b8fb 	.word	0x0800b8fb
 800b8c8:	0800b8fb 	.word	0x0800b8fb
 800b8cc:	0800b8fb 	.word	0x0800b8fb
 800b8d0:	0800b8f3 	.word	0x0800b8f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8d4:	f7fd fb3e 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 800b8d8:	61b8      	str	r0, [r7, #24]
        break;
 800b8da:	e013      	b.n	800b904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8dc:	f7fd fb4e 	bl	8008f7c <HAL_RCC_GetPCLK2Freq>
 800b8e0:	61b8      	str	r0, [r7, #24]
        break;
 800b8e2:	e00f      	b.n	800b904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8e4:	4b1d      	ldr	r3, [pc, #116]	; (800b95c <UART_SetConfig+0x4c4>)
 800b8e6:	61bb      	str	r3, [r7, #24]
        break;
 800b8e8:	e00c      	b.n	800b904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8ea:	f7fd fa61 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 800b8ee:	61b8      	str	r0, [r7, #24]
        break;
 800b8f0:	e008      	b.n	800b904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8f6:	61bb      	str	r3, [r7, #24]
        break;
 800b8f8:	e004      	b.n	800b904 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	77bb      	strb	r3, [r7, #30]
        break;
 800b902:	bf00      	nop
    }

    if (pclk != 0U)
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d018      	beq.n	800b93c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	085a      	lsrs	r2, r3, #1
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	441a      	add	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	2b0f      	cmp	r3, #15
 800b922:	d909      	bls.n	800b938 <UART_SetConfig+0x4a0>
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b92a:	d205      	bcs.n	800b938 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	60da      	str	r2, [r3, #12]
 800b936:	e001      	b.n	800b93c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b948:	7fbb      	ldrb	r3, [r7, #30]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3720      	adds	r7, #32
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	40007c00 	.word	0x40007c00
 800b958:	40023800 	.word	0x40023800
 800b95c:	00f42400 	.word	0x00f42400

0800b960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	f003 0308 	and.w	r3, r3, #8
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	f003 0310 	and.w	r3, r3, #16
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba16:	f003 0320 	and.w	r3, r3, #32
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00a      	beq.n	800ba34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	430a      	orrs	r2, r1
 800ba32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01a      	beq.n	800ba76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba5e:	d10a      	bne.n	800ba76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	430a      	orrs	r2, r1
 800ba74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00a      	beq.n	800ba98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	430a      	orrs	r2, r1
 800ba96:	605a      	str	r2, [r3, #4]
  }
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bab4:	f7f9 f9bc 	bl	8004e30 <HAL_GetTick>
 800bab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d10e      	bne.n	800bae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f81b 	bl	800bb12 <UART_WaitOnFlagUntilTimeout>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e011      	b.n	800bb0a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b09c      	sub	sp, #112	; 0x70
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb22:	e0a7      	b.n	800bc74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2a:	f000 80a3 	beq.w	800bc74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb2e:	f7f9 f97f 	bl	8004e30 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d302      	bcc.n	800bb44 <UART_WaitOnFlagUntilTimeout+0x32>
 800bb3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d13f      	bne.n	800bbc4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb58:	667b      	str	r3, [r7, #100]	; 0x64
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e6      	bne.n	800bb44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb80:	e853 3f00 	ldrex	r3, [r3]
 800bb84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	663b      	str	r3, [r7, #96]	; 0x60
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3308      	adds	r3, #8
 800bb94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb96:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb9e:	e841 2300 	strex	r3, r2, [r1]
 800bba2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e5      	bne.n	800bb76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2220      	movs	r2, #32
 800bbae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e068      	b.n	800bc96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d050      	beq.n	800bc74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbe0:	d148      	bne.n	800bc74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc00:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc0a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e6      	bne.n	800bbec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3308      	adds	r3, #8
 800bc24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	e853 3f00 	ldrex	r3, [r3]
 800bc2c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	f023 0301 	bic.w	r3, r3, #1
 800bc34:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc3e:	623a      	str	r2, [r7, #32]
 800bc40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc42:	69f9      	ldr	r1, [r7, #28]
 800bc44:	6a3a      	ldr	r2, [r7, #32]
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1e5      	bne.n	800bc1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2220      	movs	r2, #32
 800bc56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2220      	movs	r2, #32
 800bc64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e010      	b.n	800bc96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	69da      	ldr	r2, [r3, #28]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	bf0c      	ite	eq
 800bc84:	2301      	moveq	r3, #1
 800bc86:	2300      	movne	r3, #0
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	f43f af48 	beq.w	800bb24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3770      	adds	r7, #112	; 0x70
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d121      	bne.n	800bcf6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	4b27      	ldr	r3, [pc, #156]	; (800bd54 <FMC_SDRAM_Init+0xb4>)
 800bcb8:	4013      	ands	r3, r2
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	6851      	ldr	r1, [r2, #4]
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	6892      	ldr	r2, [r2, #8]
 800bcc2:	4311      	orrs	r1, r2
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	68d2      	ldr	r2, [r2, #12]
 800bcc8:	4311      	orrs	r1, r2
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	6912      	ldr	r2, [r2, #16]
 800bcce:	4311      	orrs	r1, r2
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	6952      	ldr	r2, [r2, #20]
 800bcd4:	4311      	orrs	r1, r2
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	6992      	ldr	r2, [r2, #24]
 800bcda:	4311      	orrs	r1, r2
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	69d2      	ldr	r2, [r2, #28]
 800bce0:	4311      	orrs	r1, r2
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	6a12      	ldr	r2, [r2, #32]
 800bce6:	4311      	orrs	r1, r2
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bcec:	430a      	orrs	r2, r1
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	e026      	b.n	800bd44 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	69d9      	ldr	r1, [r3, #28]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	4319      	orrs	r1, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <FMC_SDRAM_Init+0xb4>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	6851      	ldr	r1, [r2, #4]
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	6892      	ldr	r2, [r2, #8]
 800bd24:	4311      	orrs	r1, r2
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	68d2      	ldr	r2, [r2, #12]
 800bd2a:	4311      	orrs	r1, r2
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	6912      	ldr	r2, [r2, #16]
 800bd30:	4311      	orrs	r1, r2
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	6952      	ldr	r2, [r2, #20]
 800bd36:	4311      	orrs	r1, r2
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	6992      	ldr	r2, [r2, #24]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	ffff8000 	.word	0xffff8000

0800bd58 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d128      	bne.n	800bdbc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	1e59      	subs	r1, r3, #1
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	011b      	lsls	r3, r3, #4
 800bd80:	4319      	orrs	r1, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	4319      	orrs	r1, r3
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	031b      	lsls	r3, r3, #12
 800bd94:	4319      	orrs	r1, r3
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	041b      	lsls	r3, r3, #16
 800bd9e:	4319      	orrs	r1, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	3b01      	subs	r3, #1
 800bda6:	051b      	lsls	r3, r3, #20
 800bda8:	4319      	orrs	r1, r3
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	061b      	lsls	r3, r3, #24
 800bdb2:	430b      	orrs	r3, r1
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	609a      	str	r2, [r3, #8]
 800bdba:	e02d      	b.n	800be18 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	689a      	ldr	r2, [r3, #8]
 800bdc0:	4b19      	ldr	r3, [pc, #100]	; (800be28 <FMC_SDRAM_Timing_Init+0xd0>)
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	68d2      	ldr	r2, [r2, #12]
 800bdc8:	3a01      	subs	r2, #1
 800bdca:	0311      	lsls	r1, r2, #12
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	6952      	ldr	r2, [r2, #20]
 800bdd0:	3a01      	subs	r2, #1
 800bdd2:	0512      	lsls	r2, r2, #20
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	1e59      	subs	r1, r3, #1
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	011b      	lsls	r3, r3, #4
 800bdf2:	4319      	orrs	r1, r3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	4319      	orrs	r1, r3
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	3b01      	subs	r3, #1
 800be04:	041b      	lsls	r3, r3, #16
 800be06:	4319      	orrs	r1, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	061b      	lsls	r3, r3, #24
 800be10:	430b      	orrs	r3, r1
 800be12:	431a      	orrs	r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	ff0f0fff 	.word	0xff0f0fff

0800be2c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	691a      	ldr	r2, [r3, #16]
 800be3c:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <FMC_SDRAM_SendCommand+0x44>)
 800be3e:	4013      	ands	r3, r2
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	6811      	ldr	r1, [r2, #0]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	6852      	ldr	r2, [r2, #4]
 800be48:	4311      	orrs	r1, r2
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	6892      	ldr	r2, [r2, #8]
 800be4e:	3a01      	subs	r2, #1
 800be50:	0152      	lsls	r2, r2, #5
 800be52:	4311      	orrs	r1, r2
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	68d2      	ldr	r2, [r2, #12]
 800be58:	0252      	lsls	r2, r2, #9
 800be5a:	430a      	orrs	r2, r1
 800be5c:	431a      	orrs	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	ffc00000 	.word	0xffc00000

0800be74 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	695a      	ldr	r2, [r3, #20]
 800be82:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800be84:	4013      	ands	r3, r2
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	0052      	lsls	r2, r2, #1
 800be8a:	431a      	orrs	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	ffffc001 	.word	0xffffc001

0800bea4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800beae:	2300      	movs	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800beb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beb6:	2b84      	cmp	r3, #132	; 0x84
 800beb8:	d005      	beq.n	800bec6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4413      	add	r3, r2
 800bec2:	3303      	adds	r3, #3
 800bec4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bec6:	68fb      	ldr	r3, [r7, #12]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bed8:	f001 fa26 	bl	800d328 <vTaskStartScheduler>
  
  return osOK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee4:	b089      	sub	sp, #36	; 0x24
 800bee6:	af04      	add	r7, sp, #16
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d020      	beq.n	800bf36 <osThreadCreate+0x54>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01c      	beq.n	800bf36 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685c      	ldr	r4, [r3, #4]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681d      	ldr	r5, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	691e      	ldr	r6, [r3, #16]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff ffc8 	bl	800bea4 <makeFreeRtosPriority>
 800bf14:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf1e:	9202      	str	r2, [sp, #8]
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	9100      	str	r1, [sp, #0]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	4632      	mov	r2, r6
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 ff90 	bl	800ce50 <xTaskCreateStatic>
 800bf30:	4603      	mov	r3, r0
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	e01c      	b.n	800bf70 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685c      	ldr	r4, [r3, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf42:	b29e      	uxth	r6, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff ffaa 	bl	800bea4 <makeFreeRtosPriority>
 800bf50:	4602      	mov	r2, r0
 800bf52:	f107 030c 	add.w	r3, r7, #12
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	9200      	str	r2, [sp, #0]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 ffd8 	bl	800cf16 <xTaskCreate>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d001      	beq.n	800bf70 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	e000      	b.n	800bf72 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf70:	68fb      	ldr	r3, [r7, #12]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <osDelay+0x16>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	e000      	b.n	800bf92 <osDelay+0x18>
 800bf90:	2301      	movs	r3, #1
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 f992 	bl	800d2bc <vTaskDelay>
  
  return osOK;
 800bf98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f000 fa66 	bl	800c48a <xQueueCreateMutexStatic>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	e003      	b.n	800bfca <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	f000 fa49 	bl	800c45a <xQueueCreateMutex>
 800bfc8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bfd2:	b590      	push	{r4, r7, lr}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af02      	add	r7, sp, #8
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d011      	beq.n	800c008 <osMessageCreate+0x36>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00d      	beq.n	800c008 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6859      	ldr	r1, [r3, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689a      	ldr	r2, [r3, #8]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	2400      	movs	r4, #0
 800bffe:	9400      	str	r4, [sp, #0]
 800c000:	f000 f92e 	bl	800c260 <xQueueGenericCreateStatic>
 800c004:	4603      	mov	r3, r0
 800c006:	e008      	b.n	800c01a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6818      	ldr	r0, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	4619      	mov	r1, r3
 800c014:	f000 f9a6 	bl	800c364 <xQueueGenericCreate>
 800c018:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd90      	pop	{r4, r7, pc}

0800c022 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f103 0208 	add.w	r2, r3, #8
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f04f 32ff 	mov.w	r2, #4294967295
 800c03a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f103 0208 	add.w	r2, r3, #8
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f103 0208 	add.w	r2, r3, #8
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c062:	b480      	push	{r7}
 800c064:	b083      	sub	sp, #12
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	689a      	ldr	r2, [r3, #8]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	601a      	str	r2, [r3, #0]
}
 800c0b8:	bf00      	nop
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0da:	d103      	bne.n	800c0e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	60fb      	str	r3, [r7, #12]
 800c0e2:	e00c      	b.n	800c0fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	e002      	b.n	800c0f2 <vListInsert+0x2e>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d2f6      	bcs.n	800c0ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	1c5a      	adds	r2, r3, #1
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	601a      	str	r2, [r3, #0]
}
 800c12a:	bf00      	nop
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c136:	b480      	push	{r7}
 800c138:	b085      	sub	sp, #20
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	6892      	ldr	r2, [r2, #8]
 800c14c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	6852      	ldr	r2, [r2, #4]
 800c156:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d103      	bne.n	800c16a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	689a      	ldr	r2, [r3, #8]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	1e5a      	subs	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
	...

0800c18c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10c      	bne.n	800c1ba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	b672      	cpsid	i
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	b662      	cpsie	i
 800c1b4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c1ba:	f002 f837 	bl	800e22c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c6:	68f9      	ldr	r1, [r7, #12]
 800c1c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1ca:	fb01 f303 	mul.w	r3, r1, r3
 800c1ce:	441a      	add	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	68f9      	ldr	r1, [r7, #12]
 800c1ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1f0:	fb01 f303 	mul.w	r3, r1, r3
 800c1f4:	441a      	add	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	22ff      	movs	r2, #255	; 0xff
 800c1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	22ff      	movs	r2, #255	; 0xff
 800c206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d114      	bne.n	800c23a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d01a      	beq.n	800c24e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3310      	adds	r3, #16
 800c21c:	4618      	mov	r0, r3
 800c21e:	f001 faf1 	bl	800d804 <xTaskRemoveFromEventList>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d012      	beq.n	800c24e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c228:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <xQueueGenericReset+0xd0>)
 800c22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22e:	601a      	str	r2, [r3, #0]
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	e009      	b.n	800c24e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3310      	adds	r3, #16
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff feef 	bl	800c022 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	3324      	adds	r3, #36	; 0x24
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff feea 	bl	800c022 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c24e:	f002 f821 	bl	800e294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c252:	2301      	movs	r3, #1
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	e000ed04 	.word	0xe000ed04

0800c260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08e      	sub	sp, #56	; 0x38
 800c264:	af02      	add	r7, sp, #8
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10c      	bne.n	800c28e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	b672      	cpsid	i
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	b662      	cpsie	i
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10c      	bne.n	800c2ae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	b672      	cpsid	i
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	b662      	cpsie	i
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <xQueueGenericCreateStatic+0x5a>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <xQueueGenericCreateStatic+0x5e>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e000      	b.n	800c2c0 <xQueueGenericCreateStatic+0x60>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10c      	bne.n	800c2de <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	b672      	cpsid	i
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	b662      	cpsie	i
 800c2d8:	623b      	str	r3, [r7, #32]
}
 800c2da:	bf00      	nop
 800c2dc:	e7fe      	b.n	800c2dc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <xQueueGenericCreateStatic+0x8a>
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <xQueueGenericCreateStatic+0x8e>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e000      	b.n	800c2f0 <xQueueGenericCreateStatic+0x90>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10c      	bne.n	800c30e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	b672      	cpsid	i
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	b662      	cpsie	i
 800c308:	61fb      	str	r3, [r7, #28]
}
 800c30a:	bf00      	nop
 800c30c:	e7fe      	b.n	800c30c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c30e:	2348      	movs	r3, #72	; 0x48
 800c310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b48      	cmp	r3, #72	; 0x48
 800c316:	d00c      	beq.n	800c332 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	b672      	cpsid	i
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	b662      	cpsie	i
 800c32c:	61bb      	str	r3, [r7, #24]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c332:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00d      	beq.n	800c35a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	2201      	movs	r2, #1
 800c342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c346:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4613      	mov	r3, r2
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f000 f847 	bl	800c3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3730      	adds	r7, #48	; 0x30
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	; 0x28
 800c368:	af02      	add	r7, sp, #8
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	4613      	mov	r3, r2
 800c370:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10c      	bne.n	800c392 <xQueueGenericCreate+0x2e>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	b672      	cpsid	i
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	b662      	cpsie	i
 800c38c:	613b      	str	r3, [r7, #16]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	e004      	b.n	800c3a8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	fb02 f303 	mul.w	r3, r2, r3
 800c3a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	3348      	adds	r3, #72	; 0x48
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f002 f869 	bl	800e484 <pvPortMalloc>
 800c3b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d011      	beq.n	800c3de <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	3348      	adds	r3, #72	; 0x48
 800c3c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3cc:	79fa      	ldrb	r2, [r7, #7]
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	68b9      	ldr	r1, [r7, #8]
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f805 	bl	800c3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3de:	69bb      	ldr	r3, [r7, #24]
	}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d103      	bne.n	800c404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	601a      	str	r2, [r3, #0]
 800c402:	e002      	b.n	800c40a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c416:	2101      	movs	r1, #1
 800c418:	69b8      	ldr	r0, [r7, #24]
 800c41a:	f7ff feb7 	bl	800c18c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c41e:	bf00      	nop
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00e      	beq.n	800c452 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c446:	2300      	movs	r3, #0
 800c448:	2200      	movs	r2, #0
 800c44a:	2100      	movs	r1, #0
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f837 	bl	800c4c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c452:	bf00      	nop
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b086      	sub	sp, #24
 800c45e:	af00      	add	r7, sp, #0
 800c460:	4603      	mov	r3, r0
 800c462:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c464:	2301      	movs	r3, #1
 800c466:	617b      	str	r3, [r7, #20]
 800c468:	2300      	movs	r3, #0
 800c46a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	461a      	mov	r2, r3
 800c470:	6939      	ldr	r1, [r7, #16]
 800c472:	6978      	ldr	r0, [r7, #20]
 800c474:	f7ff ff76 	bl	800c364 <xQueueGenericCreate>
 800c478:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f7ff ffd3 	bl	800c426 <prvInitialiseMutex>

		return xNewQueue;
 800c480:	68fb      	ldr	r3, [r7, #12]
	}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b088      	sub	sp, #32
 800c48e:	af02      	add	r7, sp, #8
 800c490:	4603      	mov	r3, r0
 800c492:	6039      	str	r1, [r7, #0]
 800c494:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c496:	2301      	movs	r3, #1
 800c498:	617b      	str	r3, [r7, #20]
 800c49a:	2300      	movs	r3, #0
 800c49c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	6939      	ldr	r1, [r7, #16]
 800c4a8:	6978      	ldr	r0, [r7, #20]
 800c4aa:	f7ff fed9 	bl	800c260 <xQueueGenericCreateStatic>
 800c4ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f7ff ffb8 	bl	800c426 <prvInitialiseMutex>

		return xNewQueue;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
	}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08e      	sub	sp, #56	; 0x38
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10c      	bne.n	800c4f6 <xQueueGenericSend+0x36>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	b672      	cpsid	i
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	b662      	cpsie	i
 800c4f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d103      	bne.n	800c504 <xQueueGenericSend+0x44>
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <xQueueGenericSend+0x48>
 800c504:	2301      	movs	r3, #1
 800c506:	e000      	b.n	800c50a <xQueueGenericSend+0x4a>
 800c508:	2300      	movs	r3, #0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10c      	bne.n	800c528 <xQueueGenericSend+0x68>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d103      	bne.n	800c536 <xQueueGenericSend+0x76>
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c532:	2b01      	cmp	r3, #1
 800c534:	d101      	bne.n	800c53a <xQueueGenericSend+0x7a>
 800c536:	2301      	movs	r3, #1
 800c538:	e000      	b.n	800c53c <xQueueGenericSend+0x7c>
 800c53a:	2300      	movs	r3, #0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10c      	bne.n	800c55a <xQueueGenericSend+0x9a>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	b672      	cpsid	i
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	b662      	cpsie	i
 800c554:	623b      	str	r3, [r7, #32]
}
 800c556:	bf00      	nop
 800c558:	e7fe      	b.n	800c558 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c55a:	f001 fb1b 	bl	800db94 <xTaskGetSchedulerState>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <xQueueGenericSend+0xaa>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <xQueueGenericSend+0xae>
 800c56a:	2301      	movs	r3, #1
 800c56c:	e000      	b.n	800c570 <xQueueGenericSend+0xb0>
 800c56e:	2300      	movs	r3, #0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10c      	bne.n	800c58e <xQueueGenericSend+0xce>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	b672      	cpsid	i
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	b662      	cpsie	i
 800c588:	61fb      	str	r3, [r7, #28]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c58e:	f001 fe4d 	bl	800e22c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d302      	bcc.n	800c5a4 <xQueueGenericSend+0xe4>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d129      	bne.n	800c5f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5aa:	f000 fb41 	bl	800cc30 <prvCopyDataToQueue>
 800c5ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d010      	beq.n	800c5da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	3324      	adds	r3, #36	; 0x24
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f001 f921 	bl	800d804 <xTaskRemoveFromEventList>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d013      	beq.n	800c5f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c5c8:	4b3f      	ldr	r3, [pc, #252]	; (800c6c8 <xQueueGenericSend+0x208>)
 800c5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	e00a      	b.n	800c5f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d007      	beq.n	800c5f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5e0:	4b39      	ldr	r3, [pc, #228]	; (800c6c8 <xQueueGenericSend+0x208>)
 800c5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5f0:	f001 fe50 	bl	800e294 <vPortExitCritical>
				return pdPASS;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e063      	b.n	800c6c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d103      	bne.n	800c606 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5fe:	f001 fe49 	bl	800e294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c602:	2300      	movs	r3, #0
 800c604:	e05c      	b.n	800c6c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d106      	bne.n	800c61a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c60c:	f107 0314 	add.w	r3, r7, #20
 800c610:	4618      	mov	r0, r3
 800c612:	f001 f95b 	bl	800d8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c616:	2301      	movs	r3, #1
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c61a:	f001 fe3b 	bl	800e294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c61e:	f000 fef1 	bl	800d404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c622:	f001 fe03 	bl	800e22c <vPortEnterCritical>
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c62c:	b25b      	sxtb	r3, r3
 800c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c632:	d103      	bne.n	800c63c <xQueueGenericSend+0x17c>
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c642:	b25b      	sxtb	r3, r3
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c648:	d103      	bne.n	800c652 <xQueueGenericSend+0x192>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c652:	f001 fe1f 	bl	800e294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c656:	1d3a      	adds	r2, r7, #4
 800c658:	f107 0314 	add.w	r3, r7, #20
 800c65c:	4611      	mov	r1, r2
 800c65e:	4618      	mov	r0, r3
 800c660:	f001 f94a 	bl	800d8f8 <xTaskCheckForTimeOut>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d124      	bne.n	800c6b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c66a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c66c:	f000 fbd8 	bl	800ce20 <prvIsQueueFull>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d018      	beq.n	800c6a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	3310      	adds	r3, #16
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	4611      	mov	r1, r2
 800c67e:	4618      	mov	r0, r3
 800c680:	f001 f89a 	bl	800d7b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c686:	f000 fb63 	bl	800cd50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c68a:	f000 fec9 	bl	800d420 <xTaskResumeAll>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	f47f af7c 	bne.w	800c58e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c696:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <xQueueGenericSend+0x208>)
 800c698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	e772      	b.n	800c58e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6aa:	f000 fb51 	bl	800cd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ae:	f000 feb7 	bl	800d420 <xTaskResumeAll>
 800c6b2:	e76c      	b.n	800c58e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6b6:	f000 fb4b 	bl	800cd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6ba:	f000 feb1 	bl	800d420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3738      	adds	r7, #56	; 0x38
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08e      	sub	sp, #56	; 0x38
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10c      	bne.n	800c6fe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e8:	b672      	cpsid	i
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	b662      	cpsie	i
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d103      	bne.n	800c70c <xQueueGenericSendFromISR+0x40>
 800c704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <xQueueGenericSendFromISR+0x44>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <xQueueGenericSendFromISR+0x46>
 800c710:	2300      	movs	r3, #0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10c      	bne.n	800c730 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	b672      	cpsid	i
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	b662      	cpsie	i
 800c72a:	623b      	str	r3, [r7, #32]
}
 800c72c:	bf00      	nop
 800c72e:	e7fe      	b.n	800c72e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2b02      	cmp	r3, #2
 800c734:	d103      	bne.n	800c73e <xQueueGenericSendFromISR+0x72>
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d101      	bne.n	800c742 <xQueueGenericSendFromISR+0x76>
 800c73e:	2301      	movs	r3, #1
 800c740:	e000      	b.n	800c744 <xQueueGenericSendFromISR+0x78>
 800c742:	2300      	movs	r3, #0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10c      	bne.n	800c762 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	b672      	cpsid	i
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	b662      	cpsie	i
 800c75c:	61fb      	str	r3, [r7, #28]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c762:	f001 fe4b 	bl	800e3fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c766:	f3ef 8211 	mrs	r2, BASEPRI
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	b672      	cpsid	i
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	b662      	cpsie	i
 800c77e:	61ba      	str	r2, [r7, #24]
 800c780:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c782:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c784:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	429a      	cmp	r2, r3
 800c790:	d302      	bcc.n	800c798 <xQueueGenericSendFromISR+0xcc>
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d12c      	bne.n	800c7f2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c79e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7a8:	f000 fa42 	bl	800cc30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b4:	d112      	bne.n	800c7dc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d016      	beq.n	800c7ec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	3324      	adds	r3, #36	; 0x24
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f001 f81e 	bl	800d804 <xTaskRemoveFromEventList>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00e      	beq.n	800c7ec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e007      	b.n	800c7ec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	b25a      	sxtb	r2, r3
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c7f0:	e001      	b.n	800c7f6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c800:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c804:	4618      	mov	r0, r3
 800c806:	3738      	adds	r7, #56	; 0x38
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08c      	sub	sp, #48	; 0x30
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c818:	2300      	movs	r3, #0
 800c81a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10c      	bne.n	800c840 <xQueueReceive+0x34>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	b672      	cpsid	i
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	b662      	cpsie	i
 800c83a:	623b      	str	r3, [r7, #32]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <xQueueReceive+0x42>
 800c846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d101      	bne.n	800c852 <xQueueReceive+0x46>
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <xQueueReceive+0x48>
 800c852:	2300      	movs	r3, #0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10c      	bne.n	800c872 <xQueueReceive+0x66>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	b672      	cpsid	i
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	b662      	cpsie	i
 800c86c:	61fb      	str	r3, [r7, #28]
}
 800c86e:	bf00      	nop
 800c870:	e7fe      	b.n	800c870 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c872:	f001 f98f 	bl	800db94 <xTaskGetSchedulerState>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <xQueueReceive+0x76>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <xQueueReceive+0x7a>
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <xQueueReceive+0x7c>
 800c886:	2300      	movs	r3, #0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10c      	bne.n	800c8a6 <xQueueReceive+0x9a>
	__asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c890:	b672      	cpsid	i
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	b662      	cpsie	i
 800c8a0:	61bb      	str	r3, [r7, #24]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8a6:	f001 fcc1 	bl	800e22c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d01f      	beq.n	800c8f6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ba:	f000 fa23 	bl	800cd04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	1e5a      	subs	r2, r3, #1
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00f      	beq.n	800c8ee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	3310      	adds	r3, #16
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 ff96 	bl	800d804 <xTaskRemoveFromEventList>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c8de:	4b3d      	ldr	r3, [pc, #244]	; (800c9d4 <xQueueReceive+0x1c8>)
 800c8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8ee:	f001 fcd1 	bl	800e294 <vPortExitCritical>
				return pdPASS;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e069      	b.n	800c9ca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8fc:	f001 fcca 	bl	800e294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c900:	2300      	movs	r3, #0
 800c902:	e062      	b.n	800c9ca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d106      	bne.n	800c918 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c90a:	f107 0310 	add.w	r3, r7, #16
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 ffdc 	bl	800d8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c914:	2301      	movs	r3, #1
 800c916:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c918:	f001 fcbc 	bl	800e294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c91c:	f000 fd72 	bl	800d404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c920:	f001 fc84 	bl	800e22c <vPortEnterCritical>
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c92a:	b25b      	sxtb	r3, r3
 800c92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c930:	d103      	bne.n	800c93a <xQueueReceive+0x12e>
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	2200      	movs	r2, #0
 800c936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c940:	b25b      	sxtb	r3, r3
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d103      	bne.n	800c950 <xQueueReceive+0x144>
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	2200      	movs	r2, #0
 800c94c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c950:	f001 fca0 	bl	800e294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c954:	1d3a      	adds	r2, r7, #4
 800c956:	f107 0310 	add.w	r3, r7, #16
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 ffcb 	bl	800d8f8 <xTaskCheckForTimeOut>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d123      	bne.n	800c9b0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c96a:	f000 fa43 	bl	800cdf4 <prvIsQueueEmpty>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d017      	beq.n	800c9a4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	3324      	adds	r3, #36	; 0x24
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	4611      	mov	r1, r2
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 ff1b 	bl	800d7b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c984:	f000 f9e4 	bl	800cd50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c988:	f000 fd4a 	bl	800d420 <xTaskResumeAll>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d189      	bne.n	800c8a6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c992:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <xQueueReceive+0x1c8>)
 800c994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	e780      	b.n	800c8a6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9a6:	f000 f9d3 	bl	800cd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9aa:	f000 fd39 	bl	800d420 <xTaskResumeAll>
 800c9ae:	e77a      	b.n	800c8a6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9b2:	f000 f9cd 	bl	800cd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9b6:	f000 fd33 	bl	800d420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9bc:	f000 fa1a 	bl	800cdf4 <prvIsQueueEmpty>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f43f af6f 	beq.w	800c8a6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3730      	adds	r7, #48	; 0x30
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	e000ed04 	.word	0xe000ed04

0800c9d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08e      	sub	sp, #56	; 0x38
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10c      	bne.n	800ca0e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	b672      	cpsid	i
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	b662      	cpsie	i
 800ca08:	623b      	str	r3, [r7, #32]
}
 800ca0a:	bf00      	nop
 800ca0c:	e7fe      	b.n	800ca0c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00c      	beq.n	800ca30 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	b672      	cpsid	i
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	b662      	cpsie	i
 800ca2a:	61fb      	str	r3, [r7, #28]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca30:	f001 f8b0 	bl	800db94 <xTaskGetSchedulerState>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d102      	bne.n	800ca40 <xQueueSemaphoreTake+0x68>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <xQueueSemaphoreTake+0x6c>
 800ca40:	2301      	movs	r3, #1
 800ca42:	e000      	b.n	800ca46 <xQueueSemaphoreTake+0x6e>
 800ca44:	2300      	movs	r3, #0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10c      	bne.n	800ca64 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ca4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4e:	b672      	cpsid	i
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	b662      	cpsie	i
 800ca5e:	61bb      	str	r3, [r7, #24]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca64:	f001 fbe2 	bl	800e22c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d024      	beq.n	800cabe <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	1e5a      	subs	r2, r3, #1
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d104      	bne.n	800ca8e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca84:	f001 fa4c 	bl	800df20 <pvTaskIncrementMutexHeldCount>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00f      	beq.n	800cab6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	3310      	adds	r3, #16
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 feb2 	bl	800d804 <xTaskRemoveFromEventList>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d007      	beq.n	800cab6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800caa6:	4b55      	ldr	r3, [pc, #340]	; (800cbfc <xQueueSemaphoreTake+0x224>)
 800caa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cab6:	f001 fbed 	bl	800e294 <vPortExitCritical>
				return pdPASS;
 800caba:	2301      	movs	r3, #1
 800cabc:	e099      	b.n	800cbf2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d113      	bne.n	800caec <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00c      	beq.n	800cae4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	617b      	str	r3, [r7, #20]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cae4:	f001 fbd6 	bl	800e294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cae8:	2300      	movs	r3, #0
 800caea:	e082      	b.n	800cbf2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800caec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caf2:	f107 030c 	add.w	r3, r7, #12
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fee8 	bl	800d8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cafc:	2301      	movs	r3, #1
 800cafe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb00:	f001 fbc8 	bl	800e294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb04:	f000 fc7e 	bl	800d404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb08:	f001 fb90 	bl	800e22c <vPortEnterCritical>
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb12:	b25b      	sxtb	r3, r3
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d103      	bne.n	800cb22 <xQueueSemaphoreTake+0x14a>
 800cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb28:	b25b      	sxtb	r3, r3
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d103      	bne.n	800cb38 <xQueueSemaphoreTake+0x160>
 800cb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb38:	f001 fbac 	bl	800e294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb3c:	463a      	mov	r2, r7
 800cb3e:	f107 030c 	add.w	r3, r7, #12
 800cb42:	4611      	mov	r1, r2
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fed7 	bl	800d8f8 <xTaskCheckForTimeOut>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d132      	bne.n	800cbb6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb52:	f000 f94f 	bl	800cdf4 <prvIsQueueEmpty>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d026      	beq.n	800cbaa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d109      	bne.n	800cb78 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800cb64:	f001 fb62 	bl	800e22c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f001 f82f 	bl	800dbd0 <xTaskPriorityInherit>
 800cb72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cb74:	f001 fb8e 	bl	800e294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	3324      	adds	r3, #36	; 0x24
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	4611      	mov	r1, r2
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fe19 	bl	800d7b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb88:	f000 f8e2 	bl	800cd50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb8c:	f000 fc48 	bl	800d420 <xTaskResumeAll>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f47f af66 	bne.w	800ca64 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800cb98:	4b18      	ldr	r3, [pc, #96]	; (800cbfc <xQueueSemaphoreTake+0x224>)
 800cb9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	e75c      	b.n	800ca64 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cbaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbac:	f000 f8d0 	bl	800cd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbb0:	f000 fc36 	bl	800d420 <xTaskResumeAll>
 800cbb4:	e756      	b.n	800ca64 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cbb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb8:	f000 f8ca 	bl	800cd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbbc:	f000 fc30 	bl	800d420 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbc2:	f000 f917 	bl	800cdf4 <prvIsQueueEmpty>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f43f af4b 	beq.w	800ca64 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00d      	beq.n	800cbf0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800cbd4:	f001 fb2a 	bl	800e22c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cbd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbda:	f000 f811 	bl	800cc00 <prvGetDisinheritPriorityAfterTimeout>
 800cbde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f001 f8fc 	bl	800dde4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cbec:	f001 fb52 	bl	800e294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3738      	adds	r7, #56	; 0x38
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed04 	.word	0xe000ed04

0800cc00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f1c3 0307 	rsb	r3, r3, #7
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	e001      	b.n	800cc22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cc22:	68fb      	ldr	r3, [r7, #12]
	}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10d      	bne.n	800cc6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d14d      	bne.n	800ccf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f001 f838 	bl	800dcd0 <xTaskPriorityDisinherit>
 800cc60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	609a      	str	r2, [r3, #8]
 800cc68:	e043      	b.n	800ccf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d119      	bne.n	800cca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6858      	ldr	r0, [r3, #4]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc78:	461a      	mov	r2, r3
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	f001 fe12 	bl	800e8a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc88:	441a      	add	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d32b      	bcc.n	800ccf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	605a      	str	r2, [r3, #4]
 800cca2:	e026      	b.n	800ccf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	68d8      	ldr	r0, [r3, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccac:	461a      	mov	r2, r3
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	f001 fdf8 	bl	800e8a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbc:	425b      	negs	r3, r3
 800ccbe:	441a      	add	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	68da      	ldr	r2, [r3, #12]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d207      	bcs.n	800cce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	689a      	ldr	r2, [r3, #8]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd8:	425b      	negs	r3, r3
 800ccda:	441a      	add	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d105      	bne.n	800ccf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccfa:	697b      	ldr	r3, [r7, #20]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d018      	beq.n	800cd48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68da      	ldr	r2, [r3, #12]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1e:	441a      	add	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	68da      	ldr	r2, [r3, #12]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d303      	bcc.n	800cd38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68d9      	ldr	r1, [r3, #12]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd40:	461a      	mov	r2, r3
 800cd42:	6838      	ldr	r0, [r7, #0]
 800cd44:	f001 fdae 	bl	800e8a4 <memcpy>
	}
}
 800cd48:	bf00      	nop
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd58:	f001 fa68 	bl	800e22c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd64:	e011      	b.n	800cd8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d012      	beq.n	800cd94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3324      	adds	r3, #36	; 0x24
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 fd46 	bl	800d804 <xTaskRemoveFromEventList>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd7e:	f000 fe21 	bl	800d9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	dce9      	bgt.n	800cd66 <prvUnlockQueue+0x16>
 800cd92:	e000      	b.n	800cd96 <prvUnlockQueue+0x46>
					break;
 800cd94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	22ff      	movs	r2, #255	; 0xff
 800cd9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd9e:	f001 fa79 	bl	800e294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cda2:	f001 fa43 	bl	800e22c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdae:	e011      	b.n	800cdd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d012      	beq.n	800cdde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3310      	adds	r3, #16
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 fd21 	bl	800d804 <xTaskRemoveFromEventList>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d001      	beq.n	800cdcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cdc8:	f000 fdfc 	bl	800d9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dce9      	bgt.n	800cdb0 <prvUnlockQueue+0x60>
 800cddc:	e000      	b.n	800cde0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cdde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	22ff      	movs	r2, #255	; 0xff
 800cde4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cde8:	f001 fa54 	bl	800e294 <vPortExitCritical>
}
 800cdec:	bf00      	nop
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdfc:	f001 fa16 	bl	800e22c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	e001      	b.n	800ce12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce12:	f001 fa3f 	bl	800e294 <vPortExitCritical>

	return xReturn;
 800ce16:	68fb      	ldr	r3, [r7, #12]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce28:	f001 fa00 	bl	800e22c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d102      	bne.n	800ce3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	e001      	b.n	800ce42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce42:	f001 fa27 	bl	800e294 <vPortExitCritical>

	return xReturn;
 800ce46:	68fb      	ldr	r3, [r7, #12]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08e      	sub	sp, #56	; 0x38
 800ce54:	af04      	add	r7, sp, #16
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10c      	bne.n	800ce7e <xTaskCreateStatic+0x2e>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce68:	b672      	cpsid	i
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	b662      	cpsie	i
 800ce78:	623b      	str	r3, [r7, #32]
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10c      	bne.n	800ce9e <xTaskCreateStatic+0x4e>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	b672      	cpsid	i
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	b662      	cpsie	i
 800ce98:	61fb      	str	r3, [r7, #28]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce9e:	23b4      	movs	r3, #180	; 0xb4
 800cea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2bb4      	cmp	r3, #180	; 0xb4
 800cea6:	d00c      	beq.n	800cec2 <xTaskCreateStatic+0x72>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	b672      	cpsid	i
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	b662      	cpsie	i
 800cebc:	61bb      	str	r3, [r7, #24]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cec2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d01e      	beq.n	800cf08 <xTaskCreateStatic+0xb8>
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d01b      	beq.n	800cf08 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ced8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cedc:	2202      	movs	r2, #2
 800cede:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cee2:	2300      	movs	r3, #0
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee8:	9302      	str	r3, [sp, #8]
 800ceea:	f107 0314 	add.w	r3, r7, #20
 800ceee:	9301      	str	r3, [sp, #4]
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	68b9      	ldr	r1, [r7, #8]
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f000 f850 	bl	800cfa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf02:	f000 f8ed 	bl	800d0e0 <prvAddNewTaskToReadyList>
 800cf06:	e001      	b.n	800cf0c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf0c:	697b      	ldr	r3, [r7, #20]
	}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3728      	adds	r7, #40	; 0x28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b08c      	sub	sp, #48	; 0x30
 800cf1a:	af04      	add	r7, sp, #16
 800cf1c:	60f8      	str	r0, [r7, #12]
 800cf1e:	60b9      	str	r1, [r7, #8]
 800cf20:	603b      	str	r3, [r7, #0]
 800cf22:	4613      	mov	r3, r2
 800cf24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f001 faaa 	bl	800e484 <pvPortMalloc>
 800cf30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00e      	beq.n	800cf56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf38:	20b4      	movs	r0, #180	; 0xb4
 800cf3a:	f001 faa3 	bl	800e484 <pvPortMalloc>
 800cf3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	631a      	str	r2, [r3, #48]	; 0x30
 800cf4c:	e005      	b.n	800cf5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf4e:	6978      	ldr	r0, [r7, #20]
 800cf50:	f001 fb62 	bl	800e618 <vPortFree>
 800cf54:	e001      	b.n	800cf5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d017      	beq.n	800cf90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf68:	88fa      	ldrh	r2, [r7, #6]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	9303      	str	r3, [sp, #12]
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	9302      	str	r3, [sp, #8]
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f000 f80e 	bl	800cfa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf84:	69f8      	ldr	r0, [r7, #28]
 800cf86:	f000 f8ab 	bl	800d0e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	61bb      	str	r3, [r7, #24]
 800cf8e:	e002      	b.n	800cf96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf90:	f04f 33ff 	mov.w	r3, #4294967295
 800cf94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf96:	69bb      	ldr	r3, [r7, #24]
	}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3720      	adds	r7, #32
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cfb8:	440b      	add	r3, r1
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4413      	add	r3, r2
 800cfbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	f023 0307 	bic.w	r3, r3, #7
 800cfc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00c      	beq.n	800cfec <prvInitialiseNewTask+0x4c>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	b672      	cpsid	i
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	b662      	cpsie	i
 800cfe6:	617b      	str	r3, [r7, #20]
}
 800cfe8:	bf00      	nop
 800cfea:	e7fe      	b.n	800cfea <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d01f      	beq.n	800d032 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cff2:	2300      	movs	r3, #0
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	e012      	b.n	800d01e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	4413      	add	r3, r2
 800cffe:	7819      	ldrb	r1, [r3, #0]
 800d000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	3334      	adds	r3, #52	; 0x34
 800d008:	460a      	mov	r2, r1
 800d00a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	4413      	add	r3, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d006      	beq.n	800d026 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	3301      	adds	r3, #1
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	2b0f      	cmp	r3, #15
 800d022:	d9e9      	bls.n	800cff8 <prvInitialiseNewTask+0x58>
 800d024:	e000      	b.n	800d028 <prvInitialiseNewTask+0x88>
			{
				break;
 800d026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d030:	e003      	b.n	800d03a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	2b06      	cmp	r3, #6
 800d03e:	d901      	bls.n	800d044 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d040:	2306      	movs	r3, #6
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d04e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	2200      	movs	r2, #0
 800d054:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	3304      	adds	r3, #4
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff f801 	bl	800c062 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d062:	3318      	adds	r3, #24
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fffc 	bl	800c062 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d06e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	f1c3 0207 	rsb	r2, r3, #7
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d07e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	2200      	movs	r2, #0
 800d084:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	334c      	adds	r3, #76	; 0x4c
 800d094:	2260      	movs	r2, #96	; 0x60
 800d096:	2100      	movs	r1, #0
 800d098:	4618      	mov	r0, r3
 800d09a:	f001 fc11 	bl	800e8c0 <memset>
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	4a0c      	ldr	r2, [pc, #48]	; (800d0d4 <prvInitialiseNewTask+0x134>)
 800d0a2:	651a      	str	r2, [r3, #80]	; 0x50
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	4a0c      	ldr	r2, [pc, #48]	; (800d0d8 <prvInitialiseNewTask+0x138>)
 800d0a8:	655a      	str	r2, [r3, #84]	; 0x54
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	4a0b      	ldr	r2, [pc, #44]	; (800d0dc <prvInitialiseNewTask+0x13c>)
 800d0ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	68f9      	ldr	r1, [r7, #12]
 800d0b4:	69b8      	ldr	r0, [r7, #24]
 800d0b6:	f000 ffad 	bl	800e014 <pxPortInitialiseStack>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0cc:	bf00      	nop
 800d0ce:	3720      	adds	r7, #32
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	08081c6c 	.word	0x08081c6c
 800d0d8:	08081c8c 	.word	0x08081c8c
 800d0dc:	08081c4c 	.word	0x08081c4c

0800d0e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0e8:	f001 f8a0 	bl	800e22c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0ec:	4b2a      	ldr	r3, [pc, #168]	; (800d198 <prvAddNewTaskToReadyList+0xb8>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	4a29      	ldr	r2, [pc, #164]	; (800d198 <prvAddNewTaskToReadyList+0xb8>)
 800d0f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d0f6:	4b29      	ldr	r3, [pc, #164]	; (800d19c <prvAddNewTaskToReadyList+0xbc>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d109      	bne.n	800d112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0fe:	4a27      	ldr	r2, [pc, #156]	; (800d19c <prvAddNewTaskToReadyList+0xbc>)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d104:	4b24      	ldr	r3, [pc, #144]	; (800d198 <prvAddNewTaskToReadyList+0xb8>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d110      	bne.n	800d12e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d10c:	f000 fc7e 	bl	800da0c <prvInitialiseTaskLists>
 800d110:	e00d      	b.n	800d12e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d112:	4b23      	ldr	r3, [pc, #140]	; (800d1a0 <prvAddNewTaskToReadyList+0xc0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d109      	bne.n	800d12e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d11a:	4b20      	ldr	r3, [pc, #128]	; (800d19c <prvAddNewTaskToReadyList+0xbc>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	429a      	cmp	r2, r3
 800d126:	d802      	bhi.n	800d12e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d128:	4a1c      	ldr	r2, [pc, #112]	; (800d19c <prvAddNewTaskToReadyList+0xbc>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d12e:	4b1d      	ldr	r3, [pc, #116]	; (800d1a4 <prvAddNewTaskToReadyList+0xc4>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	4a1b      	ldr	r2, [pc, #108]	; (800d1a4 <prvAddNewTaskToReadyList+0xc4>)
 800d136:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d13c:	2201      	movs	r2, #1
 800d13e:	409a      	lsls	r2, r3
 800d140:	4b19      	ldr	r3, [pc, #100]	; (800d1a8 <prvAddNewTaskToReadyList+0xc8>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4313      	orrs	r3, r2
 800d146:	4a18      	ldr	r2, [pc, #96]	; (800d1a8 <prvAddNewTaskToReadyList+0xc8>)
 800d148:	6013      	str	r3, [r2, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4a15      	ldr	r2, [pc, #84]	; (800d1ac <prvAddNewTaskToReadyList+0xcc>)
 800d158:	441a      	add	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7fe ff8b 	bl	800c07c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d166:	f001 f895 	bl	800e294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d16a:	4b0d      	ldr	r3, [pc, #52]	; (800d1a0 <prvAddNewTaskToReadyList+0xc0>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00e      	beq.n	800d190 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d172:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <prvAddNewTaskToReadyList+0xbc>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d207      	bcs.n	800d190 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d180:	4b0b      	ldr	r3, [pc, #44]	; (800d1b0 <prvAddNewTaskToReadyList+0xd0>)
 800d182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d186:	601a      	str	r2, [r3, #0]
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	20000d9c 	.word	0x20000d9c
 800d19c:	20000c9c 	.word	0x20000c9c
 800d1a0:	20000da8 	.word	0x20000da8
 800d1a4:	20000db8 	.word	0x20000db8
 800d1a8:	20000da4 	.word	0x20000da4
 800d1ac:	20000ca0 	.word	0x20000ca0
 800d1b0:	e000ed04 	.word	0xe000ed04

0800d1b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08a      	sub	sp, #40	; 0x28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10c      	bne.n	800d1e2 <vTaskDelayUntil+0x2e>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	b672      	cpsid	i
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	b662      	cpsie	i
 800d1dc:	617b      	str	r3, [r7, #20]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10c      	bne.n	800d202 <vTaskDelayUntil+0x4e>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	b672      	cpsid	i
 800d1ee:	f383 8811 	msr	BASEPRI, r3
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	b662      	cpsie	i
 800d1fc:	613b      	str	r3, [r7, #16]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800d202:	4b2b      	ldr	r3, [pc, #172]	; (800d2b0 <vTaskDelayUntil+0xfc>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00c      	beq.n	800d224 <vTaskDelayUntil+0x70>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20e:	b672      	cpsid	i
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	b662      	cpsie	i
 800d21e:	60fb      	str	r3, [r7, #12]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800d224:	f000 f8ee 	bl	800d404 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d228:	4b22      	ldr	r3, [pc, #136]	; (800d2b4 <vTaskDelayUntil+0x100>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	4413      	add	r3, r2
 800d236:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6a3a      	ldr	r2, [r7, #32]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d20b      	bcs.n	800d25a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	69fa      	ldr	r2, [r7, #28]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d211      	bcs.n	800d270 <vTaskDelayUntil+0xbc>
 800d24c:	69fa      	ldr	r2, [r7, #28]
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	429a      	cmp	r2, r3
 800d252:	d90d      	bls.n	800d270 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d254:	2301      	movs	r3, #1
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
 800d258:	e00a      	b.n	800d270 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	69fa      	ldr	r2, [r7, #28]
 800d260:	429a      	cmp	r2, r3
 800d262:	d303      	bcc.n	800d26c <vTaskDelayUntil+0xb8>
 800d264:	69fa      	ldr	r2, [r7, #28]
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d901      	bls.n	800d270 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d26c:	2301      	movs	r3, #1
 800d26e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	69fa      	ldr	r2, [r7, #28]
 800d274:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d006      	beq.n	800d28a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d27c:	69fa      	ldr	r2, [r7, #28]
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	2100      	movs	r1, #0
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fe5f 	bl	800df48 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d28a:	f000 f8c9 	bl	800d420 <xTaskResumeAll>
 800d28e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d107      	bne.n	800d2a6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800d296:	4b08      	ldr	r3, [pc, #32]	; (800d2b8 <vTaskDelayUntil+0x104>)
 800d298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2a6:	bf00      	nop
 800d2a8:	3728      	adds	r7, #40	; 0x28
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000dc4 	.word	0x20000dc4
 800d2b4:	20000da0 	.word	0x20000da0
 800d2b8:	e000ed04 	.word	0xe000ed04

0800d2bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d019      	beq.n	800d302 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d2ce:	4b14      	ldr	r3, [pc, #80]	; (800d320 <vTaskDelay+0x64>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00c      	beq.n	800d2f0 <vTaskDelay+0x34>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	b672      	cpsid	i
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	b662      	cpsie	i
 800d2ea:	60bb      	str	r3, [r7, #8]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d2f0:	f000 f888 	bl	800d404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fe26 	bl	800df48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d2fc:	f000 f890 	bl	800d420 <xTaskResumeAll>
 800d300:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d107      	bne.n	800d318 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d308:	4b06      	ldr	r3, [pc, #24]	; (800d324 <vTaskDelay+0x68>)
 800d30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d318:	bf00      	nop
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20000dc4 	.word	0x20000dc4
 800d324:	e000ed04 	.word	0xe000ed04

0800d328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08a      	sub	sp, #40	; 0x28
 800d32c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d332:	2300      	movs	r3, #0
 800d334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d336:	463a      	mov	r2, r7
 800d338:	1d39      	adds	r1, r7, #4
 800d33a:	f107 0308 	add.w	r3, r7, #8
 800d33e:	4618      	mov	r0, r3
 800d340:	f7f3 fc12 	bl	8000b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68ba      	ldr	r2, [r7, #8]
 800d34a:	9202      	str	r2, [sp, #8]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	2300      	movs	r3, #0
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	2300      	movs	r3, #0
 800d354:	460a      	mov	r2, r1
 800d356:	4923      	ldr	r1, [pc, #140]	; (800d3e4 <vTaskStartScheduler+0xbc>)
 800d358:	4823      	ldr	r0, [pc, #140]	; (800d3e8 <vTaskStartScheduler+0xc0>)
 800d35a:	f7ff fd79 	bl	800ce50 <xTaskCreateStatic>
 800d35e:	4603      	mov	r3, r0
 800d360:	4a22      	ldr	r2, [pc, #136]	; (800d3ec <vTaskStartScheduler+0xc4>)
 800d362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d364:	4b21      	ldr	r3, [pc, #132]	; (800d3ec <vTaskStartScheduler+0xc4>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d36c:	2301      	movs	r3, #1
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	e001      	b.n	800d376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d372:	2300      	movs	r3, #0
 800d374:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d11d      	bne.n	800d3b8 <vTaskStartScheduler+0x90>
	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	b672      	cpsid	i
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	b662      	cpsie	i
 800d390:	613b      	str	r3, [r7, #16]
}
 800d392:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d394:	4b16      	ldr	r3, [pc, #88]	; (800d3f0 <vTaskStartScheduler+0xc8>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	334c      	adds	r3, #76	; 0x4c
 800d39a:	4a16      	ldr	r2, [pc, #88]	; (800d3f4 <vTaskStartScheduler+0xcc>)
 800d39c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d39e:	4b16      	ldr	r3, [pc, #88]	; (800d3f8 <vTaskStartScheduler+0xd0>)
 800d3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d3a6:	4b15      	ldr	r3, [pc, #84]	; (800d3fc <vTaskStartScheduler+0xd4>)
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d3ac:	4b14      	ldr	r3, [pc, #80]	; (800d400 <vTaskStartScheduler+0xd8>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d3b2:	f000 febd 	bl	800e130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d3b6:	e010      	b.n	800d3da <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	d10c      	bne.n	800d3da <vTaskStartScheduler+0xb2>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	b672      	cpsid	i
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	b662      	cpsie	i
 800d3d4:	60fb      	str	r3, [r7, #12]
}
 800d3d6:	bf00      	nop
 800d3d8:	e7fe      	b.n	800d3d8 <vTaskStartScheduler+0xb0>
}
 800d3da:	bf00      	nop
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800f3e0 	.word	0x0800f3e0
 800d3e8:	0800d9dd 	.word	0x0800d9dd
 800d3ec:	20000dc0 	.word	0x20000dc0
 800d3f0:	20000c9c 	.word	0x20000c9c
 800d3f4:	20000068 	.word	0x20000068
 800d3f8:	20000dbc 	.word	0x20000dbc
 800d3fc:	20000da8 	.word	0x20000da8
 800d400:	20000da0 	.word	0x20000da0

0800d404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d404:	b480      	push	{r7}
 800d406:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d408:	4b04      	ldr	r3, [pc, #16]	; (800d41c <vTaskSuspendAll+0x18>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	4a03      	ldr	r2, [pc, #12]	; (800d41c <vTaskSuspendAll+0x18>)
 800d410:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d412:	bf00      	nop
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	20000dc4 	.word	0x20000dc4

0800d420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d42e:	4b42      	ldr	r3, [pc, #264]	; (800d538 <xTaskResumeAll+0x118>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10c      	bne.n	800d450 <xTaskResumeAll+0x30>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	b672      	cpsid	i
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	b662      	cpsie	i
 800d44a:	603b      	str	r3, [r7, #0]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d450:	f000 feec 	bl	800e22c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d454:	4b38      	ldr	r3, [pc, #224]	; (800d538 <xTaskResumeAll+0x118>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3b01      	subs	r3, #1
 800d45a:	4a37      	ldr	r2, [pc, #220]	; (800d538 <xTaskResumeAll+0x118>)
 800d45c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d45e:	4b36      	ldr	r3, [pc, #216]	; (800d538 <xTaskResumeAll+0x118>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d161      	bne.n	800d52a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d466:	4b35      	ldr	r3, [pc, #212]	; (800d53c <xTaskResumeAll+0x11c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d05d      	beq.n	800d52a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d46e:	e02e      	b.n	800d4ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d470:	4b33      	ldr	r3, [pc, #204]	; (800d540 <xTaskResumeAll+0x120>)
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3318      	adds	r3, #24
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fe5a 	bl	800c136 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	3304      	adds	r3, #4
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe fe55 	bl	800c136 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	2201      	movs	r2, #1
 800d492:	409a      	lsls	r2, r3
 800d494:	4b2b      	ldr	r3, [pc, #172]	; (800d544 <xTaskResumeAll+0x124>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4313      	orrs	r3, r2
 800d49a:	4a2a      	ldr	r2, [pc, #168]	; (800d544 <xTaskResumeAll+0x124>)
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	4413      	add	r3, r2
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	4a27      	ldr	r2, [pc, #156]	; (800d548 <xTaskResumeAll+0x128>)
 800d4ac:	441a      	add	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	f7fe fde1 	bl	800c07c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4be:	4b23      	ldr	r3, [pc, #140]	; (800d54c <xTaskResumeAll+0x12c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d302      	bcc.n	800d4ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d4c8:	4b21      	ldr	r3, [pc, #132]	; (800d550 <xTaskResumeAll+0x130>)
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4ce:	4b1c      	ldr	r3, [pc, #112]	; (800d540 <xTaskResumeAll+0x120>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1cc      	bne.n	800d470 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d4dc:	f000 fb3a 	bl	800db54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d4e0:	4b1c      	ldr	r3, [pc, #112]	; (800d554 <xTaskResumeAll+0x134>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d010      	beq.n	800d50e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d4ec:	f000 f846 	bl	800d57c <xTaskIncrementTick>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d002      	beq.n	800d4fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d4f6:	4b16      	ldr	r3, [pc, #88]	; (800d550 <xTaskResumeAll+0x130>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1f1      	bne.n	800d4ec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d508:	4b12      	ldr	r3, [pc, #72]	; (800d554 <xTaskResumeAll+0x134>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d50e:	4b10      	ldr	r3, [pc, #64]	; (800d550 <xTaskResumeAll+0x130>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d516:	2301      	movs	r3, #1
 800d518:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d51a:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <xTaskResumeAll+0x138>)
 800d51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d52a:	f000 feb3 	bl	800e294 <vPortExitCritical>

	return xAlreadyYielded;
 800d52e:	68bb      	ldr	r3, [r7, #8]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20000dc4 	.word	0x20000dc4
 800d53c:	20000d9c 	.word	0x20000d9c
 800d540:	20000d5c 	.word	0x20000d5c
 800d544:	20000da4 	.word	0x20000da4
 800d548:	20000ca0 	.word	0x20000ca0
 800d54c:	20000c9c 	.word	0x20000c9c
 800d550:	20000db0 	.word	0x20000db0
 800d554:	20000dac 	.word	0x20000dac
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <xTaskGetTickCount+0x1c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d568:	687b      	ldr	r3, [r7, #4]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	20000da0 	.word	0x20000da0

0800d57c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d582:	2300      	movs	r3, #0
 800d584:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d586:	4b4f      	ldr	r3, [pc, #316]	; (800d6c4 <xTaskIncrementTick+0x148>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f040 808a 	bne.w	800d6a4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d590:	4b4d      	ldr	r3, [pc, #308]	; (800d6c8 <xTaskIncrementTick+0x14c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d598:	4a4b      	ldr	r2, [pc, #300]	; (800d6c8 <xTaskIncrementTick+0x14c>)
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d122      	bne.n	800d5ea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d5a4:	4b49      	ldr	r3, [pc, #292]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00c      	beq.n	800d5c8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	b672      	cpsid	i
 800d5b4:	f383 8811 	msr	BASEPRI, r3
 800d5b8:	f3bf 8f6f 	isb	sy
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	b662      	cpsie	i
 800d5c2:	603b      	str	r3, [r7, #0]
}
 800d5c4:	bf00      	nop
 800d5c6:	e7fe      	b.n	800d5c6 <xTaskIncrementTick+0x4a>
 800d5c8:	4b40      	ldr	r3, [pc, #256]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	4b40      	ldr	r3, [pc, #256]	; (800d6d0 <xTaskIncrementTick+0x154>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a3e      	ldr	r2, [pc, #248]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	4a3e      	ldr	r2, [pc, #248]	; (800d6d0 <xTaskIncrementTick+0x154>)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	4b3d      	ldr	r3, [pc, #244]	; (800d6d4 <xTaskIncrementTick+0x158>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	4a3c      	ldr	r2, [pc, #240]	; (800d6d4 <xTaskIncrementTick+0x158>)
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	f000 fab5 	bl	800db54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5ea:	4b3b      	ldr	r3, [pc, #236]	; (800d6d8 <xTaskIncrementTick+0x15c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d348      	bcc.n	800d686 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5f4:	4b35      	ldr	r3, [pc, #212]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d104      	bne.n	800d608 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5fe:	4b36      	ldr	r3, [pc, #216]	; (800d6d8 <xTaskIncrementTick+0x15c>)
 800d600:	f04f 32ff 	mov.w	r2, #4294967295
 800d604:	601a      	str	r2, [r3, #0]
					break;
 800d606:	e03e      	b.n	800d686 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d608:	4b30      	ldr	r3, [pc, #192]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d203      	bcs.n	800d628 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d620:	4a2d      	ldr	r2, [pc, #180]	; (800d6d8 <xTaskIncrementTick+0x15c>)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d626:	e02e      	b.n	800d686 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	3304      	adds	r3, #4
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fd82 	bl	800c136 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d636:	2b00      	cmp	r3, #0
 800d638:	d004      	beq.n	800d644 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	3318      	adds	r3, #24
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fe fd79 	bl	800c136 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d648:	2201      	movs	r2, #1
 800d64a:	409a      	lsls	r2, r3
 800d64c:	4b23      	ldr	r3, [pc, #140]	; (800d6dc <xTaskIncrementTick+0x160>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4313      	orrs	r3, r2
 800d652:	4a22      	ldr	r2, [pc, #136]	; (800d6dc <xTaskIncrementTick+0x160>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65a:	4613      	mov	r3, r2
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	4413      	add	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4a1f      	ldr	r2, [pc, #124]	; (800d6e0 <xTaskIncrementTick+0x164>)
 800d664:	441a      	add	r2, r3
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	3304      	adds	r3, #4
 800d66a:	4619      	mov	r1, r3
 800d66c:	4610      	mov	r0, r2
 800d66e:	f7fe fd05 	bl	800c07c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d676:	4b1b      	ldr	r3, [pc, #108]	; (800d6e4 <xTaskIncrementTick+0x168>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d3b9      	bcc.n	800d5f4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d680:	2301      	movs	r3, #1
 800d682:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d684:	e7b6      	b.n	800d5f4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d686:	4b17      	ldr	r3, [pc, #92]	; (800d6e4 <xTaskIncrementTick+0x168>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	4914      	ldr	r1, [pc, #80]	; (800d6e0 <xTaskIncrementTick+0x164>)
 800d68e:	4613      	mov	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	4413      	add	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	440b      	add	r3, r1
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d907      	bls.n	800d6ae <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	617b      	str	r3, [r7, #20]
 800d6a2:	e004      	b.n	800d6ae <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d6a4:	4b10      	ldr	r3, [pc, #64]	; (800d6e8 <xTaskIncrementTick+0x16c>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	4a0f      	ldr	r2, [pc, #60]	; (800d6e8 <xTaskIncrementTick+0x16c>)
 800d6ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <xTaskIncrementTick+0x170>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d6ba:	697b      	ldr	r3, [r7, #20]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20000dc4 	.word	0x20000dc4
 800d6c8:	20000da0 	.word	0x20000da0
 800d6cc:	20000d54 	.word	0x20000d54
 800d6d0:	20000d58 	.word	0x20000d58
 800d6d4:	20000db4 	.word	0x20000db4
 800d6d8:	20000dbc 	.word	0x20000dbc
 800d6dc:	20000da4 	.word	0x20000da4
 800d6e0:	20000ca0 	.word	0x20000ca0
 800d6e4:	20000c9c 	.word	0x20000c9c
 800d6e8:	20000dac 	.word	0x20000dac
 800d6ec:	20000db0 	.word	0x20000db0

0800d6f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b087      	sub	sp, #28
 800d6f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6f6:	4b2a      	ldr	r3, [pc, #168]	; (800d7a0 <vTaskSwitchContext+0xb0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6fe:	4b29      	ldr	r3, [pc, #164]	; (800d7a4 <vTaskSwitchContext+0xb4>)
 800d700:	2201      	movs	r2, #1
 800d702:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d704:	e046      	b.n	800d794 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d706:	4b27      	ldr	r3, [pc, #156]	; (800d7a4 <vTaskSwitchContext+0xb4>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d70c:	4b26      	ldr	r3, [pc, #152]	; (800d7a8 <vTaskSwitchContext+0xb8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	fab3 f383 	clz	r3, r3
 800d718:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d71a:	7afb      	ldrb	r3, [r7, #11]
 800d71c:	f1c3 031f 	rsb	r3, r3, #31
 800d720:	617b      	str	r3, [r7, #20]
 800d722:	4922      	ldr	r1, [pc, #136]	; (800d7ac <vTaskSwitchContext+0xbc>)
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10c      	bne.n	800d750 <vTaskSwitchContext+0x60>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	b672      	cpsid	i
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	b662      	cpsie	i
 800d74a:	607b      	str	r3, [r7, #4]
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <vTaskSwitchContext+0x5e>
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	4613      	mov	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4413      	add	r3, r2
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	4a14      	ldr	r2, [pc, #80]	; (800d7ac <vTaskSwitchContext+0xbc>)
 800d75c:	4413      	add	r3, r2
 800d75e:	613b      	str	r3, [r7, #16]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	605a      	str	r2, [r3, #4]
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	3308      	adds	r3, #8
 800d772:	429a      	cmp	r2, r3
 800d774:	d104      	bne.n	800d780 <vTaskSwitchContext+0x90>
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	605a      	str	r2, [r3, #4]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	4a0a      	ldr	r2, [pc, #40]	; (800d7b0 <vTaskSwitchContext+0xc0>)
 800d788:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <vTaskSwitchContext+0xc0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	334c      	adds	r3, #76	; 0x4c
 800d790:	4a08      	ldr	r2, [pc, #32]	; (800d7b4 <vTaskSwitchContext+0xc4>)
 800d792:	6013      	str	r3, [r2, #0]
}
 800d794:	bf00      	nop
 800d796:	371c      	adds	r7, #28
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	20000dc4 	.word	0x20000dc4
 800d7a4:	20000db0 	.word	0x20000db0
 800d7a8:	20000da4 	.word	0x20000da4
 800d7ac:	20000ca0 	.word	0x20000ca0
 800d7b0:	20000c9c 	.word	0x20000c9c
 800d7b4:	20000068 	.word	0x20000068

0800d7b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10c      	bne.n	800d7e2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	b672      	cpsid	i
 800d7ce:	f383 8811 	msr	BASEPRI, r3
 800d7d2:	f3bf 8f6f 	isb	sy
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	b662      	cpsie	i
 800d7dc:	60fb      	str	r3, [r7, #12]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7e2:	4b07      	ldr	r3, [pc, #28]	; (800d800 <vTaskPlaceOnEventList+0x48>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3318      	adds	r3, #24
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7fe fc6a 	bl	800c0c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	6838      	ldr	r0, [r7, #0]
 800d7f4:	f000 fba8 	bl	800df48 <prvAddCurrentTaskToDelayedList>
}
 800d7f8:	bf00      	nop
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20000c9c 	.word	0x20000c9c

0800d804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d10c      	bne.n	800d834 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	b672      	cpsid	i
 800d820:	f383 8811 	msr	BASEPRI, r3
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	f3bf 8f4f 	dsb	sy
 800d82c:	b662      	cpsie	i
 800d82e:	60fb      	str	r3, [r7, #12]
}
 800d830:	bf00      	nop
 800d832:	e7fe      	b.n	800d832 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	3318      	adds	r3, #24
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fe fc7c 	bl	800c136 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d83e:	4b1d      	ldr	r3, [pc, #116]	; (800d8b4 <xTaskRemoveFromEventList+0xb0>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d11c      	bne.n	800d880 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	3304      	adds	r3, #4
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fe fc73 	bl	800c136 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	2201      	movs	r2, #1
 800d856:	409a      	lsls	r2, r3
 800d858:	4b17      	ldr	r3, [pc, #92]	; (800d8b8 <xTaskRemoveFromEventList+0xb4>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	4a16      	ldr	r2, [pc, #88]	; (800d8b8 <xTaskRemoveFromEventList+0xb4>)
 800d860:	6013      	str	r3, [r2, #0]
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d866:	4613      	mov	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4a13      	ldr	r2, [pc, #76]	; (800d8bc <xTaskRemoveFromEventList+0xb8>)
 800d870:	441a      	add	r2, r3
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	3304      	adds	r3, #4
 800d876:	4619      	mov	r1, r3
 800d878:	4610      	mov	r0, r2
 800d87a:	f7fe fbff 	bl	800c07c <vListInsertEnd>
 800d87e:	e005      	b.n	800d88c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	3318      	adds	r3, #24
 800d884:	4619      	mov	r1, r3
 800d886:	480e      	ldr	r0, [pc, #56]	; (800d8c0 <xTaskRemoveFromEventList+0xbc>)
 800d888:	f7fe fbf8 	bl	800c07c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d890:	4b0c      	ldr	r3, [pc, #48]	; (800d8c4 <xTaskRemoveFromEventList+0xc0>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d896:	429a      	cmp	r2, r3
 800d898:	d905      	bls.n	800d8a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d89a:	2301      	movs	r3, #1
 800d89c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d89e:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <xTaskRemoveFromEventList+0xc4>)
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	e001      	b.n	800d8aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d8aa:	697b      	ldr	r3, [r7, #20]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	20000dc4 	.word	0x20000dc4
 800d8b8:	20000da4 	.word	0x20000da4
 800d8bc:	20000ca0 	.word	0x20000ca0
 800d8c0:	20000d5c 	.word	0x20000d5c
 800d8c4:	20000c9c 	.word	0x20000c9c
 800d8c8:	20000db0 	.word	0x20000db0

0800d8cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d8d4:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <vTaskInternalSetTimeOutState+0x24>)
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d8dc:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <vTaskInternalSetTimeOutState+0x28>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	605a      	str	r2, [r3, #4]
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	20000db4 	.word	0x20000db4
 800d8f4:	20000da0 	.word	0x20000da0

0800d8f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10c      	bne.n	800d922 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	b672      	cpsid	i
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	b662      	cpsie	i
 800d91c:	613b      	str	r3, [r7, #16]
}
 800d91e:	bf00      	nop
 800d920:	e7fe      	b.n	800d920 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10c      	bne.n	800d942 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	b672      	cpsid	i
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	b662      	cpsie	i
 800d93c:	60fb      	str	r3, [r7, #12]
}
 800d93e:	bf00      	nop
 800d940:	e7fe      	b.n	800d940 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d942:	f000 fc73 	bl	800e22c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d946:	4b1d      	ldr	r3, [pc, #116]	; (800d9bc <xTaskCheckForTimeOut+0xc4>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95e:	d102      	bne.n	800d966 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d960:	2300      	movs	r3, #0
 800d962:	61fb      	str	r3, [r7, #28]
 800d964:	e023      	b.n	800d9ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <xTaskCheckForTimeOut+0xc8>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d007      	beq.n	800d982 <xTaskCheckForTimeOut+0x8a>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	69ba      	ldr	r2, [r7, #24]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d302      	bcc.n	800d982 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d97c:	2301      	movs	r3, #1
 800d97e:	61fb      	str	r3, [r7, #28]
 800d980:	e015      	b.n	800d9ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d20b      	bcs.n	800d9a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	1ad2      	subs	r2, r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff ff97 	bl	800d8cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	61fb      	str	r3, [r7, #28]
 800d9a2:	e004      	b.n	800d9ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d9ae:	f000 fc71 	bl	800e294 <vPortExitCritical>

	return xReturn;
 800d9b2:	69fb      	ldr	r3, [r7, #28]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3720      	adds	r7, #32
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20000da0 	.word	0x20000da0
 800d9c0:	20000db4 	.word	0x20000db4

0800d9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <vTaskMissedYield+0x14>)
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	601a      	str	r2, [r3, #0]
}
 800d9ce:	bf00      	nop
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	20000db0 	.word	0x20000db0

0800d9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d9e4:	f000 f852 	bl	800da8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d9e8:	4b06      	ldr	r3, [pc, #24]	; (800da04 <prvIdleTask+0x28>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d9f9      	bls.n	800d9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <prvIdleTask+0x2c>)
 800d9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da00:	e7f0      	b.n	800d9e4 <prvIdleTask+0x8>
 800da02:	bf00      	nop
 800da04:	20000ca0 	.word	0x20000ca0
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da12:	2300      	movs	r3, #0
 800da14:	607b      	str	r3, [r7, #4]
 800da16:	e00c      	b.n	800da32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	4613      	mov	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4a12      	ldr	r2, [pc, #72]	; (800da6c <prvInitialiseTaskLists+0x60>)
 800da24:	4413      	add	r3, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fafb 	bl	800c022 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	3301      	adds	r3, #1
 800da30:	607b      	str	r3, [r7, #4]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2b06      	cmp	r3, #6
 800da36:	d9ef      	bls.n	800da18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da38:	480d      	ldr	r0, [pc, #52]	; (800da70 <prvInitialiseTaskLists+0x64>)
 800da3a:	f7fe faf2 	bl	800c022 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da3e:	480d      	ldr	r0, [pc, #52]	; (800da74 <prvInitialiseTaskLists+0x68>)
 800da40:	f7fe faef 	bl	800c022 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da44:	480c      	ldr	r0, [pc, #48]	; (800da78 <prvInitialiseTaskLists+0x6c>)
 800da46:	f7fe faec 	bl	800c022 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da4a:	480c      	ldr	r0, [pc, #48]	; (800da7c <prvInitialiseTaskLists+0x70>)
 800da4c:	f7fe fae9 	bl	800c022 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da50:	480b      	ldr	r0, [pc, #44]	; (800da80 <prvInitialiseTaskLists+0x74>)
 800da52:	f7fe fae6 	bl	800c022 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <prvInitialiseTaskLists+0x78>)
 800da58:	4a05      	ldr	r2, [pc, #20]	; (800da70 <prvInitialiseTaskLists+0x64>)
 800da5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da5c:	4b0a      	ldr	r3, [pc, #40]	; (800da88 <prvInitialiseTaskLists+0x7c>)
 800da5e:	4a05      	ldr	r2, [pc, #20]	; (800da74 <prvInitialiseTaskLists+0x68>)
 800da60:	601a      	str	r2, [r3, #0]
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20000ca0 	.word	0x20000ca0
 800da70:	20000d2c 	.word	0x20000d2c
 800da74:	20000d40 	.word	0x20000d40
 800da78:	20000d5c 	.word	0x20000d5c
 800da7c:	20000d70 	.word	0x20000d70
 800da80:	20000d88 	.word	0x20000d88
 800da84:	20000d54 	.word	0x20000d54
 800da88:	20000d58 	.word	0x20000d58

0800da8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da92:	e019      	b.n	800dac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da94:	f000 fbca 	bl	800e22c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da98:	4b10      	ldr	r3, [pc, #64]	; (800dadc <prvCheckTasksWaitingTermination+0x50>)
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	3304      	adds	r3, #4
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe fb46 	bl	800c136 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800daaa:	4b0d      	ldr	r3, [pc, #52]	; (800dae0 <prvCheckTasksWaitingTermination+0x54>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3b01      	subs	r3, #1
 800dab0:	4a0b      	ldr	r2, [pc, #44]	; (800dae0 <prvCheckTasksWaitingTermination+0x54>)
 800dab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dab4:	4b0b      	ldr	r3, [pc, #44]	; (800dae4 <prvCheckTasksWaitingTermination+0x58>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3b01      	subs	r3, #1
 800daba:	4a0a      	ldr	r2, [pc, #40]	; (800dae4 <prvCheckTasksWaitingTermination+0x58>)
 800dabc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dabe:	f000 fbe9 	bl	800e294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f810 	bl	800dae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dac8:	4b06      	ldr	r3, [pc, #24]	; (800dae4 <prvCheckTasksWaitingTermination+0x58>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1e1      	bne.n	800da94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000d70 	.word	0x20000d70
 800dae0:	20000d9c 	.word	0x20000d9c
 800dae4:	20000d84 	.word	0x20000d84

0800dae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	334c      	adds	r3, #76	; 0x4c
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 ff8d 	bl	800ea14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d108      	bne.n	800db16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 fd85 	bl	800e618 <vPortFree>
				vPortFree( pxTCB );
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fd82 	bl	800e618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db14:	e01a      	b.n	800db4c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d103      	bne.n	800db28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fd79 	bl	800e618 <vPortFree>
	}
 800db26:	e011      	b.n	800db4c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d00c      	beq.n	800db4c <prvDeleteTCB+0x64>
	__asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db36:	b672      	cpsid	i
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	b662      	cpsie	i
 800db46:	60fb      	str	r3, [r7, #12]
}
 800db48:	bf00      	nop
 800db4a:	e7fe      	b.n	800db4a <prvDeleteTCB+0x62>
	}
 800db4c:	bf00      	nop
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db5a:	4b0c      	ldr	r3, [pc, #48]	; (800db8c <prvResetNextTaskUnblockTime+0x38>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d104      	bne.n	800db6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db64:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <prvResetNextTaskUnblockTime+0x3c>)
 800db66:	f04f 32ff 	mov.w	r2, #4294967295
 800db6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db6c:	e008      	b.n	800db80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db6e:	4b07      	ldr	r3, [pc, #28]	; (800db8c <prvResetNextTaskUnblockTime+0x38>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	4a04      	ldr	r2, [pc, #16]	; (800db90 <prvResetNextTaskUnblockTime+0x3c>)
 800db7e:	6013      	str	r3, [r2, #0]
}
 800db80:	bf00      	nop
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	20000d54 	.word	0x20000d54
 800db90:	20000dbc 	.word	0x20000dbc

0800db94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db9a:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <xTaskGetSchedulerState+0x34>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dba2:	2301      	movs	r3, #1
 800dba4:	607b      	str	r3, [r7, #4]
 800dba6:	e008      	b.n	800dbba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dba8:	4b08      	ldr	r3, [pc, #32]	; (800dbcc <xTaskGetSchedulerState+0x38>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	607b      	str	r3, [r7, #4]
 800dbb4:	e001      	b.n	800dbba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dbba:	687b      	ldr	r3, [r7, #4]
	}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	20000da8 	.word	0x20000da8
 800dbcc:	20000dc4 	.word	0x20000dc4

0800dbd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d069      	beq.n	800dcba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbea:	4b36      	ldr	r3, [pc, #216]	; (800dcc4 <xTaskPriorityInherit+0xf4>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d259      	bcs.n	800dca8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	699b      	ldr	r3, [r3, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	db06      	blt.n	800dc0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbfc:	4b31      	ldr	r3, [pc, #196]	; (800dcc4 <xTaskPriorityInherit+0xf4>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc02:	f1c3 0207 	rsb	r2, r3, #7
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	6959      	ldr	r1, [r3, #20]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc12:	4613      	mov	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4a2b      	ldr	r2, [pc, #172]	; (800dcc8 <xTaskPriorityInherit+0xf8>)
 800dc1c:	4413      	add	r3, r2
 800dc1e:	4299      	cmp	r1, r3
 800dc20:	d13a      	bne.n	800dc98 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fe fa85 	bl	800c136 <uxListRemove>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d115      	bne.n	800dc5e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc36:	4924      	ldr	r1, [pc, #144]	; (800dcc8 <xTaskPriorityInherit+0xf8>)
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	440b      	add	r3, r1
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10a      	bne.n	800dc5e <xTaskPriorityInherit+0x8e>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc52:	43da      	mvns	r2, r3
 800dc54:	4b1d      	ldr	r3, [pc, #116]	; (800dccc <xTaskPriorityInherit+0xfc>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4013      	ands	r3, r2
 800dc5a:	4a1c      	ldr	r2, [pc, #112]	; (800dccc <xTaskPriorityInherit+0xfc>)
 800dc5c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc5e:	4b19      	ldr	r3, [pc, #100]	; (800dcc4 <xTaskPriorityInherit+0xf4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	409a      	lsls	r2, r3
 800dc70:	4b16      	ldr	r3, [pc, #88]	; (800dccc <xTaskPriorityInherit+0xfc>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4313      	orrs	r3, r2
 800dc76:	4a15      	ldr	r2, [pc, #84]	; (800dccc <xTaskPriorityInherit+0xfc>)
 800dc78:	6013      	str	r3, [r2, #0]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7e:	4613      	mov	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4413      	add	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4a10      	ldr	r2, [pc, #64]	; (800dcc8 <xTaskPriorityInherit+0xf8>)
 800dc88:	441a      	add	r2, r3
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f7fe f9f3 	bl	800c07c <vListInsertEnd>
 800dc96:	e004      	b.n	800dca2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc98:	4b0a      	ldr	r3, [pc, #40]	; (800dcc4 <xTaskPriorityInherit+0xf4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dca2:	2301      	movs	r3, #1
 800dca4:	60fb      	str	r3, [r7, #12]
 800dca6:	e008      	b.n	800dcba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcac:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <xTaskPriorityInherit+0xf4>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d201      	bcs.n	800dcba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcba:	68fb      	ldr	r3, [r7, #12]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	20000c9c 	.word	0x20000c9c
 800dcc8:	20000ca0 	.word	0x20000ca0
 800dccc:	20000da4 	.word	0x20000da4

0800dcd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d072      	beq.n	800ddcc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dce6:	4b3c      	ldr	r3, [pc, #240]	; (800ddd8 <xTaskPriorityDisinherit+0x108>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d00c      	beq.n	800dd0a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	b672      	cpsid	i
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	b662      	cpsie	i
 800dd04:	60fb      	str	r3, [r7, #12]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10c      	bne.n	800dd2c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	b672      	cpsid	i
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	b662      	cpsie	i
 800dd26:	60bb      	str	r3, [r7, #8]
}
 800dd28:	bf00      	nop
 800dd2a:	e7fe      	b.n	800dd2a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd30:	1e5a      	subs	r2, r3, #1
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d044      	beq.n	800ddcc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d140      	bne.n	800ddcc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fe f9f1 	bl	800c136 <uxListRemove>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d115      	bne.n	800dd86 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5e:	491f      	ldr	r1, [pc, #124]	; (800dddc <xTaskPriorityDisinherit+0x10c>)
 800dd60:	4613      	mov	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4413      	add	r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	440b      	add	r3, r1
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10a      	bne.n	800dd86 <xTaskPriorityDisinherit+0xb6>
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd74:	2201      	movs	r2, #1
 800dd76:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7a:	43da      	mvns	r2, r3
 800dd7c:	4b18      	ldr	r3, [pc, #96]	; (800dde0 <xTaskPriorityDisinherit+0x110>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4013      	ands	r3, r2
 800dd82:	4a17      	ldr	r2, [pc, #92]	; (800dde0 <xTaskPriorityDisinherit+0x110>)
 800dd84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd92:	f1c3 0207 	rsb	r2, r3, #7
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9e:	2201      	movs	r2, #1
 800dda0:	409a      	lsls	r2, r3
 800dda2:	4b0f      	ldr	r3, [pc, #60]	; (800dde0 <xTaskPriorityDisinherit+0x110>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	4a0d      	ldr	r2, [pc, #52]	; (800dde0 <xTaskPriorityDisinherit+0x110>)
 800ddaa:	6013      	str	r3, [r2, #0]
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4a08      	ldr	r2, [pc, #32]	; (800dddc <xTaskPriorityDisinherit+0x10c>)
 800ddba:	441a      	add	r2, r3
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f7fe f95a 	bl	800c07c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddcc:	697b      	ldr	r3, [r7, #20]
	}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20000c9c 	.word	0x20000c9c
 800dddc:	20000ca0 	.word	0x20000ca0
 800dde0:	20000da4 	.word	0x20000da4

0800dde4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 8087 	beq.w	800df0c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10c      	bne.n	800de20 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	b672      	cpsid	i
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	b662      	cpsie	i
 800de1a:	60fb      	str	r3, [r7, #12]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	429a      	cmp	r2, r3
 800de28:	d902      	bls.n	800de30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	61fb      	str	r3, [r7, #28]
 800de2e:	e002      	b.n	800de36 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3a:	69fa      	ldr	r2, [r7, #28]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d065      	beq.n	800df0c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	429a      	cmp	r2, r3
 800de48:	d160      	bne.n	800df0c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de4a:	4b32      	ldr	r3, [pc, #200]	; (800df14 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69ba      	ldr	r2, [r7, #24]
 800de50:	429a      	cmp	r2, r3
 800de52:	d10c      	bne.n	800de6e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de58:	b672      	cpsid	i
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	b662      	cpsie	i
 800de68:	60bb      	str	r3, [r7, #8]
}
 800de6a:	bf00      	nop
 800de6c:	e7fe      	b.n	800de6c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de72:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	699b      	ldr	r3, [r3, #24]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	db04      	blt.n	800de8c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	f1c3 0207 	rsb	r2, r3, #7
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	6959      	ldr	r1, [r3, #20]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	4613      	mov	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4a1f      	ldr	r2, [pc, #124]	; (800df18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800de9c:	4413      	add	r3, r2
 800de9e:	4299      	cmp	r1, r3
 800dea0:	d134      	bne.n	800df0c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fe f945 	bl	800c136 <uxListRemove>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d115      	bne.n	800dede <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb6:	4918      	ldr	r1, [pc, #96]	; (800df18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800deb8:	4613      	mov	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	440b      	add	r3, r1
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10a      	bne.n	800dede <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800decc:	2201      	movs	r2, #1
 800dece:	fa02 f303 	lsl.w	r3, r2, r3
 800ded2:	43da      	mvns	r2, r3
 800ded4:	4b11      	ldr	r3, [pc, #68]	; (800df1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4013      	ands	r3, r2
 800deda:	4a10      	ldr	r2, [pc, #64]	; (800df1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dedc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee2:	2201      	movs	r2, #1
 800dee4:	409a      	lsls	r2, r3
 800dee6:	4b0d      	ldr	r3, [pc, #52]	; (800df1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4313      	orrs	r3, r2
 800deec:	4a0b      	ldr	r2, [pc, #44]	; (800df1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def4:	4613      	mov	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4a06      	ldr	r2, [pc, #24]	; (800df18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800defe:	441a      	add	r2, r3
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	3304      	adds	r3, #4
 800df04:	4619      	mov	r1, r3
 800df06:	4610      	mov	r0, r2
 800df08:	f7fe f8b8 	bl	800c07c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df0c:	bf00      	nop
 800df0e:	3720      	adds	r7, #32
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20000c9c 	.word	0x20000c9c
 800df18:	20000ca0 	.word	0x20000ca0
 800df1c:	20000da4 	.word	0x20000da4

0800df20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800df20:	b480      	push	{r7}
 800df22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <pvTaskIncrementMutexHeldCount+0x24>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d004      	beq.n	800df36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <pvTaskIncrementMutexHeldCount+0x24>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df32:	3201      	adds	r2, #1
 800df34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800df36:	4b03      	ldr	r3, [pc, #12]	; (800df44 <pvTaskIncrementMutexHeldCount+0x24>)
 800df38:	681b      	ldr	r3, [r3, #0]
	}
 800df3a:	4618      	mov	r0, r3
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	20000c9c 	.word	0x20000c9c

0800df48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df52:	4b29      	ldr	r3, [pc, #164]	; (800dff8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df58:	4b28      	ldr	r3, [pc, #160]	; (800dffc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3304      	adds	r3, #4
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe f8e9 	bl	800c136 <uxListRemove>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10b      	bne.n	800df82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800df6a:	4b24      	ldr	r3, [pc, #144]	; (800dffc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df70:	2201      	movs	r2, #1
 800df72:	fa02 f303 	lsl.w	r3, r2, r3
 800df76:	43da      	mvns	r2, r3
 800df78:	4b21      	ldr	r3, [pc, #132]	; (800e000 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4013      	ands	r3, r2
 800df7e:	4a20      	ldr	r2, [pc, #128]	; (800e000 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df88:	d10a      	bne.n	800dfa0 <prvAddCurrentTaskToDelayedList+0x58>
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d007      	beq.n	800dfa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df90:	4b1a      	ldr	r3, [pc, #104]	; (800dffc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	3304      	adds	r3, #4
 800df96:	4619      	mov	r1, r3
 800df98:	481a      	ldr	r0, [pc, #104]	; (800e004 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df9a:	f7fe f86f 	bl	800c07c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df9e:	e026      	b.n	800dfee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dfa8:	4b14      	ldr	r3, [pc, #80]	; (800dffc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d209      	bcs.n	800dfcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfb8:	4b13      	ldr	r3, [pc, #76]	; (800e008 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	4b0f      	ldr	r3, [pc, #60]	; (800dffc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	f7fe f87d 	bl	800c0c4 <vListInsert>
}
 800dfca:	e010      	b.n	800dfee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfcc:	4b0f      	ldr	r3, [pc, #60]	; (800e00c <prvAddCurrentTaskToDelayedList+0xc4>)
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	4b0a      	ldr	r3, [pc, #40]	; (800dffc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f7fe f873 	bl	800c0c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dfde:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d202      	bcs.n	800dfee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dfe8:	4a09      	ldr	r2, [pc, #36]	; (800e010 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	6013      	str	r3, [r2, #0]
}
 800dfee:	bf00      	nop
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20000da0 	.word	0x20000da0
 800dffc:	20000c9c 	.word	0x20000c9c
 800e000:	20000da4 	.word	0x20000da4
 800e004:	20000d88 	.word	0x20000d88
 800e008:	20000d58 	.word	0x20000d58
 800e00c:	20000d54 	.word	0x20000d54
 800e010:	20000dbc 	.word	0x20000dbc

0800e014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	3b04      	subs	r3, #4
 800e024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3b04      	subs	r3, #4
 800e032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	f023 0201 	bic.w	r2, r3, #1
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	3b04      	subs	r3, #4
 800e042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e044:	4a0c      	ldr	r2, [pc, #48]	; (800e078 <pxPortInitialiseStack+0x64>)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3b14      	subs	r3, #20
 800e04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3b04      	subs	r3, #4
 800e05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f06f 0202 	mvn.w	r2, #2
 800e062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3b20      	subs	r3, #32
 800e068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e06a:	68fb      	ldr	r3, [r7, #12]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3714      	adds	r7, #20
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	0800e07d 	.word	0x0800e07d

0800e07c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e082:	2300      	movs	r3, #0
 800e084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e086:	4b14      	ldr	r3, [pc, #80]	; (800e0d8 <prvTaskExitError+0x5c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08e:	d00c      	beq.n	800e0aa <prvTaskExitError+0x2e>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	b672      	cpsid	i
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	b662      	cpsie	i
 800e0a4:	60fb      	str	r3, [r7, #12]
}
 800e0a6:	bf00      	nop
 800e0a8:	e7fe      	b.n	800e0a8 <prvTaskExitError+0x2c>
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	b672      	cpsid	i
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	b662      	cpsie	i
 800e0be:	60bb      	str	r3, [r7, #8]
}
 800e0c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0c2:	bf00      	nop
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d0fc      	beq.n	800e0c4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	3714      	adds	r7, #20
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	20000064 	.word	0x20000064
 800e0dc:	00000000 	.word	0x00000000

0800e0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <pxCurrentTCBConst2>)
 800e0e2:	6819      	ldr	r1, [r3, #0]
 800e0e4:	6808      	ldr	r0, [r1, #0]
 800e0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ea:	f380 8809 	msr	PSP, r0
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f04f 0000 	mov.w	r0, #0
 800e0f6:	f380 8811 	msr	BASEPRI, r0
 800e0fa:	4770      	bx	lr
 800e0fc:	f3af 8000 	nop.w

0800e100 <pxCurrentTCBConst2>:
 800e100:	20000c9c 	.word	0x20000c9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e108:	4808      	ldr	r0, [pc, #32]	; (800e12c <prvPortStartFirstTask+0x24>)
 800e10a:	6800      	ldr	r0, [r0, #0]
 800e10c:	6800      	ldr	r0, [r0, #0]
 800e10e:	f380 8808 	msr	MSP, r0
 800e112:	f04f 0000 	mov.w	r0, #0
 800e116:	f380 8814 	msr	CONTROL, r0
 800e11a:	b662      	cpsie	i
 800e11c:	b661      	cpsie	f
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	df00      	svc	0
 800e128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e12a:	bf00      	nop
 800e12c:	e000ed08 	.word	0xe000ed08

0800e130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e136:	4b37      	ldr	r3, [pc, #220]	; (800e214 <xPortStartScheduler+0xe4>)
 800e138:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	22ff      	movs	r2, #255	; 0xff
 800e146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e150:	78fb      	ldrb	r3, [r7, #3]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	4b2f      	ldr	r3, [pc, #188]	; (800e218 <xPortStartScheduler+0xe8>)
 800e15c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e15e:	4b2f      	ldr	r3, [pc, #188]	; (800e21c <xPortStartScheduler+0xec>)
 800e160:	2207      	movs	r2, #7
 800e162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e164:	e009      	b.n	800e17a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e166:	4b2d      	ldr	r3, [pc, #180]	; (800e21c <xPortStartScheduler+0xec>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	4a2b      	ldr	r2, [pc, #172]	; (800e21c <xPortStartScheduler+0xec>)
 800e16e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e170:	78fb      	ldrb	r3, [r7, #3]
 800e172:	b2db      	uxtb	r3, r3
 800e174:	005b      	lsls	r3, r3, #1
 800e176:	b2db      	uxtb	r3, r3
 800e178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e17a:	78fb      	ldrb	r3, [r7, #3]
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e182:	2b80      	cmp	r3, #128	; 0x80
 800e184:	d0ef      	beq.n	800e166 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e186:	4b25      	ldr	r3, [pc, #148]	; (800e21c <xPortStartScheduler+0xec>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f1c3 0307 	rsb	r3, r3, #7
 800e18e:	2b04      	cmp	r3, #4
 800e190:	d00c      	beq.n	800e1ac <xPortStartScheduler+0x7c>
	__asm volatile
 800e192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e196:	b672      	cpsid	i
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	b662      	cpsie	i
 800e1a6:	60bb      	str	r3, [r7, #8]
}
 800e1a8:	bf00      	nop
 800e1aa:	e7fe      	b.n	800e1aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1ac:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <xPortStartScheduler+0xec>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	021b      	lsls	r3, r3, #8
 800e1b2:	4a1a      	ldr	r2, [pc, #104]	; (800e21c <xPortStartScheduler+0xec>)
 800e1b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1b6:	4b19      	ldr	r3, [pc, #100]	; (800e21c <xPortStartScheduler+0xec>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1be:	4a17      	ldr	r2, [pc, #92]	; (800e21c <xPortStartScheduler+0xec>)
 800e1c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1ca:	4b15      	ldr	r3, [pc, #84]	; (800e220 <xPortStartScheduler+0xf0>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a14      	ldr	r2, [pc, #80]	; (800e220 <xPortStartScheduler+0xf0>)
 800e1d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1d6:	4b12      	ldr	r3, [pc, #72]	; (800e220 <xPortStartScheduler+0xf0>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a11      	ldr	r2, [pc, #68]	; (800e220 <xPortStartScheduler+0xf0>)
 800e1dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1e2:	f000 f8dd 	bl	800e3a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	; (800e224 <xPortStartScheduler+0xf4>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1ec:	f000 f8fc 	bl	800e3e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1f0:	4b0d      	ldr	r3, [pc, #52]	; (800e228 <xPortStartScheduler+0xf8>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a0c      	ldr	r2, [pc, #48]	; (800e228 <xPortStartScheduler+0xf8>)
 800e1f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e1fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1fc:	f7ff ff84 	bl	800e108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e200:	f7ff fa76 	bl	800d6f0 <vTaskSwitchContext>
	prvTaskExitError();
 800e204:	f7ff ff3a 	bl	800e07c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	e000e400 	.word	0xe000e400
 800e218:	20000dc8 	.word	0x20000dc8
 800e21c:	20000dcc 	.word	0x20000dcc
 800e220:	e000ed20 	.word	0xe000ed20
 800e224:	20000064 	.word	0x20000064
 800e228:	e000ef34 	.word	0xe000ef34

0800e22c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	b672      	cpsid	i
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	b662      	cpsie	i
 800e246:	607b      	str	r3, [r7, #4]
}
 800e248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e24a:	4b10      	ldr	r3, [pc, #64]	; (800e28c <vPortEnterCritical+0x60>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	3301      	adds	r3, #1
 800e250:	4a0e      	ldr	r2, [pc, #56]	; (800e28c <vPortEnterCritical+0x60>)
 800e252:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e254:	4b0d      	ldr	r3, [pc, #52]	; (800e28c <vPortEnterCritical+0x60>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d111      	bne.n	800e280 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e25c:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <vPortEnterCritical+0x64>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00c      	beq.n	800e280 <vPortEnterCritical+0x54>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26a:	b672      	cpsid	i
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	b662      	cpsie	i
 800e27a:	603b      	str	r3, [r7, #0]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <vPortEnterCritical+0x52>
	}
}
 800e280:	bf00      	nop
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr
 800e28c:	20000064 	.word	0x20000064
 800e290:	e000ed04 	.word	0xe000ed04

0800e294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e29a:	4b13      	ldr	r3, [pc, #76]	; (800e2e8 <vPortExitCritical+0x54>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10c      	bne.n	800e2bc <vPortExitCritical+0x28>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	b672      	cpsid	i
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	b662      	cpsie	i
 800e2b6:	607b      	str	r3, [r7, #4]
}
 800e2b8:	bf00      	nop
 800e2ba:	e7fe      	b.n	800e2ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e2bc:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <vPortExitCritical+0x54>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	4a09      	ldr	r2, [pc, #36]	; (800e2e8 <vPortExitCritical+0x54>)
 800e2c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2c6:	4b08      	ldr	r3, [pc, #32]	; (800e2e8 <vPortExitCritical+0x54>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d105      	bne.n	800e2da <vPortExitCritical+0x46>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	f383 8811 	msr	BASEPRI, r3
}
 800e2d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2da:	bf00      	nop
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	20000064 	.word	0x20000064
 800e2ec:	00000000 	.word	0x00000000

0800e2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2f0:	f3ef 8009 	mrs	r0, PSP
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	4b15      	ldr	r3, [pc, #84]	; (800e350 <pxCurrentTCBConst>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	f01e 0f10 	tst.w	lr, #16
 800e300:	bf08      	it	eq
 800e302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30a:	6010      	str	r0, [r2, #0]
 800e30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e310:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e314:	b672      	cpsid	i
 800e316:	f380 8811 	msr	BASEPRI, r0
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	b662      	cpsie	i
 800e324:	f7ff f9e4 	bl	800d6f0 <vTaskSwitchContext>
 800e328:	f04f 0000 	mov.w	r0, #0
 800e32c:	f380 8811 	msr	BASEPRI, r0
 800e330:	bc09      	pop	{r0, r3}
 800e332:	6819      	ldr	r1, [r3, #0]
 800e334:	6808      	ldr	r0, [r1, #0]
 800e336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33a:	f01e 0f10 	tst.w	lr, #16
 800e33e:	bf08      	it	eq
 800e340:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e344:	f380 8809 	msr	PSP, r0
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop

0800e350 <pxCurrentTCBConst>:
 800e350:	20000c9c 	.word	0x20000c9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop

0800e358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	b672      	cpsid	i
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	b662      	cpsie	i
 800e372:	607b      	str	r3, [r7, #4]
}
 800e374:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e376:	f7ff f901 	bl	800d57c <xTaskIncrementTick>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e380:	4b06      	ldr	r3, [pc, #24]	; (800e39c <SysTick_Handler+0x44>)
 800e382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	2300      	movs	r3, #0
 800e38a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	f383 8811 	msr	BASEPRI, r3
}
 800e392:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	e000ed04 	.word	0xe000ed04

0800e3a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3a4:	4b0b      	ldr	r3, [pc, #44]	; (800e3d4 <vPortSetupTimerInterrupt+0x34>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <vPortSetupTimerInterrupt+0x38>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3b0:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <vPortSetupTimerInterrupt+0x3c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a0a      	ldr	r2, [pc, #40]	; (800e3e0 <vPortSetupTimerInterrupt+0x40>)
 800e3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ba:	099b      	lsrs	r3, r3, #6
 800e3bc:	4a09      	ldr	r2, [pc, #36]	; (800e3e4 <vPortSetupTimerInterrupt+0x44>)
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3c2:	4b04      	ldr	r3, [pc, #16]	; (800e3d4 <vPortSetupTimerInterrupt+0x34>)
 800e3c4:	2207      	movs	r2, #7
 800e3c6:	601a      	str	r2, [r3, #0]
}
 800e3c8:	bf00      	nop
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	e000e010 	.word	0xe000e010
 800e3d8:	e000e018 	.word	0xe000e018
 800e3dc:	20000058 	.word	0x20000058
 800e3e0:	10624dd3 	.word	0x10624dd3
 800e3e4:	e000e014 	.word	0xe000e014

0800e3e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e3f8 <vPortEnableVFP+0x10>
 800e3ec:	6801      	ldr	r1, [r0, #0]
 800e3ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3f2:	6001      	str	r1, [r0, #0]
 800e3f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3f6:	bf00      	nop
 800e3f8:	e000ed88 	.word	0xe000ed88

0800e3fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e402:	f3ef 8305 	mrs	r3, IPSR
 800e406:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2b0f      	cmp	r3, #15
 800e40c:	d916      	bls.n	800e43c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e40e:	4a19      	ldr	r2, [pc, #100]	; (800e474 <vPortValidateInterruptPriority+0x78>)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	4413      	add	r3, r2
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e418:	4b17      	ldr	r3, [pc, #92]	; (800e478 <vPortValidateInterruptPriority+0x7c>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	7afa      	ldrb	r2, [r7, #11]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d20c      	bcs.n	800e43c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	b672      	cpsid	i
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	b662      	cpsie	i
 800e436:	607b      	str	r3, [r7, #4]
}
 800e438:	bf00      	nop
 800e43a:	e7fe      	b.n	800e43a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e43c:	4b0f      	ldr	r3, [pc, #60]	; (800e47c <vPortValidateInterruptPriority+0x80>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e444:	4b0e      	ldr	r3, [pc, #56]	; (800e480 <vPortValidateInterruptPriority+0x84>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d90c      	bls.n	800e466 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	b672      	cpsid	i
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	b662      	cpsie	i
 800e460:	603b      	str	r3, [r7, #0]
}
 800e462:	bf00      	nop
 800e464:	e7fe      	b.n	800e464 <vPortValidateInterruptPriority+0x68>
	}
 800e466:	bf00      	nop
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	e000e3f0 	.word	0xe000e3f0
 800e478:	20000dc8 	.word	0x20000dc8
 800e47c:	e000ed0c 	.word	0xe000ed0c
 800e480:	20000dcc 	.word	0x20000dcc

0800e484 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08a      	sub	sp, #40	; 0x28
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e48c:	2300      	movs	r3, #0
 800e48e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e490:	f7fe ffb8 	bl	800d404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e494:	4b5b      	ldr	r3, [pc, #364]	; (800e604 <pvPortMalloc+0x180>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e49c:	f000 f91a 	bl	800e6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4a0:	4b59      	ldr	r3, [pc, #356]	; (800e608 <pvPortMalloc+0x184>)
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f040 8092 	bne.w	800e5d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d01f      	beq.n	800e4f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e4b4:	2208      	movs	r2, #8
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f003 0307 	and.w	r3, r3, #7
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d016      	beq.n	800e4f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f023 0307 	bic.w	r3, r3, #7
 800e4cc:	3308      	adds	r3, #8
 800e4ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f003 0307 	and.w	r3, r3, #7
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00c      	beq.n	800e4f4 <pvPortMalloc+0x70>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	b672      	cpsid	i
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	b662      	cpsie	i
 800e4ee:	617b      	str	r3, [r7, #20]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d06b      	beq.n	800e5d2 <pvPortMalloc+0x14e>
 800e4fa:	4b44      	ldr	r3, [pc, #272]	; (800e60c <pvPortMalloc+0x188>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	429a      	cmp	r2, r3
 800e502:	d866      	bhi.n	800e5d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e504:	4b42      	ldr	r3, [pc, #264]	; (800e610 <pvPortMalloc+0x18c>)
 800e506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e508:	4b41      	ldr	r3, [pc, #260]	; (800e610 <pvPortMalloc+0x18c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e50e:	e004      	b.n	800e51a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	429a      	cmp	r2, r3
 800e522:	d903      	bls.n	800e52c <pvPortMalloc+0xa8>
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1f1      	bne.n	800e510 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e52c:	4b35      	ldr	r3, [pc, #212]	; (800e604 <pvPortMalloc+0x180>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e532:	429a      	cmp	r2, r3
 800e534:	d04d      	beq.n	800e5d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e536:	6a3b      	ldr	r3, [r7, #32]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2208      	movs	r2, #8
 800e53c:	4413      	add	r3, r2
 800e53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	1ad2      	subs	r2, r2, r3
 800e550:	2308      	movs	r3, #8
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	429a      	cmp	r2, r3
 800e556:	d921      	bls.n	800e59c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4413      	add	r3, r2
 800e55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	f003 0307 	and.w	r3, r3, #7
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00c      	beq.n	800e584 <pvPortMalloc+0x100>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	b672      	cpsid	i
 800e570:	f383 8811 	msr	BASEPRI, r3
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	b662      	cpsie	i
 800e57e:	613b      	str	r3, [r7, #16]
}
 800e580:	bf00      	nop
 800e582:	e7fe      	b.n	800e582 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	1ad2      	subs	r2, r2, r3
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e596:	69b8      	ldr	r0, [r7, #24]
 800e598:	f000 f8fe 	bl	800e798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e59c:	4b1b      	ldr	r3, [pc, #108]	; (800e60c <pvPortMalloc+0x188>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	4a19      	ldr	r2, [pc, #100]	; (800e60c <pvPortMalloc+0x188>)
 800e5a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5aa:	4b18      	ldr	r3, [pc, #96]	; (800e60c <pvPortMalloc+0x188>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	4b19      	ldr	r3, [pc, #100]	; (800e614 <pvPortMalloc+0x190>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d203      	bcs.n	800e5be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5b6:	4b15      	ldr	r3, [pc, #84]	; (800e60c <pvPortMalloc+0x188>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a16      	ldr	r2, [pc, #88]	; (800e614 <pvPortMalloc+0x190>)
 800e5bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	4b11      	ldr	r3, [pc, #68]	; (800e608 <pvPortMalloc+0x184>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	431a      	orrs	r2, r3
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5d2:	f7fe ff25 	bl	800d420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	f003 0307 	and.w	r3, r3, #7
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00c      	beq.n	800e5fa <pvPortMalloc+0x176>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	b672      	cpsid	i
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	b662      	cpsie	i
 800e5f4:	60fb      	str	r3, [r7, #12]
}
 800e5f6:	bf00      	nop
 800e5f8:	e7fe      	b.n	800e5f8 <pvPortMalloc+0x174>
	return pvReturn;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3728      	adds	r7, #40	; 0x28
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	200049d8 	.word	0x200049d8
 800e608:	200049e4 	.word	0x200049e4
 800e60c:	200049dc 	.word	0x200049dc
 800e610:	200049d0 	.word	0x200049d0
 800e614:	200049e0 	.word	0x200049e0

0800e618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d04c      	beq.n	800e6c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e62a:	2308      	movs	r3, #8
 800e62c:	425b      	negs	r3, r3
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	4413      	add	r3, r2
 800e632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	685a      	ldr	r2, [r3, #4]
 800e63c:	4b23      	ldr	r3, [pc, #140]	; (800e6cc <vPortFree+0xb4>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4013      	ands	r3, r2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10c      	bne.n	800e660 <vPortFree+0x48>
	__asm volatile
 800e646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64a:	b672      	cpsid	i
 800e64c:	f383 8811 	msr	BASEPRI, r3
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	b662      	cpsie	i
 800e65a:	60fb      	str	r3, [r7, #12]
}
 800e65c:	bf00      	nop
 800e65e:	e7fe      	b.n	800e65e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00c      	beq.n	800e682 <vPortFree+0x6a>
	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	b672      	cpsid	i
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	b662      	cpsie	i
 800e67c:	60bb      	str	r3, [r7, #8]
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	4b11      	ldr	r3, [pc, #68]	; (800e6cc <vPortFree+0xb4>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4013      	ands	r3, r2
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d019      	beq.n	800e6c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d115      	bne.n	800e6c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	4b0b      	ldr	r3, [pc, #44]	; (800e6cc <vPortFree+0xb4>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	43db      	mvns	r3, r3
 800e6a2:	401a      	ands	r2, r3
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6a8:	f7fe feac 	bl	800d404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <vPortFree+0xb8>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	4a06      	ldr	r2, [pc, #24]	; (800e6d0 <vPortFree+0xb8>)
 800e6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6ba:	6938      	ldr	r0, [r7, #16]
 800e6bc:	f000 f86c 	bl	800e798 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e6c0:	f7fe feae 	bl	800d420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6c4:	bf00      	nop
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	200049e4 	.word	0x200049e4
 800e6d0:	200049dc 	.word	0x200049dc

0800e6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6e0:	4b27      	ldr	r3, [pc, #156]	; (800e780 <prvHeapInit+0xac>)
 800e6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f003 0307 	and.w	r3, r3, #7
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00c      	beq.n	800e708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3307      	adds	r3, #7
 800e6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f023 0307 	bic.w	r3, r3, #7
 800e6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	4a1f      	ldr	r2, [pc, #124]	; (800e780 <prvHeapInit+0xac>)
 800e704:	4413      	add	r3, r2
 800e706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e70c:	4a1d      	ldr	r2, [pc, #116]	; (800e784 <prvHeapInit+0xb0>)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e712:	4b1c      	ldr	r3, [pc, #112]	; (800e784 <prvHeapInit+0xb0>)
 800e714:	2200      	movs	r2, #0
 800e716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	4413      	add	r3, r2
 800e71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e720:	2208      	movs	r2, #8
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	1a9b      	subs	r3, r3, r2
 800e726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f023 0307 	bic.w	r3, r3, #7
 800e72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	4a15      	ldr	r2, [pc, #84]	; (800e788 <prvHeapInit+0xb4>)
 800e734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e736:	4b14      	ldr	r3, [pc, #80]	; (800e788 <prvHeapInit+0xb4>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2200      	movs	r2, #0
 800e73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e73e:	4b12      	ldr	r3, [pc, #72]	; (800e788 <prvHeapInit+0xb4>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2200      	movs	r2, #0
 800e744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e754:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <prvHeapInit+0xb4>)
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	4a0a      	ldr	r2, [pc, #40]	; (800e78c <prvHeapInit+0xb8>)
 800e762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	4a09      	ldr	r2, [pc, #36]	; (800e790 <prvHeapInit+0xbc>)
 800e76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e76c:	4b09      	ldr	r3, [pc, #36]	; (800e794 <prvHeapInit+0xc0>)
 800e76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e772:	601a      	str	r2, [r3, #0]
}
 800e774:	bf00      	nop
 800e776:	3714      	adds	r7, #20
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	20000dd0 	.word	0x20000dd0
 800e784:	200049d0 	.word	0x200049d0
 800e788:	200049d8 	.word	0x200049d8
 800e78c:	200049e0 	.word	0x200049e0
 800e790:	200049dc 	.word	0x200049dc
 800e794:	200049e4 	.word	0x200049e4

0800e798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7a0:	4b28      	ldr	r3, [pc, #160]	; (800e844 <prvInsertBlockIntoFreeList+0xac>)
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	e002      	b.n	800e7ac <prvInsertBlockIntoFreeList+0x14>
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	60fb      	str	r3, [r7, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d8f7      	bhi.n	800e7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d108      	bne.n	800e7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	441a      	add	r2, r3
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	441a      	add	r2, r3
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d118      	bne.n	800e820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	4b15      	ldr	r3, [pc, #84]	; (800e848 <prvInsertBlockIntoFreeList+0xb0>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d00d      	beq.n	800e816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	441a      	add	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	e008      	b.n	800e828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e816:	4b0c      	ldr	r3, [pc, #48]	; (800e848 <prvInsertBlockIntoFreeList+0xb0>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	601a      	str	r2, [r3, #0]
 800e81e:	e003      	b.n	800e828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d002      	beq.n	800e836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e836:	bf00      	nop
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	200049d0 	.word	0x200049d0
 800e848:	200049d8 	.word	0x200049d8

0800e84c <__errno>:
 800e84c:	4b01      	ldr	r3, [pc, #4]	; (800e854 <__errno+0x8>)
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20000068 	.word	0x20000068

0800e858 <__libc_init_array>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	4d0d      	ldr	r5, [pc, #52]	; (800e890 <__libc_init_array+0x38>)
 800e85c:	4c0d      	ldr	r4, [pc, #52]	; (800e894 <__libc_init_array+0x3c>)
 800e85e:	1b64      	subs	r4, r4, r5
 800e860:	10a4      	asrs	r4, r4, #2
 800e862:	2600      	movs	r6, #0
 800e864:	42a6      	cmp	r6, r4
 800e866:	d109      	bne.n	800e87c <__libc_init_array+0x24>
 800e868:	4d0b      	ldr	r5, [pc, #44]	; (800e898 <__libc_init_array+0x40>)
 800e86a:	4c0c      	ldr	r4, [pc, #48]	; (800e89c <__libc_init_array+0x44>)
 800e86c:	f000 fd08 	bl	800f280 <_init>
 800e870:	1b64      	subs	r4, r4, r5
 800e872:	10a4      	asrs	r4, r4, #2
 800e874:	2600      	movs	r6, #0
 800e876:	42a6      	cmp	r6, r4
 800e878:	d105      	bne.n	800e886 <__libc_init_array+0x2e>
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e880:	4798      	blx	r3
 800e882:	3601      	adds	r6, #1
 800e884:	e7ee      	b.n	800e864 <__libc_init_array+0xc>
 800e886:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88a:	4798      	blx	r3
 800e88c:	3601      	adds	r6, #1
 800e88e:	e7f2      	b.n	800e876 <__libc_init_array+0x1e>
 800e890:	08081ce8 	.word	0x08081ce8
 800e894:	08081ce8 	.word	0x08081ce8
 800e898:	08081ce8 	.word	0x08081ce8
 800e89c:	08081cec 	.word	0x08081cec

0800e8a0 <__retarget_lock_acquire_recursive>:
 800e8a0:	4770      	bx	lr

0800e8a2 <__retarget_lock_release_recursive>:
 800e8a2:	4770      	bx	lr

0800e8a4 <memcpy>:
 800e8a4:	440a      	add	r2, r1
 800e8a6:	4291      	cmp	r1, r2
 800e8a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8ac:	d100      	bne.n	800e8b0 <memcpy+0xc>
 800e8ae:	4770      	bx	lr
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ba:	4291      	cmp	r1, r2
 800e8bc:	d1f9      	bne.n	800e8b2 <memcpy+0xe>
 800e8be:	bd10      	pop	{r4, pc}

0800e8c0 <memset>:
 800e8c0:	4402      	add	r2, r0
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d100      	bne.n	800e8ca <memset+0xa>
 800e8c8:	4770      	bx	lr
 800e8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ce:	e7f9      	b.n	800e8c4 <memset+0x4>

0800e8d0 <sbrk_aligned>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	4e0e      	ldr	r6, [pc, #56]	; (800e90c <sbrk_aligned+0x3c>)
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	6831      	ldr	r1, [r6, #0]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	b911      	cbnz	r1, 800e8e2 <sbrk_aligned+0x12>
 800e8dc:	f000 f8f6 	bl	800eacc <_sbrk_r>
 800e8e0:	6030      	str	r0, [r6, #0]
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f000 f8f1 	bl	800eacc <_sbrk_r>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	d00a      	beq.n	800e904 <sbrk_aligned+0x34>
 800e8ee:	1cc4      	adds	r4, r0, #3
 800e8f0:	f024 0403 	bic.w	r4, r4, #3
 800e8f4:	42a0      	cmp	r0, r4
 800e8f6:	d007      	beq.n	800e908 <sbrk_aligned+0x38>
 800e8f8:	1a21      	subs	r1, r4, r0
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f000 f8e6 	bl	800eacc <_sbrk_r>
 800e900:	3001      	adds	r0, #1
 800e902:	d101      	bne.n	800e908 <sbrk_aligned+0x38>
 800e904:	f04f 34ff 	mov.w	r4, #4294967295
 800e908:	4620      	mov	r0, r4
 800e90a:	bd70      	pop	{r4, r5, r6, pc}
 800e90c:	200049f0 	.word	0x200049f0

0800e910 <_malloc_r>:
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	1ccd      	adds	r5, r1, #3
 800e916:	f025 0503 	bic.w	r5, r5, #3
 800e91a:	3508      	adds	r5, #8
 800e91c:	2d0c      	cmp	r5, #12
 800e91e:	bf38      	it	cc
 800e920:	250c      	movcc	r5, #12
 800e922:	2d00      	cmp	r5, #0
 800e924:	4607      	mov	r7, r0
 800e926:	db01      	blt.n	800e92c <_malloc_r+0x1c>
 800e928:	42a9      	cmp	r1, r5
 800e92a:	d905      	bls.n	800e938 <_malloc_r+0x28>
 800e92c:	230c      	movs	r3, #12
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	2600      	movs	r6, #0
 800e932:	4630      	mov	r0, r6
 800e934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e938:	4e2e      	ldr	r6, [pc, #184]	; (800e9f4 <_malloc_r+0xe4>)
 800e93a:	f000 f907 	bl	800eb4c <__malloc_lock>
 800e93e:	6833      	ldr	r3, [r6, #0]
 800e940:	461c      	mov	r4, r3
 800e942:	bb34      	cbnz	r4, 800e992 <_malloc_r+0x82>
 800e944:	4629      	mov	r1, r5
 800e946:	4638      	mov	r0, r7
 800e948:	f7ff ffc2 	bl	800e8d0 <sbrk_aligned>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	4604      	mov	r4, r0
 800e950:	d14d      	bne.n	800e9ee <_malloc_r+0xde>
 800e952:	6834      	ldr	r4, [r6, #0]
 800e954:	4626      	mov	r6, r4
 800e956:	2e00      	cmp	r6, #0
 800e958:	d140      	bne.n	800e9dc <_malloc_r+0xcc>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	4631      	mov	r1, r6
 800e95e:	4638      	mov	r0, r7
 800e960:	eb04 0803 	add.w	r8, r4, r3
 800e964:	f000 f8b2 	bl	800eacc <_sbrk_r>
 800e968:	4580      	cmp	r8, r0
 800e96a:	d13a      	bne.n	800e9e2 <_malloc_r+0xd2>
 800e96c:	6821      	ldr	r1, [r4, #0]
 800e96e:	3503      	adds	r5, #3
 800e970:	1a6d      	subs	r5, r5, r1
 800e972:	f025 0503 	bic.w	r5, r5, #3
 800e976:	3508      	adds	r5, #8
 800e978:	2d0c      	cmp	r5, #12
 800e97a:	bf38      	it	cc
 800e97c:	250c      	movcc	r5, #12
 800e97e:	4629      	mov	r1, r5
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff ffa5 	bl	800e8d0 <sbrk_aligned>
 800e986:	3001      	adds	r0, #1
 800e988:	d02b      	beq.n	800e9e2 <_malloc_r+0xd2>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	442b      	add	r3, r5
 800e98e:	6023      	str	r3, [r4, #0]
 800e990:	e00e      	b.n	800e9b0 <_malloc_r+0xa0>
 800e992:	6822      	ldr	r2, [r4, #0]
 800e994:	1b52      	subs	r2, r2, r5
 800e996:	d41e      	bmi.n	800e9d6 <_malloc_r+0xc6>
 800e998:	2a0b      	cmp	r2, #11
 800e99a:	d916      	bls.n	800e9ca <_malloc_r+0xba>
 800e99c:	1961      	adds	r1, r4, r5
 800e99e:	42a3      	cmp	r3, r4
 800e9a0:	6025      	str	r5, [r4, #0]
 800e9a2:	bf18      	it	ne
 800e9a4:	6059      	strne	r1, [r3, #4]
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	bf08      	it	eq
 800e9aa:	6031      	streq	r1, [r6, #0]
 800e9ac:	5162      	str	r2, [r4, r5]
 800e9ae:	604b      	str	r3, [r1, #4]
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f104 060b 	add.w	r6, r4, #11
 800e9b6:	f000 f8cf 	bl	800eb58 <__malloc_unlock>
 800e9ba:	f026 0607 	bic.w	r6, r6, #7
 800e9be:	1d23      	adds	r3, r4, #4
 800e9c0:	1af2      	subs	r2, r6, r3
 800e9c2:	d0b6      	beq.n	800e932 <_malloc_r+0x22>
 800e9c4:	1b9b      	subs	r3, r3, r6
 800e9c6:	50a3      	str	r3, [r4, r2]
 800e9c8:	e7b3      	b.n	800e932 <_malloc_r+0x22>
 800e9ca:	6862      	ldr	r2, [r4, #4]
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	bf0c      	ite	eq
 800e9d0:	6032      	streq	r2, [r6, #0]
 800e9d2:	605a      	strne	r2, [r3, #4]
 800e9d4:	e7ec      	b.n	800e9b0 <_malloc_r+0xa0>
 800e9d6:	4623      	mov	r3, r4
 800e9d8:	6864      	ldr	r4, [r4, #4]
 800e9da:	e7b2      	b.n	800e942 <_malloc_r+0x32>
 800e9dc:	4634      	mov	r4, r6
 800e9de:	6876      	ldr	r6, [r6, #4]
 800e9e0:	e7b9      	b.n	800e956 <_malloc_r+0x46>
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	603b      	str	r3, [r7, #0]
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f000 f8b6 	bl	800eb58 <__malloc_unlock>
 800e9ec:	e7a1      	b.n	800e932 <_malloc_r+0x22>
 800e9ee:	6025      	str	r5, [r4, #0]
 800e9f0:	e7de      	b.n	800e9b0 <_malloc_r+0xa0>
 800e9f2:	bf00      	nop
 800e9f4:	200049ec 	.word	0x200049ec

0800e9f8 <cleanup_glue>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	6809      	ldr	r1, [r1, #0]
 800e9fe:	4605      	mov	r5, r0
 800ea00:	b109      	cbz	r1, 800ea06 <cleanup_glue+0xe>
 800ea02:	f7ff fff9 	bl	800e9f8 <cleanup_glue>
 800ea06:	4621      	mov	r1, r4
 800ea08:	4628      	mov	r0, r5
 800ea0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea0e:	f000 b8a9 	b.w	800eb64 <_free_r>
	...

0800ea14 <_reclaim_reent>:
 800ea14:	4b2c      	ldr	r3, [pc, #176]	; (800eac8 <_reclaim_reent+0xb4>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4283      	cmp	r3, r0
 800ea1a:	b570      	push	{r4, r5, r6, lr}
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	d051      	beq.n	800eac4 <_reclaim_reent+0xb0>
 800ea20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ea22:	b143      	cbz	r3, 800ea36 <_reclaim_reent+0x22>
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d14a      	bne.n	800eac0 <_reclaim_reent+0xac>
 800ea2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea2c:	6819      	ldr	r1, [r3, #0]
 800ea2e:	b111      	cbz	r1, 800ea36 <_reclaim_reent+0x22>
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 f897 	bl	800eb64 <_free_r>
 800ea36:	6961      	ldr	r1, [r4, #20]
 800ea38:	b111      	cbz	r1, 800ea40 <_reclaim_reent+0x2c>
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f000 f892 	bl	800eb64 <_free_r>
 800ea40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea42:	b111      	cbz	r1, 800ea4a <_reclaim_reent+0x36>
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 f88d 	bl	800eb64 <_free_r>
 800ea4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea4c:	b111      	cbz	r1, 800ea54 <_reclaim_reent+0x40>
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 f888 	bl	800eb64 <_free_r>
 800ea54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea56:	b111      	cbz	r1, 800ea5e <_reclaim_reent+0x4a>
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f000 f883 	bl	800eb64 <_free_r>
 800ea5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea60:	b111      	cbz	r1, 800ea68 <_reclaim_reent+0x54>
 800ea62:	4620      	mov	r0, r4
 800ea64:	f000 f87e 	bl	800eb64 <_free_r>
 800ea68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ea6a:	b111      	cbz	r1, 800ea72 <_reclaim_reent+0x5e>
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f000 f879 	bl	800eb64 <_free_r>
 800ea72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ea74:	b111      	cbz	r1, 800ea7c <_reclaim_reent+0x68>
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 f874 	bl	800eb64 <_free_r>
 800ea7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea7e:	b111      	cbz	r1, 800ea86 <_reclaim_reent+0x72>
 800ea80:	4620      	mov	r0, r4
 800ea82:	f000 f86f 	bl	800eb64 <_free_r>
 800ea86:	69a3      	ldr	r3, [r4, #24]
 800ea88:	b1e3      	cbz	r3, 800eac4 <_reclaim_reent+0xb0>
 800ea8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	4798      	blx	r3
 800ea90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ea92:	b1b9      	cbz	r1, 800eac4 <_reclaim_reent+0xb0>
 800ea94:	4620      	mov	r0, r4
 800ea96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea9a:	f7ff bfad 	b.w	800e9f8 <cleanup_glue>
 800ea9e:	5949      	ldr	r1, [r1, r5]
 800eaa0:	b941      	cbnz	r1, 800eab4 <_reclaim_reent+0xa0>
 800eaa2:	3504      	adds	r5, #4
 800eaa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaa6:	2d80      	cmp	r5, #128	; 0x80
 800eaa8:	68d9      	ldr	r1, [r3, #12]
 800eaaa:	d1f8      	bne.n	800ea9e <_reclaim_reent+0x8a>
 800eaac:	4620      	mov	r0, r4
 800eaae:	f000 f859 	bl	800eb64 <_free_r>
 800eab2:	e7ba      	b.n	800ea2a <_reclaim_reent+0x16>
 800eab4:	680e      	ldr	r6, [r1, #0]
 800eab6:	4620      	mov	r0, r4
 800eab8:	f000 f854 	bl	800eb64 <_free_r>
 800eabc:	4631      	mov	r1, r6
 800eabe:	e7ef      	b.n	800eaa0 <_reclaim_reent+0x8c>
 800eac0:	2500      	movs	r5, #0
 800eac2:	e7ef      	b.n	800eaa4 <_reclaim_reent+0x90>
 800eac4:	bd70      	pop	{r4, r5, r6, pc}
 800eac6:	bf00      	nop
 800eac8:	20000068 	.word	0x20000068

0800eacc <_sbrk_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4d06      	ldr	r5, [pc, #24]	; (800eae8 <_sbrk_r+0x1c>)
 800ead0:	2300      	movs	r3, #0
 800ead2:	4604      	mov	r4, r0
 800ead4:	4608      	mov	r0, r1
 800ead6:	602b      	str	r3, [r5, #0]
 800ead8:	f7f5 fc2c 	bl	8004334 <_sbrk>
 800eadc:	1c43      	adds	r3, r0, #1
 800eade:	d102      	bne.n	800eae6 <_sbrk_r+0x1a>
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	b103      	cbz	r3, 800eae6 <_sbrk_r+0x1a>
 800eae4:	6023      	str	r3, [r4, #0]
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	200049f4 	.word	0x200049f4

0800eaec <siprintf>:
 800eaec:	b40e      	push	{r1, r2, r3}
 800eaee:	b500      	push	{lr}
 800eaf0:	b09c      	sub	sp, #112	; 0x70
 800eaf2:	ab1d      	add	r3, sp, #116	; 0x74
 800eaf4:	9002      	str	r0, [sp, #8]
 800eaf6:	9006      	str	r0, [sp, #24]
 800eaf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eafc:	4809      	ldr	r0, [pc, #36]	; (800eb24 <siprintf+0x38>)
 800eafe:	9107      	str	r1, [sp, #28]
 800eb00:	9104      	str	r1, [sp, #16]
 800eb02:	4909      	ldr	r1, [pc, #36]	; (800eb28 <siprintf+0x3c>)
 800eb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb08:	9105      	str	r1, [sp, #20]
 800eb0a:	6800      	ldr	r0, [r0, #0]
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	a902      	add	r1, sp, #8
 800eb10:	f000 f8d0 	bl	800ecb4 <_svfiprintf_r>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	2200      	movs	r2, #0
 800eb18:	701a      	strb	r2, [r3, #0]
 800eb1a:	b01c      	add	sp, #112	; 0x70
 800eb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb20:	b003      	add	sp, #12
 800eb22:	4770      	bx	lr
 800eb24:	20000068 	.word	0x20000068
 800eb28:	ffff0208 	.word	0xffff0208

0800eb2c <strcat>:
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	4602      	mov	r2, r0
 800eb30:	7814      	ldrb	r4, [r2, #0]
 800eb32:	4613      	mov	r3, r2
 800eb34:	3201      	adds	r2, #1
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	d1fa      	bne.n	800eb30 <strcat+0x4>
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb40:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb44:	2a00      	cmp	r2, #0
 800eb46:	d1f9      	bne.n	800eb3c <strcat+0x10>
 800eb48:	bd10      	pop	{r4, pc}
	...

0800eb4c <__malloc_lock>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	; (800eb54 <__malloc_lock+0x8>)
 800eb4e:	f7ff bea7 	b.w	800e8a0 <__retarget_lock_acquire_recursive>
 800eb52:	bf00      	nop
 800eb54:	200049e8 	.word	0x200049e8

0800eb58 <__malloc_unlock>:
 800eb58:	4801      	ldr	r0, [pc, #4]	; (800eb60 <__malloc_unlock+0x8>)
 800eb5a:	f7ff bea2 	b.w	800e8a2 <__retarget_lock_release_recursive>
 800eb5e:	bf00      	nop
 800eb60:	200049e8 	.word	0x200049e8

0800eb64 <_free_r>:
 800eb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb66:	2900      	cmp	r1, #0
 800eb68:	d044      	beq.n	800ebf4 <_free_r+0x90>
 800eb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb6e:	9001      	str	r0, [sp, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f1a1 0404 	sub.w	r4, r1, #4
 800eb76:	bfb8      	it	lt
 800eb78:	18e4      	addlt	r4, r4, r3
 800eb7a:	f7ff ffe7 	bl	800eb4c <__malloc_lock>
 800eb7e:	4a1e      	ldr	r2, [pc, #120]	; (800ebf8 <_free_r+0x94>)
 800eb80:	9801      	ldr	r0, [sp, #4]
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	b933      	cbnz	r3, 800eb94 <_free_r+0x30>
 800eb86:	6063      	str	r3, [r4, #4]
 800eb88:	6014      	str	r4, [r2, #0]
 800eb8a:	b003      	add	sp, #12
 800eb8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb90:	f7ff bfe2 	b.w	800eb58 <__malloc_unlock>
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d908      	bls.n	800ebaa <_free_r+0x46>
 800eb98:	6825      	ldr	r5, [r4, #0]
 800eb9a:	1961      	adds	r1, r4, r5
 800eb9c:	428b      	cmp	r3, r1
 800eb9e:	bf01      	itttt	eq
 800eba0:	6819      	ldreq	r1, [r3, #0]
 800eba2:	685b      	ldreq	r3, [r3, #4]
 800eba4:	1949      	addeq	r1, r1, r5
 800eba6:	6021      	streq	r1, [r4, #0]
 800eba8:	e7ed      	b.n	800eb86 <_free_r+0x22>
 800ebaa:	461a      	mov	r2, r3
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	b10b      	cbz	r3, 800ebb4 <_free_r+0x50>
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	d9fa      	bls.n	800ebaa <_free_r+0x46>
 800ebb4:	6811      	ldr	r1, [r2, #0]
 800ebb6:	1855      	adds	r5, r2, r1
 800ebb8:	42a5      	cmp	r5, r4
 800ebba:	d10b      	bne.n	800ebd4 <_free_r+0x70>
 800ebbc:	6824      	ldr	r4, [r4, #0]
 800ebbe:	4421      	add	r1, r4
 800ebc0:	1854      	adds	r4, r2, r1
 800ebc2:	42a3      	cmp	r3, r4
 800ebc4:	6011      	str	r1, [r2, #0]
 800ebc6:	d1e0      	bne.n	800eb8a <_free_r+0x26>
 800ebc8:	681c      	ldr	r4, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	6053      	str	r3, [r2, #4]
 800ebce:	4421      	add	r1, r4
 800ebd0:	6011      	str	r1, [r2, #0]
 800ebd2:	e7da      	b.n	800eb8a <_free_r+0x26>
 800ebd4:	d902      	bls.n	800ebdc <_free_r+0x78>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	6003      	str	r3, [r0, #0]
 800ebda:	e7d6      	b.n	800eb8a <_free_r+0x26>
 800ebdc:	6825      	ldr	r5, [r4, #0]
 800ebde:	1961      	adds	r1, r4, r5
 800ebe0:	428b      	cmp	r3, r1
 800ebe2:	bf04      	itt	eq
 800ebe4:	6819      	ldreq	r1, [r3, #0]
 800ebe6:	685b      	ldreq	r3, [r3, #4]
 800ebe8:	6063      	str	r3, [r4, #4]
 800ebea:	bf04      	itt	eq
 800ebec:	1949      	addeq	r1, r1, r5
 800ebee:	6021      	streq	r1, [r4, #0]
 800ebf0:	6054      	str	r4, [r2, #4]
 800ebf2:	e7ca      	b.n	800eb8a <_free_r+0x26>
 800ebf4:	b003      	add	sp, #12
 800ebf6:	bd30      	pop	{r4, r5, pc}
 800ebf8:	200049ec 	.word	0x200049ec

0800ebfc <__ssputs_r>:
 800ebfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec00:	688e      	ldr	r6, [r1, #8]
 800ec02:	429e      	cmp	r6, r3
 800ec04:	4682      	mov	sl, r0
 800ec06:	460c      	mov	r4, r1
 800ec08:	4690      	mov	r8, r2
 800ec0a:	461f      	mov	r7, r3
 800ec0c:	d838      	bhi.n	800ec80 <__ssputs_r+0x84>
 800ec0e:	898a      	ldrh	r2, [r1, #12]
 800ec10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec14:	d032      	beq.n	800ec7c <__ssputs_r+0x80>
 800ec16:	6825      	ldr	r5, [r4, #0]
 800ec18:	6909      	ldr	r1, [r1, #16]
 800ec1a:	eba5 0901 	sub.w	r9, r5, r1
 800ec1e:	6965      	ldr	r5, [r4, #20]
 800ec20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec28:	3301      	adds	r3, #1
 800ec2a:	444b      	add	r3, r9
 800ec2c:	106d      	asrs	r5, r5, #1
 800ec2e:	429d      	cmp	r5, r3
 800ec30:	bf38      	it	cc
 800ec32:	461d      	movcc	r5, r3
 800ec34:	0553      	lsls	r3, r2, #21
 800ec36:	d531      	bpl.n	800ec9c <__ssputs_r+0xa0>
 800ec38:	4629      	mov	r1, r5
 800ec3a:	f7ff fe69 	bl	800e910 <_malloc_r>
 800ec3e:	4606      	mov	r6, r0
 800ec40:	b950      	cbnz	r0, 800ec58 <__ssputs_r+0x5c>
 800ec42:	230c      	movs	r3, #12
 800ec44:	f8ca 3000 	str.w	r3, [sl]
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4e:	81a3      	strh	r3, [r4, #12]
 800ec50:	f04f 30ff 	mov.w	r0, #4294967295
 800ec54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec58:	6921      	ldr	r1, [r4, #16]
 800ec5a:	464a      	mov	r2, r9
 800ec5c:	f7ff fe22 	bl	800e8a4 <memcpy>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec6a:	81a3      	strh	r3, [r4, #12]
 800ec6c:	6126      	str	r6, [r4, #16]
 800ec6e:	6165      	str	r5, [r4, #20]
 800ec70:	444e      	add	r6, r9
 800ec72:	eba5 0509 	sub.w	r5, r5, r9
 800ec76:	6026      	str	r6, [r4, #0]
 800ec78:	60a5      	str	r5, [r4, #8]
 800ec7a:	463e      	mov	r6, r7
 800ec7c:	42be      	cmp	r6, r7
 800ec7e:	d900      	bls.n	800ec82 <__ssputs_r+0x86>
 800ec80:	463e      	mov	r6, r7
 800ec82:	6820      	ldr	r0, [r4, #0]
 800ec84:	4632      	mov	r2, r6
 800ec86:	4641      	mov	r1, r8
 800ec88:	f000 faa8 	bl	800f1dc <memmove>
 800ec8c:	68a3      	ldr	r3, [r4, #8]
 800ec8e:	1b9b      	subs	r3, r3, r6
 800ec90:	60a3      	str	r3, [r4, #8]
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	4433      	add	r3, r6
 800ec96:	6023      	str	r3, [r4, #0]
 800ec98:	2000      	movs	r0, #0
 800ec9a:	e7db      	b.n	800ec54 <__ssputs_r+0x58>
 800ec9c:	462a      	mov	r2, r5
 800ec9e:	f000 fab7 	bl	800f210 <_realloc_r>
 800eca2:	4606      	mov	r6, r0
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d1e1      	bne.n	800ec6c <__ssputs_r+0x70>
 800eca8:	6921      	ldr	r1, [r4, #16]
 800ecaa:	4650      	mov	r0, sl
 800ecac:	f7ff ff5a 	bl	800eb64 <_free_r>
 800ecb0:	e7c7      	b.n	800ec42 <__ssputs_r+0x46>
	...

0800ecb4 <_svfiprintf_r>:
 800ecb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb8:	4698      	mov	r8, r3
 800ecba:	898b      	ldrh	r3, [r1, #12]
 800ecbc:	061b      	lsls	r3, r3, #24
 800ecbe:	b09d      	sub	sp, #116	; 0x74
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	460d      	mov	r5, r1
 800ecc4:	4614      	mov	r4, r2
 800ecc6:	d50e      	bpl.n	800ece6 <_svfiprintf_r+0x32>
 800ecc8:	690b      	ldr	r3, [r1, #16]
 800ecca:	b963      	cbnz	r3, 800ece6 <_svfiprintf_r+0x32>
 800eccc:	2140      	movs	r1, #64	; 0x40
 800ecce:	f7ff fe1f 	bl	800e910 <_malloc_r>
 800ecd2:	6028      	str	r0, [r5, #0]
 800ecd4:	6128      	str	r0, [r5, #16]
 800ecd6:	b920      	cbnz	r0, 800ece2 <_svfiprintf_r+0x2e>
 800ecd8:	230c      	movs	r3, #12
 800ecda:	603b      	str	r3, [r7, #0]
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ece0:	e0d1      	b.n	800ee86 <_svfiprintf_r+0x1d2>
 800ece2:	2340      	movs	r3, #64	; 0x40
 800ece4:	616b      	str	r3, [r5, #20]
 800ece6:	2300      	movs	r3, #0
 800ece8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecea:	2320      	movs	r3, #32
 800ecec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecf4:	2330      	movs	r3, #48	; 0x30
 800ecf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eea0 <_svfiprintf_r+0x1ec>
 800ecfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecfe:	f04f 0901 	mov.w	r9, #1
 800ed02:	4623      	mov	r3, r4
 800ed04:	469a      	mov	sl, r3
 800ed06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed0a:	b10a      	cbz	r2, 800ed10 <_svfiprintf_r+0x5c>
 800ed0c:	2a25      	cmp	r2, #37	; 0x25
 800ed0e:	d1f9      	bne.n	800ed04 <_svfiprintf_r+0x50>
 800ed10:	ebba 0b04 	subs.w	fp, sl, r4
 800ed14:	d00b      	beq.n	800ed2e <_svfiprintf_r+0x7a>
 800ed16:	465b      	mov	r3, fp
 800ed18:	4622      	mov	r2, r4
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	f7ff ff6d 	bl	800ebfc <__ssputs_r>
 800ed22:	3001      	adds	r0, #1
 800ed24:	f000 80aa 	beq.w	800ee7c <_svfiprintf_r+0x1c8>
 800ed28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed2a:	445a      	add	r2, fp
 800ed2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 80a2 	beq.w	800ee7c <_svfiprintf_r+0x1c8>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed42:	f10a 0a01 	add.w	sl, sl, #1
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	9307      	str	r3, [sp, #28]
 800ed4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed50:	4654      	mov	r4, sl
 800ed52:	2205      	movs	r2, #5
 800ed54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed58:	4851      	ldr	r0, [pc, #324]	; (800eea0 <_svfiprintf_r+0x1ec>)
 800ed5a:	f7f1 fa59 	bl	8000210 <memchr>
 800ed5e:	9a04      	ldr	r2, [sp, #16]
 800ed60:	b9d8      	cbnz	r0, 800ed9a <_svfiprintf_r+0xe6>
 800ed62:	06d0      	lsls	r0, r2, #27
 800ed64:	bf44      	itt	mi
 800ed66:	2320      	movmi	r3, #32
 800ed68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed6c:	0711      	lsls	r1, r2, #28
 800ed6e:	bf44      	itt	mi
 800ed70:	232b      	movmi	r3, #43	; 0x2b
 800ed72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed76:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed7c:	d015      	beq.n	800edaa <_svfiprintf_r+0xf6>
 800ed7e:	9a07      	ldr	r2, [sp, #28]
 800ed80:	4654      	mov	r4, sl
 800ed82:	2000      	movs	r0, #0
 800ed84:	f04f 0c0a 	mov.w	ip, #10
 800ed88:	4621      	mov	r1, r4
 800ed8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed8e:	3b30      	subs	r3, #48	; 0x30
 800ed90:	2b09      	cmp	r3, #9
 800ed92:	d94e      	bls.n	800ee32 <_svfiprintf_r+0x17e>
 800ed94:	b1b0      	cbz	r0, 800edc4 <_svfiprintf_r+0x110>
 800ed96:	9207      	str	r2, [sp, #28]
 800ed98:	e014      	b.n	800edc4 <_svfiprintf_r+0x110>
 800ed9a:	eba0 0308 	sub.w	r3, r0, r8
 800ed9e:	fa09 f303 	lsl.w	r3, r9, r3
 800eda2:	4313      	orrs	r3, r2
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	46a2      	mov	sl, r4
 800eda8:	e7d2      	b.n	800ed50 <_svfiprintf_r+0x9c>
 800edaa:	9b03      	ldr	r3, [sp, #12]
 800edac:	1d19      	adds	r1, r3, #4
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	9103      	str	r1, [sp, #12]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bfbb      	ittet	lt
 800edb6:	425b      	neglt	r3, r3
 800edb8:	f042 0202 	orrlt.w	r2, r2, #2
 800edbc:	9307      	strge	r3, [sp, #28]
 800edbe:	9307      	strlt	r3, [sp, #28]
 800edc0:	bfb8      	it	lt
 800edc2:	9204      	strlt	r2, [sp, #16]
 800edc4:	7823      	ldrb	r3, [r4, #0]
 800edc6:	2b2e      	cmp	r3, #46	; 0x2e
 800edc8:	d10c      	bne.n	800ede4 <_svfiprintf_r+0x130>
 800edca:	7863      	ldrb	r3, [r4, #1]
 800edcc:	2b2a      	cmp	r3, #42	; 0x2a
 800edce:	d135      	bne.n	800ee3c <_svfiprintf_r+0x188>
 800edd0:	9b03      	ldr	r3, [sp, #12]
 800edd2:	1d1a      	adds	r2, r3, #4
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	9203      	str	r2, [sp, #12]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	bfb8      	it	lt
 800eddc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ede0:	3402      	adds	r4, #2
 800ede2:	9305      	str	r3, [sp, #20]
 800ede4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eeb0 <_svfiprintf_r+0x1fc>
 800ede8:	7821      	ldrb	r1, [r4, #0]
 800edea:	2203      	movs	r2, #3
 800edec:	4650      	mov	r0, sl
 800edee:	f7f1 fa0f 	bl	8000210 <memchr>
 800edf2:	b140      	cbz	r0, 800ee06 <_svfiprintf_r+0x152>
 800edf4:	2340      	movs	r3, #64	; 0x40
 800edf6:	eba0 000a 	sub.w	r0, r0, sl
 800edfa:	fa03 f000 	lsl.w	r0, r3, r0
 800edfe:	9b04      	ldr	r3, [sp, #16]
 800ee00:	4303      	orrs	r3, r0
 800ee02:	3401      	adds	r4, #1
 800ee04:	9304      	str	r3, [sp, #16]
 800ee06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0a:	4826      	ldr	r0, [pc, #152]	; (800eea4 <_svfiprintf_r+0x1f0>)
 800ee0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee10:	2206      	movs	r2, #6
 800ee12:	f7f1 f9fd 	bl	8000210 <memchr>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d038      	beq.n	800ee8c <_svfiprintf_r+0x1d8>
 800ee1a:	4b23      	ldr	r3, [pc, #140]	; (800eea8 <_svfiprintf_r+0x1f4>)
 800ee1c:	bb1b      	cbnz	r3, 800ee66 <_svfiprintf_r+0x1b2>
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	3307      	adds	r3, #7
 800ee22:	f023 0307 	bic.w	r3, r3, #7
 800ee26:	3308      	adds	r3, #8
 800ee28:	9303      	str	r3, [sp, #12]
 800ee2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2c:	4433      	add	r3, r6
 800ee2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee30:	e767      	b.n	800ed02 <_svfiprintf_r+0x4e>
 800ee32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee36:	460c      	mov	r4, r1
 800ee38:	2001      	movs	r0, #1
 800ee3a:	e7a5      	b.n	800ed88 <_svfiprintf_r+0xd4>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	3401      	adds	r4, #1
 800ee40:	9305      	str	r3, [sp, #20]
 800ee42:	4619      	mov	r1, r3
 800ee44:	f04f 0c0a 	mov.w	ip, #10
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee4e:	3a30      	subs	r2, #48	; 0x30
 800ee50:	2a09      	cmp	r2, #9
 800ee52:	d903      	bls.n	800ee5c <_svfiprintf_r+0x1a8>
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d0c5      	beq.n	800ede4 <_svfiprintf_r+0x130>
 800ee58:	9105      	str	r1, [sp, #20]
 800ee5a:	e7c3      	b.n	800ede4 <_svfiprintf_r+0x130>
 800ee5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee60:	4604      	mov	r4, r0
 800ee62:	2301      	movs	r3, #1
 800ee64:	e7f0      	b.n	800ee48 <_svfiprintf_r+0x194>
 800ee66:	ab03      	add	r3, sp, #12
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <_svfiprintf_r+0x1f8>)
 800ee6e:	a904      	add	r1, sp, #16
 800ee70:	4638      	mov	r0, r7
 800ee72:	f3af 8000 	nop.w
 800ee76:	1c42      	adds	r2, r0, #1
 800ee78:	4606      	mov	r6, r0
 800ee7a:	d1d6      	bne.n	800ee2a <_svfiprintf_r+0x176>
 800ee7c:	89ab      	ldrh	r3, [r5, #12]
 800ee7e:	065b      	lsls	r3, r3, #25
 800ee80:	f53f af2c 	bmi.w	800ecdc <_svfiprintf_r+0x28>
 800ee84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee86:	b01d      	add	sp, #116	; 0x74
 800ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8c:	ab03      	add	r3, sp, #12
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	462a      	mov	r2, r5
 800ee92:	4b06      	ldr	r3, [pc, #24]	; (800eeac <_svfiprintf_r+0x1f8>)
 800ee94:	a904      	add	r1, sp, #16
 800ee96:	4638      	mov	r0, r7
 800ee98:	f000 f87a 	bl	800ef90 <_printf_i>
 800ee9c:	e7eb      	b.n	800ee76 <_svfiprintf_r+0x1c2>
 800ee9e:	bf00      	nop
 800eea0:	08081cac 	.word	0x08081cac
 800eea4:	08081cb6 	.word	0x08081cb6
 800eea8:	00000000 	.word	0x00000000
 800eeac:	0800ebfd 	.word	0x0800ebfd
 800eeb0:	08081cb2 	.word	0x08081cb2

0800eeb4 <_printf_common>:
 800eeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb8:	4616      	mov	r6, r2
 800eeba:	4699      	mov	r9, r3
 800eebc:	688a      	ldr	r2, [r1, #8]
 800eebe:	690b      	ldr	r3, [r1, #16]
 800eec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eec4:	4293      	cmp	r3, r2
 800eec6:	bfb8      	it	lt
 800eec8:	4613      	movlt	r3, r2
 800eeca:	6033      	str	r3, [r6, #0]
 800eecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eed0:	4607      	mov	r7, r0
 800eed2:	460c      	mov	r4, r1
 800eed4:	b10a      	cbz	r2, 800eeda <_printf_common+0x26>
 800eed6:	3301      	adds	r3, #1
 800eed8:	6033      	str	r3, [r6, #0]
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	0699      	lsls	r1, r3, #26
 800eede:	bf42      	ittt	mi
 800eee0:	6833      	ldrmi	r3, [r6, #0]
 800eee2:	3302      	addmi	r3, #2
 800eee4:	6033      	strmi	r3, [r6, #0]
 800eee6:	6825      	ldr	r5, [r4, #0]
 800eee8:	f015 0506 	ands.w	r5, r5, #6
 800eeec:	d106      	bne.n	800eefc <_printf_common+0x48>
 800eeee:	f104 0a19 	add.w	sl, r4, #25
 800eef2:	68e3      	ldr	r3, [r4, #12]
 800eef4:	6832      	ldr	r2, [r6, #0]
 800eef6:	1a9b      	subs	r3, r3, r2
 800eef8:	42ab      	cmp	r3, r5
 800eefa:	dc26      	bgt.n	800ef4a <_printf_common+0x96>
 800eefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef00:	1e13      	subs	r3, r2, #0
 800ef02:	6822      	ldr	r2, [r4, #0]
 800ef04:	bf18      	it	ne
 800ef06:	2301      	movne	r3, #1
 800ef08:	0692      	lsls	r2, r2, #26
 800ef0a:	d42b      	bmi.n	800ef64 <_printf_common+0xb0>
 800ef0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef10:	4649      	mov	r1, r9
 800ef12:	4638      	mov	r0, r7
 800ef14:	47c0      	blx	r8
 800ef16:	3001      	adds	r0, #1
 800ef18:	d01e      	beq.n	800ef58 <_printf_common+0xa4>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	68e5      	ldr	r5, [r4, #12]
 800ef1e:	6832      	ldr	r2, [r6, #0]
 800ef20:	f003 0306 	and.w	r3, r3, #6
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	bf08      	it	eq
 800ef28:	1aad      	subeq	r5, r5, r2
 800ef2a:	68a3      	ldr	r3, [r4, #8]
 800ef2c:	6922      	ldr	r2, [r4, #16]
 800ef2e:	bf0c      	ite	eq
 800ef30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef34:	2500      	movne	r5, #0
 800ef36:	4293      	cmp	r3, r2
 800ef38:	bfc4      	itt	gt
 800ef3a:	1a9b      	subgt	r3, r3, r2
 800ef3c:	18ed      	addgt	r5, r5, r3
 800ef3e:	2600      	movs	r6, #0
 800ef40:	341a      	adds	r4, #26
 800ef42:	42b5      	cmp	r5, r6
 800ef44:	d11a      	bne.n	800ef7c <_printf_common+0xc8>
 800ef46:	2000      	movs	r0, #0
 800ef48:	e008      	b.n	800ef5c <_printf_common+0xa8>
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	4652      	mov	r2, sl
 800ef4e:	4649      	mov	r1, r9
 800ef50:	4638      	mov	r0, r7
 800ef52:	47c0      	blx	r8
 800ef54:	3001      	adds	r0, #1
 800ef56:	d103      	bne.n	800ef60 <_printf_common+0xac>
 800ef58:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef60:	3501      	adds	r5, #1
 800ef62:	e7c6      	b.n	800eef2 <_printf_common+0x3e>
 800ef64:	18e1      	adds	r1, r4, r3
 800ef66:	1c5a      	adds	r2, r3, #1
 800ef68:	2030      	movs	r0, #48	; 0x30
 800ef6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef6e:	4422      	add	r2, r4
 800ef70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef78:	3302      	adds	r3, #2
 800ef7a:	e7c7      	b.n	800ef0c <_printf_common+0x58>
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	4622      	mov	r2, r4
 800ef80:	4649      	mov	r1, r9
 800ef82:	4638      	mov	r0, r7
 800ef84:	47c0      	blx	r8
 800ef86:	3001      	adds	r0, #1
 800ef88:	d0e6      	beq.n	800ef58 <_printf_common+0xa4>
 800ef8a:	3601      	adds	r6, #1
 800ef8c:	e7d9      	b.n	800ef42 <_printf_common+0x8e>
	...

0800ef90 <_printf_i>:
 800ef90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef94:	7e0f      	ldrb	r7, [r1, #24]
 800ef96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef98:	2f78      	cmp	r7, #120	; 0x78
 800ef9a:	4691      	mov	r9, r2
 800ef9c:	4680      	mov	r8, r0
 800ef9e:	460c      	mov	r4, r1
 800efa0:	469a      	mov	sl, r3
 800efa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efa6:	d807      	bhi.n	800efb8 <_printf_i+0x28>
 800efa8:	2f62      	cmp	r7, #98	; 0x62
 800efaa:	d80a      	bhi.n	800efc2 <_printf_i+0x32>
 800efac:	2f00      	cmp	r7, #0
 800efae:	f000 80d8 	beq.w	800f162 <_printf_i+0x1d2>
 800efb2:	2f58      	cmp	r7, #88	; 0x58
 800efb4:	f000 80a3 	beq.w	800f0fe <_printf_i+0x16e>
 800efb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efc0:	e03a      	b.n	800f038 <_printf_i+0xa8>
 800efc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efc6:	2b15      	cmp	r3, #21
 800efc8:	d8f6      	bhi.n	800efb8 <_printf_i+0x28>
 800efca:	a101      	add	r1, pc, #4	; (adr r1, 800efd0 <_printf_i+0x40>)
 800efcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efd0:	0800f029 	.word	0x0800f029
 800efd4:	0800f03d 	.word	0x0800f03d
 800efd8:	0800efb9 	.word	0x0800efb9
 800efdc:	0800efb9 	.word	0x0800efb9
 800efe0:	0800efb9 	.word	0x0800efb9
 800efe4:	0800efb9 	.word	0x0800efb9
 800efe8:	0800f03d 	.word	0x0800f03d
 800efec:	0800efb9 	.word	0x0800efb9
 800eff0:	0800efb9 	.word	0x0800efb9
 800eff4:	0800efb9 	.word	0x0800efb9
 800eff8:	0800efb9 	.word	0x0800efb9
 800effc:	0800f149 	.word	0x0800f149
 800f000:	0800f06d 	.word	0x0800f06d
 800f004:	0800f12b 	.word	0x0800f12b
 800f008:	0800efb9 	.word	0x0800efb9
 800f00c:	0800efb9 	.word	0x0800efb9
 800f010:	0800f16b 	.word	0x0800f16b
 800f014:	0800efb9 	.word	0x0800efb9
 800f018:	0800f06d 	.word	0x0800f06d
 800f01c:	0800efb9 	.word	0x0800efb9
 800f020:	0800efb9 	.word	0x0800efb9
 800f024:	0800f133 	.word	0x0800f133
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	1d1a      	adds	r2, r3, #4
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	602a      	str	r2, [r5, #0]
 800f030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f038:	2301      	movs	r3, #1
 800f03a:	e0a3      	b.n	800f184 <_printf_i+0x1f4>
 800f03c:	6820      	ldr	r0, [r4, #0]
 800f03e:	6829      	ldr	r1, [r5, #0]
 800f040:	0606      	lsls	r6, r0, #24
 800f042:	f101 0304 	add.w	r3, r1, #4
 800f046:	d50a      	bpl.n	800f05e <_printf_i+0xce>
 800f048:	680e      	ldr	r6, [r1, #0]
 800f04a:	602b      	str	r3, [r5, #0]
 800f04c:	2e00      	cmp	r6, #0
 800f04e:	da03      	bge.n	800f058 <_printf_i+0xc8>
 800f050:	232d      	movs	r3, #45	; 0x2d
 800f052:	4276      	negs	r6, r6
 800f054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f058:	485e      	ldr	r0, [pc, #376]	; (800f1d4 <_printf_i+0x244>)
 800f05a:	230a      	movs	r3, #10
 800f05c:	e019      	b.n	800f092 <_printf_i+0x102>
 800f05e:	680e      	ldr	r6, [r1, #0]
 800f060:	602b      	str	r3, [r5, #0]
 800f062:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f066:	bf18      	it	ne
 800f068:	b236      	sxthne	r6, r6
 800f06a:	e7ef      	b.n	800f04c <_printf_i+0xbc>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	6820      	ldr	r0, [r4, #0]
 800f070:	1d19      	adds	r1, r3, #4
 800f072:	6029      	str	r1, [r5, #0]
 800f074:	0601      	lsls	r1, r0, #24
 800f076:	d501      	bpl.n	800f07c <_printf_i+0xec>
 800f078:	681e      	ldr	r6, [r3, #0]
 800f07a:	e002      	b.n	800f082 <_printf_i+0xf2>
 800f07c:	0646      	lsls	r6, r0, #25
 800f07e:	d5fb      	bpl.n	800f078 <_printf_i+0xe8>
 800f080:	881e      	ldrh	r6, [r3, #0]
 800f082:	4854      	ldr	r0, [pc, #336]	; (800f1d4 <_printf_i+0x244>)
 800f084:	2f6f      	cmp	r7, #111	; 0x6f
 800f086:	bf0c      	ite	eq
 800f088:	2308      	moveq	r3, #8
 800f08a:	230a      	movne	r3, #10
 800f08c:	2100      	movs	r1, #0
 800f08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f092:	6865      	ldr	r5, [r4, #4]
 800f094:	60a5      	str	r5, [r4, #8]
 800f096:	2d00      	cmp	r5, #0
 800f098:	bfa2      	ittt	ge
 800f09a:	6821      	ldrge	r1, [r4, #0]
 800f09c:	f021 0104 	bicge.w	r1, r1, #4
 800f0a0:	6021      	strge	r1, [r4, #0]
 800f0a2:	b90e      	cbnz	r6, 800f0a8 <_printf_i+0x118>
 800f0a4:	2d00      	cmp	r5, #0
 800f0a6:	d04d      	beq.n	800f144 <_printf_i+0x1b4>
 800f0a8:	4615      	mov	r5, r2
 800f0aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0ae:	fb03 6711 	mls	r7, r3, r1, r6
 800f0b2:	5dc7      	ldrb	r7, [r0, r7]
 800f0b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0b8:	4637      	mov	r7, r6
 800f0ba:	42bb      	cmp	r3, r7
 800f0bc:	460e      	mov	r6, r1
 800f0be:	d9f4      	bls.n	800f0aa <_printf_i+0x11a>
 800f0c0:	2b08      	cmp	r3, #8
 800f0c2:	d10b      	bne.n	800f0dc <_printf_i+0x14c>
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	07de      	lsls	r6, r3, #31
 800f0c8:	d508      	bpl.n	800f0dc <_printf_i+0x14c>
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	6861      	ldr	r1, [r4, #4]
 800f0ce:	4299      	cmp	r1, r3
 800f0d0:	bfde      	ittt	le
 800f0d2:	2330      	movle	r3, #48	; 0x30
 800f0d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0dc:	1b52      	subs	r2, r2, r5
 800f0de:	6122      	str	r2, [r4, #16]
 800f0e0:	f8cd a000 	str.w	sl, [sp]
 800f0e4:	464b      	mov	r3, r9
 800f0e6:	aa03      	add	r2, sp, #12
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	f7ff fee2 	bl	800eeb4 <_printf_common>
 800f0f0:	3001      	adds	r0, #1
 800f0f2:	d14c      	bne.n	800f18e <_printf_i+0x1fe>
 800f0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f8:	b004      	add	sp, #16
 800f0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0fe:	4835      	ldr	r0, [pc, #212]	; (800f1d4 <_printf_i+0x244>)
 800f100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f104:	6829      	ldr	r1, [r5, #0]
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	f851 6b04 	ldr.w	r6, [r1], #4
 800f10c:	6029      	str	r1, [r5, #0]
 800f10e:	061d      	lsls	r5, r3, #24
 800f110:	d514      	bpl.n	800f13c <_printf_i+0x1ac>
 800f112:	07df      	lsls	r7, r3, #31
 800f114:	bf44      	itt	mi
 800f116:	f043 0320 	orrmi.w	r3, r3, #32
 800f11a:	6023      	strmi	r3, [r4, #0]
 800f11c:	b91e      	cbnz	r6, 800f126 <_printf_i+0x196>
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	f023 0320 	bic.w	r3, r3, #32
 800f124:	6023      	str	r3, [r4, #0]
 800f126:	2310      	movs	r3, #16
 800f128:	e7b0      	b.n	800f08c <_printf_i+0xfc>
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	f043 0320 	orr.w	r3, r3, #32
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	2378      	movs	r3, #120	; 0x78
 800f134:	4828      	ldr	r0, [pc, #160]	; (800f1d8 <_printf_i+0x248>)
 800f136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f13a:	e7e3      	b.n	800f104 <_printf_i+0x174>
 800f13c:	0659      	lsls	r1, r3, #25
 800f13e:	bf48      	it	mi
 800f140:	b2b6      	uxthmi	r6, r6
 800f142:	e7e6      	b.n	800f112 <_printf_i+0x182>
 800f144:	4615      	mov	r5, r2
 800f146:	e7bb      	b.n	800f0c0 <_printf_i+0x130>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	6826      	ldr	r6, [r4, #0]
 800f14c:	6961      	ldr	r1, [r4, #20]
 800f14e:	1d18      	adds	r0, r3, #4
 800f150:	6028      	str	r0, [r5, #0]
 800f152:	0635      	lsls	r5, r6, #24
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	d501      	bpl.n	800f15c <_printf_i+0x1cc>
 800f158:	6019      	str	r1, [r3, #0]
 800f15a:	e002      	b.n	800f162 <_printf_i+0x1d2>
 800f15c:	0670      	lsls	r0, r6, #25
 800f15e:	d5fb      	bpl.n	800f158 <_printf_i+0x1c8>
 800f160:	8019      	strh	r1, [r3, #0]
 800f162:	2300      	movs	r3, #0
 800f164:	6123      	str	r3, [r4, #16]
 800f166:	4615      	mov	r5, r2
 800f168:	e7ba      	b.n	800f0e0 <_printf_i+0x150>
 800f16a:	682b      	ldr	r3, [r5, #0]
 800f16c:	1d1a      	adds	r2, r3, #4
 800f16e:	602a      	str	r2, [r5, #0]
 800f170:	681d      	ldr	r5, [r3, #0]
 800f172:	6862      	ldr	r2, [r4, #4]
 800f174:	2100      	movs	r1, #0
 800f176:	4628      	mov	r0, r5
 800f178:	f7f1 f84a 	bl	8000210 <memchr>
 800f17c:	b108      	cbz	r0, 800f182 <_printf_i+0x1f2>
 800f17e:	1b40      	subs	r0, r0, r5
 800f180:	6060      	str	r0, [r4, #4]
 800f182:	6863      	ldr	r3, [r4, #4]
 800f184:	6123      	str	r3, [r4, #16]
 800f186:	2300      	movs	r3, #0
 800f188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f18c:	e7a8      	b.n	800f0e0 <_printf_i+0x150>
 800f18e:	6923      	ldr	r3, [r4, #16]
 800f190:	462a      	mov	r2, r5
 800f192:	4649      	mov	r1, r9
 800f194:	4640      	mov	r0, r8
 800f196:	47d0      	blx	sl
 800f198:	3001      	adds	r0, #1
 800f19a:	d0ab      	beq.n	800f0f4 <_printf_i+0x164>
 800f19c:	6823      	ldr	r3, [r4, #0]
 800f19e:	079b      	lsls	r3, r3, #30
 800f1a0:	d413      	bmi.n	800f1ca <_printf_i+0x23a>
 800f1a2:	68e0      	ldr	r0, [r4, #12]
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	4298      	cmp	r0, r3
 800f1a8:	bfb8      	it	lt
 800f1aa:	4618      	movlt	r0, r3
 800f1ac:	e7a4      	b.n	800f0f8 <_printf_i+0x168>
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	4632      	mov	r2, r6
 800f1b2:	4649      	mov	r1, r9
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	47d0      	blx	sl
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d09b      	beq.n	800f0f4 <_printf_i+0x164>
 800f1bc:	3501      	adds	r5, #1
 800f1be:	68e3      	ldr	r3, [r4, #12]
 800f1c0:	9903      	ldr	r1, [sp, #12]
 800f1c2:	1a5b      	subs	r3, r3, r1
 800f1c4:	42ab      	cmp	r3, r5
 800f1c6:	dcf2      	bgt.n	800f1ae <_printf_i+0x21e>
 800f1c8:	e7eb      	b.n	800f1a2 <_printf_i+0x212>
 800f1ca:	2500      	movs	r5, #0
 800f1cc:	f104 0619 	add.w	r6, r4, #25
 800f1d0:	e7f5      	b.n	800f1be <_printf_i+0x22e>
 800f1d2:	bf00      	nop
 800f1d4:	08081cbd 	.word	0x08081cbd
 800f1d8:	08081cce 	.word	0x08081cce

0800f1dc <memmove>:
 800f1dc:	4288      	cmp	r0, r1
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	eb01 0402 	add.w	r4, r1, r2
 800f1e4:	d902      	bls.n	800f1ec <memmove+0x10>
 800f1e6:	4284      	cmp	r4, r0
 800f1e8:	4623      	mov	r3, r4
 800f1ea:	d807      	bhi.n	800f1fc <memmove+0x20>
 800f1ec:	1e43      	subs	r3, r0, #1
 800f1ee:	42a1      	cmp	r1, r4
 800f1f0:	d008      	beq.n	800f204 <memmove+0x28>
 800f1f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1fa:	e7f8      	b.n	800f1ee <memmove+0x12>
 800f1fc:	4402      	add	r2, r0
 800f1fe:	4601      	mov	r1, r0
 800f200:	428a      	cmp	r2, r1
 800f202:	d100      	bne.n	800f206 <memmove+0x2a>
 800f204:	bd10      	pop	{r4, pc}
 800f206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f20a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f20e:	e7f7      	b.n	800f200 <memmove+0x24>

0800f210 <_realloc_r>:
 800f210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f214:	4680      	mov	r8, r0
 800f216:	4614      	mov	r4, r2
 800f218:	460e      	mov	r6, r1
 800f21a:	b921      	cbnz	r1, 800f226 <_realloc_r+0x16>
 800f21c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f220:	4611      	mov	r1, r2
 800f222:	f7ff bb75 	b.w	800e910 <_malloc_r>
 800f226:	b92a      	cbnz	r2, 800f234 <_realloc_r+0x24>
 800f228:	f7ff fc9c 	bl	800eb64 <_free_r>
 800f22c:	4625      	mov	r5, r4
 800f22e:	4628      	mov	r0, r5
 800f230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f234:	f000 f81b 	bl	800f26e <_malloc_usable_size_r>
 800f238:	4284      	cmp	r4, r0
 800f23a:	4607      	mov	r7, r0
 800f23c:	d802      	bhi.n	800f244 <_realloc_r+0x34>
 800f23e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f242:	d812      	bhi.n	800f26a <_realloc_r+0x5a>
 800f244:	4621      	mov	r1, r4
 800f246:	4640      	mov	r0, r8
 800f248:	f7ff fb62 	bl	800e910 <_malloc_r>
 800f24c:	4605      	mov	r5, r0
 800f24e:	2800      	cmp	r0, #0
 800f250:	d0ed      	beq.n	800f22e <_realloc_r+0x1e>
 800f252:	42bc      	cmp	r4, r7
 800f254:	4622      	mov	r2, r4
 800f256:	4631      	mov	r1, r6
 800f258:	bf28      	it	cs
 800f25a:	463a      	movcs	r2, r7
 800f25c:	f7ff fb22 	bl	800e8a4 <memcpy>
 800f260:	4631      	mov	r1, r6
 800f262:	4640      	mov	r0, r8
 800f264:	f7ff fc7e 	bl	800eb64 <_free_r>
 800f268:	e7e1      	b.n	800f22e <_realloc_r+0x1e>
 800f26a:	4635      	mov	r5, r6
 800f26c:	e7df      	b.n	800f22e <_realloc_r+0x1e>

0800f26e <_malloc_usable_size_r>:
 800f26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f272:	1f18      	subs	r0, r3, #4
 800f274:	2b00      	cmp	r3, #0
 800f276:	bfbc      	itt	lt
 800f278:	580b      	ldrlt	r3, [r1, r0]
 800f27a:	18c0      	addlt	r0, r0, r3
 800f27c:	4770      	bx	lr
	...

0800f280 <_init>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	bf00      	nop
 800f284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f286:	bc08      	pop	{r3}
 800f288:	469e      	mov	lr, r3
 800f28a:	4770      	bx	lr

0800f28c <_fini>:
 800f28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f28e:	bf00      	nop
 800f290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f292:	bc08      	pop	{r3}
 800f294:	469e      	mov	lr, r3
 800f296:	4770      	bx	lr
