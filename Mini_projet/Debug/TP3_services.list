
TP3_services.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041e04  08010034  08010034  00020034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08051e38  08051e38  000700b0  2**0
                  CONTENTS
  4 .ARM          00000008  08051e38  08051e38  00061e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08051e40  08051e40  000700b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08051e40  08051e40  00061e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08051e44  08051e44  00061e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08051e48  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049a8  200000b0  08051ef8  000700b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a58  08051ef8  00074a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000700b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000349ec  00000000  00000000  000700e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007029  00000000  00000000  000a4acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002790  00000000  00000000  000abaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002478  00000000  00000000  000ae288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030926  00000000  00000000  000b0700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000336be  00000000  00000000  000e1026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117acf  00000000  00000000  001146e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022c1b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abdc  00000000  00000000  0022c204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801001c 	.word	0x0801001c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0801001c 	.word	0x0801001c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x9c>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <MX_ADC1_Init+0xa0>)
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f3e:	f004 fd27 	bl	8005990 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f48:	f002 f852 	bl	8002ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f5e:	f004 fec1 	bl	8005ce4 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f68:	f002 f842 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000cc 	.word	0x200000cc
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	0f000001 	.word	0x0f000001

08000f80 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_ADC3_Init+0x98>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <MX_ADC3_Init+0x9c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_ADC3_Init+0x98>)
 8000f9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f9e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_ADC3_Init+0xa0>)
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_ADC3_Init+0x98>)
 8000fe2:	f004 fcd5 	bl	8005990 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000fec:	f002 f800 	bl	8002ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_ADC3_Init+0x98>)
 8001002:	f004 fe6f 	bl	8005ce4 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800100c:	f001 fff0 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000114 	.word	0x20000114
 800101c:	40012200 	.word	0x40012200
 8001020:	0f000001 	.word	0x0f000001

08001024 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <HAL_ADC_MspInit+0xc8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d124      	bne.n	8001090 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	481a      	ldr	r0, [pc, #104]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 800108a:	f006 f829 	bl	80070e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800108e:	e029      	b.n	80010e4 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_ADC_MspInit+0xd4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d124      	bne.n	80010e4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80010ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010e0:	f005 fffe 	bl	80070e0 <HAL_GPIO_Init>
}
 80010e4:	bf00      	nop
 80010e6:	3730      	adds	r7, #48	; 0x30
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40012000 	.word	0x40012000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40012200 	.word	0x40012200
 80010fc:	40021400 	.word	0x40021400

08001100 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_DAC_Init+0x4c>)
 8001110:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <MX_DAC_Init+0x50>)
 8001112:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_DAC_Init+0x4c>)
 8001116:	f005 f917 	bl	8006348 <HAL_DAC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001120:	f001 ff66 	bl	8002ff0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_DAC_Init+0x4c>)
 8001134:	f005 f98e 	bl	8006454 <HAL_DAC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800113e:	f001 ff57 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000015c 	.word	0x2000015c
 8001150:	40007400 	.word	0x40007400

08001154 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_DAC_MspInit+0x84>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12b      	bne.n	80011ce <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_DAC_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_DAC_MspInit+0x88>)
 800117c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_DAC_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_DAC_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_DAC_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_DAC_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011a6:	2310      	movs	r3, #16
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_DAC_MspInit+0x8c>)
 80011ba:	f005 ff91 	bl	80070e0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	210f      	movs	r1, #15
 80011c2:	2036      	movs	r0, #54	; 0x36
 80011c4:	f005 f896 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c8:	2036      	movs	r0, #54	; 0x36
 80011ca:	f005 f8af 	bl	800632c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40007400 	.word	0x40007400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_DMA2D_Init+0x5c>)
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <MX_DMA2D_Init+0x60>)
 80011ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_DMA2D_Init+0x5c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_DMA2D_Init+0x5c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_DMA2D_Init+0x5c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_DMA2D_Init+0x5c>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_DMA2D_Init+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA2D_Init+0x5c>)
 800120e:	2200      	movs	r2, #0
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_DMA2D_Init+0x5c>)
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_DMA2D_Init+0x5c>)
 800121a:	f005 fbc5 	bl	80069a8 <HAL_DMA2D_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001224:	f001 fee4 	bl	8002ff0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001228:	2101      	movs	r1, #1
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_DMA2D_Init+0x5c>)
 800122c:	f005 fe2a 	bl	8006e84 <HAL_DMA2D_ConfigLayer>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001236:	f001 fedb 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000170 	.word	0x20000170
 8001244:	4002b000 	.word	0x4002b000

08001248 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_DMA2D_MspInit+0x44>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d113      	bne.n	8001282 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_DMA2D_MspInit+0x48>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <HAL_DMA2D_MspInit+0x48>)
 8001260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_DMA2D_MspInit+0x48>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	205a      	movs	r0, #90	; 0x5a
 8001278:	f005 f83c 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800127c:	205a      	movs	r0, #90	; 0x5a
 800127e:	f005 f855 	bl	800632c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	4002b000 	.word	0x4002b000
 8001290:	40023800 	.word	0x40023800

08001294 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <MX_FMC_Init+0x98>)
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <MX_FMC_Init+0x9c>)
 80012b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_FMC_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_FMC_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_FMC_Init+0x98>)
 80012c0:	2204      	movs	r2, #4
 80012c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_FMC_Init+0x98>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_FMC_Init+0x98>)
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_FMC_Init+0x98>)
 80012d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_FMC_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_FMC_Init+0x98>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_FMC_Init+0x98>)
 80012e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_FMC_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012f8:	2307      	movs	r3, #7
 80012fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001300:	2307      	movs	r3, #7
 8001302:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001304:	2303      	movs	r3, #3
 8001306:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_FMC_Init+0x98>)
 8001316:	f009 f921 	bl	800a55c <HAL_SDRAM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001320:	f001 fe66 	bl	8002ff0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200001b0 	.word	0x200001b0
 8001330:	a0000140 	.word	0xa0000140

08001334 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_FMC_MspInit+0x100>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d16d      	bne.n	800142c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_FMC_MspInit+0x100>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_FMC_MspInit+0x104>)
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	4a37      	ldr	r2, [pc, #220]	; (8001438 <HAL_FMC_MspInit+0x104>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6393      	str	r3, [r2, #56]	; 0x38
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <HAL_FMC_MspInit+0x104>)
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800136e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001372:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001380:	230c      	movs	r3, #12
 8001382:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	482c      	ldr	r0, [pc, #176]	; (800143c <HAL_FMC_MspInit+0x108>)
 800138a:	f005 fea9 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800138e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001392:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a0:	230c      	movs	r3, #12
 80013a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4825      	ldr	r0, [pc, #148]	; (8001440 <HAL_FMC_MspInit+0x10c>)
 80013aa:	f005 fe99 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80013ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013b2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013c0:	230c      	movs	r3, #12
 80013c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	481e      	ldr	r0, [pc, #120]	; (8001444 <HAL_FMC_MspInit+0x110>)
 80013ca:	f005 fe89 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80013ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013d2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e0:	230c      	movs	r3, #12
 80013e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <HAL_FMC_MspInit+0x114>)
 80013ea:	f005 fe79 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80013ee:	2328      	movs	r3, #40	; 0x28
 80013f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4811      	ldr	r0, [pc, #68]	; (800144c <HAL_FMC_MspInit+0x118>)
 8001408:	f005 fe6a 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800140c:	2308      	movs	r3, #8
 800140e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141c:	230c      	movs	r3, #12
 800141e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <HAL_FMC_MspInit+0x11c>)
 8001426:	f005 fe5b 	bl	80070e0 <HAL_GPIO_Init>
 800142a:	e000      	b.n	800142e <HAL_FMC_MspInit+0xfa>
    return;
 800142c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200001e4 	.word	0x200001e4
 8001438:	40023800 	.word	0x40023800
 800143c:	40021000 	.word	0x40021000
 8001440:	40021800 	.word	0x40021800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021400 	.word	0x40021400
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40020800 	.word	0x40020800

08001454 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800145c:	f7ff ff6a 	bl	8001334 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <vApplicationGetIdleTaskMemory+0x2c>)
 8001478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <vApplicationGetIdleTaskMemory+0x30>)
 800147e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000204 	.word	0x20000204
 8001498:	200002b8 	.word	0x200002b8

0800149c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b0a6      	sub	sp, #152	; 0x98
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex_color */
  osMutexDef(Mutex_color);
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  Mutex_colorHandle = osMutexCreate(osMutex(Mutex_color));
 80014ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00b fb77 	bl	800cba6 <osMutexCreate>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a37      	ldr	r2, [pc, #220]	; (8001598 <MX_FREERTOS_Init+0xfc>)
 80014bc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueP2V */
  osMessageQDef(myQueueP2V, 3, uint16_t);
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <MX_FREERTOS_Init+0x100>)
 80014c0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80014c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueP2VHandle = osMessageCreate(osMessageQ(myQueueP2V), NULL);
 80014ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f00b fb80 	bl	800cbd6 <osMessageCreate>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <MX_FREERTOS_Init+0x104>)
 80014da:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 2, uint8_t);
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_FREERTOS_Init+0x108>)
 80014de:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80014e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 80014e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00b fb71 	bl	800cbd6 <osMessageCreate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <MX_FREERTOS_Init+0x10c>)
 80014f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <MX_FREERTOS_Init+0x110>)
 80014fc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001500:	461d      	mov	r5, r3
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800150a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800150e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f00b fae6 	bl	800cae6 <osThreadCreate>
 800151a:	4603      	mov	r3, r0
 800151c:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <MX_FREERTOS_Init+0x114>)
 800151e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, tache1, osPriorityNormal, 0, 1024);
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_FREERTOS_Init+0x118>)
 8001522:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001526:	461d      	mov	r5, r3
 8001528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001534:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f00b fad3 	bl	800cae6 <osThreadCreate>
 8001540:	4603      	mov	r3, r0
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <MX_FREERTOS_Init+0x11c>)
 8001544:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, tache2, osPriorityHigh, 0, 1024);
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_FREERTOS_Init+0x120>)
 8001548:	f107 041c 	add.w	r4, r7, #28
 800154c:	461d      	mov	r5, r3
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f00b fac0 	bl	800cae6 <osThreadCreate>
 8001566:	4603      	mov	r3, r0
 8001568:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <MX_FREERTOS_Init+0x124>)
 800156a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, Affichage_texte, osPriorityIdle, 0, 1024);
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_FREERTOS_Init+0x128>)
 800156e:	463c      	mov	r4, r7
 8001570:	461d      	mov	r5, r3
 8001572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800157a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 800157e:	463b      	mov	r3, r7
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00b faaf 	bl	800cae6 <osThreadCreate>
 8001588:	4603      	mov	r3, r0
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <MX_FREERTOS_Init+0x12c>)
 800158c:	6013      	str	r3, [r2, #0]



  /* USER CODE END RTOS_THREADS */

}
 800158e:	bf00      	nop
 8001590:	3798      	adds	r7, #152	; 0x98
 8001592:	46bd      	mov	sp, r7
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000200 	.word	0x20000200
 800159c:	08010064 	.word	0x08010064
 80015a0:	200001f8 	.word	0x200001f8
 80015a4:	08010074 	.word	0x08010074
 80015a8:	200001fc 	.word	0x200001fc
 80015ac:	08010084 	.word	0x08010084
 80015b0:	200001e8 	.word	0x200001e8
 80015b4:	080100a0 	.word	0x080100a0
 80015b8:	200001ec 	.word	0x200001ec
 80015bc:	080100bc 	.word	0x080100bc
 80015c0:	200001f0 	.word	0x200001f0
 80015c4:	080100d8 	.word	0x080100d8
 80015c8:	200001f4 	.word	0x200001f4

080015cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint16_t Message;
  for(;;)
  {

	xQueueReceive(myQueueP2VHandle, &Message, 15);//autant que la période de tache1
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <StartDefaultTask+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f107 010e 	add.w	r1, r7, #14
 80015dc:	220f      	movs	r2, #15
 80015de:	4618      	mov	r0, r3
 80015e0:	f00b ff16 	bl	800d410 <xQueueReceive>

	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <StartDefaultTask+0x44>)
 80015ec:	f006 f848 	bl	8007680 <HAL_GPIO_WritePin>
    osDelay(Message);
 80015f0:	89fb      	ldrh	r3, [r7, #14]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00b fac3 	bl	800cb7e <osDelay>
    HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <StartDefaultTask+0x44>)
 8001600:	f006 f83e 	bl	8007680 <HAL_GPIO_WritePin>
    osDelay(100);
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	f00b faba 	bl	800cb7e <osDelay>
	xQueueReceive(myQueueP2VHandle, &Message, 15);//autant que la période de tache1
 800160a:	e7e3      	b.n	80015d4 <StartDefaultTask+0x8>
 800160c:	200001f8 	.word	0x200001f8
 8001610:	40021c00 	.word	0x40021c00
 8001614:	00000000 	.word	0x00000000

08001618 <tache1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tache1 */
void tache1(void const * argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0b6      	sub	sp, #216	; 0xd8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN heure */
  /* Infinite loop */
	RTC_TimeTypeDef time,time1,time2;
	RTC_DateTypeDef date,date1,date2;
	char msg[50]={};
 8001620:	2300      	movs	r3, #0
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
 8001624:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001628:	222e      	movs	r2, #46	; 0x2e
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f00d ff47 	bl	800f4c0 <memset>
	char text[50]={};
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	222e      	movs	r2, #46	; 0x2e
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00d ff3e 	bl	800f4c0 <memset>

	TickType_t LastCall=xTaskGetTickCount();
 8001644:	f00c fd8c 	bl	800e160 <xTaskGetTickCount>
 8001648:	4603      	mov	r3, r0
 800164a:	613b      	str	r3, [r7, #16]
	TickType_t value=100;
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	uint16_t line=15;
 8001652:	230f      	movs	r3, #15
 8001654:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

	uint16_t Message;
	for(;;){


		HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165e:	4858      	ldr	r0, [pc, #352]	; (80017c0 <tache1+0x1a8>)
 8001660:	f006 f80e 	bl	8007680 <HAL_GPIO_WritePin>

		HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8001664:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	4855      	ldr	r0, [pc, #340]	; (80017c4 <tache1+0x1ac>)
 800166e:	f008 fbf1 	bl	8009e54 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8001672:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4852      	ldr	r0, [pc, #328]	; (80017c4 <tache1+0x1ac>)
 800167c:	f008 fccc 	bl	800a018 <HAL_RTC_GetDate>

		//Perdre du temps pour durer 4ms


		HAL_RTC_GetTime(&hrtc,&time1,RTC_FORMAT_BIN);
 8001680:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	484e      	ldr	r0, [pc, #312]	; (80017c4 <tache1+0x1ac>)
 800168a:	f008 fbe3 	bl	8009e54 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,&date1,RTC_FORMAT_BIN);
 800168e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	484b      	ldr	r0, [pc, #300]	; (80017c4 <tache1+0x1ac>)
 8001698:	f008 fcbe 	bl	800a018 <HAL_RTC_GetDate>
		millisecond1 = (time1.SecondFraction-time1.SubSeconds)*1000/(time1.SecondFraction+1);
 800169c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80016a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016aa:	fb03 f202 	mul.w	r2, r3, r2
 80016ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016b2:	3301      	adds	r3, #1
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		for (int i=1;i<250;i++){//16ms pour 1000boucles
 80016bc:	2301      	movs	r3, #1
 80016be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016c2:	e02c      	b.n	800171e <tache1+0x106>
		val = (val + (int)sqrt(millisecond1*652.3))%100;
 80016c4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016c8:	f7fe ff34 	bl	8000534 <__aeabi_ui2d>
 80016cc:	a33a      	add	r3, pc, #232	; (adr r3, 80017b8 <tache1+0x1a0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ffa9 	bl	8000628 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	ec43 2b17 	vmov	d7, r2, r3
 80016de:	eeb0 0a47 	vmov.f32	s0, s14
 80016e2:	eef0 0a67 	vmov.f32	s1, s15
 80016e6:	f00e fbba 	bl	800fe5e <sqrt>
 80016ea:	ec53 2b10 	vmov	r2, r3, d0
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff fa49 	bl	8000b88 <__aeabi_d2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016fe:	4413      	add	r3, r2
 8001700:	4a31      	ldr	r2, [pc, #196]	; (80017c8 <tache1+0x1b0>)
 8001702:	fba2 1203 	umull	r1, r2, r2, r3
 8001706:	0952      	lsrs	r2, r2, #5
 8001708:	2164      	movs	r1, #100	; 0x64
 800170a:	fb01 f202 	mul.w	r2, r1, r2
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		for (int i=1;i<250;i++){//16ms pour 1000boucles
 8001714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001718:	3301      	adds	r3, #1
 800171a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800171e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001722:	2bf9      	cmp	r3, #249	; 0xf9
 8001724:	ddce      	ble.n	80016c4 <tache1+0xac>
		//time2.Seconds, (unsigned int)millisecond2);
		//BSP_LCD_DisplayStringAt(260,24,(uint8_t*) text,LEFT_MODE);

		//Temporaire pour vérifier que dure bien 4 ms

		Message=(uint16_t)(millisecond1);
 8001726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800172a:	b29b      	uxth	r3, r3
 800172c:	81fb      	strh	r3, [r7, #14]
		xQueueSend(myQueueP2VHandle, &Message, 0);//millisecond1 à default_task/led
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <tache1+0x1b4>)
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	f107 010e 	add.w	r1, r7, #14
 8001736:	2300      	movs	r3, #0
 8001738:	2200      	movs	r2, #0
 800173a:	f00b fcc3 	bl	800d0c4 <xQueueGenericSend>

		xSemaphoreTake(Mutex_colorHandle,10);
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <tache1+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	210a      	movs	r1, #10
 8001744:	4618      	mov	r0, r3
 8001746:	f00b ff49 	bl	800d5dc <xQueueSemaphoreTake>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800174a:	4822      	ldr	r0, [pc, #136]	; (80017d4 <tache1+0x1bc>)
 800174c:	f002 f874 	bl	8003838 <BSP_LCD_SetTextColor>

		line++;
 8001750:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8001754:	3301      	adds	r3, #1
 8001756:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

		sprintf(msg,"tache1 : %d s %d ms",time.Seconds,time.SubSeconds);
 800175a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800175e:	461a      	mov	r2, r3
 8001760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001764:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001768:	491b      	ldr	r1, [pc, #108]	; (80017d8 <tache1+0x1c0>)
 800176a:	f00d ffbf 	bl	800f6ec <siprintf>
		//les subseconds vont de 0 à 255

		if (line>20){
 800176e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8001772:	2b14      	cmp	r3, #20
 8001774:	d902      	bls.n	800177c <tache1+0x164>
			line=0;}
 8001776:	2300      	movs	r3, #0
 8001778:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

		BSP_LCD_DisplayStringAtLine(line,(uint8_t*) msg);
 800177c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001780:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f9ec 	bl	8003b64 <BSP_LCD_DisplayStringAtLine>
		xSemaphoreGive(Mutex_colorHandle);
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <tache1+0x1b8>)
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	f00b fc95 	bl	800d0c4 <xQueueGenericSend>
		HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,0);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a0:	4807      	ldr	r0, [pc, #28]	; (80017c0 <tache1+0x1a8>)
 80017a2:	f005 ff6d 	bl	8007680 <HAL_GPIO_WritePin>


		vTaskDelayUntil(&LastCall,value);
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00c fb02 	bl	800ddb8 <vTaskDelayUntil>
		HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 80017b4:	e750      	b.n	8001658 <tache1+0x40>
 80017b6:	bf00      	nop
 80017b8:	66666666 	.word	0x66666666
 80017bc:	40846266 	.word	0x40846266
 80017c0:	40021c00 	.word	0x40021c00
 80017c4:	20000640 	.word	0x20000640
 80017c8:	51eb851f 	.word	0x51eb851f
 80017cc:	200001f8 	.word	0x200001f8
 80017d0:	20000200 	.word	0x20000200
 80017d4:	ff0000ff 	.word	0xff0000ff
 80017d8:	080100f4 	.word	0x080100f4

080017dc <tache2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pause */
void tache2(void const * argument)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b098      	sub	sp, #96	; 0x60
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pause */
  /* Infinite loop */

	RTC_TimeTypeDef time;
		RTC_DateTypeDef date;
		char msg[50]={};
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	222e      	movs	r2, #46	; 0x2e
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fe65 	bl	800f4c0 <memset>

		TickType_t LastCall=xTaskGetTickCount();
 80017f6:	f00c fcb3 	bl	800e160 <xTaskGetTickCount>
 80017fa:	4603      	mov	r3, r0
 80017fc:	60bb      	str	r3, [r7, #8]
		TickType_t value=7;
 80017fe:	2307      	movs	r3, #7
 8001800:	65bb      	str	r3, [r7, #88]	; 0x58

		uint16_t line=15;
 8001802:	230f      	movs	r3, #15
 8001804:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  for(;;)
  {

	  HAL_GPIO_WritePin(LED18_GPIO_Port,LED18_Pin,1);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180e:	4828      	ldr	r0, [pc, #160]	; (80018b0 <tache2+0xd4>)
 8001810:	f005 ff36 	bl	8007680 <HAL_GPIO_WritePin>

	  xSemaphoreTake(Mutex_colorHandle,10);
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <tache2+0xd8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	210a      	movs	r1, #10
 800181a:	4618      	mov	r0, r3
 800181c:	f00b fede 	bl	800d5dc <xQueueSemaphoreTake>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001820:	4825      	ldr	r0, [pc, #148]	; (80018b8 <tache2+0xdc>)
 8001822:	f002 f809 	bl	8003838 <BSP_LCD_SetTextColor>

	  		HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8001826:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	4823      	ldr	r0, [pc, #140]	; (80018bc <tache2+0xe0>)
 8001830:	f008 fb10 	bl	8009e54 <HAL_RTC_GetTime>
	  		HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8001834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <tache2+0xe0>)
 800183e:	f008 fbeb 	bl	800a018 <HAL_RTC_GetDate>

	  line++;
 8001842:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001846:	3301      	adds	r3, #1
 8001848:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	  sprintf(msg,"tache2 : %d s %d ms",time.Seconds,time.SubSeconds);
 800184c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001850:	461a      	mov	r2, r3
 8001852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001854:	f107 000c 	add.w	r0, r7, #12
 8001858:	4919      	ldr	r1, [pc, #100]	; (80018c0 <tache2+0xe4>)
 800185a:	f00d ff47 	bl	800f6ec <siprintf>

	  if (line>20){
 800185e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001862:	2b14      	cmp	r3, #20
 8001864:	d902      	bls.n	800186c <tache2+0x90>
	  	line=0;}
 8001866:	2300      	movs	r3, #0
 8001868:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	  BSP_LCD_DisplayStringAt(250,line*12,(uint8_t*) msg,LEFT_MODE);
 800186c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001870:	461a      	mov	r2, r3
 8001872:	0052      	lsls	r2, r2, #1
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	b299      	uxth	r1, r3
 800187a:	f107 020c 	add.w	r2, r7, #12
 800187e:	2303      	movs	r3, #3
 8001880:	20fa      	movs	r0, #250	; 0xfa
 8001882:	f002 f8a7 	bl	80039d4 <BSP_LCD_DisplayStringAt>

	  xSemaphoreGive(Mutex_colorHandle);
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <tache2+0xd8>)
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	f00b fc18 	bl	800d0c4 <xQueueGenericSend>
	  HAL_GPIO_WritePin(LED18_GPIO_Port,LED18_Pin,0);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <tache2+0xd4>)
 800189c:	f005 fef0 	bl	8007680 <HAL_GPIO_WritePin>
	  vTaskDelayUntil(&LastCall,value);
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00c fa86 	bl	800ddb8 <vTaskDelayUntil>
	  HAL_GPIO_WritePin(LED18_GPIO_Port,LED18_Pin,1);
 80018ac:	e7ac      	b.n	8001808 <tache2+0x2c>
 80018ae:	bf00      	nop
 80018b0:	40021c00 	.word	0x40021c00
 80018b4:	20000200 	.word	0x20000200
 80018b8:	ffff0000 	.word	0xffff0000
 80018bc:	20000640 	.word	0x20000640
 80018c0:	08010108 	.word	0x08010108

080018c4 <Affichage_texte>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Affichage_texte */
void Affichage_texte(void const * argument)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Affichage_texte */

	uint8_t caractere_recu;//ATTENTION pas la variable globale, juste le meme nom
	uint16_t index = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	81fb      	strh	r3, [r7, #14]
	uint8_t text[2];
	 /* Infinite loop */
	 for(;;)
	 {
	 while(xQueueReceive(myQueue02Handle,&caractere_recu,0))
 80018d0:	e029      	b.n	8001926 <Affichage_texte+0x62>
	 {
	 sprintf(text,"%c",caractere_recu);
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	491a      	ldr	r1, [pc, #104]	; (8001944 <Affichage_texte+0x80>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f00d ff05 	bl	800f6ec <siprintf>
	 caractere_recu=0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	737b      	strb	r3, [r7, #13]
	 BSP_LCD_SetFont(&Font12);
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <Affichage_texte+0x84>)
 80018e8:	f001 ffd8 	bl	800389c <BSP_LCD_SetFont>
	 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f001 ffa2 	bl	8003838 <BSP_LCD_SetTextColor>
	 BSP_LCD_DisplayStringAt(index,259,(uint8_t*) text,LEFT_MODE);
 80018f4:	f107 0208 	add.w	r2, r7, #8
 80018f8:	89f8      	ldrh	r0, [r7, #14]
 80018fa:	2303      	movs	r3, #3
 80018fc:	f240 1103 	movw	r1, #259	; 0x103
 8001900:	f002 f868 	bl	80039d4 <BSP_LCD_DisplayStringAt>
	 index = (index + 12)%480;
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	f103 020c 	add.w	r2, r3, #12
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <Affichage_texte+0x88>)
 800190c:	fb83 1302 	smull	r1, r3, r3, r2
 8001910:	4413      	add	r3, r2
 8001912:	1219      	asrs	r1, r3, #8
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a5b      	subs	r3, r3, r1
 800191e:	015b      	lsls	r3, r3, #5
 8001920:	1ad1      	subs	r1, r2, r3
 8001922:	460b      	mov	r3, r1
 8001924:	81fb      	strh	r3, [r7, #14]
	 while(xQueueReceive(myQueue02Handle,&caractere_recu,0))
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <Affichage_texte+0x8c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f107 010d 	add.w	r1, r7, #13
 800192e:	2200      	movs	r2, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00b fd6d 	bl	800d410 <xQueueReceive>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ca      	bne.n	80018d2 <Affichage_texte+0xe>
	 }
	 osDelay(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f00b f91e 	bl	800cb7e <osDelay>
	 while(xQueueReceive(myQueue02Handle,&caractere_recu,0))
 8001942:	e7f0      	b.n	8001926 <Affichage_texte+0x62>
 8001944:	0801011c 	.word	0x0801011c
 8001948:	20000030 	.word	0x20000030
 800194c:	88888889 	.word	0x88888889
 8001950:	200001fc 	.word	0x200001fc

08001954 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800195e:	20c8      	movs	r0, #200	; 0xc8
 8001960:	f001 fe56 	bl	8003610 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001964:	f000 fa7a 	bl	8001e5c <ft5336_I2C_InitializeIfRequired>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001998:	2300      	movs	r3, #0
 800199a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800199c:	f000 fa5e 	bl	8001e5c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e010      	b.n	80019c8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	21a8      	movs	r1, #168	; 0xa8
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fe11 	bl	80035d4 <TS_IO_Read>
 80019b2:	4603      	mov	r3, r0
 80019b4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b51      	cmp	r3, #81	; 0x51
 80019bc:	d101      	bne.n	80019c2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	3301      	adds	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d802      	bhi.n	80019d4 <ft5336_ReadID+0x4e>
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0e8      	beq.n	80019a6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80019d4:	7b7b      	ldrb	r3, [r7, #13]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	b29b      	uxth	r3, r3
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fa44 	bl	8001e7c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f932 	bl	8001c60 <ft5336_TS_DisableIT>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 fddb 	bl	80035d4 <TS_IO_Read>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d901      	bls.n	8001a3a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <ft5336_TS_DetectTouch+0x50>)
 8001a40:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <ft5336_TS_DetectTouch+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200004b8 	.word	0x200004b8

08001a58 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <ft5336_TS_GetXY+0x1d8>)
 8001a7c:	789a      	ldrb	r2, [r3, #2]
 8001a7e:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <ft5336_TS_GetXY+0x1d8>)
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	f080 80cf 	bcs.w	8001c26 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001a88:	4b69      	ldr	r3, [pc, #420]	; (8001c30 <ft5336_TS_GetXY+0x1d8>)
 8001a8a:	789b      	ldrb	r3, [r3, #2]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d871      	bhi.n	8001b74 <ft5336_TS_GetXY+0x11c>
 8001a90:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <ft5336_TS_GetXY+0x40>)
 8001a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a96:	bf00      	nop
 8001a98:	08001ac1 	.word	0x08001ac1
 8001a9c:	08001ad3 	.word	0x08001ad3
 8001aa0:	08001ae5 	.word	0x08001ae5
 8001aa4:	08001af7 	.word	0x08001af7
 8001aa8:	08001b09 	.word	0x08001b09
 8001aac:	08001b1b 	.word	0x08001b1b
 8001ab0:	08001b2d 	.word	0x08001b2d
 8001ab4:	08001b3f 	.word	0x08001b3f
 8001ab8:	08001b51 	.word	0x08001b51
 8001abc:	08001b63 	.word	0x08001b63
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001ac8:	2306      	movs	r3, #6
 8001aca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001acc:	2305      	movs	r3, #5
 8001ace:	753b      	strb	r3, [r7, #20]
      break;
 8001ad0:	e051      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001ad6:	2309      	movs	r3, #9
 8001ad8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001ada:	230c      	movs	r3, #12
 8001adc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001ade:	230b      	movs	r3, #11
 8001ae0:	753b      	strb	r3, [r7, #20]
      break;
 8001ae2:	e048      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001aec:	2312      	movs	r3, #18
 8001aee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001af0:	2311      	movs	r3, #17
 8001af2:	753b      	strb	r3, [r7, #20]
      break;
 8001af4:	e03f      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001af6:	2316      	movs	r3, #22
 8001af8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001afa:	2315      	movs	r3, #21
 8001afc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001afe:	2318      	movs	r3, #24
 8001b00:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001b02:	2317      	movs	r3, #23
 8001b04:	753b      	strb	r3, [r7, #20]
      break;
 8001b06:	e036      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001b08:	231c      	movs	r3, #28
 8001b0a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001b0c:	231b      	movs	r3, #27
 8001b0e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001b10:	231e      	movs	r3, #30
 8001b12:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001b14:	231d      	movs	r3, #29
 8001b16:	753b      	strb	r3, [r7, #20]
      break;
 8001b18:	e02d      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001b1a:	2322      	movs	r3, #34	; 0x22
 8001b1c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001b1e:	2321      	movs	r3, #33	; 0x21
 8001b20:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001b22:	2324      	movs	r3, #36	; 0x24
 8001b24:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001b26:	2323      	movs	r3, #35	; 0x23
 8001b28:	753b      	strb	r3, [r7, #20]
      break;
 8001b2a:	e024      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001b2c:	2328      	movs	r3, #40	; 0x28
 8001b2e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001b30:	2327      	movs	r3, #39	; 0x27
 8001b32:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001b34:	232a      	movs	r3, #42	; 0x2a
 8001b36:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001b38:	2329      	movs	r3, #41	; 0x29
 8001b3a:	753b      	strb	r3, [r7, #20]
      break;
 8001b3c:	e01b      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001b3e:	232e      	movs	r3, #46	; 0x2e
 8001b40:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001b42:	232d      	movs	r3, #45	; 0x2d
 8001b44:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001b46:	2330      	movs	r3, #48	; 0x30
 8001b48:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001b4a:	232f      	movs	r3, #47	; 0x2f
 8001b4c:	753b      	strb	r3, [r7, #20]
      break;
 8001b4e:	e012      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001b50:	2334      	movs	r3, #52	; 0x34
 8001b52:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001b54:	2333      	movs	r3, #51	; 0x33
 8001b56:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001b58:	2336      	movs	r3, #54	; 0x36
 8001b5a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001b5c:	2335      	movs	r3, #53	; 0x35
 8001b5e:	753b      	strb	r3, [r7, #20]
      break;
 8001b60:	e009      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001b62:	233a      	movs	r3, #58	; 0x3a
 8001b64:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001b66:	2339      	movs	r3, #57	; 0x39
 8001b68:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001b6a:	233c      	movs	r3, #60	; 0x3c
 8001b6c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001b6e:	233b      	movs	r3, #59	; 0x3b
 8001b70:	753b      	strb	r3, [r7, #20]
      break;
 8001b72:	e000      	b.n	8001b76 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001b74:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	7dfa      	ldrb	r2, [r7, #23]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fd28 	bl	80035d4 <TS_IO_Read>
 8001b84:	4603      	mov	r3, r0
 8001b86:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001b90:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	7dba      	ldrb	r2, [r7, #22]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fd1a 	bl	80035d4 <TS_IO_Read>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001ba4:	7cfb      	ldrb	r3, [r7, #19]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001bbe:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	7d7a      	ldrb	r2, [r7, #21]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fcff 	bl	80035d4 <TS_IO_Read>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001bda:	7cfb      	ldrb	r3, [r7, #19]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001be2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	7d3a      	ldrb	r2, [r7, #20]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 fcf1 	bl	80035d4 <TS_IO_Read>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001c10:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <ft5336_TS_GetXY+0x1dc>)
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <ft5336_TS_GetXY+0x1d8>)
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <ft5336_TS_GetXY+0x1d8>)
 8001c24:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200004b8 	.word	0x200004b8
 8001c34:	200004bc 	.word	0x200004bc

08001c38 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	21a4      	movs	r1, #164	; 0xa4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fca4 	bl	80035a0 <TS_IO_Write>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	21a4      	movs	r1, #164	; 0xa4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f001 fc90 	bl	80035a0 <TS_IO_Write>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	6039      	str	r1, [r7, #0]
 8001cc0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 fc81 	bl	80035d4 <TS_IO_Read>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <ft5336_TS_GetTouchInfo+0x158>)
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f080 8090 	bcs.w	8001e36 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d85d      	bhi.n	8001dd8 <ft5336_TS_GetTouchInfo+0xf0>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <ft5336_TS_GetTouchInfo+0x3c>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d4d 	.word	0x08001d4d
 8001d28:	08001d5b 	.word	0x08001d5b
 8001d2c:	08001d69 	.word	0x08001d69
 8001d30:	08001d77 	.word	0x08001d77
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001d93 	.word	0x08001d93
 8001d3c:	08001da1 	.word	0x08001da1
 8001d40:	08001daf 	.word	0x08001daf
 8001d44:	08001dbd 	.word	0x08001dbd
 8001d48:	08001dcb 	.word	0x08001dcb
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001d50:	2307      	movs	r3, #7
 8001d52:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001d54:	2308      	movs	r3, #8
 8001d56:	757b      	strb	r3, [r7, #21]
      break;
 8001d58:	e03f      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001d5e:	230d      	movs	r3, #13
 8001d60:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001d62:	230e      	movs	r3, #14
 8001d64:	757b      	strb	r3, [r7, #21]
      break;
 8001d66:	e038      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001d68:	230f      	movs	r3, #15
 8001d6a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001d6c:	2313      	movs	r3, #19
 8001d6e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001d70:	2314      	movs	r3, #20
 8001d72:	757b      	strb	r3, [r7, #21]
      break;
 8001d74:	e031      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001d76:	2315      	movs	r3, #21
 8001d78:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001d7a:	2319      	movs	r3, #25
 8001d7c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001d7e:	231a      	movs	r3, #26
 8001d80:	757b      	strb	r3, [r7, #21]
      break;
 8001d82:	e02a      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001d84:	231b      	movs	r3, #27
 8001d86:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001d88:	231f      	movs	r3, #31
 8001d8a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	757b      	strb	r3, [r7, #21]
      break;
 8001d90:	e023      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001d92:	2321      	movs	r3, #33	; 0x21
 8001d94:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001d96:	2325      	movs	r3, #37	; 0x25
 8001d98:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001d9a:	2326      	movs	r3, #38	; 0x26
 8001d9c:	757b      	strb	r3, [r7, #21]
      break;
 8001d9e:	e01c      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001da0:	2327      	movs	r3, #39	; 0x27
 8001da2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001da4:	232b      	movs	r3, #43	; 0x2b
 8001da6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001da8:	232c      	movs	r3, #44	; 0x2c
 8001daa:	757b      	strb	r3, [r7, #21]
      break;
 8001dac:	e015      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001dae:	232d      	movs	r3, #45	; 0x2d
 8001db0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001db2:	2331      	movs	r3, #49	; 0x31
 8001db4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001db6:	2332      	movs	r3, #50	; 0x32
 8001db8:	757b      	strb	r3, [r7, #21]
      break;
 8001dba:	e00e      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001dbc:	2333      	movs	r3, #51	; 0x33
 8001dbe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001dc0:	2337      	movs	r3, #55	; 0x37
 8001dc2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001dc4:	2338      	movs	r3, #56	; 0x38
 8001dc6:	757b      	strb	r3, [r7, #21]
      break;
 8001dc8:	e007      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001dca:	2339      	movs	r3, #57	; 0x39
 8001dcc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001dce:	233d      	movs	r3, #61	; 0x3d
 8001dd0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001dd2:	233e      	movs	r3, #62	; 0x3e
 8001dd4:	757b      	strb	r3, [r7, #21]
      break;
 8001dd6:	e000      	b.n	8001dda <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001dd8:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	7dfa      	ldrb	r2, [r7, #23]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fbf6 	bl	80035d4 <TS_IO_Read>
 8001de8:	4603      	mov	r3, r0
 8001dea:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001dec:	7d3b      	ldrb	r3, [r7, #20]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	119b      	asrs	r3, r3, #6
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	7dba      	ldrb	r2, [r7, #22]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fbe6 	bl	80035d4 <TS_IO_Read>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001e0c:	7d3b      	ldrb	r3, [r7, #20]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	7d7a      	ldrb	r2, [r7, #21]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fbd8 	bl	80035d4 <TS_IO_Read>
 8001e24:	4603      	mov	r3, r0
 8001e26:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001e28:	7d3b      	ldrb	r3, [r7, #20]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	111b      	asrs	r3, r3, #4
 8001e2e:	f003 0204 	and.w	r2, r3, #4
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200004b8 	.word	0x200004b8

08001e44 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200004b8 	.word	0x200004b8

08001e5c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001e60:	f7ff fff0 	bl	8001e44 <ft5336_Get_I2C_InitializedStatus>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001e6a:	f001 fb8f 	bl	800358c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001e6e:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
  }
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200004b8 	.word	0x200004b8

08001e7c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b090      	sub	sp, #64	; 0x40
 8001e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eae:	4baf      	ldr	r3, [pc, #700]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4aae      	ldr	r2, [pc, #696]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4bac      	ldr	r3, [pc, #688]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ec6:	4ba9      	ldr	r3, [pc, #676]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4aa8      	ldr	r2, [pc, #672]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4ba6      	ldr	r3, [pc, #664]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4ba3      	ldr	r3, [pc, #652]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4aa2      	ldr	r2, [pc, #648]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4ba0      	ldr	r3, [pc, #640]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b9d      	ldr	r3, [pc, #628]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a9c      	ldr	r2, [pc, #624]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b9a      	ldr	r3, [pc, #616]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	4b97      	ldr	r3, [pc, #604]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a96      	ldr	r2, [pc, #600]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b94      	ldr	r3, [pc, #592]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b91      	ldr	r3, [pc, #580]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a90      	ldr	r2, [pc, #576]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b8e      	ldr	r3, [pc, #568]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a8a      	ldr	r2, [pc, #552]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a84      	ldr	r2, [pc, #528]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a7e      	ldr	r2, [pc, #504]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f86:	4b79      	ldr	r3, [pc, #484]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a78      	ldr	r2, [pc, #480]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b70      	ldr	r3, [pc, #448]	; (800216c <MX_GPIO_Init+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2160      	movs	r1, #96	; 0x60
 8001fba:	486d      	ldr	r0, [pc, #436]	; (8002170 <MX_GPIO_Init+0x2d8>)
 8001fbc:	f005 fb60 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	486b      	ldr	r0, [pc, #428]	; (8002174 <MX_GPIO_Init+0x2dc>)
 8001fc6:	f005 fb5b 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2108      	movs	r1, #8
 8001fce:	4869      	ldr	r0, [pc, #420]	; (8002174 <MX_GPIO_Init+0x2dc>)
 8001fd0:	f005 fb56 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	4867      	ldr	r0, [pc, #412]	; (8002178 <MX_GPIO_Init+0x2e0>)
 8001fda:	f005 fb51 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe4:	4865      	ldr	r0, [pc, #404]	; (800217c <MX_GPIO_Init+0x2e4>)
 8001fe6:	f005 fb4b 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001fea:	2200      	movs	r2, #0
 8001fec:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001ff0:	4863      	ldr	r0, [pc, #396]	; (8002180 <MX_GPIO_Init+0x2e8>)
 8001ff2:	f005 fb45 	bl	8007680 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	21c8      	movs	r1, #200	; 0xc8
 8001ffa:	4862      	ldr	r0, [pc, #392]	; (8002184 <MX_GPIO_Init+0x2ec>)
 8001ffc:	f005 fb40 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002000:	2308      	movs	r3, #8
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002010:	4619      	mov	r1, r3
 8002012:	4857      	ldr	r0, [pc, #348]	; (8002170 <MX_GPIO_Init+0x2d8>)
 8002014:	f005 f864 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002018:	2304      	movs	r3, #4
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002028:	2309      	movs	r3, #9
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002030:	4619      	mov	r1, r3
 8002032:	484f      	ldr	r0, [pc, #316]	; (8002170 <MX_GPIO_Init+0x2d8>)
 8002034:	f005 f854 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002038:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800204a:	230b      	movs	r3, #11
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	484b      	ldr	r0, [pc, #300]	; (8002184 <MX_GPIO_Init+0x2ec>)
 8002056:	f005 f843 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800205a:	f643 0323 	movw	r3, #14371	; 0x3823
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800206c:	230a      	movs	r3, #10
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	4844      	ldr	r0, [pc, #272]	; (8002188 <MX_GPIO_Init+0x2f0>)
 8002078:	f005 f832 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800208c:	2308      	movs	r3, #8
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002094:	4619      	mov	r1, r3
 8002096:	4837      	ldr	r0, [pc, #220]	; (8002174 <MX_GPIO_Init+0x2dc>)
 8002098:	f005 f822 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800209c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020ae:	230c      	movs	r3, #12
 80020b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b6:	4619      	mov	r1, r3
 80020b8:	4834      	ldr	r0, [pc, #208]	; (800218c <MX_GPIO_Init+0x2f4>)
 80020ba:	f005 f811 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80020be:	f248 1340 	movw	r3, #33088	; 0x8140
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	482f      	ldr	r0, [pc, #188]	; (8002190 <MX_GPIO_Init+0x2f8>)
 80020d4:	f005 f804 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80020d8:	2360      	movs	r3, #96	; 0x60
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4820      	ldr	r0, [pc, #128]	; (8002170 <MX_GPIO_Init+0x2d8>)
 80020f0:	f004 fff6 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80020f4:	2340      	movs	r3, #64	; 0x40
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002104:	230a      	movs	r3, #10
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	481e      	ldr	r0, [pc, #120]	; (8002188 <MX_GPIO_Init+0x2f0>)
 8002110:	f004 ffe6 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002126:	4619      	mov	r1, r3
 8002128:	481a      	ldr	r0, [pc, #104]	; (8002194 <MX_GPIO_Init+0x2fc>)
 800212a:	f004 ffd9 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002132:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002140:	4619      	mov	r1, r3
 8002142:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_GPIO_Init+0x2dc>)
 8002144:	f004 ffcc 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002148:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800215a:	230a      	movs	r3, #10
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002162:	4619      	mov	r1, r3
 8002164:	480a      	ldr	r0, [pc, #40]	; (8002190 <MX_GPIO_Init+0x2f8>)
 8002166:	f004 ffbb 	bl	80070e0 <HAL_GPIO_Init>
 800216a:	e015      	b.n	8002198 <MX_GPIO_Init+0x300>
 800216c:	40023800 	.word	0x40023800
 8002170:	40021000 	.word	0x40021000
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40022800 	.word	0x40022800
 800217c:	40022000 	.word	0x40022000
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40021800 	.word	0x40021800
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020000 	.word	0x40020000
 8002194:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002198:	23f0      	movs	r3, #240	; 0xf0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80021a8:	230a      	movs	r3, #10
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b0:	4619      	mov	r1, r3
 80021b2:	4891      	ldr	r0, [pc, #580]	; (80023f8 <MX_GPIO_Init+0x560>)
 80021b4:	f004 ff94 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80021b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80021ca:	230a      	movs	r3, #10
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4889      	ldr	r0, [pc, #548]	; (80023fc <MX_GPIO_Init+0x564>)
 80021d6:	f004 ff83 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80021da:	2328      	movs	r3, #40	; 0x28
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021de:	2301      	movs	r3, #1
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	4883      	ldr	r0, [pc, #524]	; (8002400 <MX_GPIO_Init+0x568>)
 80021f2:	f004 ff75 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80021f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002208:	4619      	mov	r1, r3
 800220a:	487e      	ldr	r0, [pc, #504]	; (8002404 <MX_GPIO_Init+0x56c>)
 800220c:	f004 ff68 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002210:	2308      	movs	r3, #8
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002224:	4619      	mov	r1, r3
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <MX_GPIO_Init+0x570>)
 8002228:	f004 ff5a 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 800222c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800223e:	4619      	mov	r1, r3
 8002240:	486e      	ldr	r0, [pc, #440]	; (80023fc <MX_GPIO_Init+0x564>)
 8002242:	f004 ff4d 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002246:	2310      	movs	r3, #16
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002256:	4619      	mov	r1, r3
 8002258:	4869      	ldr	r0, [pc, #420]	; (8002400 <MX_GPIO_Init+0x568>)
 800225a:	f004 ff41 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800225e:	2304      	movs	r3, #4
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800226e:	230c      	movs	r3, #12
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002276:	4619      	mov	r1, r3
 8002278:	4861      	ldr	r0, [pc, #388]	; (8002400 <MX_GPIO_Init+0x568>)
 800227a:	f004 ff31 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 800227e:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800228c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002290:	4619      	mov	r1, r3
 8002292:	485e      	ldr	r0, [pc, #376]	; (800240c <MX_GPIO_Init+0x574>)
 8002294:	f004 ff24 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229e:	2301      	movs	r3, #1
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4851      	ldr	r0, [pc, #324]	; (80023f8 <MX_GPIO_Init+0x560>)
 80022b2:	f004 ff15 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80022b6:	f645 6340 	movw	r3, #24128	; 0x5e40
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022bc:	2301      	movs	r3, #1
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022cc:	4619      	mov	r1, r3
 80022ce:	484f      	ldr	r0, [pc, #316]	; (800240c <MX_GPIO_Init+0x574>)
 80022d0:	f004 ff06 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e8:	4619      	mov	r1, r3
 80022ea:	4843      	ldr	r0, [pc, #268]	; (80023f8 <MX_GPIO_Init+0x560>)
 80022ec:	f004 fef8 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80022f0:	2310      	movs	r3, #16
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002300:	230a      	movs	r3, #10
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002308:	4619      	mov	r1, r3
 800230a:	4840      	ldr	r0, [pc, #256]	; (800240c <MX_GPIO_Init+0x574>)
 800230c:	f004 fee8 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002310:	23c8      	movs	r3, #200	; 0xc8
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002324:	4619      	mov	r1, r3
 8002326:	4835      	ldr	r0, [pc, #212]	; (80023fc <MX_GPIO_Init+0x564>)
 8002328:	f004 feda 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800232c:	2305      	movs	r3, #5
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800233c:	230a      	movs	r3, #10
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002344:	4619      	mov	r1, r3
 8002346:	482f      	ldr	r0, [pc, #188]	; (8002404 <MX_GPIO_Init+0x56c>)
 8002348:	f004 feca 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800234c:	2332      	movs	r3, #50	; 0x32
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800235c:	230b      	movs	r3, #11
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002364:	4619      	mov	r1, r3
 8002366:	4827      	ldr	r0, [pc, #156]	; (8002404 <MX_GPIO_Init+0x56c>)
 8002368:	f004 feba 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800236c:	2304      	movs	r3, #4
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800237c:	2309      	movs	r3, #9
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002384:	4619      	mov	r1, r3
 8002386:	4822      	ldr	r0, [pc, #136]	; (8002410 <MX_GPIO_Init+0x578>)
 8002388:	f004 feaa 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800238c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800239e:	2309      	movs	r3, #9
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a6:	4619      	mov	r1, r3
 80023a8:	4815      	ldr	r0, [pc, #84]	; (8002400 <MX_GPIO_Init+0x568>)
 80023aa:	f004 fe99 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023ae:	2386      	movs	r3, #134	; 0x86
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023be:	230b      	movs	r3, #11
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <MX_GPIO_Init+0x57c>)
 80023ca:	f004 fe89 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80023ce:	2328      	movs	r3, #40	; 0x28
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023de:	230a      	movs	r3, #10
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	480a      	ldr	r0, [pc, #40]	; (8002414 <MX_GPIO_Init+0x57c>)
 80023ea:	f004 fe79 	bl	80070e0 <HAL_GPIO_Init>

}
 80023ee:	bf00      	nop
 80023f0:	3740      	adds	r7, #64	; 0x40
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021800 	.word	0x40021800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40020800 	.word	0x40020800
 8002408:	40022800 	.word	0x40022800
 800240c:	40021c00 	.word	0x40021c00
 8002410:	40020400 	.word	0x40020400
 8002414:	40020000 	.word	0x40020000

08002418 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_I2C1_Init+0x74>)
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <MX_I2C1_Init+0x78>)
 8002420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <MX_I2C1_Init+0x74>)
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <MX_I2C1_Init+0x7c>)
 8002426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <MX_I2C1_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <MX_I2C1_Init+0x74>)
 8002430:	2201      	movs	r2, #1
 8002432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_I2C1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_I2C1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <MX_I2C1_Init+0x74>)
 8002454:	f005 f92e 	bl	80076b4 <HAL_I2C_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800245e:	f000 fdc7 	bl	8002ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002462:	2100      	movs	r1, #0
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <MX_I2C1_Init+0x74>)
 8002466:	f005 febb 	bl	80081e0 <HAL_I2CEx_ConfigAnalogFilter>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002470:	f000 fdbe 	bl	8002ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002474:	2100      	movs	r1, #0
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_I2C1_Init+0x74>)
 8002478:	f005 fefd 	bl	8008276 <HAL_I2CEx_ConfigDigitalFilter>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002482:	f000 fdb5 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200004c0 	.word	0x200004c0
 8002490:	40005400 	.word	0x40005400
 8002494:	00c0eaff 	.word	0x00c0eaff

08002498 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_I2C3_Init+0x74>)
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <MX_I2C3_Init+0x78>)
 80024a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_I2C3_Init+0x74>)
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <MX_I2C3_Init+0x7c>)
 80024a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_I2C3_Init+0x74>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_I2C3_Init+0x74>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_I2C3_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_I2C3_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_I2C3_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_I2C3_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_I2C3_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024d2:	480e      	ldr	r0, [pc, #56]	; (800250c <MX_I2C3_Init+0x74>)
 80024d4:	f005 f8ee 	bl	80076b4 <HAL_I2C_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024de:	f000 fd87 	bl	8002ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <MX_I2C3_Init+0x74>)
 80024e6:	f005 fe7b 	bl	80081e0 <HAL_I2CEx_ConfigAnalogFilter>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80024f0:	f000 fd7e 	bl	8002ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024f4:	2100      	movs	r1, #0
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_I2C3_Init+0x74>)
 80024f8:	f005 febd 	bl	8008276 <HAL_I2CEx_ConfigDigitalFilter>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002502:	f000 fd75 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000514 	.word	0x20000514
 8002510:	40005c00 	.word	0x40005c00
 8002514:	00c0eaff 	.word	0x00c0eaff

08002518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ac      	sub	sp, #176	; 0xb0
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	2284      	movs	r2, #132	; 0x84
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f00c ffc1 	bl	800f4c0 <memset>
  if(i2cHandle->Instance==I2C1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a44      	ldr	r2, [pc, #272]	; (8002654 <HAL_I2C_MspInit+0x13c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d13d      	bne.n	80025c4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800254e:	2300      	movs	r3, #0
 8002550:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f107 0318 	add.w	r3, r7, #24
 8002556:	4618      	mov	r0, r3
 8002558:	f006 ff6e 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002562:	f000 fd45 	bl	8002ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <HAL_I2C_MspInit+0x140>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <HAL_I2C_MspInit+0x140>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_I2C_MspInit+0x140>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800257e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002598:	2304      	movs	r3, #4
 800259a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025a2:	4619      	mov	r1, r3
 80025a4:	482d      	ldr	r0, [pc, #180]	; (800265c <HAL_I2C_MspInit+0x144>)
 80025a6:	f004 fd9b 	bl	80070e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_I2C_MspInit+0x140>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_I2C_MspInit+0x140>)
 80025b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_I2C_MspInit+0x140>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025c2:	e042      	b.n	800264a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <HAL_I2C_MspInit+0x148>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d13d      	bne.n	800264a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025da:	f107 0318 	add.w	r3, r7, #24
 80025de:	4618      	mov	r0, r3
 80025e0:	f006 ff2a 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80025ea:	f000 fd01 	bl	8002ff0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_I2C_MspInit+0x140>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_I2C_MspInit+0x140>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HAL_I2C_MspInit+0x140>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002606:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800260a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	2312      	movs	r3, #18
 8002610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002620:	2304      	movs	r3, #4
 8002622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002626:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800262a:	4619      	mov	r1, r3
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <HAL_I2C_MspInit+0x14c>)
 800262e:	f004 fd57 	bl	80070e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_I2C_MspInit+0x140>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_I2C_MspInit+0x140>)
 8002638:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_I2C_MspInit+0x140>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
}
 800264a:	bf00      	nop
 800264c:	37b0      	adds	r7, #176	; 0xb0
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40005400 	.word	0x40005400
 8002658:	40023800 	.word	0x40023800
 800265c:	40020400 	.word	0x40020400
 8002660:	40005c00 	.word	0x40005c00
 8002664:	40021c00 	.word	0x40021c00

08002668 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a15      	ldr	r2, [pc, #84]	; (80026cc <HAL_I2C_MspDeInit+0x64>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d110      	bne.n	800269c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_I2C_MspDeInit+0x68>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <HAL_I2C_MspDeInit+0x68>)
 8002680:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268a:	4812      	ldr	r0, [pc, #72]	; (80026d4 <HAL_I2C_MspDeInit+0x6c>)
 800268c:	f004 fed4 	bl	8007438 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002694:	480f      	ldr	r0, [pc, #60]	; (80026d4 <HAL_I2C_MspDeInit+0x6c>)
 8002696:	f004 fecf 	bl	8007438 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800269a:	e013      	b.n	80026c4 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_I2C_MspDeInit+0x70>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_I2C_MspDeInit+0x68>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_I2C_MspDeInit+0x68>)
 80026ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	4809      	ldr	r0, [pc, #36]	; (80026dc <HAL_I2C_MspDeInit+0x74>)
 80026b6:	f004 febf 	bl	8007438 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80026ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026be:	4807      	ldr	r0, [pc, #28]	; (80026dc <HAL_I2C_MspDeInit+0x74>)
 80026c0:	f004 feba 	bl	8007438 <HAL_GPIO_DeInit>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40005400 	.word	0x40005400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40005c00 	.word	0x40005c00
 80026dc:	40021c00 	.word	0x40021c00

080026e0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	2234      	movs	r2, #52	; 0x34
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00c fee7 	bl	800f4c0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <MX_LTDC_Init+0xfc>)
 80026f4:	4a3a      	ldr	r2, [pc, #232]	; (80027e0 <MX_LTDC_Init+0x100>)
 80026f6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <MX_LTDC_Init+0xfc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80026fe:	4b37      	ldr	r3, [pc, #220]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <MX_LTDC_Init+0xfc>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002712:	2228      	movs	r2, #40	; 0x28
 8002714:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002718:	2209      	movs	r2, #9
 800271a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800271c:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <MX_LTDC_Init+0xfc>)
 800271e:	2235      	movs	r2, #53	; 0x35
 8002720:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002724:	220b      	movs	r2, #11
 8002726:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <MX_LTDC_Init+0xfc>)
 800272a:	f240 2215 	movw	r2, #533	; 0x215
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002732:	f240 121b 	movw	r2, #283	; 0x11b
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <MX_LTDC_Init+0xfc>)
 800273a:	f240 2235 	movw	r2, #565	; 0x235
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002742:	f240 121d 	movw	r2, #285	; 0x11d
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <MX_LTDC_Init+0xfc>)
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <MX_LTDC_Init+0xfc>)
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002760:	481e      	ldr	r0, [pc, #120]	; (80027dc <MX_LTDC_Init+0xfc>)
 8002762:	f005 fdd5 	bl	8008310 <HAL_LTDC_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800276c:	f000 fc40 	bl	8002ff0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002774:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002778:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800277e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002782:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002784:	2302      	movs	r3, #2
 8002786:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002788:	23ff      	movs	r3, #255	; 0xff
 800278a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002790:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002794:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002796:	2307      	movs	r3, #7
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800279a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80027a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80027a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_LTDC_Init+0xfc>)
 80027c6:	f005 ff35 	bl	8008634 <HAL_LTDC_ConfigLayer>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80027d0:	f000 fc0e 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	3738      	adds	r7, #56	; 0x38
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000568 	.word	0x20000568
 80027e0:	40016800 	.word	0x40016800

080027e4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0ae      	sub	sp, #184	; 0xb8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027fc:	f107 0320 	add.w	r3, r7, #32
 8002800:	2284      	movs	r2, #132	; 0x84
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f00c fe5b 	bl	800f4c0 <memset>
  if(ltdcHandle->Instance==LTDC)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6f      	ldr	r2, [pc, #444]	; (80029cc <HAL_LTDC_MspInit+0x1e8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	f040 80d6 	bne.w	80029c2 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002816:	2308      	movs	r3, #8
 8002818:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800281a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002820:	2305      	movs	r3, #5
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002824:	2302      	movs	r3, #2
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002828:	2303      	movs	r3, #3
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800282c:	2301      	movs	r3, #1
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002834:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002836:	f107 0320 	add.w	r3, r7, #32
 800283a:	4618      	mov	r0, r3
 800283c:	f006 fdfc 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8002846:	f000 fbd3 	bl	8002ff0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800284a:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a60      	ldr	r2, [pc, #384]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002862:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800287a:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a54      	ldr	r2, [pc, #336]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002892:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 8002898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028c2:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a42      	ldr	r2, [pc, #264]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_LTDC_MspInit+0x1ec>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80028da:	2310      	movs	r3, #16
 80028dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028f2:	230e      	movs	r3, #14
 80028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4835      	ldr	r0, [pc, #212]	; (80029d4 <HAL_LTDC_MspInit+0x1f0>)
 8002900:	f004 fbee 	bl	80070e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002904:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800291e:	230e      	movs	r3, #14
 8002920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002924:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002928:	4619      	mov	r1, r3
 800292a:	482b      	ldr	r0, [pc, #172]	; (80029d8 <HAL_LTDC_MspInit+0x1f4>)
 800292c:	f004 fbd8 	bl	80070e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002930:	23f7      	movs	r3, #247	; 0xf7
 8002932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002948:	230e      	movs	r3, #14
 800294a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800294e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002952:	4619      	mov	r1, r3
 8002954:	4821      	ldr	r0, [pc, #132]	; (80029dc <HAL_LTDC_MspInit+0x1f8>)
 8002956:	f004 fbc3 	bl	80070e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800295a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002974:	2309      	movs	r3, #9
 8002976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800297e:	4619      	mov	r1, r3
 8002980:	4817      	ldr	r0, [pc, #92]	; (80029e0 <HAL_LTDC_MspInit+0x1fc>)
 8002982:	f004 fbad 	bl	80070e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002986:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800298a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029a0:	230e      	movs	r3, #14
 80029a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029aa:	4619      	mov	r1, r3
 80029ac:	480d      	ldr	r0, [pc, #52]	; (80029e4 <HAL_LTDC_MspInit+0x200>)
 80029ae:	f004 fb97 	bl	80070e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2105      	movs	r1, #5
 80029b6:	2058      	movs	r0, #88	; 0x58
 80029b8:	f003 fc9c 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80029bc:	2058      	movs	r0, #88	; 0x58
 80029be:	f003 fcb5 	bl	800632c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80029c2:	bf00      	nop
 80029c4:	37b8      	adds	r7, #184	; 0xb8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40016800 	.word	0x40016800
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40022400 	.word	0x40022400
 80029dc:	40022800 	.word	0x40022800
 80029e0:	40021800 	.word	0x40021800
 80029e4:	40022000 	.word	0x40022000

080029e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b0d1      	sub	sp, #324	; 0x144
 80029ec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50]={};
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029f8:	222e      	movs	r2, #46	; 0x2e
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f00c fd5f 	bl	800f4c0 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8002a02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/*CODE TP1*/
	char msg[50]={};
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002a22:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a26:	222e      	movs	r2, #46	; 0x2e
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f00c fd48 	bl	800f4c0 <memset>
	char recep[50] ;
	char retour[50]={};
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a38:	222e      	movs	r2, #46	; 0x2e
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f00c fd3f 	bl	800f4c0 <memset>

	uint8_t time[3]={};
 8002a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a46:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a4a:	4aa8      	ldr	r2, [pc, #672]	; (8002cec <main+0x304>)
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	2200      	movs	r2, #0
 8002a54:	801a      	strh	r2, [r3, #0]
	uint8_t date[3]={};
 8002a56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a5e:	4aa3      	ldr	r2, [pc, #652]	; (8002cec <main+0x304>)
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]

	uint16_t pos_v=130;
 8002a6a:	2382      	movs	r3, #130	; 0x82
 8002a6c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t pos_h=240;
 8002a70:	23f0      	movs	r3, #240	; 0xf0
 8002a72:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134

	int16_t vit_v=0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	int16_t vit_h=0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a82:	f002 ff34 	bl	80058ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a86:	f000 fa01 	bl	8002e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8a:	f7ff fa05 	bl	8001e98 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002a8e:	f7fe fa77 	bl	8000f80 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8002a92:	f7fe fba7 	bl	80011e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002a96:	f7fe fbfd 	bl	8001294 <MX_FMC_Init>
  MX_I2C1_Init();
 8002a9a:	f7ff fcbd 	bl	8002418 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a9e:	f7ff fcfb 	bl	8002498 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002aa2:	f7ff fe1d 	bl	80026e0 <MX_LTDC_Init>
  MX_RTC_Init();
 8002aa6:	f000 faa9 	bl	8002ffc <MX_RTC_Init>
  MX_SPI2_Init();
 8002aaa:	f000 fb79 	bl	80031a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002aae:	f002 fb1d 	bl	80050ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ab2:	f002 fb6f 	bl	8005194 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ab6:	f002 fbbb 	bl	8005230 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002aba:	f002 fc07 	bl	80052cc <MX_TIM5_Init>
  MX_TIM8_Init();
 8002abe:	f002 fc53 	bl	8005368 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002ac2:	f002 fd67 	bl	8005594 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002ac6:	f002 fd99 	bl	80055fc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002aca:	f7fe fa07 	bl	8000edc <MX_ADC1_Init>
  MX_DAC_Init();
 8002ace:	f7fe fb17 	bl	8001100 <MX_DAC_Init>
  MX_UART7_Init();
 8002ad2:	f002 fd2f 	bl	8005534 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8002ad6:	f000 fda7 	bl	8003628 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002ada:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f000 fe3a 	bl	8003758 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8002ae4:	f000 fe10 	bl	8003708 <BSP_LCD_GetXSize>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	f000 fe21 	bl	8003730 <BSP_LCD_GetYSize>
 8002aee:	4603      	mov	r3, r0
 8002af0:	fb04 f303 	mul.w	r3, r4, r3
 8002af4:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4619      	mov	r1, r3
 8002afc:	2001      	movs	r0, #1
 8002afe:	f000 fe2b 	bl	8003758 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8002b02:	f001 fb29 	bl	8004158 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 fe86 	bl	8003818 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8002b0c:	4878      	ldr	r0, [pc, #480]	; (8002cf0 <main+0x308>)
 8002b0e:	f000 fef5 	bl	80038fc <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0,0,(uint8_t*)Background_bmp);
 8002b12:	4a78      	ldr	r2, [pc, #480]	; (8002cf4 <main+0x30c>)
 8002b14:	2100      	movs	r1, #0
 8002b16:	2000      	movs	r0, #0
 8002b18:	f001 f9cc 	bl	8003eb4 <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f000 fe7b 	bl	8003818 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 feea 	bl	80038fc <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8002b28:	4873      	ldr	r0, [pc, #460]	; (8002cf8 <main+0x310>)
 8002b2a:	f000 feb7 	bl	800389c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002b2e:	4873      	ldr	r0, [pc, #460]	; (8002cfc <main+0x314>)
 8002b30:	f000 fe82 	bl	8003838 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f000 fe97 	bl	8003868 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002b3a:	f000 fde5 	bl	8003708 <BSP_LCD_GetXSize>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b29c      	uxth	r4, r3
 8002b42:	f000 fdf5 	bl	8003730 <BSP_LCD_GetYSize>
 8002b46:	4603      	mov	r3, r0
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f001 ff15 	bl	800497c <BSP_TS_Init>

  //pour le TP3 la liaision UART interruptions

  HAL_UART_Receive_IT(&huart1,&caractere_recu,1);
 8002b52:	2201      	movs	r2, #1
 8002b54:	496a      	ldr	r1, [pc, #424]	; (8002d00 <main+0x318>)
 8002b56:	486b      	ldr	r0, [pc, #428]	; (8002d04 <main+0x31c>)
 8002b58:	f008 fc99 	bl	800b48e <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002b5c:	f7fe fc9e 	bl	800149c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b60:	f009 ffba 	bl	800cad8 <osKernelStart>



  while (1)
  {
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8002b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b68:	4867      	ldr	r0, [pc, #412]	; (8002d08 <main+0x320>)
 8002b6a:	f004 fd71 	bl	8007650 <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b76:	4865      	ldr	r0, [pc, #404]	; (8002d0c <main+0x324>)
 8002b78:	f004 fd82 	bl	8007680 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8002b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b80:	4861      	ldr	r0, [pc, #388]	; (8002d08 <main+0x320>)
 8002b82:	f004 fd65 	bl	8007650 <HAL_GPIO_ReadPin>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	4860      	ldr	r0, [pc, #384]	; (8002d10 <main+0x328>)
 8002b8e:	f004 fd77 	bl	8007680 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8002b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b96:	485c      	ldr	r0, [pc, #368]	; (8002d08 <main+0x320>)
 8002b98:	f004 fd5a 	bl	8007650 <HAL_GPIO_ReadPin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ba4:	495b      	ldr	r1, [pc, #364]	; (8002d14 <main+0x32c>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f00c fda0 	bl	800f6ec <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8002bac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	2005      	movs	r0, #5
 8002bb4:	f000 ffd6 	bl	8003b64 <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8002bb8:	2306      	movs	r3, #6
 8002bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002bbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4854      	ldr	r0, [pc, #336]	; (8002d18 <main+0x330>)
 8002bc6:	f003 f88d 	bl	8005ce4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8002bca:	4853      	ldr	r0, [pc, #332]	; (8002d18 <main+0x330>)
 8002bcc:	f002 ff24 	bl	8005a18 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002bd0:	bf00      	nop
 8002bd2:	2164      	movs	r1, #100	; 0x64
 8002bd4:	4850      	ldr	r0, [pc, #320]	; (8002d18 <main+0x330>)
 8002bd6:	f002 ffed 	bl	8005bb4 <HAL_ADC_PollForConversion>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f8      	bne.n	8002bd2 <main+0x1ea>
		potr = HAL_ADC_GetValue(&hadc3);
 8002be0:	484d      	ldr	r0, [pc, #308]	; (8002d18 <main+0x330>)
 8002be2:	f003 f872 	bl	8005cca <HAL_ADC_GetValue>
 8002be6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

		sConfig.Channel = ADC_CHANNEL_7;
 8002bea:	2307      	movs	r3, #7
 8002bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002bf0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4848      	ldr	r0, [pc, #288]	; (8002d18 <main+0x330>)
 8002bf8:	f003 f874 	bl	8005ce4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8002bfc:	4846      	ldr	r0, [pc, #280]	; (8002d18 <main+0x330>)
 8002bfe:	f002 ff0b 	bl	8005a18 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002c02:	bf00      	nop
 8002c04:	2164      	movs	r1, #100	; 0x64
 8002c06:	4844      	ldr	r0, [pc, #272]	; (8002d18 <main+0x330>)
 8002c08:	f002 ffd4 	bl	8005bb4 <HAL_ADC_PollForConversion>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f8      	bne.n	8002c04 <main+0x21c>
		potl = HAL_ADC_GetValue(&hadc3);
 8002c12:	4841      	ldr	r0, [pc, #260]	; (8002d18 <main+0x330>)
 8002c14:	f003 f859 	bl	8005cca <HAL_ADC_GetValue>
 8002c18:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

		sConfig.Channel = ADC_CHANNEL_8;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002c22:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c26:	4619      	mov	r1, r3
 8002c28:	483b      	ldr	r0, [pc, #236]	; (8002d18 <main+0x330>)
 8002c2a:	f003 f85b 	bl	8005ce4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8002c2e:	483a      	ldr	r0, [pc, #232]	; (8002d18 <main+0x330>)
 8002c30:	f002 fef2 	bl	8005a18 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002c34:	bf00      	nop
 8002c36:	2164      	movs	r1, #100	; 0x64
 8002c38:	4837      	ldr	r0, [pc, #220]	; (8002d18 <main+0x330>)
 8002c3a:	f002 ffbb 	bl	8005bb4 <HAL_ADC_PollForConversion>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f8      	bne.n	8002c36 <main+0x24e>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8002c44:	4834      	ldr	r0, [pc, #208]	; (8002d18 <main+0x330>)
 8002c46:	f003 f840 	bl	8005cca <HAL_ADC_GetValue>
 8002c4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

		HAL_ADC_Start(&hadc1);
 8002c4e:	4833      	ldr	r0, [pc, #204]	; (8002d1c <main+0x334>)
 8002c50:	f002 fee2 	bl	8005a18 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8002c54:	bf00      	nop
 8002c56:	2164      	movs	r1, #100	; 0x64
 8002c58:	4830      	ldr	r0, [pc, #192]	; (8002d1c <main+0x334>)
 8002c5a:	f002 ffab 	bl	8005bb4 <HAL_ADC_PollForConversion>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f8      	bne.n	8002c56 <main+0x26e>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8002c64:	482d      	ldr	r0, [pc, #180]	; (8002d1c <main+0x334>)
 8002c66:	f003 f830 	bl	8005cca <HAL_ADC_GetValue>
 8002c6a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8002c6e:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8002c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c82:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002c86:	4926      	ldr	r1, [pc, #152]	; (8002d20 <main+0x338>)
 8002c88:	f00c fd30 	bl	800f6ec <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8002c8c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c90:	4619      	mov	r1, r3
 8002c92:	2009      	movs	r0, #9
 8002c94:	f000 ff66 	bl	8003b64 <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <main+0x33c>)
 8002c9a:	f001 feaf 	bl	80049fc <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <main+0x33c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <main+0x2d6>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <main+0x33c>)
 8002ca8:	885b      	ldrh	r3, [r3, #2]
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <main+0x33c>)
 8002cac:	8991      	ldrh	r1, [r2, #12]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 f9b1 	bl	8004018 <BSP_LCD_FillCircle>
		  //pour recevoir lorsque on appuie
		  //recevoir PC
		  HAL_Delay(3000);
 8002cb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cba:	f002 fe45 	bl	8005948 <HAL_Delay>

		/*CODE DU TP 07/02*/


		//Envoyer au pc la valeur des potentiometres
		HAL_Delay(10);
 8002cbe:	200a      	movs	r0, #10
 8002cc0:	f002 fe42 	bl	8005948 <HAL_Delay>
		sprintf(msg,"valeurs : %4u à doite et %4u à gauche \n\r",(uint)potr,(uint)potl);
 8002cc4:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8002cc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ccc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002cd0:	4915      	ldr	r1, [pc, #84]	; (8002d28 <main+0x340>)
 8002cd2:	f00c fd0b 	bl	800f6ec <siprintf>
		HAL_UART_Transmit(&huart1,msg,50,200);
 8002cd6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002cda:	23c8      	movs	r3, #200	; 0xc8
 8002cdc:	2232      	movs	r2, #50	; 0x32
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <main+0x31c>)
 8002ce0:	f008 fa8e 	bl	800b200 <HAL_UART_Transmit>


		//afficher à une ligne libre
		for(int i=0;i<50;i++){
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002cea:	e02b      	b.n	8002d44 <main+0x35c>
 8002cec:	080101c0 	.word	0x080101c0
 8002cf0:	ffff0000 	.word	0xffff0000
 8002cf4:	080101cc 	.word	0x080101cc
 8002cf8:	20000030 	.word	0x20000030
 8002cfc:	ff0000ff 	.word	0xff0000ff
 8002d00:	20000610 	.word	0x20000610
 8002d04:	20000be8 	.word	0x20000be8
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40021c00 	.word	0x40021c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08010120 	.word	0x08010120
 8002d18:	20000114 	.word	0x20000114
 8002d1c:	200000cc 	.word	0x200000cc
 8002d20:	0801012c 	.word	0x0801012c
 8002d24:	20000614 	.word	0x20000614
 8002d28:	0801015c 	.word	0x0801015c
			recep[i]=0;
 8002d2c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d34:	4413      	add	r3, r2
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<50;i++){
 8002d3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002d44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d48:	2b31      	cmp	r3, #49	; 0x31
 8002d4a:	ddef      	ble.n	8002d2c <main+0x344>
		}
		if(HAL_UART_Receive(&huart1,(uint8_t*)recep,49,200)){
 8002d4c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002d50:	23c8      	movs	r3, #200	; 0xc8
 8002d52:	2231      	movs	r2, #49	; 0x31
 8002d54:	4848      	ldr	r0, [pc, #288]	; (8002e78 <main+0x490>)
 8002d56:	f008 fad6 	bl	800b306 <HAL_UART_Receive>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <main+0x394>
		sprintf(retour,"Ce que j'ai entendu : %s",recep);
 8002d60:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d68:	4944      	ldr	r1, [pc, #272]	; (8002e7c <main+0x494>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f00c fcbe 	bl	800f6ec <siprintf>
		BSP_LCD_DisplayStringAtLine(3,(char*) retour);
 8002d70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d74:	4619      	mov	r1, r3
 8002d76:	2003      	movs	r0, #3
 8002d78:	f000 fef4 	bl	8003b64 <BSP_LCD_DisplayStringAtLine>
		}
		  /*CODE TP1 HORLOGE*/

		  //pas necessaire seulement pour une option
		  HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8002d7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d80:	2200      	movs	r2, #0
 8002d82:	4619      	mov	r1, r3
 8002d84:	483e      	ldr	r0, [pc, #248]	; (8002e80 <main+0x498>)
 8002d86:	f007 f865 	bl	8009e54 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8002d8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d8e:	2200      	movs	r2, #0
 8002d90:	4619      	mov	r1, r3
 8002d92:	483b      	ldr	r0, [pc, #236]	; (8002e80 <main+0x498>)
 8002d94:	f007 f940 	bl	800a018 <HAL_RTC_GetDate>

		  sprintf(msg,"il est : %d h %d m %d s \n\r",(uint)time[0],(uint)time[1],(uint)time[2]);
 8002d98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002da8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	4619      	mov	r1, r3
 8002db0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002db4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002db8:	789b      	ldrb	r3, [r3, #2]
 8002dba:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4930      	ldr	r1, [pc, #192]	; (8002e84 <main+0x49c>)
 8002dc4:	f00c fc92 	bl	800f6ec <siprintf>
		  BSP_LCD_DisplayStringAtLine(15,(uint8_t*) msg);
 8002dc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	200f      	movs	r0, #15
 8002dd0:	f000 fec8 	bl	8003b64 <BSP_LCD_DisplayStringAtLine>
		  //On utilise l'écran pour redémarrer
		  //on draw circle là ou pos pointera,
		  //joystick/2000 indique la vitesse, h et v
		  //PC sert à rien?

		  vit_v=((int16_t)joystick_v-2048)/1900;
 8002dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002dde:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <main+0x4a0>)
 8002de0:	fb82 1203 	smull	r1, r2, r2, r3
 8002de4:	1252      	asrs	r2, r2, #9
 8002de6:	17db      	asrs	r3, r3, #31
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		  vit_h=((int16_t)joystick_h-2048)/1900;
 8002dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002df8:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <main+0x4a0>)
 8002dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8002dfe:	1252      	asrs	r2, r2, #9
 8002e00:	17db      	asrs	r3, r3, #31
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c


		  pos_v+=vit_v;
 8002e08:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 8002e0c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8002e10:	4413      	add	r3, r2
 8002e12:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		  if (pos_v<3) pos_v=4;
 8002e16:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d802      	bhi.n	8002e24 <main+0x43c>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		  if (pos_v>268) pos_v=268;
 8002e24:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8002e28:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8002e2c:	d903      	bls.n	8002e36 <main+0x44e>
 8002e2e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8002e32:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		  pos_h+=vit_h;
 8002e36:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8002e3a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002e3e:	4413      	add	r3, r2
 8002e40:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		  if (pos_h<3) pos_h=3;
 8002e44:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d802      	bhi.n	8002e52 <main+0x46a>
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		  if (pos_h>477) pos_h=477;
 8002e52:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002e56:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8002e5a:	d303      	bcc.n	8002e64 <main+0x47c>
 8002e5c:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002e60:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		  BSP_LCD_FillCircle(pos_h,pos_v,3);
 8002e64:	f8b7 1136 	ldrh.w	r1, [r7, #310]	; 0x136
 8002e68:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f8d2 	bl	8004018 <BSP_LCD_FillCircle>
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8002e74:	e676      	b.n	8002b64 <main+0x17c>
 8002e76:	bf00      	nop
 8002e78:	20000be8 	.word	0x20000be8
 8002e7c:	08010188 	.word	0x08010188
 8002e80:	20000640 	.word	0x20000640
 8002e84:	080101a4 	.word	0x080101a4
 8002e88:	44fc3a35 	.word	0x44fc3a35

08002e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	; 0x50
 8002e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e92:	f107 0320 	add.w	r3, r7, #32
 8002e96:	2230      	movs	r2, #48	; 0x30
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f00c fb10 	bl	800f4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002eb0:	f005 fda6 	bl	8008a00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <SystemClock_Config+0xdc>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <SystemClock_Config+0xdc>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <SystemClock_Config+0xdc>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <SystemClock_Config+0xe0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <SystemClock_Config+0xe0>)
 8002ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <SystemClock_Config+0xe0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ee4:	2309      	movs	r3, #9
 8002ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002efc:	2319      	movs	r3, #25
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002f00:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f06:	2302      	movs	r3, #2
 8002f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002f0a:	2309      	movs	r3, #9
 8002f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f0e:	f107 0320 	add.w	r3, r7, #32
 8002f12:	4618      	mov	r0, r3
 8002f14:	f005 fdd4 	bl	8008ac0 <HAL_RCC_OscConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f1e:	f000 f867 	bl	8002ff0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f22:	f005 fd7d 	bl	8008a20 <HAL_PWREx_EnableOverDrive>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f2c:	f000 f860 	bl	8002ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f30:	230f      	movs	r3, #15
 8002f32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f34:	2302      	movs	r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	2106      	movs	r1, #6
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f006 f85a 	bl	8009008 <HAL_RCC_ClockConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002f5a:	f000 f849 	bl	8002ff0 <Error_Handler>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3750      	adds	r7, #80	; 0x50
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000

08002f70 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

//Pour le TP3 partie interruptions UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	extern osMessageQId myQueue02Handle;
xQueueSendFromISR(myQueue02Handle,&caractere_recu,NULL);
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_UART_RxCpltCallback+0x4c>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2200      	movs	r2, #0
 8002f80:	490f      	ldr	r1, [pc, #60]	; (8002fc0 <HAL_UART_RxCpltCallback+0x50>)
 8002f82:	f00a f9a5 	bl	800d2d0 <xQueueGenericSendFromISR>

if(caractere_recu=='a') HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin,1);
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_UART_RxCpltCallback+0x50>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b61      	cmp	r3, #97	; 0x61
 8002f8c:	d104      	bne.n	8002f98 <HAL_UART_RxCpltCallback+0x28>
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2108      	movs	r1, #8
 8002f92:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <HAL_UART_RxCpltCallback+0x54>)
 8002f94:	f004 fb74 	bl	8007680 <HAL_GPIO_WritePin>
if(caractere_recu=='e') HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin,0);
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_UART_RxCpltCallback+0x50>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b65      	cmp	r3, #101	; 0x65
 8002f9e:	d104      	bne.n	8002faa <HAL_UART_RxCpltCallback+0x3a>
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2108      	movs	r1, #8
 8002fa4:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <HAL_UART_RxCpltCallback+0x54>)
 8002fa6:	f004 fb6b 	bl	8007680 <HAL_GPIO_WritePin>
HAL_UART_Receive_IT(&huart1,&caractere_recu,1);
 8002faa:	2201      	movs	r2, #1
 8002fac:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <HAL_UART_RxCpltCallback+0x50>)
 8002fae:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <HAL_UART_RxCpltCallback+0x58>)
 8002fb0:	f008 fa6d 	bl	800b48e <HAL_UART_Receive_IT>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	200001fc 	.word	0x200001fc
 8002fc0:	20000610 	.word	0x20000610
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	20000be8 	.word	0x20000be8

08002fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fde:	f002 fc93 	bl	8005908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40001000 	.word	0x40001000

08002ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff4:	b672      	cpsid	i
}
 8002ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <Error_Handler+0x8>
	...

08002ffc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b090      	sub	sp, #64	; 0x40
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003012:	2300      	movs	r3, #0
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003016:	463b      	mov	r3, r7
 8003018:	2228      	movs	r2, #40	; 0x28
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f00c fa4f 	bl	800f4c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003022:	4b46      	ldr	r3, [pc, #280]	; (800313c <MX_RTC_Init+0x140>)
 8003024:	4a46      	ldr	r2, [pc, #280]	; (8003140 <MX_RTC_Init+0x144>)
 8003026:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003028:	4b44      	ldr	r3, [pc, #272]	; (800313c <MX_RTC_Init+0x140>)
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <MX_RTC_Init+0x140>)
 8003030:	227f      	movs	r2, #127	; 0x7f
 8003032:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <MX_RTC_Init+0x140>)
 8003036:	22ff      	movs	r2, #255	; 0xff
 8003038:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <MX_RTC_Init+0x140>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003040:	4b3e      	ldr	r3, [pc, #248]	; (800313c <MX_RTC_Init+0x140>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <MX_RTC_Init+0x140>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800304c:	483b      	ldr	r0, [pc, #236]	; (800313c <MX_RTC_Init+0x140>)
 800304e:	f006 fde3 	bl	8009c18 <HAL_RTC_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003058:	f7ff ffca 	bl	8002ff0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800306e:	2300      	movs	r3, #0
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800307a:	2201      	movs	r2, #1
 800307c:	4619      	mov	r1, r3
 800307e:	482f      	ldr	r0, [pc, #188]	; (800313c <MX_RTC_Init+0x140>)
 8003080:	f006 fe4e 	bl	8009d20 <HAL_RTC_SetTime>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800308a:	f7ff ffb1 	bl	8002ff0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030aa:	2201      	movs	r2, #1
 80030ac:	4619      	mov	r1, r3
 80030ae:	4823      	ldr	r0, [pc, #140]	; (800313c <MX_RTC_Init+0x140>)
 80030b0:	f006 ff2e 	bl	8009f10 <HAL_RTC_SetDate>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80030ba:	f7ff ff99 	bl	8002ff0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80030be:	2300      	movs	r3, #0
 80030c0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80030e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80030ee:	463b      	mov	r3, r7
 80030f0:	2201      	movs	r2, #1
 80030f2:	4619      	mov	r1, r3
 80030f4:	4811      	ldr	r0, [pc, #68]	; (800313c <MX_RTC_Init+0x140>)
 80030f6:	f006 ffdf 	bl	800a0b8 <HAL_RTC_SetAlarm>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003100:	f7ff ff76 	bl	8002ff0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8003104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800310a:	463b      	mov	r3, r7
 800310c:	2201      	movs	r2, #1
 800310e:	4619      	mov	r1, r3
 8003110:	480a      	ldr	r0, [pc, #40]	; (800313c <MX_RTC_Init+0x140>)
 8003112:	f006 ffd1 	bl	800a0b8 <HAL_RTC_SetAlarm>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800311c:	f7ff ff68 	bl	8002ff0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003120:	2202      	movs	r2, #2
 8003122:	2100      	movs	r1, #0
 8003124:	4805      	ldr	r0, [pc, #20]	; (800313c <MX_RTC_Init+0x140>)
 8003126:	f007 f9b1 	bl	800a48c <HAL_RTCEx_SetTimeStamp>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003130:	f7ff ff5e 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003134:	bf00      	nop
 8003136:	3740      	adds	r7, #64	; 0x40
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000640 	.word	0x20000640
 8003140:	40002800 	.word	0x40002800

08003144 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b0a4      	sub	sp, #144	; 0x90
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	2284      	movs	r2, #132	; 0x84
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f00c f9b3 	bl	800f4c0 <memset>
  if(rtcHandle->Instance==RTC)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_RTC_MspInit+0x54>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d114      	bne.n	800318e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003164:	2320      	movs	r3, #32
 8003166:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	4618      	mov	r0, r3
 8003174:	f006 f960 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800317e:	f7ff ff37 	bl	8002ff0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RTC_MspInit+0x58>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a05      	ldr	r2, [pc, #20]	; (800319c <HAL_RTC_MspInit+0x58>)
 8003188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800318e:	bf00      	nop
 8003190:	3790      	adds	r7, #144	; 0x90
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40002800 	.word	0x40002800
 800319c:	40023800 	.word	0x40023800

080031a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <MX_SPI2_Init+0x74>)
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <MX_SPI2_Init+0x78>)
 80031a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <MX_SPI2_Init+0x74>)
 80031ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <MX_SPI2_Init+0x74>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MX_SPI2_Init+0x74>)
 80031ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80031be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <MX_SPI2_Init+0x74>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <MX_SPI2_Init+0x74>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_SPI2_Init+0x74>)
 80031ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <MX_SPI2_Init+0x74>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_SPI2_Init+0x74>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_SPI2_Init+0x74>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <MX_SPI2_Init+0x74>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_SPI2_Init+0x74>)
 80031ee:	2207      	movs	r2, #7
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <MX_SPI2_Init+0x74>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_SPI2_Init+0x74>)
 80031fa:	2208      	movs	r2, #8
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_SPI2_Init+0x74>)
 8003200:	f007 fa3d 	bl	800a67e <HAL_SPI_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800320a:	f7ff fef1 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000660 	.word	0x20000660
 8003218:	40003800 	.word	0x40003800

0800321c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <HAL_SPI_MspInit+0xb4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d144      	bne.n	80032c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800323e:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_SPI_MspInit+0xb8>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003286:	2303      	movs	r3, #3
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003292:	2303      	movs	r3, #3
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003296:	2305      	movs	r3, #5
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <HAL_SPI_MspInit+0xbc>)
 80032a2:	f003 ff1d 	bl	80070e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80032a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032b8:	2305      	movs	r3, #5
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4619      	mov	r1, r3
 80032c2:	4806      	ldr	r0, [pc, #24]	; (80032dc <HAL_SPI_MspInit+0xc0>)
 80032c4:	f003 ff0c 	bl	80070e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80032c8:	bf00      	nop
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40003800 	.word	0x40003800
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40020400 	.word	0x40020400

080032e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	; 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a51      	ldr	r2, [pc, #324]	; (8003430 <I2Cx_MspInit+0x150>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d14d      	bne.n	800338c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <I2Cx_MspInit+0x154>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <I2Cx_MspInit+0x154>)
 80032f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fa:	6313      	str	r3, [r2, #48]	; 0x30
 80032fc:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <I2Cx_MspInit+0x154>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800330c:	2312      	movs	r3, #18
 800330e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003314:	2302      	movs	r3, #2
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003318:	2304      	movs	r3, #4
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	4845      	ldr	r0, [pc, #276]	; (8003438 <I2Cx_MspInit+0x158>)
 8003324:	f003 fedc 	bl	80070e0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800332e:	f107 031c 	add.w	r3, r7, #28
 8003332:	4619      	mov	r1, r3
 8003334:	4840      	ldr	r0, [pc, #256]	; (8003438 <I2Cx_MspInit+0x158>)
 8003336:	f003 fed3 	bl	80070e0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <I2Cx_MspInit+0x154>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <I2Cx_MspInit+0x154>)
 8003340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <I2Cx_MspInit+0x154>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003352:	4b38      	ldr	r3, [pc, #224]	; (8003434 <I2Cx_MspInit+0x154>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a37      	ldr	r2, [pc, #220]	; (8003434 <I2Cx_MspInit+0x154>)
 8003358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800335c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <I2Cx_MspInit+0x154>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <I2Cx_MspInit+0x154>)
 8003364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003368:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	210f      	movs	r1, #15
 800336e:	2048      	movs	r0, #72	; 0x48
 8003370:	f002 ffc0 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003374:	2048      	movs	r0, #72	; 0x48
 8003376:	f002 ffd9 	bl	800632c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	210f      	movs	r1, #15
 800337e:	2049      	movs	r0, #73	; 0x49
 8003380:	f002 ffb8 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003384:	2049      	movs	r0, #73	; 0x49
 8003386:	f002 ffd1 	bl	800632c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800338a:	e04d      	b.n	8003428 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <I2Cx_MspInit+0x154>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	4a28      	ldr	r2, [pc, #160]	; (8003434 <I2Cx_MspInit+0x154>)
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	6313      	str	r3, [r2, #48]	; 0x30
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <I2Cx_MspInit+0x154>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80033a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033aa:	2312      	movs	r3, #18
 80033ac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80033b2:	2302      	movs	r3, #2
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80033b6:	2304      	movs	r3, #4
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	4619      	mov	r1, r3
 80033c0:	481e      	ldr	r0, [pc, #120]	; (800343c <I2Cx_MspInit+0x15c>)
 80033c2:	f003 fe8d 	bl	80070e0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80033c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	4619      	mov	r1, r3
 80033d2:	481a      	ldr	r0, [pc, #104]	; (800343c <I2Cx_MspInit+0x15c>)
 80033d4:	f003 fe84 	bl	80070e0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <I2Cx_MspInit+0x154>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4a15      	ldr	r2, [pc, #84]	; (8003434 <I2Cx_MspInit+0x154>)
 80033de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033e2:	6413      	str	r3, [r2, #64]	; 0x40
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <I2Cx_MspInit+0x154>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <I2Cx_MspInit+0x154>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a0f      	ldr	r2, [pc, #60]	; (8003434 <I2Cx_MspInit+0x154>)
 80033f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033fa:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <I2Cx_MspInit+0x154>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <I2Cx_MspInit+0x154>)
 8003402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003406:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003408:	2200      	movs	r2, #0
 800340a:	210f      	movs	r1, #15
 800340c:	201f      	movs	r0, #31
 800340e:	f002 ff71 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003412:	201f      	movs	r0, #31
 8003414:	f002 ff8a 	bl	800632c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	210f      	movs	r1, #15
 800341c:	2020      	movs	r0, #32
 800341e:	f002 ff69 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003422:	2020      	movs	r0, #32
 8003424:	f002 ff82 	bl	800632c <HAL_NVIC_EnableIRQ>
}
 8003428:	bf00      	nop
 800342a:	3730      	adds	r7, #48	; 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200006c4 	.word	0x200006c4
 8003434:	40023800 	.word	0x40023800
 8003438:	40021c00 	.word	0x40021c00
 800343c:	40020400 	.word	0x40020400

08003440 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f004 fc21 	bl	8007c90 <HAL_I2C_GetState>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d125      	bne.n	80034a0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <I2Cx_Init+0x68>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <I2Cx_Init+0x6c>)
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e002      	b.n	800346a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <I2Cx_Init+0x70>)
 8003468:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <I2Cx_Init+0x74>)
 800346e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff23 	bl	80032e0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f004 f90a 	bl	80076b4 <HAL_I2C_Init>
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200006c4 	.word	0x200006c4
 80034ac:	40005c00 	.word	0x40005c00
 80034b0:	40005400 	.word	0x40005400
 80034b4:	40912732 	.word	0x40912732

080034b8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af04      	add	r7, sp, #16
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	72fb      	strb	r3, [r7, #11]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	b299      	uxth	r1, r3
 80034da:	88f8      	ldrh	r0, [r7, #6]
 80034dc:	893a      	ldrh	r2, [r7, #8]
 80034de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e2:	9302      	str	r3, [sp, #8]
 80034e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4603      	mov	r3, r0
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f004 fab4 	bl	8007a5c <HAL_I2C_Mem_Read>
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	4619      	mov	r1, r3
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f832 	bl	800356c <I2Cx_Error>
  }
  return status;    
 8003508:	7dfb      	ldrb	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08a      	sub	sp, #40	; 0x28
 8003516:	af04      	add	r7, sp, #16
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	461a      	mov	r2, r3
 8003520:	4603      	mov	r3, r0
 8003522:	72fb      	strb	r3, [r7, #11]
 8003524:	460b      	mov	r3, r1
 8003526:	813b      	strh	r3, [r7, #8]
 8003528:	4613      	mov	r3, r2
 800352a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	b299      	uxth	r1, r3
 8003534:	88f8      	ldrh	r0, [r7, #6]
 8003536:	893a      	ldrh	r2, [r7, #8]
 8003538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4603      	mov	r3, r0
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f004 f973 	bl	8007834 <HAL_I2C_Mem_Write>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003558:	7afb      	ldrb	r3, [r7, #11]
 800355a:	4619      	mov	r1, r3
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f805 	bl	800356c <I2Cx_Error>
  }
  return status;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f004 f92b 	bl	80077d4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff5e 	bl	8003440 <I2Cx_Init>
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <TS_IO_Init+0x10>)
 8003592:	f7ff ff55 	bl	8003440 <I2Cx_Init>
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200006c4 	.word	0x200006c4

080035a0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
 80035aa:	460b      	mov	r3, r1
 80035ac:	71bb      	strb	r3, [r7, #6]
 80035ae:	4613      	mov	r3, r2
 80035b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80035b2:	79bb      	ldrb	r3, [r7, #6]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	79f9      	ldrb	r1, [r7, #7]
 80035b8:	2301      	movs	r3, #1
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	1d7b      	adds	r3, r7, #5
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2301      	movs	r3, #1
 80035c2:	4803      	ldr	r0, [pc, #12]	; (80035d0 <TS_IO_Write+0x30>)
 80035c4:	f7ff ffa5 	bl	8003512 <I2Cx_WriteMultiple>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200006c4 	.word	0x200006c4

080035d4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af02      	add	r7, sp, #8
 80035da:	4603      	mov	r3, r0
 80035dc:	460a      	mov	r2, r1
 80035de:	71fb      	strb	r3, [r7, #7]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80035e8:	79bb      	ldrb	r3, [r7, #6]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	79f9      	ldrb	r1, [r7, #7]
 80035ee:	2301      	movs	r3, #1
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	f107 030f 	add.w	r3, r7, #15
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2301      	movs	r3, #1
 80035fa:	4804      	ldr	r0, [pc, #16]	; (800360c <TS_IO_Read+0x38>)
 80035fc:	f7ff ff5c 	bl	80034b8 <I2Cx_ReadMultiple>

  return read_value;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200006c4 	.word	0x200006c4

08003610 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f002 f995 	bl	8005948 <HAL_Delay>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800362e:	2228      	movs	r2, #40	; 0x28
 8003630:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003634:	2209      	movs	r2, #9
 8003636:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800363a:	2235      	movs	r2, #53	; 0x35
 800363c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003640:	220b      	movs	r2, #11
 8003642:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003646:	f240 121b 	movw	r2, #283	; 0x11b
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800364c:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800364e:	f240 2215 	movw	r2, #533	; 0x215
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003656:	f240 121d 	movw	r2, #285	; 0x11d
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800365e:	f240 2235 	movw	r2, #565	; 0x235
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003664:	2100      	movs	r1, #0
 8003666:	4823      	ldr	r0, [pc, #140]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003668:	f000 fe6e 	bl	8004348 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800366e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003672:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003676:	f44f 7288 	mov.w	r2, #272	; 0x110
 800367a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <BSP_LCD_Init+0xcc>)
 8003696:	2200      	movs	r2, #0
 8003698:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <BSP_LCD_Init+0xcc>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <BSP_LCD_Init+0xcc>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <BSP_LCD_Init+0xcc>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <BSP_LCD_Init+0xcc>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <BSP_LCD_Init+0xd0>)
 80036b0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80036b2:	4810      	ldr	r0, [pc, #64]	; (80036f4 <BSP_LCD_Init+0xcc>)
 80036b4:	f004 fffc 	bl	80086b0 <HAL_LTDC_GetState>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80036be:	2100      	movs	r1, #0
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <BSP_LCD_Init+0xcc>)
 80036c2:	f000 fd67 	bl	8004194 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80036c6:	480b      	ldr	r0, [pc, #44]	; (80036f4 <BSP_LCD_Init+0xcc>)
 80036c8:	f004 fe22 	bl	8008310 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80036cc:	2201      	movs	r2, #1
 80036ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036d2:	480a      	ldr	r0, [pc, #40]	; (80036fc <BSP_LCD_Init+0xd4>)
 80036d4:	f003 ffd4 	bl	8007680 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80036d8:	2201      	movs	r2, #1
 80036da:	2108      	movs	r1, #8
 80036dc:	4808      	ldr	r0, [pc, #32]	; (8003700 <BSP_LCD_Init+0xd8>)
 80036de:	f003 ffcf 	bl	8007680 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80036e2:	f000 ff95 	bl	8004610 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036e6:	4807      	ldr	r0, [pc, #28]	; (8003704 <BSP_LCD_Init+0xdc>)
 80036e8:	f000 f8d8 	bl	800389c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000718 	.word	0x20000718
 80036f8:	40016800 	.word	0x40016800
 80036fc:	40022000 	.word	0x40022000
 8003700:	40022800 	.word	0x40022800
 8003704:	20000028 	.word	0x20000028

08003708 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <BSP_LCD_GetXSize+0x20>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a06      	ldr	r2, [pc, #24]	; (800372c <BSP_LCD_GetXSize+0x24>)
 8003712:	2134      	movs	r1, #52	; 0x34
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3360      	adds	r3, #96	; 0x60
 800371c:	681b      	ldr	r3, [r3, #0]
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000800 	.word	0x20000800
 800372c:	20000718 	.word	0x20000718

08003730 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <BSP_LCD_GetYSize+0x20>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <BSP_LCD_GetYSize+0x24>)
 800373a:	2134      	movs	r1, #52	; 0x34
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3364      	adds	r3, #100	; 0x64
 8003744:	681b      	ldr	r3, [r3, #0]
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000800 	.word	0x20000800
 8003754:	20000718 	.word	0x20000718

08003758 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003758:	b580      	push	{r7, lr}
 800375a:	b090      	sub	sp, #64	; 0x40
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003768:	f7ff ffce 	bl	8003708 <BSP_LCD_GetXSize>
 800376c:	4603      	mov	r3, r0
 800376e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003774:	f7ff ffdc 	bl	8003730 <BSP_LCD_GetYSize>
 8003778:	4603      	mov	r3, r0
 800377a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003784:	23ff      	movs	r3, #255	; 0xff
 8003786:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800379e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80037a4:	2307      	movs	r3, #7
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80037a8:	f7ff ffae 	bl	8003708 <BSP_LCD_GetXSize>
 80037ac:	4603      	mov	r3, r0
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80037b0:	f7ff ffbe 	bl	8003730 <BSP_LCD_GetYSize>
 80037b4:	4603      	mov	r3, r0
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	4619      	mov	r1, r3
 80037c0:	4812      	ldr	r0, [pc, #72]	; (800380c <BSP_LCD_LayerDefaultInit+0xb4>)
 80037c2:	f004 ff37 	bl	8008634 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	4911      	ldr	r1, [pc, #68]	; (8003810 <BSP_LCD_LayerDefaultInit+0xb8>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3304      	adds	r3, #4
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	490c      	ldr	r1, [pc, #48]	; (8003810 <BSP_LCD_LayerDefaultInit+0xb8>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3308      	adds	r3, #8
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <BSP_LCD_LayerDefaultInit+0xbc>)
 80037ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	4907      	ldr	r1, [pc, #28]	; (8003810 <BSP_LCD_LayerDefaultInit+0xb8>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	3740      	adds	r7, #64	; 0x40
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000718 	.word	0x20000718
 8003810:	20000804 	.word	0x20000804
 8003814:	20000028 	.word	0x20000028

08003818 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <BSP_LCD_SelectLayer+0x1c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
} 
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000800 	.word	0x20000800

08003838 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <BSP_LCD_SetTextColor+0x28>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4907      	ldr	r1, [pc, #28]	; (8003864 <BSP_LCD_SetTextColor+0x2c>)
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000800 	.word	0x20000800
 8003864:	20000804 	.word	0x20000804

08003868 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <BSP_LCD_SetBackColor+0x2c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4908      	ldr	r1, [pc, #32]	; (8003898 <BSP_LCD_SetBackColor+0x30>)
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3304      	adds	r3, #4
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000800 	.word	0x20000800
 8003898:	20000804 	.word	0x20000804

0800389c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <BSP_LCD_SetFont+0x2c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4908      	ldr	r1, [pc, #32]	; (80038cc <BSP_LCD_SetFont+0x30>)
 80038aa:	4613      	mov	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3308      	adds	r3, #8
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000800 	.word	0x20000800
 80038cc:	20000804 	.word	0x20000804

080038d0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <BSP_LCD_GetFont+0x24>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4907      	ldr	r1, [pc, #28]	; (80038f8 <BSP_LCD_GetFont+0x28>)
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3308      	adds	r3, #8
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000800 	.word	0x20000800
 80038f8:	20000804 	.word	0x20000804

080038fc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b085      	sub	sp, #20
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <BSP_LCD_Clear+0x48>)
 8003906:	681c      	ldr	r4, [r3, #0]
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <BSP_LCD_Clear+0x48>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <BSP_LCD_Clear+0x4c>)
 800390e:	2134      	movs	r1, #52	; 0x34
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	; 0x5c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461e      	mov	r6, r3
 800391c:	f7ff fef4 	bl	8003708 <BSP_LCD_GetXSize>
 8003920:	4605      	mov	r5, r0
 8003922:	f7ff ff05 	bl	8003730 <BSP_LCD_GetYSize>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	2300      	movs	r3, #0
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	462a      	mov	r2, r5
 8003934:	4631      	mov	r1, r6
 8003936:	4620      	mov	r0, r4
 8003938:	f000 fdda 	bl	80044f0 <LL_FillBuffer>
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003944:	20000800 	.word	0x20000800
 8003948:	20000718 	.word	0x20000718

0800394c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
 8003956:	460b      	mov	r3, r1
 8003958:	80bb      	strh	r3, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <BSP_LCD_DisplayChar+0x80>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	491b      	ldr	r1, [pc, #108]	; (80039d0 <BSP_LCD_DisplayChar+0x84>)
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3308      	adds	r3, #8
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <BSP_LCD_DisplayChar+0x80>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4c14      	ldr	r4, [pc, #80]	; (80039d0 <BSP_LCD_DisplayChar+0x84>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4423      	add	r3, r4
 800398a:	3308      	adds	r3, #8
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003990:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <BSP_LCD_DisplayChar+0x80>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <BSP_LCD_DisplayChar+0x84>)
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4423      	add	r3, r4
 80039a4:	3308      	adds	r3, #8
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	889b      	ldrh	r3, [r3, #4]
 80039aa:	3307      	adds	r3, #7
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da00      	bge.n	80039b2 <BSP_LCD_DisplayChar+0x66>
 80039b0:	3307      	adds	r3, #7
 80039b2:	10db      	asrs	r3, r3, #3
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039b8:	18ca      	adds	r2, r1, r3
 80039ba:	88b9      	ldrh	r1, [r7, #4]
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fcde 	bl	8004380 <DrawChar>
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	20000800 	.word	0x20000800
 80039d0:	20000804 	.word	0x20000804

080039d4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60ba      	str	r2, [r7, #8]
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	81fb      	strh	r3, [r7, #14]
 80039e2:	460b      	mov	r3, r1
 80039e4:	81bb      	strh	r3, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80039ea:	2301      	movs	r3, #1
 80039ec:	83fb      	strh	r3, [r7, #30]
 80039ee:	2300      	movs	r3, #0
 80039f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80039fe:	e002      	b.n	8003a06 <BSP_LCD_DisplayStringAt+0x32>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	617a      	str	r2, [r7, #20]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f6      	bne.n	8003a00 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003a12:	f7ff fe79 	bl	8003708 <BSP_LCD_GetXSize>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <BSP_LCD_DisplayStringAt+0x188>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4850      	ldr	r0, [pc, #320]	; (8003b60 <BSP_LCD_DisplayStringAt+0x18c>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4403      	add	r3, r0
 8003a28:	3308      	adds	r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	889b      	ldrh	r3, [r3, #4]
 8003a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a32:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d01c      	beq.n	8003a74 <BSP_LCD_DisplayStringAt+0xa0>
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	dc33      	bgt.n	8003aa6 <BSP_LCD_DisplayStringAt+0xd2>
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d002      	beq.n	8003a48 <BSP_LCD_DisplayStringAt+0x74>
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d019      	beq.n	8003a7a <BSP_LCD_DisplayStringAt+0xa6>
 8003a46:	e02e      	b.n	8003aa6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	1ad1      	subs	r1, r2, r3
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <BSP_LCD_DisplayStringAt+0x188>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4843      	ldr	r0, [pc, #268]	; (8003b60 <BSP_LCD_DisplayStringAt+0x18c>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4403      	add	r3, r0
 8003a5e:	3308      	adds	r3, #8
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	889b      	ldrh	r3, [r3, #4]
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	89fb      	ldrh	r3, [r7, #14]
 8003a6e:	4413      	add	r3, r2
 8003a70:	83fb      	strh	r3, [r7, #30]
      break;
 8003a72:	e01b      	b.n	8003aac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	83fb      	strh	r3, [r7, #30]
      break;
 8003a78:	e018      	b.n	8003aac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	b299      	uxth	r1, r3
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <BSP_LCD_DisplayStringAt+0x188>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4836      	ldr	r0, [pc, #216]	; (8003b60 <BSP_LCD_DisplayStringAt+0x18c>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	3308      	adds	r3, #8
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	889b      	ldrh	r3, [r3, #4]
 8003a98:	fb11 f303 	smulbb	r3, r1, r3
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	83fb      	strh	r3, [r7, #30]
      break;
 8003aa4:	e002      	b.n	8003aac <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003aa6:	89fb      	ldrh	r3, [r7, #14]
 8003aa8:	83fb      	strh	r3, [r7, #30]
      break;
 8003aaa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003aac:	8bfb      	ldrh	r3, [r7, #30]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <BSP_LCD_DisplayStringAt+0xe6>
 8003ab2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	da1d      	bge.n	8003af6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003abe:	e01a      	b.n	8003af6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	89b9      	ldrh	r1, [r7, #12]
 8003ac6:	8bfb      	ldrh	r3, [r7, #30]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff3f 	bl	800394c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <BSP_LCD_DisplayStringAt+0x188>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4923      	ldr	r1, [pc, #140]	; (8003b60 <BSP_LCD_DisplayStringAt+0x18c>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3308      	adds	r3, #8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	889a      	ldrh	r2, [r3, #4]
 8003ae4:	8bfb      	ldrh	r3, [r7, #30]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
    i++;
 8003af0:	8bbb      	ldrh	r3, [r7, #28]
 8003af2:	3301      	adds	r3, #1
 8003af4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2dc      	uxtb	r4, r3
 8003b04:	f7ff fe00 	bl	8003708 <BSP_LCD_GetXSize>
 8003b08:	8bb9      	ldrh	r1, [r7, #28]
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <BSP_LCD_DisplayStringAt+0x188>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4d14      	ldr	r5, [pc, #80]	; (8003b60 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	442b      	add	r3, r5
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	1ac3      	subs	r3, r0, r3
 8003b26:	b299      	uxth	r1, r3
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <BSP_LCD_DisplayStringAt+0x188>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	480c      	ldr	r0, [pc, #48]	; (8003b60 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4403      	add	r3, r0
 8003b38:	3308      	adds	r3, #8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	889b      	ldrh	r3, [r3, #4]
 8003b3e:	4299      	cmp	r1, r3
 8003b40:	bf2c      	ite	cs
 8003b42:	2301      	movcs	r3, #1
 8003b44:	2300      	movcc	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4023      	ands	r3, r4
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1b7      	bne.n	8003ac0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000800 	.word	0x20000800
 8003b60:	20000804 	.word	0x20000804

08003b64 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003b70:	f7ff feae 	bl	80038d0 <BSP_LCD_GetFont>
 8003b74:	4603      	mov	r3, r0
 8003b76:	88db      	ldrh	r3, [r3, #6]
 8003b78:	88fa      	ldrh	r2, [r7, #6]
 8003b7a:	fb12 f303 	smulbb	r3, r2, r3
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	2303      	movs	r3, #3
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7ff ff25 	bl	80039d4 <BSP_LCD_DisplayStringAt>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	80bb      	strh	r3, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003baa:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <BSP_LCD_DrawHLine+0xb0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <BSP_LCD_DrawHLine+0xb4>)
 8003bb0:	2134      	movs	r1, #52	; 0x34
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3348      	adds	r3, #72	; 0x48
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d114      	bne.n	8003bea <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bc0:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <BSP_LCD_DrawHLine+0xb0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <BSP_LCD_DrawHLine+0xb4>)
 8003bc6:	2134      	movs	r1, #52	; 0x34
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	681c      	ldr	r4, [r3, #0]
 8003bd2:	f7ff fd99 	bl	8003708 <BSP_LCD_GetXSize>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	88bb      	ldrh	r3, [r7, #4]
 8003bda:	fb03 f202 	mul.w	r2, r3, r2
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4413      	add	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4423      	add	r3, r4
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e013      	b.n	8003c12 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <BSP_LCD_DrawHLine+0xb0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <BSP_LCD_DrawHLine+0xb4>)
 8003bf0:	2134      	movs	r1, #52	; 0x34
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	335c      	adds	r3, #92	; 0x5c
 8003bfa:	681c      	ldr	r4, [r3, #0]
 8003bfc:	f7ff fd84 	bl	8003708 <BSP_LCD_GetXSize>
 8003c00:	4602      	mov	r2, r0
 8003c02:	88bb      	ldrh	r3, [r7, #4]
 8003c04:	fb03 f202 	mul.w	r2, r3, r2
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4423      	add	r3, r4
 8003c10:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <BSP_LCD_DrawHLine+0xb0>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	887c      	ldrh	r4, [r7, #2]
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <BSP_LCD_DrawHLine+0xb0>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4d0b      	ldr	r5, [pc, #44]	; (8003c4c <BSP_LCD_DrawHLine+0xb8>)
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	442b      	add	r3, r5
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2301      	movs	r3, #1
 8003c34:	4622      	mov	r2, r4
 8003c36:	f000 fc5b 	bl	80044f0 <LL_FillBuffer>
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bdb0      	pop	{r4, r5, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000800 	.word	0x20000800
 8003c48:	20000718 	.word	0x20000718
 8003c4c:	20000804 	.word	0x20000804

08003c50 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	80fb      	strh	r3, [r7, #6]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	80bb      	strh	r3, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	f1c3 0303 	rsb	r3, r3, #3
 8003c6a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003c74:	e0c7      	b.n	8003e06 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b298      	uxth	r0, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	88ba      	ldrh	r2, [r7, #4]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	b299      	uxth	r1, r3
 8003c8a:	4b64      	ldr	r3, [pc, #400]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4c64      	ldr	r4, [pc, #400]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4423      	add	r3, r4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f000 f8c1 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	b298      	uxth	r0, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	88ba      	ldrh	r2, [r7, #4]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	b299      	uxth	r1, r3
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4c59      	ldr	r4, [pc, #356]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4423      	add	r3, r4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f000 f8ab 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b298      	uxth	r0, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	88ba      	ldrh	r2, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b299      	uxth	r1, r3
 8003ce2:	4b4e      	ldr	r3, [pc, #312]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4c4e      	ldr	r4, [pc, #312]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4423      	add	r3, r4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f000 f895 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	b298      	uxth	r0, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	88ba      	ldrh	r2, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b299      	uxth	r1, r3
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4c43      	ldr	r4, [pc, #268]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4423      	add	r3, r4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	f000 f87f 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	b298      	uxth	r0, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	88bb      	ldrh	r3, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	b299      	uxth	r1, r3
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4c38      	ldr	r4, [pc, #224]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4423      	add	r3, r4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f000 f869 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	88fa      	ldrh	r2, [r7, #6]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	b298      	uxth	r0, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	88bb      	ldrh	r3, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	b299      	uxth	r1, r3
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4c2d      	ldr	r4, [pc, #180]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4423      	add	r3, r4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f853 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	4413      	add	r3, r2
 8003d86:	b298      	uxth	r0, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	88bb      	ldrh	r3, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	b299      	uxth	r1, r3
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4c22      	ldr	r4, [pc, #136]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4423      	add	r3, r4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f000 f83d 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	b298      	uxth	r0, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	88bb      	ldrh	r3, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	b299      	uxth	r1, r3
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <BSP_LCD_DrawCircle+0x1cc>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4c17      	ldr	r4, [pc, #92]	; (8003e20 <BSP_LCD_DrawCircle+0x1d0>)
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4423      	add	r3, r4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f000 f827 	bl	8003e24 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da06      	bge.n	8003dea <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	009a      	lsls	r2, r3, #2
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	3306      	adds	r3, #6
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e00a      	b.n	8003e00 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	009a      	lsls	r2, r3, #2
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4413      	add	r3, r2
 8003df6:	330a      	adds	r3, #10
 8003df8:	617b      	str	r3, [r7, #20]
      current_y--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3301      	adds	r3, #1
 8003e04:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f67f af33 	bls.w	8003c76 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd90      	pop	{r4, r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000800 	.word	0x20000800
 8003e20:	20000804 	.word	0x20000804

08003e24 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003e24:	b5b0      	push	{r4, r5, r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	603a      	str	r2, [r7, #0]
 8003e2e:	80fb      	strh	r3, [r7, #6]
 8003e30:	460b      	mov	r3, r1
 8003e32:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <BSP_LCD_DrawPixel+0x88>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <BSP_LCD_DrawPixel+0x8c>)
 8003e3a:	2134      	movs	r1, #52	; 0x34
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	3348      	adds	r3, #72	; 0x48
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d116      	bne.n	8003e78 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <BSP_LCD_DrawPixel+0x88>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <BSP_LCD_DrawPixel+0x8c>)
 8003e50:	2134      	movs	r1, #52	; 0x34
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	335c      	adds	r3, #92	; 0x5c
 8003e5a:	681c      	ldr	r4, [r3, #0]
 8003e5c:	88bd      	ldrh	r5, [r7, #4]
 8003e5e:	f7ff fc53 	bl	8003708 <BSP_LCD_GetXSize>
 8003e62:	4603      	mov	r3, r0
 8003e64:	fb03 f205 	mul.w	r2, r3, r5
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4423      	add	r3, r4
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b292      	uxth	r2, r2
 8003e74:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003e76:	e015      	b.n	8003ea4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <BSP_LCD_DrawPixel+0x88>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <BSP_LCD_DrawPixel+0x8c>)
 8003e7e:	2134      	movs	r1, #52	; 0x34
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	335c      	adds	r3, #92	; 0x5c
 8003e88:	681c      	ldr	r4, [r3, #0]
 8003e8a:	88bd      	ldrh	r5, [r7, #4]
 8003e8c:	f7ff fc3c 	bl	8003708 <BSP_LCD_GetXSize>
 8003e90:	4603      	mov	r3, r0
 8003e92:	fb03 f205 	mul.w	r2, r3, r5
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4423      	add	r3, r4
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8003eac:	20000800 	.word	0x20000800
 8003eb0:	20000718 	.word	0x20000718

08003eb4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	330a      	adds	r3, #10
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	330b      	adds	r3, #11
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	441a      	add	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	330d      	adds	r3, #13
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	4413      	add	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3312      	adds	r3, #18
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3313      	adds	r3, #19
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3314      	adds	r3, #20
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	441a      	add	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3315      	adds	r3, #21
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	4413      	add	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3316      	adds	r3, #22
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3317      	adds	r3, #23
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	441a      	add	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3319      	adds	r3, #25
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	4413      	add	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	331c      	adds	r3, #28
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	331d      	adds	r3, #29
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	4413      	add	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <BSP_LCD_DrawBitmap+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <BSP_LCD_DrawBitmap+0x160>)
 8003f66:	2134      	movs	r1, #52	; 0x34
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	335c      	adds	r3, #92	; 0x5c
 8003f70:	681c      	ldr	r4, [r3, #0]
 8003f72:	f7ff fbc9 	bl	8003708 <BSP_LCD_GetXSize>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	fb03 f202 	mul.w	r2, r3, r2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4423      	add	r3, r4
 8003f86:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	3b20      	subs	r3, #32
 8003f8c:	2b07      	cmp	r3, #7
 8003f8e:	d802      	bhi.n	8003f96 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e008      	b.n	8003fa8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3b10      	subs	r3, #16
 8003f9a:	2b07      	cmp	r3, #7
 8003f9c:	d802      	bhi.n	8003fa4 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e001      	b.n	8003fa8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	08d2      	lsrs	r2, r2, #3
 8003fb6:	fb03 f202 	mul.w	r2, r3, r2
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	4413      	add	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc8:	e018      	b.n	8003ffc <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003fca:	6a39      	ldr	r1, [r7, #32]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fad9 	bl	8004588 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003fd6:	f7ff fb97 	bl	8003708 <BSP_LCD_GetXSize>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	6a3a      	ldr	r2, [r7, #32]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	08db      	lsrs	r3, r3, #3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	425b      	negs	r3, r3
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d3e2      	bcc.n	8003fca <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	372c      	adds	r7, #44	; 0x2c
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	20000800 	.word	0x20000800
 8004014:	20000718 	.word	0x20000718

08004018 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
 8004022:	460b      	mov	r3, r1
 8004024:	80bb      	strh	r3, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	f1c3 0303 	rsb	r3, r3, #3
 8004032:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800403c:	4b44      	ldr	r3, [pc, #272]	; (8004150 <BSP_LCD_FillCircle+0x138>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4944      	ldr	r1, [pc, #272]	; (8004154 <BSP_LCD_FillCircle+0x13c>)
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fbf2 	bl	8003838 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004054:	e061      	b.n	800411a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d021      	beq.n	80040a0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	b29b      	uxth	r3, r3
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	b298      	uxth	r0, r3
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	b29a      	uxth	r2, r3
 800406a:	88bb      	ldrh	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	b299      	uxth	r1, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	b29b      	uxth	r3, r3
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	f7ff fd8b 	bl	8003b94 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	b29b      	uxth	r3, r3
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	b298      	uxth	r0, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	b29b      	uxth	r3, r3
 800408c:	88ba      	ldrh	r2, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	b299      	uxth	r1, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	b29b      	uxth	r3, r3
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff fd7a 	bl	8003b94 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d021      	beq.n	80040ea <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	b298      	uxth	r0, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	88ba      	ldrh	r2, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	b299      	uxth	r1, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	f7ff fd66 	bl	8003b94 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	b298      	uxth	r0, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	88bb      	ldrh	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	b299      	uxth	r1, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	f7ff fd55 	bl	8003b94 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	da06      	bge.n	80040fe <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	3306      	adds	r3, #6
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e00a      	b.n	8004114 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	009a      	lsls	r2, r3, #2
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	4413      	add	r3, r2
 800410a:	330a      	adds	r3, #10
 800410c:	617b      	str	r3, [r7, #20]
      current_y--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b01      	subs	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3301      	adds	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	429a      	cmp	r2, r3
 8004120:	d999      	bls.n	8004056 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <BSP_LCD_FillCircle+0x138>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	490b      	ldr	r1, [pc, #44]	; (8004154 <BSP_LCD_FillCircle+0x13c>)
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fb7f 	bl	8003838 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800413a:	887a      	ldrh	r2, [r7, #2]
 800413c:	88b9      	ldrh	r1, [r7, #4]
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fd85 	bl	8003c50 <BSP_LCD_DrawCircle>
}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000800 	.word	0x20000800
 8004154:	20000804 	.word	0x20000804

08004158 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <BSP_LCD_DisplayOn+0x30>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <BSP_LCD_DisplayOn+0x30>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800416c:	2201      	movs	r2, #1
 800416e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004172:	4806      	ldr	r0, [pc, #24]	; (800418c <BSP_LCD_DisplayOn+0x34>)
 8004174:	f003 fa84 	bl	8007680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004178:	2201      	movs	r2, #1
 800417a:	2108      	movs	r1, #8
 800417c:	4804      	ldr	r0, [pc, #16]	; (8004190 <BSP_LCD_DisplayOn+0x38>)
 800417e:	f003 fa7f 	bl	8007680 <HAL_GPIO_WritePin>
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000718 	.word	0x20000718
 800418c:	40022000 	.word	0x40022000
 8004190:	40022800 	.word	0x40022800

08004194 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b090      	sub	sp, #64	; 0x40
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800419e:	4b64      	ldr	r3, [pc, #400]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4a63      	ldr	r2, [pc, #396]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a8:	6453      	str	r3, [r2, #68]	; 0x44
 80041aa:	4b61      	ldr	r3, [pc, #388]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80041b6:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	4a5d      	ldr	r2, [pc, #372]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041c0:	6313      	str	r3, [r2, #48]	; 0x30
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ce:	4b58      	ldr	r3, [pc, #352]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a57      	ldr	r2, [pc, #348]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041d4:	f043 0310 	orr.w	r3, r3, #16
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b55      	ldr	r3, [pc, #340]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041e6:	4b52      	ldr	r3, [pc, #328]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a51      	ldr	r2, [pc, #324]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80041fe:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4a4b      	ldr	r2, [pc, #300]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	4b49      	ldr	r3, [pc, #292]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004216:	4b46      	ldr	r3, [pc, #280]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a45      	ldr	r2, [pc, #276]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 800421c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b43      	ldr	r3, [pc, #268]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800422e:	4b40      	ldr	r3, [pc, #256]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a3f      	ldr	r2, [pc, #252]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	4b3d      	ldr	r3, [pc, #244]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004246:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a39      	ldr	r2, [pc, #228]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800425e:	4b34      	ldr	r3, [pc, #208]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a33      	ldr	r2, [pc, #204]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 8004264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <BSP_LCD_MspInit+0x19c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004276:	2310      	movs	r3, #16
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004282:	2302      	movs	r3, #2
 8004284:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004286:	230e      	movs	r3, #14
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800428a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800428e:	4619      	mov	r1, r3
 8004290:	4828      	ldr	r0, [pc, #160]	; (8004334 <BSP_LCD_MspInit+0x1a0>)
 8004292:	f002 ff25 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80042a0:	2309      	movs	r3, #9
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80042a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042a8:	4619      	mov	r1, r3
 80042aa:	4823      	ldr	r0, [pc, #140]	; (8004338 <BSP_LCD_MspInit+0x1a4>)
 80042ac:	f002 ff18 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80042b0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042ba:	230e      	movs	r3, #14
 80042bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80042be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c2:	4619      	mov	r1, r3
 80042c4:	481d      	ldr	r0, [pc, #116]	; (800433c <BSP_LCD_MspInit+0x1a8>)
 80042c6:	f002 ff0b 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80042ca:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042d4:	230e      	movs	r3, #14
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80042d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042dc:	4619      	mov	r1, r3
 80042de:	4818      	ldr	r0, [pc, #96]	; (8004340 <BSP_LCD_MspInit+0x1ac>)
 80042e0:	f002 fefe 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80042e4:	23f7      	movs	r3, #247	; 0xf7
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042ec:	230e      	movs	r3, #14
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80042f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f4:	4619      	mov	r1, r3
 80042f6:	4813      	ldr	r0, [pc, #76]	; (8004344 <BSP_LCD_MspInit+0x1b0>)
 80042f8:	f002 fef2 	bl	80070e0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80042fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004302:	2301      	movs	r3, #1
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430a:	4619      	mov	r1, r3
 800430c:	480b      	ldr	r0, [pc, #44]	; (800433c <BSP_LCD_MspInit+0x1a8>)
 800430e:	f002 fee7 	bl	80070e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004312:	2308      	movs	r3, #8
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004316:	2301      	movs	r3, #1
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800431a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431e:	4619      	mov	r1, r3
 8004320:	4808      	ldr	r0, [pc, #32]	; (8004344 <BSP_LCD_MspInit+0x1b0>)
 8004322:	f002 fedd 	bl	80070e0 <HAL_GPIO_Init>
}
 8004326:	bf00      	nop
 8004328:	3740      	adds	r7, #64	; 0x40
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	40021000 	.word	0x40021000
 8004338:	40021800 	.word	0x40021800
 800433c:	40022000 	.word	0x40022000
 8004340:	40022400 	.word	0x40022400
 8004344:	40022800 	.word	0x40022800

08004348 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <BSP_LCD_ClockConfig+0x34>)
 8004354:	2208      	movs	r2, #8
 8004356:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <BSP_LCD_ClockConfig+0x34>)
 800435a:	22c0      	movs	r2, #192	; 0xc0
 800435c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <BSP_LCD_ClockConfig+0x34>)
 8004360:	2205      	movs	r2, #5
 8004362:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <BSP_LCD_ClockConfig+0x34>)
 8004366:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <BSP_LCD_ClockConfig+0x34>)
 800436e:	f005 f863 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000081c 	.word	0x2000081c

08004380 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	603a      	str	r2, [r7, #0]
 800438a:	80fb      	strh	r3, [r7, #6]
 800438c:	460b      	mov	r3, r1
 800438e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <DrawChar+0x168>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4953      	ldr	r1, [pc, #332]	; (80044ec <DrawChar+0x16c>)
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3308      	adds	r3, #8
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	88db      	ldrh	r3, [r3, #6]
 80043ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80043b0:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <DrawChar+0x168>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	494d      	ldr	r1, [pc, #308]	; (80044ec <DrawChar+0x16c>)
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3308      	adds	r3, #8
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	889b      	ldrh	r3, [r3, #4]
 80043c6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80043c8:	8a3b      	ldrh	r3, [r7, #16]
 80043ca:	3307      	adds	r3, #7
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da00      	bge.n	80043d2 <DrawChar+0x52>
 80043d0:	3307      	adds	r3, #7
 80043d2:	10db      	asrs	r3, r3, #3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	8a3b      	ldrh	r3, [r7, #16]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e076      	b.n	80044d6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80043e8:	8a3b      	ldrh	r3, [r7, #16]
 80043ea:	3307      	adds	r3, #7
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da00      	bge.n	80043f2 <DrawChar+0x72>
 80043f0:	3307      	adds	r3, #7
 80043f2:	10db      	asrs	r3, r3, #3
 80043f4:	461a      	mov	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004402:	8a3b      	ldrh	r3, [r7, #16]
 8004404:	3307      	adds	r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	da00      	bge.n	800440c <DrawChar+0x8c>
 800440a:	3307      	adds	r3, #7
 800440c:	10db      	asrs	r3, r3, #3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d002      	beq.n	8004418 <DrawChar+0x98>
 8004412:	2b02      	cmp	r3, #2
 8004414:	d004      	beq.n	8004420 <DrawChar+0xa0>
 8004416:	e00c      	b.n	8004432 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
      break;
 800441e:	e016      	b.n	800444e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	3201      	adds	r2, #1
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
      break;
 8004430:	e00d      	b.n	800444e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	041a      	lsls	r2, r3, #16
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	4313      	orrs	r3, r2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	3202      	adds	r2, #2
 8004446:	7812      	ldrb	r2, [r2, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
      break;
 800444c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e036      	b.n	80044c2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004454:	8a3a      	ldrh	r2, [r7, #16]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	4413      	add	r3, r2
 800445e:	3b01      	subs	r3, #1
 8004460:	2201      	movs	r2, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	461a      	mov	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	b29a      	uxth	r2, r3
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	4413      	add	r3, r2
 8004478:	b298      	uxth	r0, r3
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <DrawChar+0x168>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	491b      	ldr	r1, [pc, #108]	; (80044ec <DrawChar+0x16c>)
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	4619      	mov	r1, r3
 8004490:	f7ff fcc8 	bl	8003e24 <BSP_LCD_DrawPixel>
 8004494:	e012      	b.n	80044bc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	b29a      	uxth	r2, r3
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	4413      	add	r3, r2
 800449e:	b298      	uxth	r0, r3
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <DrawChar+0x168>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <DrawChar+0x16c>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3304      	adds	r3, #4
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	88bb      	ldrh	r3, [r7, #4]
 80044b6:	4619      	mov	r1, r3
 80044b8:	f7ff fcb4 	bl	8003e24 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	3301      	adds	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	8a3b      	ldrh	r3, [r7, #16]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3c4      	bcc.n	8004454 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80044ca:	88bb      	ldrh	r3, [r7, #4]
 80044cc:	3301      	adds	r3, #1
 80044ce:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	8a7b      	ldrh	r3, [r7, #18]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d384      	bcc.n	80043e8 <DrawChar+0x68>
  }
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000800 	.word	0x20000800
 80044ec:	20000804 	.word	0x20000804

080044f0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <LL_FillBuffer+0x88>)
 8004500:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004504:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <LL_FillBuffer+0x8c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <LL_FillBuffer+0x90>)
 800450c:	2134      	movs	r1, #52	; 0x34
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	3348      	adds	r3, #72	; 0x48
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d103      	bne.n	8004524 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <LL_FillBuffer+0x88>)
 800451e:	2202      	movs	r2, #2
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	e002      	b.n	800452a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <LL_FillBuffer+0x88>)
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <LL_FillBuffer+0x88>)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004530:	4b11      	ldr	r3, [pc, #68]	; (8004578 <LL_FillBuffer+0x88>)
 8004532:	4a14      	ldr	r2, [pc, #80]	; (8004584 <LL_FillBuffer+0x94>)
 8004534:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004536:	4810      	ldr	r0, [pc, #64]	; (8004578 <LL_FillBuffer+0x88>)
 8004538:	f002 fa36 	bl	80069a8 <HAL_DMA2D_Init>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d115      	bne.n	800456e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <LL_FillBuffer+0x88>)
 8004546:	f002 fc9d 	bl	8006e84 <HAL_DMA2D_ConfigLayer>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10e      	bne.n	800456e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69f9      	ldr	r1, [r7, #28]
 800455a:	4807      	ldr	r0, [pc, #28]	; (8004578 <LL_FillBuffer+0x88>)
 800455c:	f002 fa6e 	bl	8006a3c <HAL_DMA2D_Start>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004566:	210a      	movs	r1, #10
 8004568:	4803      	ldr	r0, [pc, #12]	; (8004578 <LL_FillBuffer+0x88>)
 800456a:	f002 fa92 	bl	8006a92 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	200007c0 	.word	0x200007c0
 800457c:	20000800 	.word	0x20000800
 8004580:	20000718 	.word	0x20000718
 8004584:	4002b000 	.word	0x4002b000

08004588 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 8004598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800459c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80045aa:	4b17      	ldr	r3, [pc, #92]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045b2:	22ff      	movs	r2, #255	; 0xff
 80045b4:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045be:	2200      	movs	r2, #0
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045c4:	4a11      	ldr	r2, [pc, #68]	; (800460c <LL_ConvertLineToARGB8888+0x84>)
 80045c6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80045c8:	480f      	ldr	r0, [pc, #60]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045ca:	f002 f9ed 	bl	80069a8 <HAL_DMA2D_Init>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d115      	bne.n	8004600 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80045d4:	2101      	movs	r1, #1
 80045d6:	480c      	ldr	r0, [pc, #48]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045d8:	f002 fc54 	bl	8006e84 <HAL_DMA2D_ConfigLayer>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	2301      	movs	r3, #1
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4806      	ldr	r0, [pc, #24]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045ee:	f002 fa25 	bl	8006a3c <HAL_DMA2D_Start>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80045f8:	210a      	movs	r1, #10
 80045fa:	4803      	ldr	r0, [pc, #12]	; (8004608 <LL_ConvertLineToARGB8888+0x80>)
 80045fc:	f002 fa49 	bl	8006a92 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200007c0 	.word	0x200007c0
 800460c:	4002b000 	.word	0x4002b000

08004610 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004614:	4b29      	ldr	r3, [pc, #164]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004616:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <BSP_SDRAM_Init+0xb0>)
 8004618:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 800461c:	2202      	movs	r2, #2
 800461e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004620:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 8004622:	2207      	movs	r2, #7
 8004624:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 8004628:	2204      	movs	r2, #4
 800462a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 800462e:	2207      	movs	r2, #7
 8004630:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 8004634:	2202      	movs	r2, #2
 8004636:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 800463a:	2202      	movs	r2, #2
 800463c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 8004640:	2202      	movs	r2, #2
 8004642:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004646:	2200      	movs	r2, #0
 8004648:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800464a:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <BSP_SDRAM_Init+0xac>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004650:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004652:	2204      	movs	r2, #4
 8004654:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004656:	4b19      	ldr	r3, [pc, #100]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004658:	2210      	movs	r2, #16
 800465a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <BSP_SDRAM_Init+0xac>)
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004668:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <BSP_SDRAM_Init+0xac>)
 800466c:	2200      	movs	r2, #0
 800466e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004670:	4b12      	ldr	r3, [pc, #72]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004676:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <BSP_SDRAM_Init+0xac>)
 800467a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800467e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004682:	2200      	movs	r2, #0
 8004684:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004686:	2100      	movs	r1, #0
 8004688:	480c      	ldr	r0, [pc, #48]	; (80046bc <BSP_SDRAM_Init+0xac>)
 800468a:	f000 f87f 	bl	800478c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800468e:	490d      	ldr	r1, [pc, #52]	; (80046c4 <BSP_SDRAM_Init+0xb4>)
 8004690:	480a      	ldr	r0, [pc, #40]	; (80046bc <BSP_SDRAM_Init+0xac>)
 8004692:	f005 ff63 	bl	800a55c <HAL_SDRAM_Init>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <BSP_SDRAM_Init+0xb8>)
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e002      	b.n	80046aa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <BSP_SDRAM_Init+0xb8>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80046aa:	f240 6003 	movw	r0, #1539	; 0x603
 80046ae:	f000 f80d 	bl	80046cc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <BSP_SDRAM_Init+0xb8>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200008a0 	.word	0x200008a0
 80046c0:	a0000140 	.word	0xa0000140
 80046c4:	200008d4 	.word	0x200008d4
 80046c8:	20000038 	.word	0x20000038

080046cc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80046de:	4b29      	ldr	r3, [pc, #164]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046e0:	2210      	movs	r2, #16
 80046e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80046ea:	4b26      	ldr	r3, [pc, #152]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80046f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f4:	4923      	ldr	r1, [pc, #140]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046f6:	4824      	ldr	r0, [pc, #144]	; (8004788 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046f8:	f005 ff64 	bl	800a5c4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80046fc:	2001      	movs	r0, #1
 80046fe:	f001 f923 	bl	8005948 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004704:	2202      	movs	r2, #2
 8004706:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004708:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800470a:	2210      	movs	r2, #16
 800470c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004710:	2201      	movs	r2, #1
 8004712:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004716:	2200      	movs	r2, #0
 8004718:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800471a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471e:	4919      	ldr	r1, [pc, #100]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004720:	4819      	ldr	r0, [pc, #100]	; (8004788 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004722:	f005 ff4f 	bl	800a5c4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004728:	2203      	movs	r2, #3
 800472a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800472c:	4b15      	ldr	r3, [pc, #84]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800472e:	2210      	movs	r2, #16
 8004730:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004734:	2208      	movs	r2, #8
 8004736:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800473e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004742:	4910      	ldr	r1, [pc, #64]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004744:	4810      	ldr	r0, [pc, #64]	; (8004788 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004746:	f005 ff3d 	bl	800a5c4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800474a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800474e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004752:	2204      	movs	r2, #4
 8004754:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004758:	2210      	movs	r2, #16
 800475a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800475e:	2201      	movs	r2, #1
 8004760:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a07      	ldr	r2, [pc, #28]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004766:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800476c:	4905      	ldr	r1, [pc, #20]	; (8004784 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800476e:	4806      	ldr	r0, [pc, #24]	; (8004788 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004770:	f005 ff28 	bl	800a5c4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4804      	ldr	r0, [pc, #16]	; (8004788 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004778:	f005 ff59 	bl	800a62e <HAL_SDRAM_ProgramRefreshRate>
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200008f0 	.word	0x200008f0
 8004788:	200008a0 	.word	0x200008a0

0800478c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800478c:	b580      	push	{r7, lr}
 800478e:	b090      	sub	sp, #64	; 0x40
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004796:	4b70      	ldr	r3, [pc, #448]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	4a6f      	ldr	r2, [pc, #444]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6393      	str	r3, [r2, #56]	; 0x38
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80047ae:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	4a69      	ldr	r2, [pc, #420]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ba:	4b67      	ldr	r3, [pc, #412]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c6:	4b64      	ldr	r3, [pc, #400]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	4a63      	ldr	r2, [pc, #396]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
 80047d2:	4b61      	ldr	r3, [pc, #388]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047de:	4b5e      	ldr	r3, [pc, #376]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	4a5d      	ldr	r2, [pc, #372]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047e4:	f043 0308 	orr.w	r3, r3, #8
 80047e8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ea:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80047f6:	4b58      	ldr	r3, [pc, #352]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	4a57      	ldr	r2, [pc, #348]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 80047fc:	f043 0310 	orr.w	r3, r3, #16
 8004800:	6313      	str	r3, [r2, #48]	; 0x30
 8004802:	4b55      	ldr	r3, [pc, #340]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800480e:	4b52      	ldr	r3, [pc, #328]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a51      	ldr	r2, [pc, #324]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004814:	f043 0320 	orr.w	r3, r3, #32
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004826:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	4a4b      	ldr	r2, [pc, #300]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 800482c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004830:	6313      	str	r3, [r2, #48]	; 0x30
 8004832:	4b49      	ldr	r3, [pc, #292]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800483e:	4b46      	ldr	r3, [pc, #280]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a45      	ldr	r2, [pc, #276]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 8004844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <BSP_SDRAM_MspInit+0x1cc>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004856:	2302      	movs	r3, #2
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800485a:	2301      	movs	r3, #1
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800485e:	2302      	movs	r3, #2
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004862:	230c      	movs	r3, #12
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004866:	2308      	movs	r3, #8
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800486a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800486e:	4619      	mov	r1, r3
 8004870:	483a      	ldr	r0, [pc, #232]	; (800495c <BSP_SDRAM_MspInit+0x1d0>)
 8004872:	f002 fc35 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004876:	f24c 7303 	movw	r3, #50947	; 0xc703
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800487c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004880:	4619      	mov	r1, r3
 8004882:	4837      	ldr	r0, [pc, #220]	; (8004960 <BSP_SDRAM_MspInit+0x1d4>)
 8004884:	f002 fc2c 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004888:	f64f 7383 	movw	r3, #65411	; 0xff83
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800488e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004892:	4619      	mov	r1, r3
 8004894:	4833      	ldr	r0, [pc, #204]	; (8004964 <BSP_SDRAM_MspInit+0x1d8>)
 8004896:	f002 fc23 	bl	80070e0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800489a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80048a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a4:	4619      	mov	r1, r3
 80048a6:	4830      	ldr	r0, [pc, #192]	; (8004968 <BSP_SDRAM_MspInit+0x1dc>)
 80048a8:	f002 fc1a 	bl	80070e0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80048ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80048b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048b6:	4619      	mov	r1, r3
 80048b8:	482c      	ldr	r0, [pc, #176]	; (800496c <BSP_SDRAM_MspInit+0x1e0>)
 80048ba:	f002 fc11 	bl	80070e0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80048be:	2328      	movs	r3, #40	; 0x28
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80048c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c6:	4619      	mov	r1, r3
 80048c8:	4829      	ldr	r0, [pc, #164]	; (8004970 <BSP_SDRAM_MspInit+0x1e4>)
 80048ca:	f002 fc09 	bl	80070e0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048d6:	2280      	movs	r2, #128	; 0x80
 80048d8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048f0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048f8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 8004902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004906:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 800490a:	2200      	movs	r2, #0
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 8004910:	2203      	movs	r2, #3
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004914:	4b17      	ldr	r3, [pc, #92]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 8004916:	2200      	movs	r2, #0
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <BSP_SDRAM_MspInit+0x1ec>)
 8004924:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a12      	ldr	r2, [pc, #72]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
 800492c:	4a11      	ldr	r2, [pc, #68]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004932:	4810      	ldr	r0, [pc, #64]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 8004934:	f001 fe96 	bl	8006664 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004938:	480e      	ldr	r0, [pc, #56]	; (8004974 <BSP_SDRAM_MspInit+0x1e8>)
 800493a:	f001 fde5 	bl	8006508 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	210f      	movs	r1, #15
 8004942:	2038      	movs	r0, #56	; 0x38
 8004944:	f001 fcd6 	bl	80062f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004948:	2038      	movs	r0, #56	; 0x38
 800494a:	f001 fcef 	bl	800632c <HAL_NVIC_EnableIRQ>
}
 800494e:	bf00      	nop
 8004950:	3740      	adds	r7, #64	; 0x40
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	40020800 	.word	0x40020800
 8004960:	40020c00 	.word	0x40020c00
 8004964:	40021000 	.word	0x40021000
 8004968:	40021400 	.word	0x40021400
 800496c:	40021800 	.word	0x40021800
 8004970:	40021c00 	.word	0x40021c00
 8004974:	20000900 	.word	0x20000900
 8004978:	40026410 	.word	0x40026410

0800497c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	460a      	mov	r2, r1
 8004986:	80fb      	strh	r3, [r7, #6]
 8004988:	4613      	mov	r3, r2
 800498a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <BSP_TS_Init+0x68>)
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <BSP_TS_Init+0x6c>)
 8004998:	88bb      	ldrh	r3, [r7, #4]
 800499a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <BSP_TS_Init+0x70>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2070      	movs	r0, #112	; 0x70
 80049a2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <BSP_TS_Init+0x70>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2070      	movs	r0, #112	; 0x70
 80049aa:	4798      	blx	r3
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b51      	cmp	r3, #81	; 0x51
 80049b0:	d111      	bne.n	80049d6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <BSP_TS_Init+0x74>)
 80049b4:	4a0d      	ldr	r2, [pc, #52]	; (80049ec <BSP_TS_Init+0x70>)
 80049b6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <BSP_TS_Init+0x78>)
 80049ba:	2270      	movs	r2, #112	; 0x70
 80049bc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <BSP_TS_Init+0x7c>)
 80049c0:	2208      	movs	r2, #8
 80049c2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <BSP_TS_Init+0x74>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <BSP_TS_Init+0x78>)
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	b292      	uxth	r2, r2
 80049d0:	4610      	mov	r0, r2
 80049d2:	4798      	blx	r3
 80049d4:	e001      	b.n	80049da <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80049d6:	2303      	movs	r3, #3
 80049d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000964 	.word	0x20000964
 80049e8:	20000966 	.word	0x20000966
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000960 	.word	0x20000960
 80049f4:	20000969 	.word	0x20000969
 80049f8:	20000968 	.word	0x20000968

080049fc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b097      	sub	sp, #92	; 0x5c
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004a16:	4bb4      	ldr	r3, [pc, #720]	; (8004ce8 <BSP_TS_GetState+0x2ec>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	4ab3      	ldr	r2, [pc, #716]	; (8004cec <BSP_TS_GetState+0x2f0>)
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	b292      	uxth	r2, r2
 8004a22:	4610      	mov	r0, r2
 8004a24:	4798      	blx	r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	461a      	mov	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8196 	beq.w	8004d64 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3c:	e185      	b.n	8004d4a <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004a3e:	4baa      	ldr	r3, [pc, #680]	; (8004ce8 <BSP_TS_GetState+0x2ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	4aa9      	ldr	r2, [pc, #676]	; (8004cec <BSP_TS_GetState+0x2f0>)
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	b290      	uxth	r0, r2
 8004a4a:	f107 0120 	add.w	r1, r7, #32
 8004a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a50:	0052      	lsls	r2, r2, #1
 8004a52:	188c      	adds	r4, r1, r2
 8004a54:	f107 0114 	add.w	r1, r7, #20
 8004a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5a:	0052      	lsls	r2, r2, #1
 8004a5c:	440a      	add	r2, r1
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004a62:	4ba3      	ldr	r3, [pc, #652]	; (8004cf0 <BSP_TS_GetState+0x2f4>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d117      	bne.n	8004a9a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	3350      	adds	r3, #80	; 0x50
 8004a70:	443b      	add	r3, r7
 8004a72:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	3350      	adds	r3, #80	; 0x50
 8004a7c:	443b      	add	r3, r7
 8004a7e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	3350      	adds	r3, #80	; 0x50
 8004a88:	443b      	add	r3, r7
 8004a8a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	3350      	adds	r3, #80	; 0x50
 8004a94:	443b      	add	r3, r7
 8004a96:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004a9a:	4b95      	ldr	r3, [pc, #596]	; (8004cf0 <BSP_TS_GetState+0x2f4>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00e      	beq.n	8004ac4 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	3350      	adds	r3, #80	; 0x50
 8004aac:	443b      	add	r3, r7
 8004aae:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004ab2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	3350      	adds	r3, #80	; 0x50
 8004abe:	443b      	add	r3, r7
 8004ac0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004ac4:	4b8a      	ldr	r3, [pc, #552]	; (8004cf0 <BSP_TS_GetState+0x2f4>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	3350      	adds	r3, #80	; 0x50
 8004ad6:	443b      	add	r3, r7
 8004ad8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004adc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	3350      	adds	r3, #80	; 0x50
 8004ae8:	443b      	add	r3, r7
 8004aea:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004aee:	4b80      	ldr	r3, [pc, #512]	; (8004cf0 <BSP_TS_GetState+0x2f4>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	3350      	adds	r3, #80	; 0x50
 8004b00:	443b      	add	r3, r7
 8004b02:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	3350      	adds	r3, #80	; 0x50
 8004b0c:	443b      	add	r3, r7
 8004b0e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	3350      	adds	r3, #80	; 0x50
 8004b18:	443b      	add	r3, r7
 8004b1a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	3350      	adds	r3, #80	; 0x50
 8004b24:	443b      	add	r3, r7
 8004b26:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	3350      	adds	r3, #80	; 0x50
 8004b30:	443b      	add	r3, r7
 8004b32:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004b36:	4619      	mov	r1, r3
 8004b38:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <BSP_TS_GetState+0x2f8>)
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d90d      	bls.n	8004b60 <BSP_TS_GetState+0x164>
 8004b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	3350      	adds	r3, #80	; 0x50
 8004b4a:	443b      	add	r3, r7
 8004b4c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004b50:	4968      	ldr	r1, [pc, #416]	; (8004cf4 <BSP_TS_GetState+0x2f8>)
 8004b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	e00c      	b.n	8004b7a <BSP_TS_GetState+0x17e>
 8004b60:	4a64      	ldr	r2, [pc, #400]	; (8004cf4 <BSP_TS_GetState+0x2f8>)
 8004b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	3350      	adds	r3, #80	; 0x50
 8004b70:	443b      	add	r3, r7
 8004b72:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	3350      	adds	r3, #80	; 0x50
 8004b84:	443b      	add	r3, r7
 8004b86:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <BSP_TS_GetState+0x2fc>)
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d90d      	bls.n	8004bb4 <BSP_TS_GetState+0x1b8>
 8004b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	3350      	adds	r3, #80	; 0x50
 8004b9e:	443b      	add	r3, r7
 8004ba0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004ba4:	4954      	ldr	r1, [pc, #336]	; (8004cf8 <BSP_TS_GetState+0x2fc>)
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	e00c      	b.n	8004bce <BSP_TS_GetState+0x1d2>
 8004bb4:	4a50      	ldr	r2, [pc, #320]	; (8004cf8 <BSP_TS_GetState+0x2fc>)
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	3350      	adds	r3, #80	; 0x50
 8004bc4:	443b      	add	r3, r7
 8004bc6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004bd2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004bd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bda:	4413      	add	r3, r2
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	dd15      	ble.n	8004c0c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	3350      	adds	r3, #80	; 0x50
 8004be6:	443b      	add	r3, r7
 8004be8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004bec:	4619      	mov	r1, r3
 8004bee:	4a41      	ldr	r2, [pc, #260]	; (8004cf4 <BSP_TS_GetState+0x2f8>)
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	3350      	adds	r3, #80	; 0x50
 8004bfc:	443b      	add	r3, r7
 8004bfe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004c02:	4619      	mov	r1, r3
 8004c04:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <BSP_TS_GetState+0x2fc>)
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004c0c:	4b37      	ldr	r3, [pc, #220]	; (8004cec <BSP_TS_GetState+0x2f0>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b70      	cmp	r3, #112	; 0x70
 8004c12:	d119      	bne.n	8004c48 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	3350      	adds	r3, #80	; 0x50
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4413      	add	r3, r2
 8004c28:	460a      	mov	r2, r1
 8004c2a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	3350      	adds	r3, #80	; 0x50
 8004c32:	443b      	add	r3, r7
 8004c34:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	460a      	mov	r2, r1
 8004c44:	809a      	strh	r2, [r3, #4]
 8004c46:	e022      	b.n	8004c8e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004c48:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <BSP_TS_GetState+0x300>)
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4a29      	ldr	r2, [pc, #164]	; (8004cf4 <BSP_TS_GetState+0x2f8>)
 8004c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	0b1b      	lsrs	r3, r3, #12
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	460a      	mov	r2, r1
 8004c68:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <BSP_TS_GetState+0x304>)
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <BSP_TS_GetState+0x2fc>)
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	0b1b      	lsrs	r3, r3, #12
 8004c7e:	b299      	uxth	r1, r3
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c84:	3304      	adds	r3, #4
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <BSP_TS_GetState+0x2f0>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b298      	uxth	r0, r3
 8004c94:	f107 010c 	add.w	r1, r7, #12
 8004c98:	f107 0210 	add.w	r2, r7, #16
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ca6:	f7fd f81f 	bl	8001ce8 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	b2d9      	uxtb	r1, r3
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3316      	adds	r3, #22
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	b2d9      	uxtb	r1, r3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3320      	adds	r3, #32
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d835      	bhi.n	8004d3c <BSP_TS_GetState+0x340>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <BSP_TS_GetState+0x2dc>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d13 	.word	0x08004d13
 8004ce0:	08004d21 	.word	0x08004d21
 8004ce4:	08004d2f 	.word	0x08004d2f
 8004ce8:	20000960 	.word	0x20000960
 8004cec:	20000969 	.word	0x20000969
 8004cf0:	20000968 	.word	0x20000968
 8004cf4:	2000096c 	.word	0x2000096c
 8004cf8:	20000980 	.word	0x20000980
 8004cfc:	20000964 	.word	0x20000964
 8004d00:	20000966 	.word	0x20000966
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d08:	4413      	add	r3, r2
 8004d0a:	331b      	adds	r3, #27
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
          break;
 8004d10:	e018      	b.n	8004d44 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d16:	4413      	add	r3, r2
 8004d18:	331b      	adds	r3, #27
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	701a      	strb	r2, [r3, #0]
          break;
 8004d1e:	e011      	b.n	8004d44 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d24:	4413      	add	r3, r2
 8004d26:	331b      	adds	r3, #27
 8004d28:	2203      	movs	r2, #3
 8004d2a:	701a      	strb	r2, [r3, #0]
          break;
 8004d2c:	e00a      	b.n	8004d44 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d32:	4413      	add	r3, r2
 8004d34:	331b      	adds	r3, #27
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
          break;
 8004d3a:	e003      	b.n	8004d44 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004d42:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d46:	3301      	adds	r3, #1
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f4ff ae73 	bcc.w	8004a3e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f809 	bl	8004d70 <BSP_TS_Get_GestureId>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004d64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3754      	adds	r7, #84	; 0x54
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd90      	pop	{r4, r7, pc}

08004d70 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004d80:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <BSP_TS_Get_GestureId+0x100>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f107 0208 	add.w	r2, r7, #8
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fc ff92 	bl	8001cb6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b49      	cmp	r3, #73	; 0x49
 8004d96:	d05e      	beq.n	8004e56 <BSP_TS_Get_GestureId+0xe6>
 8004d98:	2b49      	cmp	r3, #73	; 0x49
 8004d9a:	d860      	bhi.n	8004e5e <BSP_TS_Get_GestureId+0xee>
 8004d9c:	2b1c      	cmp	r3, #28
 8004d9e:	d83f      	bhi.n	8004e20 <BSP_TS_Get_GestureId+0xb0>
 8004da0:	2b1c      	cmp	r3, #28
 8004da2:	d85c      	bhi.n	8004e5e <BSP_TS_Get_GestureId+0xee>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <BSP_TS_Get_GestureId+0x3c>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004e27 	.word	0x08004e27
 8004db0:	08004e5f 	.word	0x08004e5f
 8004db4:	08004e5f 	.word	0x08004e5f
 8004db8:	08004e5f 	.word	0x08004e5f
 8004dbc:	08004e5f 	.word	0x08004e5f
 8004dc0:	08004e5f 	.word	0x08004e5f
 8004dc4:	08004e5f 	.word	0x08004e5f
 8004dc8:	08004e5f 	.word	0x08004e5f
 8004dcc:	08004e5f 	.word	0x08004e5f
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004e5f 	.word	0x08004e5f
 8004dd8:	08004e5f 	.word	0x08004e5f
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004e5f 	.word	0x08004e5f
 8004de4:	08004e5f 	.word	0x08004e5f
 8004de8:	08004e5f 	.word	0x08004e5f
 8004dec:	08004e2f 	.word	0x08004e2f
 8004df0:	08004e5f 	.word	0x08004e5f
 8004df4:	08004e5f 	.word	0x08004e5f
 8004df8:	08004e5f 	.word	0x08004e5f
 8004dfc:	08004e37 	.word	0x08004e37
 8004e00:	08004e5f 	.word	0x08004e5f
 8004e04:	08004e5f 	.word	0x08004e5f
 8004e08:	08004e5f 	.word	0x08004e5f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e5f 	.word	0x08004e5f
 8004e14:	08004e5f 	.word	0x08004e5f
 8004e18:	08004e5f 	.word	0x08004e5f
 8004e1c:	08004e47 	.word	0x08004e47
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d014      	beq.n	8004e4e <BSP_TS_Get_GestureId+0xde>
 8004e24:	e01b      	b.n	8004e5e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e2c:	e01a      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e34:	e016      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e3c:	e012      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2203      	movs	r2, #3
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e44:	e00e      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e4c:	e00a      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2205      	movs	r2, #5
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e54:	e006      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2206      	movs	r2, #6
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004e5c:	e002      	b.n	8004e64 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
      break;
 8004e62:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000969 	.word	0x20000969

08004e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <HAL_MspInit+0x4c>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <HAL_MspInit+0x4c>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_MspInit+0x4c>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_MspInit+0x4c>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <HAL_MspInit+0x4c>)
 8004e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e9e:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <HAL_MspInit+0x4c>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	210f      	movs	r1, #15
 8004eae:	f06f 0001 	mvn.w	r0, #1
 8004eb2:	f001 fa1f 	bl	80062f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800

08004ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <HAL_InitTick+0xe0>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	4a32      	ldr	r2, [pc, #200]	; (8004fa4 <HAL_InitTick+0xe0>)
 8004eda:	f043 0310 	orr.w	r3, r3, #16
 8004ede:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_InitTick+0xe0>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004eec:	f107 0210 	add.w	r2, r7, #16
 8004ef0:	f107 0314 	add.w	r3, r7, #20
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f004 fa6c 	bl	80093d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004f06:	f004 fa3d 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 8004f0a:	6378      	str	r0, [r7, #52]	; 0x34
 8004f0c:	e004      	b.n	8004f18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004f0e:	f004 fa39 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 8004f12:	4603      	mov	r3, r0
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <HAL_InitTick+0xe4>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	0c9b      	lsrs	r3, r3, #18
 8004f22:	3b01      	subs	r3, #1
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <HAL_InitTick+0xe8>)
 8004f28:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <HAL_InitTick+0xec>)
 8004f2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004f2c:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <HAL_InitTick+0xe8>)
 8004f2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004f34:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <HAL_InitTick+0xe8>)
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <HAL_InitTick+0xe8>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <HAL_InitTick+0xe8>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_InitTick+0xe8>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004f4c:	4817      	ldr	r0, [pc, #92]	; (8004fac <HAL_InitTick+0xe8>)
 8004f4e:	f005 fc41 	bl	800a7d4 <HAL_TIM_Base_Init>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11b      	bne.n	8004f98 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004f60:	4812      	ldr	r0, [pc, #72]	; (8004fac <HAL_InitTick+0xe8>)
 8004f62:	f005 fc8f 	bl	800a884 <HAL_TIM_Base_Start_IT>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d111      	bne.n	8004f98 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f74:	2036      	movs	r0, #54	; 0x36
 8004f76:	f001 f9d9 	bl	800632c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b0f      	cmp	r3, #15
 8004f7e:	d808      	bhi.n	8004f92 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004f80:	2200      	movs	r2, #0
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	2036      	movs	r0, #54	; 0x36
 8004f86:	f001 f9b5 	bl	80062f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_InitTick+0xf0>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e002      	b.n	8004f98 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004f98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3738      	adds	r7, #56	; 0x38
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	431bde83 	.word	0x431bde83
 8004fac:	20000994 	.word	0x20000994
 8004fb0:	40001000 	.word	0x40001000
 8004fb4:	20000040 	.word	0x20000040

08004fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fbc:	e7fe      	b.n	8004fbc <NMI_Handler+0x4>

08004fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fc2:	e7fe      	b.n	8004fc2 <HardFault_Handler+0x4>

08004fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fc8:	e7fe      	b.n	8004fc8 <MemManage_Handler+0x4>

08004fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fce:	e7fe      	b.n	8004fce <BusFault_Handler+0x4>

08004fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fd4:	e7fe      	b.n	8004fd4 <UsageFault_Handler+0x4>

08004fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004fe8:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <USART1_IRQHandler+0x10>)
 8004fea:	f006 fa95 	bl	800b518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000be8 	.word	0x20000be8

08004ff8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <TIM6_DAC_IRQHandler+0x20>)
 8004ffe:	791b      	ldrb	r3, [r3, #4]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005006:	4804      	ldr	r0, [pc, #16]	; (8005018 <TIM6_DAC_IRQHandler+0x20>)
 8005008:	f001 f9c0 	bl	800638c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800500c:	4803      	ldr	r0, [pc, #12]	; (800501c <TIM6_DAC_IRQHandler+0x24>)
 800500e:	f005 fcb1 	bl	800a974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	2000015c 	.word	0x2000015c
 800501c:	20000994 	.word	0x20000994

08005020 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005024:	4802      	ldr	r0, [pc, #8]	; (8005030 <USART6_IRQHandler+0x10>)
 8005026:	f006 fa77 	bl	800b518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000c70 	.word	0x20000c70

08005034 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005038:	4802      	ldr	r0, [pc, #8]	; (8005044 <LTDC_IRQHandler+0x10>)
 800503a:	f003 fa39 	bl	80084b0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000568 	.word	0x20000568

08005048 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800504c:	4802      	ldr	r0, [pc, #8]	; (8005058 <DMA2D_IRQHandler+0x10>)
 800504e:	f001 fe09 	bl	8006c64 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000170 	.word	0x20000170

0800505c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005064:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <_sbrk+0x5c>)
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <_sbrk+0x60>)
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <_sbrk+0x64>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <_sbrk+0x64>)
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <_sbrk+0x68>)
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <_sbrk+0x64>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	429a      	cmp	r2, r3
 800508a:	d207      	bcs.n	800509c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800508c:	f00a f9de 	bl	800f44c <__errno>
 8005090:	4603      	mov	r3, r0
 8005092:	220c      	movs	r2, #12
 8005094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
 800509a:	e009      	b.n	80050b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <_sbrk+0x64>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <_sbrk+0x64>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <_sbrk+0x64>)
 80050ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050ae:	68fb      	ldr	r3, [r7, #12]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20050000 	.word	0x20050000
 80050bc:	00000400 	.word	0x00000400
 80050c0:	200009e0 	.word	0x200009e0
 80050c4:	20004a58 	.word	0x20004a58

080050c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SystemInit+0x20>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <SystemInit+0x20>)
 80050d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050f2:	f107 0310 	add.w	r3, r7, #16
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <MX_TIM1_Init+0xa0>)
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <MX_TIM1_Init+0xa4>)
 800510e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <MX_TIM1_Init+0xa0>)
 8005112:	2200      	movs	r2, #0
 8005114:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <MX_TIM1_Init+0xa0>)
 8005118:	2200      	movs	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <MX_TIM1_Init+0xa0>)
 800511e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005122:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <MX_TIM1_Init+0xa0>)
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800512a:	4b18      	ldr	r3, [pc, #96]	; (800518c <MX_TIM1_Init+0xa0>)
 800512c:	2200      	movs	r2, #0
 800512e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <MX_TIM1_Init+0xa0>)
 8005132:	2200      	movs	r2, #0
 8005134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005136:	4815      	ldr	r0, [pc, #84]	; (800518c <MX_TIM1_Init+0xa0>)
 8005138:	f005 fb4c 	bl	800a7d4 <HAL_TIM_Base_Init>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005142:	f7fd ff55 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800514a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	4619      	mov	r1, r3
 8005152:	480e      	ldr	r0, [pc, #56]	; (800518c <MX_TIM1_Init+0xa0>)
 8005154:	f005 fd2e 	bl	800abb4 <HAL_TIM_ConfigClockSource>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800515e:	f7fd ff47 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4806      	ldr	r0, [pc, #24]	; (800518c <MX_TIM1_Init+0xa0>)
 8005174:	f005 ff4a 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800517e:	f7fd ff37 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005182:	bf00      	nop
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200009e4 	.word	0x200009e4
 8005190:	40010000 	.word	0x40010000

08005194 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800519a:	f107 0310 	add.w	r3, r7, #16
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80051b2:	4b1e      	ldr	r3, [pc, #120]	; (800522c <MX_TIM2_Init+0x98>)
 80051b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <MX_TIM2_Init+0x98>)
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <MX_TIM2_Init+0x98>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <MX_TIM2_Init+0x98>)
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <MX_TIM2_Init+0x98>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051d4:	4b15      	ldr	r3, [pc, #84]	; (800522c <MX_TIM2_Init+0x98>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051da:	4814      	ldr	r0, [pc, #80]	; (800522c <MX_TIM2_Init+0x98>)
 80051dc:	f005 fafa 	bl	800a7d4 <HAL_TIM_Base_Init>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80051e6:	f7fd ff03 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	4619      	mov	r1, r3
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <MX_TIM2_Init+0x98>)
 80051f8:	f005 fcdc 	bl	800abb4 <HAL_TIM_ConfigClockSource>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005202:	f7fd fef5 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4806      	ldr	r0, [pc, #24]	; (800522c <MX_TIM2_Init+0x98>)
 8005214:	f005 fefa 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800521e:	f7fd fee7 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005222:	bf00      	nop
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000a30 	.word	0x20000a30

08005230 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005236:	f107 0310 	add.w	r3, r7, #16
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]
 800524c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800524e:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <MX_TIM3_Init+0x98>)
 8005252:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005256:	2200      	movs	r2, #0
 8005258:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <MX_TIM3_Init+0x94>)
 800525c:	2200      	movs	r2, #0
 800525e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005260:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005268:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <MX_TIM3_Init+0x94>)
 800526a:	2200      	movs	r2, #0
 800526c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005274:	4813      	ldr	r0, [pc, #76]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005276:	f005 faad 	bl	800a7d4 <HAL_TIM_Base_Init>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005280:	f7fd feb6 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4619      	mov	r1, r3
 8005290:	480c      	ldr	r0, [pc, #48]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005292:	f005 fc8f 	bl	800abb4 <HAL_TIM_ConfigClockSource>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800529c:	f7fd fea8 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4805      	ldr	r0, [pc, #20]	; (80052c4 <MX_TIM3_Init+0x94>)
 80052ae:	f005 fead 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80052b8:	f7fd fe9a 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80052bc:	bf00      	nop
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000a7c 	.word	0x20000a7c
 80052c8:	40000400 	.word	0x40000400

080052cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0310 	add.w	r3, r7, #16
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <MX_TIM5_Init+0x94>)
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <MX_TIM5_Init+0x98>)
 80052ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <MX_TIM5_Init+0x94>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <MX_TIM5_Init+0x94>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <MX_TIM5_Init+0x94>)
 80052fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005302:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <MX_TIM5_Init+0x94>)
 8005306:	2200      	movs	r2, #0
 8005308:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <MX_TIM5_Init+0x94>)
 800530c:	2200      	movs	r2, #0
 800530e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005310:	4813      	ldr	r0, [pc, #76]	; (8005360 <MX_TIM5_Init+0x94>)
 8005312:	f005 fa5f 	bl	800a7d4 <HAL_TIM_Base_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800531c:	f7fd fe68 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005326:	f107 0310 	add.w	r3, r7, #16
 800532a:	4619      	mov	r1, r3
 800532c:	480c      	ldr	r0, [pc, #48]	; (8005360 <MX_TIM5_Init+0x94>)
 800532e:	f005 fc41 	bl	800abb4 <HAL_TIM_ConfigClockSource>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005338:	f7fd fe5a 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <MX_TIM5_Init+0x94>)
 800534a:	f005 fe5f 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005354:	f7fd fe4c 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005358:	bf00      	nop
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000ac8 	.word	0x20000ac8
 8005364:	40000c00 	.word	0x40000c00

08005368 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800536e:	f107 0310 	add.w	r3, r7, #16
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005386:	4b20      	ldr	r3, [pc, #128]	; (8005408 <MX_TIM8_Init+0xa0>)
 8005388:	4a20      	ldr	r2, [pc, #128]	; (800540c <MX_TIM8_Init+0xa4>)
 800538a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <MX_TIM8_Init+0xa0>)
 800538e:	2200      	movs	r2, #0
 8005390:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005392:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <MX_TIM8_Init+0xa0>)
 8005394:	2200      	movs	r2, #0
 8005396:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <MX_TIM8_Init+0xa0>)
 800539a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800539e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <MX_TIM8_Init+0xa0>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <MX_TIM8_Init+0xa0>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ac:	4b16      	ldr	r3, [pc, #88]	; (8005408 <MX_TIM8_Init+0xa0>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80053b2:	4815      	ldr	r0, [pc, #84]	; (8005408 <MX_TIM8_Init+0xa0>)
 80053b4:	f005 fa0e 	bl	800a7d4 <HAL_TIM_Base_Init>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80053be:	f7fd fe17 	bl	8002ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80053c8:	f107 0310 	add.w	r3, r7, #16
 80053cc:	4619      	mov	r1, r3
 80053ce:	480e      	ldr	r0, [pc, #56]	; (8005408 <MX_TIM8_Init+0xa0>)
 80053d0:	f005 fbf0 	bl	800abb4 <HAL_TIM_ConfigClockSource>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80053da:	f7fd fe09 	bl	8002ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4806      	ldr	r0, [pc, #24]	; (8005408 <MX_TIM8_Init+0xa0>)
 80053f0:	f005 fe0c 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80053fa:	f7fd fdf9 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80053fe:	bf00      	nop
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000b14 	.word	0x20000b14
 800540c:	40010400 	.word	0x40010400

08005410 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08e      	sub	sp, #56	; 0x38
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3b      	ldr	r2, [pc, #236]	; (800551c <HAL_TIM_Base_MspInit+0x10c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10c      	bne.n	800544c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005432:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6453      	str	r3, [r2, #68]	; 0x44
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800544a:	e062      	b.n	8005512 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d10c      	bne.n	8005470 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005456:	4b32      	ldr	r3, [pc, #200]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a31      	ldr	r2, [pc, #196]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	69fb      	ldr	r3, [r7, #28]
}
 800546e:	e050      	b.n	8005512 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2b      	ldr	r2, [pc, #172]	; (8005524 <HAL_TIM_Base_MspInit+0x114>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10c      	bne.n	8005494 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	4a28      	ldr	r2, [pc, #160]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	6413      	str	r3, [r2, #64]	; 0x40
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
}
 8005492:	e03e      	b.n	8005512 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a23      	ldr	r2, [pc, #140]	; (8005528 <HAL_TIM_Base_MspInit+0x118>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d10c      	bne.n	80054b8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6413      	str	r3, [r2, #64]	; 0x40
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	697b      	ldr	r3, [r7, #20]
}
 80054b6:	e02c      	b.n	8005512 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_TIM_Base_MspInit+0x11c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d127      	bne.n	8005512 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054c8:	f043 0302 	orr.w	r3, r3, #2
 80054cc:	6453      	str	r3, [r2, #68]	; 0x44
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e4:	6313      	str	r3, [r2, #48]	; 0x30
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_TIM_Base_MspInit+0x110>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054f2:	2304      	movs	r3, #4
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	2302      	movs	r3, #2
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fe:	2300      	movs	r3, #0
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005502:	2303      	movs	r3, #3
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550a:	4619      	mov	r1, r3
 800550c:	4808      	ldr	r0, [pc, #32]	; (8005530 <HAL_TIM_Base_MspInit+0x120>)
 800550e:	f001 fde7 	bl	80070e0 <HAL_GPIO_Init>
}
 8005512:	bf00      	nop
 8005514:	3738      	adds	r7, #56	; 0x38
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40023800 	.word	0x40023800
 8005524:	40000400 	.word	0x40000400
 8005528:	40000c00 	.word	0x40000c00
 800552c:	40010400 	.word	0x40010400
 8005530:	40022000 	.word	0x40022000

08005534 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005538:	4b14      	ldr	r3, [pc, #80]	; (800558c <MX_UART7_Init+0x58>)
 800553a:	4a15      	ldr	r2, [pc, #84]	; (8005590 <MX_UART7_Init+0x5c>)
 800553c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800553e:	4b13      	ldr	r3, [pc, #76]	; (800558c <MX_UART7_Init+0x58>)
 8005540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005544:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <MX_UART7_Init+0x58>)
 8005548:	2200      	movs	r2, #0
 800554a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800554c:	4b0f      	ldr	r3, [pc, #60]	; (800558c <MX_UART7_Init+0x58>)
 800554e:	2200      	movs	r2, #0
 8005550:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <MX_UART7_Init+0x58>)
 8005554:	2200      	movs	r2, #0
 8005556:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <MX_UART7_Init+0x58>)
 800555a:	220c      	movs	r2, #12
 800555c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <MX_UART7_Init+0x58>)
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <MX_UART7_Init+0x58>)
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <MX_UART7_Init+0x58>)
 800556c:	2200      	movs	r2, #0
 800556e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <MX_UART7_Init+0x58>)
 8005572:	2200      	movs	r2, #0
 8005574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005576:	4805      	ldr	r0, [pc, #20]	; (800558c <MX_UART7_Init+0x58>)
 8005578:	f005 fdf4 	bl	800b164 <HAL_UART_Init>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005582:	f7fd fd35 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000b60 	.word	0x20000b60
 8005590:	40007800 	.word	0x40007800

08005594 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005598:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <MX_USART1_UART_Init+0x64>)
 800559c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055b8:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055ba:	220c      	movs	r2, #12
 80055bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80055d0:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055d2:	2210      	movs	r2, #16
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <MX_USART1_UART_Init+0x60>)
 80055e0:	f005 fdc0 	bl	800b164 <HAL_UART_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80055ea:	f7fd fd01 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000be8 	.word	0x20000be8
 80055f8:	40011000 	.word	0x40011000

080055fc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005600:	4b14      	ldr	r3, [pc, #80]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005602:	4a15      	ldr	r2, [pc, #84]	; (8005658 <MX_USART6_UART_Init+0x5c>)
 8005604:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800560c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800561a:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <MX_USART6_UART_Init+0x58>)
 800561c:	2200      	movs	r2, #0
 800561e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005622:	220c      	movs	r2, #12
 8005624:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <MX_USART6_UART_Init+0x58>)
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005634:	2200      	movs	r2, #0
 8005636:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <MX_USART6_UART_Init+0x58>)
 800563a:	2200      	movs	r2, #0
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800563e:	4805      	ldr	r0, [pc, #20]	; (8005654 <MX_USART6_UART_Init+0x58>)
 8005640:	f005 fd90 	bl	800b164 <HAL_UART_Init>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800564a:	f7fd fcd1 	bl	8002ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000c70 	.word	0x20000c70
 8005658:	40011400 	.word	0x40011400

0800565c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0b0      	sub	sp, #192	; 0xc0
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005664:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	60da      	str	r2, [r3, #12]
 8005672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005678:	2284      	movs	r2, #132	; 0x84
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f009 ff1f 	bl	800f4c0 <memset>
  if(uartHandle->Instance==UART7)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a7d      	ldr	r2, [pc, #500]	; (800587c <HAL_UART_MspInit+0x220>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d13d      	bne.n	8005708 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800568c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800569c:	4618      	mov	r0, r3
 800569e:	f003 fecb 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80056a8:	f7fd fca2 	bl	8002ff0 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80056ac:	4b74      	ldr	r3, [pc, #464]	; (8005880 <HAL_UART_MspInit+0x224>)
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	4a73      	ldr	r2, [pc, #460]	; (8005880 <HAL_UART_MspInit+0x224>)
 80056b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056b6:	6413      	str	r3, [r2, #64]	; 0x40
 80056b8:	4b71      	ldr	r3, [pc, #452]	; (8005880 <HAL_UART_MspInit+0x224>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80056c4:	4b6e      	ldr	r3, [pc, #440]	; (8005880 <HAL_UART_MspInit+0x224>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4a6d      	ldr	r2, [pc, #436]	; (8005880 <HAL_UART_MspInit+0x224>)
 80056ca:	f043 0320 	orr.w	r3, r3, #32
 80056ce:	6313      	str	r3, [r2, #48]	; 0x30
 80056d0:	4b6b      	ldr	r3, [pc, #428]	; (8005880 <HAL_UART_MspInit+0x224>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80056dc:	23c0      	movs	r3, #192	; 0xc0
 80056de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e2:	2302      	movs	r3, #2
 80056e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ee:	2303      	movs	r3, #3
 80056f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80056f4:	2308      	movs	r3, #8
 80056f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80056fe:	4619      	mov	r1, r3
 8005700:	4860      	ldr	r0, [pc, #384]	; (8005884 <HAL_UART_MspInit+0x228>)
 8005702:	f001 fced 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005706:	e0b4      	b.n	8005872 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a5e      	ldr	r2, [pc, #376]	; (8005888 <HAL_UART_MspInit+0x22c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d165      	bne.n	80057de <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005716:	2300      	movs	r3, #0
 8005718:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800571a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571e:	4618      	mov	r0, r3
 8005720:	f003 fe8a 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800572a:	f7fd fc61 	bl	8002ff0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800572e:	4b54      	ldr	r3, [pc, #336]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	4a53      	ldr	r2, [pc, #332]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005734:	f043 0310 	orr.w	r3, r3, #16
 8005738:	6453      	str	r3, [r2, #68]	; 0x44
 800573a:	4b51      	ldr	r3, [pc, #324]	; (8005880 <HAL_UART_MspInit+0x224>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005746:	4b4e      	ldr	r3, [pc, #312]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	4a4d      	ldr	r2, [pc, #308]	; (8005880 <HAL_UART_MspInit+0x224>)
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6313      	str	r3, [r2, #48]	; 0x30
 8005752:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800575e:	4b48      	ldr	r3, [pc, #288]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	4a47      	ldr	r2, [pc, #284]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	6313      	str	r3, [r2, #48]	; 0x30
 800576a:	4b45      	ldr	r3, [pc, #276]	; (8005880 <HAL_UART_MspInit+0x224>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800578e:	2307      	movs	r3, #7
 8005790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005794:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005798:	4619      	mov	r1, r3
 800579a:	483c      	ldr	r0, [pc, #240]	; (800588c <HAL_UART_MspInit+0x230>)
 800579c:	f001 fca0 	bl	80070e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80057a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a8:	2302      	movs	r3, #2
 80057aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057ba:	2307      	movs	r3, #7
 80057bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80057c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80057c4:	4619      	mov	r1, r3
 80057c6:	4832      	ldr	r0, [pc, #200]	; (8005890 <HAL_UART_MspInit+0x234>)
 80057c8:	f001 fc8a 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80057cc:	2200      	movs	r2, #0
 80057ce:	2105      	movs	r1, #5
 80057d0:	2025      	movs	r0, #37	; 0x25
 80057d2:	f000 fd8f 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057d6:	2025      	movs	r0, #37	; 0x25
 80057d8:	f000 fda8 	bl	800632c <HAL_NVIC_EnableIRQ>
}
 80057dc:	e049      	b.n	8005872 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART6)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <HAL_UART_MspInit+0x238>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d144      	bne.n	8005872 <HAL_UART_MspInit+0x216>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80057e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057f8:	4618      	mov	r0, r3
 80057fa:	f003 fe1d 	bl	8009438 <HAL_RCCEx_PeriphCLKConfig>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8005804:	f7fd fbf4 	bl	8002ff0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <HAL_UART_MspInit+0x224>)
 800580a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_UART_MspInit+0x224>)
 800580e:	f043 0320 	orr.w	r3, r3, #32
 8005812:	6453      	str	r3, [r2, #68]	; 0x44
 8005814:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <HAL_UART_MspInit+0x224>)
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	6313      	str	r3, [r2, #48]	; 0x30
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <HAL_UART_MspInit+0x224>)
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005838:	23c0      	movs	r3, #192	; 0xc0
 800583a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583e:	2302      	movs	r3, #2
 8005840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005844:	2300      	movs	r3, #0
 8005846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800584a:	2303      	movs	r3, #3
 800584c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005850:	2308      	movs	r3, #8
 8005852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005856:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800585a:	4619      	mov	r1, r3
 800585c:	480e      	ldr	r0, [pc, #56]	; (8005898 <HAL_UART_MspInit+0x23c>)
 800585e:	f001 fc3f 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005862:	2200      	movs	r2, #0
 8005864:	2105      	movs	r1, #5
 8005866:	2047      	movs	r0, #71	; 0x47
 8005868:	f000 fd44 	bl	80062f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800586c:	2047      	movs	r0, #71	; 0x47
 800586e:	f000 fd5d 	bl	800632c <HAL_NVIC_EnableIRQ>
}
 8005872:	bf00      	nop
 8005874:	37c0      	adds	r7, #192	; 0xc0
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40007800 	.word	0x40007800
 8005880:	40023800 	.word	0x40023800
 8005884:	40021400 	.word	0x40021400
 8005888:	40011000 	.word	0x40011000
 800588c:	40020400 	.word	0x40020400
 8005890:	40020000 	.word	0x40020000
 8005894:	40011400 	.word	0x40011400
 8005898:	40020800 	.word	0x40020800

0800589c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800589c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80058a0:	480d      	ldr	r0, [pc, #52]	; (80058d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80058a2:	490e      	ldr	r1, [pc, #56]	; (80058dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80058a4:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80058a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058a8:	e002      	b.n	80058b0 <LoopCopyDataInit>

080058aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ae:	3304      	adds	r3, #4

080058b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058b4:	d3f9      	bcc.n	80058aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058b6:	4a0b      	ldr	r2, [pc, #44]	; (80058e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80058b8:	4c0b      	ldr	r4, [pc, #44]	; (80058e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80058ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058bc:	e001      	b.n	80058c2 <LoopFillZerobss>

080058be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058c0:	3204      	adds	r2, #4

080058c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058c4:	d3fb      	bcc.n	80058be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80058c6:	f7ff fbff 	bl	80050c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058ca:	f009 fdc5 	bl	800f458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058ce:	f7fd f88b 	bl	80029e8 <main>
  bx  lr    
 80058d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80058d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058dc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80058e0:	08051e48 	.word	0x08051e48
  ldr r2, =_sbss
 80058e4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80058e8:	20004a58 	.word	0x20004a58

080058ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058ec:	e7fe      	b.n	80058ec <ADC_IRQHandler>

080058ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058f2:	2003      	movs	r0, #3
 80058f4:	f000 fcf3 	bl	80062de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058f8:	200f      	movs	r0, #15
 80058fa:	f7ff fae3 	bl	8004ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058fe:	f7ff fab9 	bl	8004e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_IncTick+0x20>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_IncTick+0x24>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4413      	add	r3, r2
 8005918:	4a04      	ldr	r2, [pc, #16]	; (800592c <HAL_IncTick+0x24>)
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000044 	.word	0x20000044
 800592c:	20000cf8 	.word	0x20000cf8

08005930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return uwTick;
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_GetTick+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000cf8 	.word	0x20000cf8

08005948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005950:	f7ff ffee 	bl	8005930 <HAL_GetTick>
 8005954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d005      	beq.n	800596e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <HAL_Delay+0x44>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800596e:	bf00      	nop
 8005970:	f7ff ffde 	bl	8005930 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	429a      	cmp	r2, r3
 800597e:	d8f7      	bhi.n	8005970 <HAL_Delay+0x28>
  {
  }
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000044 	.word	0x20000044

08005990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e031      	b.n	8005a0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fb fb38 	bl	8001024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d116      	bne.n	80059fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d2:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <HAL_ADC_Init+0x84>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	f043 0202 	orr.w	r2, r3, #2
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fad6 	bl	8005f90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
 80059fa:	e001      	b.n	8005a00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	ffffeefd 	.word	0xffffeefd

08005a18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_ADC_Start+0x1a>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e0ad      	b.n	8005b8e <HAL_ADC_Start+0x176>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d018      	beq.n	8005a7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005a58:	4b50      	ldr	r3, [pc, #320]	; (8005b9c <HAL_ADC_Start+0x184>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a50      	ldr	r2, [pc, #320]	; (8005ba0 <HAL_ADC_Start+0x188>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	0c9a      	lsrs	r2, r3, #18
 8005a64:	4613      	mov	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a6c:	e002      	b.n	8005a74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f9      	bne.n	8005a6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d175      	bne.n	8005b74 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a8c:	4b45      	ldr	r3, [pc, #276]	; (8005ba4 <HAL_ADC_Start+0x18c>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005aae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d106      	bne.n	8005ad2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	f023 0206 	bic.w	r2, r3, #6
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	645a      	str	r2, [r3, #68]	; 0x44
 8005ad0:	e002      	b.n	8005ad8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005ae8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005aea:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <HAL_ADC_Start+0x190>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d143      	bne.n	8005b8c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	e03a      	b.n	8005b8c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a24      	ldr	r2, [pc, #144]	; (8005bac <HAL_ADC_Start+0x194>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10e      	bne.n	8005b3e <HAL_ADC_Start+0x126>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b3c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_ADC_Start+0x190>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d120      	bne.n	8005b8c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_ADC_Start+0x198>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d11b      	bne.n	8005b8c <HAL_ADC_Start+0x174>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d114      	bne.n	8005b8c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b70:	609a      	str	r2, [r3, #8]
 8005b72:	e00b      	b.n	8005b8c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f043 0210 	orr.w	r2, r3, #16
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	f043 0201 	orr.w	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	2000003c 	.word	0x2000003c
 8005ba0:	431bde83 	.word	0x431bde83
 8005ba4:	fffff8fe 	.word	0xfffff8fe
 8005ba8:	40012300 	.word	0x40012300
 8005bac:	40012000 	.word	0x40012000
 8005bb0:	40012200 	.word	0x40012200

08005bb4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	d113      	bne.n	8005bfa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d10b      	bne.n	8005bfa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e063      	b.n	8005cc2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bfa:	f7ff fe99 	bl	8005930 <HAL_GetTick>
 8005bfe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c00:	e021      	b.n	8005c46 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d01d      	beq.n	8005c46 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_ADC_PollForConversion+0x6c>
 8005c10:	f7ff fe8e 	bl	8005930 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d212      	bcs.n	8005c46 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d00b      	beq.n	8005c46 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e03d      	b.n	8005cc2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d1d6      	bne.n	8005c02 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0212 	mvn.w	r2, #18
 8005c5c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d123      	bne.n	8005cc0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d11f      	bne.n	8005cc0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x1c>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e136      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x28a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b09      	cmp	r3, #9
 8005d0e:	d93a      	bls.n	8005d86 <HAL_ADC_ConfigChannel+0xa2>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d18:	d035      	beq.n	8005d86 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68d9      	ldr	r1, [r3, #12]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3b1e      	subs	r3, #30
 8005d30:	2207      	movs	r2, #7
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43da      	mvns	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a8d      	ldr	r2, [pc, #564]	; (8005f7c <HAL_ADC_ConfigChannel+0x298>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10a      	bne.n	8005d60 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68d9      	ldr	r1, [r3, #12]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	061a      	lsls	r2, r3, #24
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d5e:	e035      	b.n	8005dcc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68d9      	ldr	r1, [r3, #12]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4618      	mov	r0, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4403      	add	r3, r0
 8005d78:	3b1e      	subs	r3, #30
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d84:	e022      	b.n	8005dcc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6919      	ldr	r1, [r3, #16]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	4613      	mov	r3, r2
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	4413      	add	r3, r2
 8005d9a:	2207      	movs	r2, #7
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	43da      	mvns	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	400a      	ands	r2, r1
 8005da8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6919      	ldr	r1, [r3, #16]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4618      	mov	r0, r3
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4403      	add	r3, r0
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	d824      	bhi.n	8005e1e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	3b05      	subs	r3, #5
 8005de6:	221f      	movs	r2, #31
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43da      	mvns	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	400a      	ands	r2, r1
 8005df4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	4618      	mov	r0, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3b05      	subs	r3, #5
 8005e10:	fa00 f203 	lsl.w	r2, r0, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8005e1c:	e04c      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d824      	bhi.n	8005e70 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	3b23      	subs	r3, #35	; 0x23
 8005e38:	221f      	movs	r2, #31
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	400a      	ands	r2, r1
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4618      	mov	r0, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	3b23      	subs	r3, #35	; 0x23
 8005e62:	fa00 f203 	lsl.w	r2, r0, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6e:	e023      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	3b41      	subs	r3, #65	; 0x41
 8005e82:	221f      	movs	r2, #31
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43da      	mvns	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	400a      	ands	r2, r1
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3b41      	subs	r3, #65	; 0x41
 8005eac:	fa00 f203 	lsl.w	r2, r0, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a30      	ldr	r2, [pc, #192]	; (8005f80 <HAL_ADC_ConfigChannel+0x29c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x1f4>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eca:	d105      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005ecc:	4b2d      	ldr	r3, [pc, #180]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ed2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005ed6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a28      	ldr	r2, [pc, #160]	; (8005f80 <HAL_ADC_ConfigChannel+0x29c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10f      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x21e>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b12      	cmp	r3, #18
 8005ee8:	d10b      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005eea:	4b26      	ldr	r3, [pc, #152]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4a25      	ldr	r2, [pc, #148]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ef0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ef4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005ef6:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005efc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f00:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <HAL_ADC_ConfigChannel+0x29c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d12b      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x280>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_ADC_ConfigChannel+0x298>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <HAL_ADC_ConfigChannel+0x23a>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b11      	cmp	r3, #17
 8005f1c:	d122      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005f1e:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4a18      	ldr	r2, [pc, #96]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005f28:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005f2a:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a10      	ldr	r2, [pc, #64]	; (8005f7c <HAL_ADC_ConfigChannel+0x298>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d111      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_ADC_ConfigChannel+0x2a4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <HAL_ADC_ConfigChannel+0x2a8>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	0c9a      	lsrs	r2, r3, #18
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f56:	e002      	b.n	8005f5e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f9      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	10000012 	.word	0x10000012
 8005f80:	40012000 	.word	0x40012000
 8005f84:	40012300 	.word	0x40012300
 8005f88:	2000003c 	.word	0x2000003c
 8005f8c:	431bde83 	.word	0x431bde83

08005f90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f98:	4b78      	ldr	r3, [pc, #480]	; (800617c <ADC_Init+0x1ec>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a77      	ldr	r2, [pc, #476]	; (800617c <ADC_Init+0x1ec>)
 8005f9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005fa2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005fa4:	4b75      	ldr	r3, [pc, #468]	; (800617c <ADC_Init+0x1ec>)
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4973      	ldr	r1, [pc, #460]	; (800617c <ADC_Init+0x1ec>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6859      	ldr	r1, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6899      	ldr	r1, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	4a58      	ldr	r2, [pc, #352]	; (8006180 <ADC_Init+0x1f0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6899      	ldr	r1, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6899      	ldr	r1, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	e00f      	b.n	800608a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006088:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0202 	bic.w	r2, r2, #2
 8006098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6899      	ldr	r1, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	005a      	lsls	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01b      	beq.n	80060f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6859      	ldr	r1, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	3b01      	subs	r3, #1
 80060e4:	035a      	lsls	r2, r3, #13
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	e007      	b.n	8006100 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	3b01      	subs	r3, #1
 800611c:	051a      	lsls	r2, r3, #20
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006142:	025a      	lsls	r2, r3, #9
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6899      	ldr	r1, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	029a      	lsls	r2, r3, #10
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012300 	.word	0x40012300
 8006180:	0f000001 	.word	0x0f000001

08006184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <__NVIC_SetPriorityGrouping+0x40>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061a0:	4013      	ands	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <__NVIC_SetPriorityGrouping+0x44>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <__NVIC_SetPriorityGrouping+0x40>)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	60d3      	str	r3, [r2, #12]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	e000ed00 	.word	0xe000ed00
 80061c8:	05fa0000 	.word	0x05fa0000

080061cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <__NVIC_GetPriorityGrouping+0x18>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	f003 0307 	and.w	r3, r3, #7
}
 80061da:	4618      	mov	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db0b      	blt.n	8006212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f003 021f 	and.w	r2, r3, #31
 8006200:	4907      	ldr	r1, [pc, #28]	; (8006220 <__NVIC_EnableIRQ+0x38>)
 8006202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2001      	movs	r0, #1
 800620a:	fa00 f202 	lsl.w	r2, r0, r2
 800620e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	e000e100 	.word	0xe000e100

08006224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006234:	2b00      	cmp	r3, #0
 8006236:	db0a      	blt.n	800624e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	b2da      	uxtb	r2, r3
 800623c:	490c      	ldr	r1, [pc, #48]	; (8006270 <__NVIC_SetPriority+0x4c>)
 800623e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006242:	0112      	lsls	r2, r2, #4
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	440b      	add	r3, r1
 8006248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800624c:	e00a      	b.n	8006264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4908      	ldr	r1, [pc, #32]	; (8006274 <__NVIC_SetPriority+0x50>)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	3b04      	subs	r3, #4
 800625c:	0112      	lsls	r2, r2, #4
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	440b      	add	r3, r1
 8006262:	761a      	strb	r2, [r3, #24]
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	e000e100 	.word	0xe000e100
 8006274:	e000ed00 	.word	0xe000ed00

08006278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006278:	b480      	push	{r7}
 800627a:	b089      	sub	sp, #36	; 0x24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f1c3 0307 	rsb	r3, r3, #7
 8006292:	2b04      	cmp	r3, #4
 8006294:	bf28      	it	cs
 8006296:	2304      	movcs	r3, #4
 8006298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3304      	adds	r3, #4
 800629e:	2b06      	cmp	r3, #6
 80062a0:	d902      	bls.n	80062a8 <NVIC_EncodePriority+0x30>
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	3b03      	subs	r3, #3
 80062a6:	e000      	b.n	80062aa <NVIC_EncodePriority+0x32>
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43da      	mvns	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	401a      	ands	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062c0:	f04f 31ff 	mov.w	r1, #4294967295
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	43d9      	mvns	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062d0:	4313      	orrs	r3, r2
         );
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3724      	adds	r7, #36	; 0x24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ff4c 	bl	8006184 <__NVIC_SetPriorityGrouping>
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006306:	f7ff ff61 	bl	80061cc <__NVIC_GetPriorityGrouping>
 800630a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f7ff ffb1 	bl	8006278 <NVIC_EncodePriority>
 8006316:	4602      	mov	r2, r0
 8006318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff ff80 	bl	8006224 <__NVIC_SetPriority>
}
 8006324:	bf00      	nop
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ff54 	bl	80061e8 <__NVIC_EnableIRQ>
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e014      	b.n	8006384 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	791b      	ldrb	r3, [r3, #4]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fa fef2 	bl	8001154 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a2:	d120      	bne.n	80063e6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b2:	d118      	bne.n	80063e6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2204      	movs	r2, #4
 80063b8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063de:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f82d 	bl	8006440 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f4:	d120      	bne.n	8006438 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006404:	d118      	bne.n	8006438 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2204      	movs	r2, #4
 800640a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f043 0202 	orr.w	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006420:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006430:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f85d 	bl	80064f2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	795b      	ldrb	r3, [r3, #5]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_DAC_ConfigChannel+0x18>
 8006468:	2302      	movs	r3, #2
 800646a:	e03c      	b.n	80064e6 <HAL_DAC_ConfigChannel+0x92>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2202      	movs	r2, #2
 8006476:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	f640 72fe 	movw	r2, #4094	; 0xffe
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43db      	mvns	r3, r3
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4013      	ands	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	22c0      	movs	r2, #192	; 0xc0
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43da      	mvns	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	400a      	ands	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006514:	f7ff fa0c 	bl	8005930 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e099      	b.n	8006658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006544:	e00f      	b.n	8006566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006546:	f7ff f9f3 	bl	8005930 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b05      	cmp	r3, #5
 8006552:	d908      	bls.n	8006566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2203      	movs	r2, #3
 800655e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e078      	b.n	8006658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e8      	bne.n	8006546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4b38      	ldr	r3, [pc, #224]	; (8006660 <HAL_DMA_Init+0x158>)
 8006580:	4013      	ands	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800659e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d107      	bne.n	80065d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	4313      	orrs	r3, r2
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d117      	bne.n	800662a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f94f 	bl	80068b0 <DMA_CheckFifoParam>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2240      	movs	r2, #64	; 0x40
 800661c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006626:	2301      	movs	r3, #1
 8006628:	e016      	b.n	8006658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f906 	bl	8006844 <DMA_CalcBaseAndBitshift>
 8006638:	4603      	mov	r3, r0
 800663a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	223f      	movs	r2, #63	; 0x3f
 8006642:	409a      	lsls	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	f010803f 	.word	0xf010803f

08006664 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e050      	b.n	8006718 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d101      	bne.n	8006686 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
 8006684:	e048      	b.n	8006718 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2221      	movs	r2, #33	; 0x21
 80066c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8bc 	bl	8006844 <DMA_CalcBaseAndBitshift>
 80066cc:	4603      	mov	r3, r0
 80066ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	223f      	movs	r2, #63	; 0x3f
 80066d6:	409a      	lsls	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800672e:	f7ff f8ff 	bl	8005930 <HAL_GetTick>
 8006732:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d008      	beq.n	8006752 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e052      	b.n	80067f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0216 	bic.w	r2, r2, #22
 8006760:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695a      	ldr	r2, [r3, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006770:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <HAL_DMA_Abort+0x62>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0208 	bic.w	r2, r2, #8
 8006790:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0201 	bic.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067a2:	e013      	b.n	80067cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067a4:	f7ff f8c4 	bl	8005930 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	d90c      	bls.n	80067cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2203      	movs	r2, #3
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e015      	b.n	80067f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e4      	bne.n	80067a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	223f      	movs	r2, #63	; 0x3f
 80067e0:	409a      	lsls	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d004      	beq.n	800681e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2280      	movs	r2, #128	; 0x80
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e00c      	b.n	8006838 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2205      	movs	r2, #5
 8006822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0201 	bic.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	3b10      	subs	r3, #16
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <DMA_CalcBaseAndBitshift+0x60>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	091b      	lsrs	r3, r3, #4
 800685c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800685e:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <DMA_CalcBaseAndBitshift+0x64>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d908      	bls.n	8006884 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <DMA_CalcBaseAndBitshift+0x68>)
 800687a:	4013      	ands	r3, r2
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	659a      	str	r2, [r3, #88]	; 0x58
 8006882:	e006      	b.n	8006892 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	4b08      	ldr	r3, [pc, #32]	; (80068ac <DMA_CalcBaseAndBitshift+0x68>)
 800688c:	4013      	ands	r3, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	aaaaaaab 	.word	0xaaaaaaab
 80068a8:	08051d9c 	.word	0x08051d9c
 80068ac:	fffffc00 	.word	0xfffffc00

080068b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11f      	bne.n	800690a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d856      	bhi.n	800697e <DMA_CheckFifoParam+0xce>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <DMA_CheckFifoParam+0x28>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068e9 	.word	0x080068e9
 80068dc:	080068fb 	.word	0x080068fb
 80068e0:	080068e9 	.word	0x080068e9
 80068e4:	0800697f 	.word	0x0800697f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d046      	beq.n	8006982 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f8:	e043      	b.n	8006982 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006902:	d140      	bne.n	8006986 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006908:	e03d      	b.n	8006986 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006912:	d121      	bne.n	8006958 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b03      	cmp	r3, #3
 8006918:	d837      	bhi.n	800698a <DMA_CheckFifoParam+0xda>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <DMA_CheckFifoParam+0x70>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006931 	.word	0x08006931
 8006924:	08006937 	.word	0x08006937
 8006928:	08006931 	.word	0x08006931
 800692c:	08006949 	.word	0x08006949
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	e030      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d025      	beq.n	800698e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006946:	e022      	b.n	800698e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006950:	d11f      	bne.n	8006992 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006956:	e01c      	b.n	8006992 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d903      	bls.n	8006966 <DMA_CheckFifoParam+0xb6>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d003      	beq.n	800696c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006964:	e018      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	73fb      	strb	r3, [r7, #15]
      break;
 800696a:	e015      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
      break;
 800697c:	e00b      	b.n	8006996 <DMA_CheckFifoParam+0xe6>
      break;
 800697e:	bf00      	nop
 8006980:	e00a      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      break;
 8006982:	bf00      	nop
 8006984:	e008      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      break;
 8006986:	bf00      	nop
 8006988:	e006      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      break;
 800698a:	bf00      	nop
 800698c:	e004      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      break;
 800698e:	bf00      	nop
 8006990:	e002      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      break;   
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
      break;
 8006996:	bf00      	nop
    }
  } 
  
  return status; 
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e039      	b.n	8006a2e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fa fc3a 	bl	8001248 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f8:	f023 0107 	bic.w	r1, r3, #7
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <HAL_DMA2D_Init+0x90>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68d1      	ldr	r1, [r2, #12]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	ffffc000 	.word	0xffffc000

08006a3c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_DMA2D_Start+0x1c>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e018      	b.n	8006a8a <HAL_DMA2D_Start+0x4e>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 fa98 	bl	8006fa8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d056      	beq.n	8006b5c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aae:	f7fe ff3f 	bl	8005930 <HAL_GetTick>
 8006ab2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ab4:	e04b      	b.n	8006b4e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d023      	beq.n	8006b10 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	f043 0202 	orr.w	r2, r3, #2
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	f043 0201 	orr.w	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2204      	movs	r2, #4
 8006b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0a5      	b.n	8006c5c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d01a      	beq.n	8006b4e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b18:	f7fe ff0a 	bl	8005930 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d302      	bcc.n	8006b2e <HAL_DMA2D_PollForTransfer+0x9c>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10f      	bne.n	8006b4e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	f043 0220 	orr.w	r2, r3, #32
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e086      	b.n	8006c5c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0ac      	beq.n	8006ab6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d061      	beq.n	8006c42 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b7e:	f7fe fed7 	bl	8005930 <HAL_GetTick>
 8006b82:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b84:	e056      	b.n	8006c34 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d02e      	beq.n	8006bf6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	f043 0204 	orr.w	r2, r3, #4
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	f043 0202 	orr.w	r2, r3, #2
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	f043 0201 	orr.w	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2229      	movs	r2, #41	; 0x29
 8006be0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2204      	movs	r2, #4
 8006be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e032      	b.n	8006c5c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfc:	d01a      	beq.n	8006c34 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bfe:	f7fe fe97 	bl	8005930 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d302      	bcc.n	8006c14 <HAL_DMA2D_PollForTransfer+0x182>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10f      	bne.n	8006c34 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2203      	movs	r2, #3
 8006c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e013      	b.n	8006c5c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0a1      	beq.n	8006b86 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2212      	movs	r2, #18
 8006c48:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d026      	beq.n	8006cd4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d021      	beq.n	8006cd4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c9e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	f043 0201 	orr.w	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d026      	beq.n	8006d2c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d021      	beq.n	8006d2c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cf6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	f043 0202 	orr.w	r2, r3, #2
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2204      	movs	r2, #4
 8006d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d026      	beq.n	8006d84 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d021      	beq.n	8006d84 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2208      	movs	r2, #8
 8006d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	f043 0204 	orr.w	r2, r3, #4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2204      	movs	r2, #4
 8006d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00e      	beq.n	8006db6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2204      	movs	r2, #4
 8006dae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f853 	bl	8006e5c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d024      	beq.n	8006e0a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01f      	beq.n	8006e0a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006dd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2202      	movs	r2, #2
 8006de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01f      	beq.n	8006e54 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01a      	beq.n	8006e54 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2210      	movs	r2, #16
 8006e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f80e 	bl	8006e70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_DMA2D_ConfigLayer+0x20>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e079      	b.n	8006f98 <HAL_DMA2D_ConfigLayer+0x114>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	3318      	adds	r3, #24
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006ece:	4b35      	ldr	r3, [pc, #212]	; (8006fa4 <HAL_DMA2D_ConfigLayer+0x120>)
 8006ed0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b0a      	cmp	r3, #10
 8006ed8:	d003      	beq.n	8006ee2 <HAL_DMA2D_ConfigLayer+0x5e>
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b09      	cmp	r3, #9
 8006ee0:	d107      	bne.n	8006ef2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e005      	b.n	8006efe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	061b      	lsls	r3, r3, #24
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d120      	bne.n	8006f46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	ea02 0103 	and.w	r1, r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b0a      	cmp	r3, #10
 8006f2c:	d003      	beq.n	8006f36 <HAL_DMA2D_ConfigLayer+0xb2>
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b09      	cmp	r3, #9
 8006f34:	d127      	bne.n	8006f86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
 8006f44:	e01f      	b.n	8006f86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	ea02 0103 	and.w	r1, r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b0a      	cmp	r3, #10
 8006f6e:	d003      	beq.n	8006f78 <HAL_DMA2D_ConfigLayer+0xf4>
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d106      	bne.n	8006f86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006f84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	ff03000f 	.word	0xff03000f

08006fa8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b08b      	sub	sp, #44	; 0x2c
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	041a      	lsls	r2, r3, #16
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fe0:	d174      	bne.n	80070cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fe8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ff8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d108      	bne.n	800701a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	431a      	orrs	r2, r3
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	4313      	orrs	r3, r2
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	e053      	b.n	80070c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d106      	bne.n	8007030 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4313      	orrs	r3, r2
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	e048      	b.n	80070c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d111      	bne.n	800705c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	0cdb      	lsrs	r3, r3, #19
 800703c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	0a9b      	lsrs	r3, r3, #10
 8007042:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	08db      	lsrs	r3, r3, #3
 8007048:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	02db      	lsls	r3, r3, #11
 8007052:	4313      	orrs	r3, r2
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
 800705a:	e032      	b.n	80070c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b03      	cmp	r3, #3
 8007062:	d117      	bne.n	8007094 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	0fdb      	lsrs	r3, r3, #31
 8007068:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	0cdb      	lsrs	r3, r3, #19
 800706e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	0adb      	lsrs	r3, r3, #11
 8007074:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	08db      	lsrs	r3, r3, #3
 800707a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	029b      	lsls	r3, r3, #10
 8007084:	431a      	orrs	r2, r3
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	03db      	lsls	r3, r3, #15
 800708a:	4313      	orrs	r3, r2
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	e016      	b.n	80070c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	0f1b      	lsrs	r3, r3, #28
 8007098:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	0d1b      	lsrs	r3, r3, #20
 800709e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	0b1b      	lsrs	r3, r3, #12
 80070a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	011a      	lsls	r2, r3, #4
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	431a      	orrs	r2, r3
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	031b      	lsls	r3, r3, #12
 80070ba:	4313      	orrs	r3, r2
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80070ca:	e003      	b.n	80070d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	60da      	str	r2, [r3, #12]
}
 80070d4:	bf00      	nop
 80070d6:	372c      	adds	r7, #44	; 0x2c
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b089      	sub	sp, #36	; 0x24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80070ea:	2300      	movs	r3, #0
 80070ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	e175      	b.n	80073ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007100:	2201      	movs	r2, #1
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4013      	ands	r3, r2
 8007112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	429a      	cmp	r2, r3
 800711a:	f040 8164 	bne.w	80073e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b01      	cmp	r3, #1
 8007128:	d005      	beq.n	8007136 <HAL_GPIO_Init+0x56>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d130      	bne.n	8007198 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	2203      	movs	r2, #3
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	43db      	mvns	r3, r3
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4013      	ands	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4313      	orrs	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800716c:	2201      	movs	r2, #1
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	43db      	mvns	r3, r3
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	4013      	ands	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 0201 	and.w	r2, r3, #1
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	4313      	orrs	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d017      	beq.n	80071d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	2203      	movs	r2, #3
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	43db      	mvns	r3, r3
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	4013      	ands	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 0303 	and.w	r3, r3, #3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d123      	bne.n	8007228 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	08da      	lsrs	r2, r3, #3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3208      	adds	r2, #8
 80071e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	220f      	movs	r2, #15
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4013      	ands	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	08da      	lsrs	r2, r3, #3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3208      	adds	r2, #8
 8007222:	69b9      	ldr	r1, [r7, #24]
 8007224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	2203      	movs	r2, #3
 8007234:	fa02 f303 	lsl.w	r3, r2, r3
 8007238:	43db      	mvns	r3, r3
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	4013      	ands	r3, r2
 800723e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 0203 	and.w	r2, r3, #3
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	fa02 f303 	lsl.w	r3, r2, r3
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	4313      	orrs	r3, r2
 8007254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80be 	beq.w	80073e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800726a:	4b66      	ldr	r3, [pc, #408]	; (8007404 <HAL_GPIO_Init+0x324>)
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	4a65      	ldr	r2, [pc, #404]	; (8007404 <HAL_GPIO_Init+0x324>)
 8007270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007274:	6453      	str	r3, [r2, #68]	; 0x44
 8007276:	4b63      	ldr	r3, [pc, #396]	; (8007404 <HAL_GPIO_Init+0x324>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007282:	4a61      	ldr	r2, [pc, #388]	; (8007408 <HAL_GPIO_Init+0x328>)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	089b      	lsrs	r3, r3, #2
 8007288:	3302      	adds	r3, #2
 800728a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	220f      	movs	r2, #15
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	43db      	mvns	r3, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4013      	ands	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a58      	ldr	r2, [pc, #352]	; (800740c <HAL_GPIO_Init+0x32c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d037      	beq.n	800731e <HAL_GPIO_Init+0x23e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a57      	ldr	r2, [pc, #348]	; (8007410 <HAL_GPIO_Init+0x330>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d031      	beq.n	800731a <HAL_GPIO_Init+0x23a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a56      	ldr	r2, [pc, #344]	; (8007414 <HAL_GPIO_Init+0x334>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d02b      	beq.n	8007316 <HAL_GPIO_Init+0x236>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a55      	ldr	r2, [pc, #340]	; (8007418 <HAL_GPIO_Init+0x338>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d025      	beq.n	8007312 <HAL_GPIO_Init+0x232>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a54      	ldr	r2, [pc, #336]	; (800741c <HAL_GPIO_Init+0x33c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d01f      	beq.n	800730e <HAL_GPIO_Init+0x22e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a53      	ldr	r2, [pc, #332]	; (8007420 <HAL_GPIO_Init+0x340>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d019      	beq.n	800730a <HAL_GPIO_Init+0x22a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a52      	ldr	r2, [pc, #328]	; (8007424 <HAL_GPIO_Init+0x344>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <HAL_GPIO_Init+0x226>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a51      	ldr	r2, [pc, #324]	; (8007428 <HAL_GPIO_Init+0x348>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00d      	beq.n	8007302 <HAL_GPIO_Init+0x222>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a50      	ldr	r2, [pc, #320]	; (800742c <HAL_GPIO_Init+0x34c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d007      	beq.n	80072fe <HAL_GPIO_Init+0x21e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a4f      	ldr	r2, [pc, #316]	; (8007430 <HAL_GPIO_Init+0x350>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d101      	bne.n	80072fa <HAL_GPIO_Init+0x21a>
 80072f6:	2309      	movs	r3, #9
 80072f8:	e012      	b.n	8007320 <HAL_GPIO_Init+0x240>
 80072fa:	230a      	movs	r3, #10
 80072fc:	e010      	b.n	8007320 <HAL_GPIO_Init+0x240>
 80072fe:	2308      	movs	r3, #8
 8007300:	e00e      	b.n	8007320 <HAL_GPIO_Init+0x240>
 8007302:	2307      	movs	r3, #7
 8007304:	e00c      	b.n	8007320 <HAL_GPIO_Init+0x240>
 8007306:	2306      	movs	r3, #6
 8007308:	e00a      	b.n	8007320 <HAL_GPIO_Init+0x240>
 800730a:	2305      	movs	r3, #5
 800730c:	e008      	b.n	8007320 <HAL_GPIO_Init+0x240>
 800730e:	2304      	movs	r3, #4
 8007310:	e006      	b.n	8007320 <HAL_GPIO_Init+0x240>
 8007312:	2303      	movs	r3, #3
 8007314:	e004      	b.n	8007320 <HAL_GPIO_Init+0x240>
 8007316:	2302      	movs	r3, #2
 8007318:	e002      	b.n	8007320 <HAL_GPIO_Init+0x240>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_GPIO_Init+0x240>
 800731e:	2300      	movs	r3, #0
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	f002 0203 	and.w	r2, r2, #3
 8007326:	0092      	lsls	r2, r2, #2
 8007328:	4093      	lsls	r3, r2
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	4313      	orrs	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007330:	4935      	ldr	r1, [pc, #212]	; (8007408 <HAL_GPIO_Init+0x328>)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	089b      	lsrs	r3, r3, #2
 8007336:	3302      	adds	r3, #2
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800733e:	4b3d      	ldr	r3, [pc, #244]	; (8007434 <HAL_GPIO_Init+0x354>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	43db      	mvns	r3, r3
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	4013      	ands	r3, r2
 800734c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007362:	4a34      	ldr	r2, [pc, #208]	; (8007434 <HAL_GPIO_Init+0x354>)
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007368:	4b32      	ldr	r3, [pc, #200]	; (8007434 <HAL_GPIO_Init+0x354>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	43db      	mvns	r3, r3
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	4013      	ands	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800738c:	4a29      	ldr	r2, [pc, #164]	; (8007434 <HAL_GPIO_Init+0x354>)
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007392:	4b28      	ldr	r3, [pc, #160]	; (8007434 <HAL_GPIO_Init+0x354>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	43db      	mvns	r3, r3
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4013      	ands	r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073b6:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <HAL_GPIO_Init+0x354>)
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80073bc:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <HAL_GPIO_Init+0x354>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	4013      	ands	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073e0:	4a14      	ldr	r2, [pc, #80]	; (8007434 <HAL_GPIO_Init+0x354>)
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3301      	adds	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b0f      	cmp	r3, #15
 80073f0:	f67f ae86 	bls.w	8007100 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	3724      	adds	r7, #36	; 0x24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800
 8007408:	40013800 	.word	0x40013800
 800740c:	40020000 	.word	0x40020000
 8007410:	40020400 	.word	0x40020400
 8007414:	40020800 	.word	0x40020800
 8007418:	40020c00 	.word	0x40020c00
 800741c:	40021000 	.word	0x40021000
 8007420:	40021400 	.word	0x40021400
 8007424:	40021800 	.word	0x40021800
 8007428:	40021c00 	.word	0x40021c00
 800742c:	40022000 	.word	0x40022000
 8007430:	40022400 	.word	0x40022400
 8007434:	40013c00 	.word	0x40013c00

08007438 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800744a:	2300      	movs	r3, #0
 800744c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e0d9      	b.n	8007608 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007454:	2201      	movs	r2, #1
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4013      	ands	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	429a      	cmp	r2, r3
 800746c:	f040 80c9 	bne.w	8007602 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007470:	4a6b      	ldr	r2, [pc, #428]	; (8007620 <HAL_GPIO_DeInit+0x1e8>)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	089b      	lsrs	r3, r3, #2
 8007476:	3302      	adds	r3, #2
 8007478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	220f      	movs	r2, #15
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	4013      	ands	r3, r2
 8007490:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a63      	ldr	r2, [pc, #396]	; (8007624 <HAL_GPIO_DeInit+0x1ec>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d037      	beq.n	800750a <HAL_GPIO_DeInit+0xd2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a62      	ldr	r2, [pc, #392]	; (8007628 <HAL_GPIO_DeInit+0x1f0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d031      	beq.n	8007506 <HAL_GPIO_DeInit+0xce>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a61      	ldr	r2, [pc, #388]	; (800762c <HAL_GPIO_DeInit+0x1f4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d02b      	beq.n	8007502 <HAL_GPIO_DeInit+0xca>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a60      	ldr	r2, [pc, #384]	; (8007630 <HAL_GPIO_DeInit+0x1f8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d025      	beq.n	80074fe <HAL_GPIO_DeInit+0xc6>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a5f      	ldr	r2, [pc, #380]	; (8007634 <HAL_GPIO_DeInit+0x1fc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01f      	beq.n	80074fa <HAL_GPIO_DeInit+0xc2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a5e      	ldr	r2, [pc, #376]	; (8007638 <HAL_GPIO_DeInit+0x200>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d019      	beq.n	80074f6 <HAL_GPIO_DeInit+0xbe>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a5d      	ldr	r2, [pc, #372]	; (800763c <HAL_GPIO_DeInit+0x204>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <HAL_GPIO_DeInit+0xba>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a5c      	ldr	r2, [pc, #368]	; (8007640 <HAL_GPIO_DeInit+0x208>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00d      	beq.n	80074ee <HAL_GPIO_DeInit+0xb6>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a5b      	ldr	r2, [pc, #364]	; (8007644 <HAL_GPIO_DeInit+0x20c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d007      	beq.n	80074ea <HAL_GPIO_DeInit+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a5a      	ldr	r2, [pc, #360]	; (8007648 <HAL_GPIO_DeInit+0x210>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d101      	bne.n	80074e6 <HAL_GPIO_DeInit+0xae>
 80074e2:	2309      	movs	r3, #9
 80074e4:	e012      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074e6:	230a      	movs	r3, #10
 80074e8:	e010      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074ea:	2308      	movs	r3, #8
 80074ec:	e00e      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074ee:	2307      	movs	r3, #7
 80074f0:	e00c      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074f2:	2306      	movs	r3, #6
 80074f4:	e00a      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074f6:	2305      	movs	r3, #5
 80074f8:	e008      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074fa:	2304      	movs	r3, #4
 80074fc:	e006      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 80074fe:	2303      	movs	r3, #3
 8007500:	e004      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 8007502:	2302      	movs	r3, #2
 8007504:	e002      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <HAL_GPIO_DeInit+0xd4>
 800750a:	2300      	movs	r3, #0
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	f002 0203 	and.w	r2, r2, #3
 8007512:	0092      	lsls	r2, r2, #2
 8007514:	4093      	lsls	r3, r2
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	d132      	bne.n	8007582 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800751c:	4b4b      	ldr	r3, [pc, #300]	; (800764c <HAL_GPIO_DeInit+0x214>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	43db      	mvns	r3, r3
 8007524:	4949      	ldr	r1, [pc, #292]	; (800764c <HAL_GPIO_DeInit+0x214>)
 8007526:	4013      	ands	r3, r2
 8007528:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800752a:	4b48      	ldr	r3, [pc, #288]	; (800764c <HAL_GPIO_DeInit+0x214>)
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	43db      	mvns	r3, r3
 8007532:	4946      	ldr	r1, [pc, #280]	; (800764c <HAL_GPIO_DeInit+0x214>)
 8007534:	4013      	ands	r3, r2
 8007536:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007538:	4b44      	ldr	r3, [pc, #272]	; (800764c <HAL_GPIO_DeInit+0x214>)
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	43db      	mvns	r3, r3
 8007540:	4942      	ldr	r1, [pc, #264]	; (800764c <HAL_GPIO_DeInit+0x214>)
 8007542:	4013      	ands	r3, r2
 8007544:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007546:	4b41      	ldr	r3, [pc, #260]	; (800764c <HAL_GPIO_DeInit+0x214>)
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	43db      	mvns	r3, r3
 800754e:	493f      	ldr	r1, [pc, #252]	; (800764c <HAL_GPIO_DeInit+0x214>)
 8007550:	4013      	ands	r3, r2
 8007552:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	220f      	movs	r2, #15
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007564:	4a2e      	ldr	r2, [pc, #184]	; (8007620 <HAL_GPIO_DeInit+0x1e8>)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	3302      	adds	r3, #2
 800756c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	43da      	mvns	r2, r3
 8007574:	482a      	ldr	r0, [pc, #168]	; (8007620 <HAL_GPIO_DeInit+0x1e8>)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	089b      	lsrs	r3, r3, #2
 800757a:	400a      	ands	r2, r1
 800757c:	3302      	adds	r3, #2
 800757e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	2103      	movs	r1, #3
 800758c:	fa01 f303 	lsl.w	r3, r1, r3
 8007590:	43db      	mvns	r3, r3
 8007592:	401a      	ands	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	08da      	lsrs	r2, r3, #3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3208      	adds	r2, #8
 80075a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	220f      	movs	r2, #15
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	08d2      	lsrs	r2, r2, #3
 80075b8:	4019      	ands	r1, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3208      	adds	r2, #8
 80075be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	2103      	movs	r1, #3
 80075cc:	fa01 f303 	lsl.w	r3, r1, r3
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	2101      	movs	r1, #1
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	fa01 f303 	lsl.w	r3, r1, r3
 80075e4:	43db      	mvns	r3, r3
 80075e6:	401a      	ands	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	2103      	movs	r1, #3
 80075f6:	fa01 f303 	lsl.w	r3, r1, r3
 80075fa:	43db      	mvns	r3, r3
 80075fc:	401a      	ands	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	3301      	adds	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	f67f af22 	bls.w	8007454 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40013800 	.word	0x40013800
 8007624:	40020000 	.word	0x40020000
 8007628:	40020400 	.word	0x40020400
 800762c:	40020800 	.word	0x40020800
 8007630:	40020c00 	.word	0x40020c00
 8007634:	40021000 	.word	0x40021000
 8007638:	40021400 	.word	0x40021400
 800763c:	40021800 	.word	0x40021800
 8007640:	40021c00 	.word	0x40021c00
 8007644:	40022000 	.word	0x40022000
 8007648:	40022400 	.word	0x40022400
 800764c:	40013c00 	.word	0x40013c00

08007650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	887b      	ldrh	r3, [r7, #2]
 8007662:	4013      	ands	r3, r2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007668:	2301      	movs	r3, #1
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	e001      	b.n	8007672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	807b      	strh	r3, [r7, #2]
 800768c:	4613      	mov	r3, r2
 800768e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007690:	787b      	ldrb	r3, [r7, #1]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007696:	887a      	ldrh	r2, [r7, #2]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800769c:	e003      	b.n	80076a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800769e:	887b      	ldrh	r3, [r7, #2]
 80076a0:	041a      	lsls	r2, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	619a      	str	r2, [r3, #24]
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e07f      	b.n	80077c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fa ff1c 	bl	8002518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	; 0x24
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d107      	bne.n	800772e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800772a:	609a      	str	r2, [r3, #8]
 800772c:	e006      	b.n	800773c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800773a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d104      	bne.n	800774e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800774c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6859      	ldr	r1, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <HAL_I2C_Init+0x11c>)
 800775a:	430b      	orrs	r3, r1
 800775c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800776c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69d9      	ldr	r1, [r3, #28]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1a      	ldr	r2, [r3, #32]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	02008000 	.word	0x02008000

080077d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e021      	b.n	800782a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2224      	movs	r2, #36	; 0x24
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0201 	bic.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fa ff32 	bl	8002668 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4603      	mov	r3, r0
 8007844:	817b      	strh	r3, [r7, #10]
 8007846:	460b      	mov	r3, r1
 8007848:	813b      	strh	r3, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b20      	cmp	r3, #32
 8007858:	f040 80f9 	bne.w	8007a4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_I2C_Mem_Write+0x34>
 8007862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0ed      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_I2C_Mem_Write+0x4e>
 800787e:	2302      	movs	r3, #2
 8007880:	e0e6      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800788a:	f7fe f851 	bl	8005930 <HAL_GetTick>
 800788e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	2319      	movs	r3, #25
 8007896:	2201      	movs	r2, #1
 8007898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fad1 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0d1      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2221      	movs	r2, #33	; 0x21
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a3a      	ldr	r2, [r7, #32]
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078d4:	88f8      	ldrh	r0, [r7, #6]
 80078d6:	893a      	ldrh	r2, [r7, #8]
 80078d8:	8979      	ldrh	r1, [r7, #10]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4603      	mov	r3, r0
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f9e1 	bl	8007cac <I2C_RequestMemoryWrite>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0a9      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2bff      	cmp	r3, #255	; 0xff
 8007904:	d90e      	bls.n	8007924 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	22ff      	movs	r2, #255	; 0xff
 800790a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007910:	b2da      	uxtb	r2, r3
 8007912:	8979      	ldrh	r1, [r7, #10]
 8007914:	2300      	movs	r3, #0
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fc2d 	bl	800817c <I2C_TransferConfig>
 8007922:	e00f      	b.n	8007944 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	b2da      	uxtb	r2, r3
 8007934:	8979      	ldrh	r1, [r7, #10]
 8007936:	2300      	movs	r3, #0
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fc1c 	bl	800817c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fabb 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e07b      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	781a      	ldrb	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d034      	beq.n	80079fc <HAL_I2C_Mem_Write+0x1c8>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d130      	bne.n	80079fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	2200      	movs	r2, #0
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fa4d 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e04d      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2bff      	cmp	r3, #255	; 0xff
 80079bc:	d90e      	bls.n	80079dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	8979      	ldrh	r1, [r7, #10]
 80079cc:	2300      	movs	r3, #0
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fbd1 	bl	800817c <I2C_TransferConfig>
 80079da:	e00f      	b.n	80079fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	8979      	ldrh	r1, [r7, #10]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fbc0 	bl	800817c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d19e      	bne.n	8007944 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fa9a 	bl	8007f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e01a      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6859      	ldr	r1, [r3, #4]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_I2C_Mem_Write+0x224>)
 8007a2e:	400b      	ands	r3, r1
 8007a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	fe00e800 	.word	0xfe00e800

08007a5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	817b      	strh	r3, [r7, #10]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	813b      	strh	r3, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	f040 80fd 	bne.w	8007c7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_I2C_Mem_Read+0x34>
 8007a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0f1      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_I2C_Mem_Read+0x4e>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e0ea      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fd ff3d 	bl	8005930 <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	2319      	movs	r3, #25
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f9bd 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e0d5      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2222      	movs	r2, #34	; 0x22
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a3a      	ldr	r2, [r7, #32]
 8007aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007afc:	88f8      	ldrh	r0, [r7, #6]
 8007afe:	893a      	ldrh	r2, [r7, #8]
 8007b00:	8979      	ldrh	r1, [r7, #10]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f921 	bl	8007d54 <I2C_RequestMemoryRead>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0ad      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2bff      	cmp	r3, #255	; 0xff
 8007b2c:	d90e      	bls.n	8007b4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	22ff      	movs	r2, #255	; 0xff
 8007b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	8979      	ldrh	r1, [r7, #10]
 8007b3c:	4b52      	ldr	r3, [pc, #328]	; (8007c88 <HAL_I2C_Mem_Read+0x22c>)
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fb19 	bl	800817c <I2C_TransferConfig>
 8007b4a:	e00f      	b.n	8007b6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	8979      	ldrh	r1, [r7, #10]
 8007b5e:	4b4a      	ldr	r3, [pc, #296]	; (8007c88 <HAL_I2C_Mem_Read+0x22c>)
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fb08 	bl	800817c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	2200      	movs	r2, #0
 8007b74:	2104      	movs	r1, #4
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f964 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e07c      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d034      	beq.n	8007c2c <HAL_I2C_Mem_Read+0x1d0>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d130      	bne.n	8007c2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 f935 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e04d      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2bff      	cmp	r3, #255	; 0xff
 8007bec:	d90e      	bls.n	8007c0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	22ff      	movs	r2, #255	; 0xff
 8007bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	8979      	ldrh	r1, [r7, #10]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fab9 	bl	800817c <I2C_TransferConfig>
 8007c0a:	e00f      	b.n	8007c2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	8979      	ldrh	r1, [r7, #10]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 faa8 	bl	800817c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d19a      	bne.n	8007b6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f982 	bl	8007f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e01a      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6859      	ldr	r1, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <HAL_I2C_Mem_Read+0x230>)
 8007c5e:	400b      	ands	r3, r1
 8007c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e000      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c7e:	2302      	movs	r3, #2
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	80002400 	.word	0x80002400
 8007c8c:	fe00e800 	.word	0xfe00e800

08007c90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c9e:	b2db      	uxtb	r3, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	817b      	strh	r3, [r7, #10]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	813b      	strh	r3, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	8979      	ldrh	r1, [r7, #10]
 8007ccc:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <I2C_RequestMemoryWrite+0xa4>)
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fa51 	bl	800817c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	69b9      	ldr	r1, [r7, #24]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f8f0 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e02c      	b.n	8007d48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cee:	88fb      	ldrh	r3, [r7, #6]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d105      	bne.n	8007d00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cf4:	893b      	ldrh	r3, [r7, #8]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8007cfe:	e015      	b.n	8007d2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d00:	893b      	ldrh	r3, [r7, #8]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f8d6 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e012      	b.n	8007d48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d22:	893b      	ldrh	r3, [r7, #8]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2200      	movs	r2, #0
 8007d34:	2180      	movs	r1, #128	; 0x80
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f884 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e000      	b.n	8007d48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	80002000 	.word	0x80002000

08007d54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	817b      	strh	r3, [r7, #10]
 8007d66:	460b      	mov	r3, r1
 8007d68:	813b      	strh	r3, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	8979      	ldrh	r1, [r7, #10]
 8007d74:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <I2C_RequestMemoryRead+0xa4>)
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f9fe 	bl	800817c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	69b9      	ldr	r1, [r7, #24]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 f89d 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e02c      	b.n	8007dee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d105      	bne.n	8007da6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28
 8007da4:	e015      	b.n	8007dd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007da6:	893b      	ldrh	r3, [r7, #8]
 8007da8:	0a1b      	lsrs	r3, r3, #8
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f883 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e012      	b.n	8007dee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc8:	893b      	ldrh	r3, [r7, #8]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2140      	movs	r1, #64	; 0x40
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f831 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	80002000 	.word	0x80002000

08007dfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d103      	bne.n	8007e1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2200      	movs	r2, #0
 8007e18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d007      	beq.n	8007e38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	619a      	str	r2, [r3, #24]
  }
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e54:	e022      	b.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d01e      	beq.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5e:	f7fd fd67 	bl	8005930 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d302      	bcc.n	8007e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d113      	bne.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e00f      	b.n	8007ebc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	bf0c      	ite	eq
 8007eac:	2301      	moveq	r3, #1
 8007eae:	2300      	movne	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d0cd      	beq.n	8007e56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ed0:	e02c      	b.n	8007f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f870 	bl	8007fbc <I2C_IsErrorOccurred>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e02a      	b.n	8007f3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d01e      	beq.n	8007f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eee:	f7fd fd1f 	bl	8005930 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d302      	bcc.n	8007f04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d113      	bne.n	8007f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f08:	f043 0220 	orr.w	r2, r3, #32
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e007      	b.n	8007f3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d1cb      	bne.n	8007ed2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f50:	e028      	b.n	8007fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f830 	bl	8007fbc <I2C_IsErrorOccurred>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e026      	b.n	8007fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f66:	f7fd fce3 	bl	8005930 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d302      	bcc.n	8007f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d113      	bne.n	8007fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e007      	b.n	8007fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d1cf      	bne.n	8007f52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08a      	sub	sp, #40	; 0x28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d068      	beq.n	80080ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2210      	movs	r2, #16
 8007fee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ff0:	e049      	b.n	8008086 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d045      	beq.n	8008086 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ffa:	f7fd fc99 	bl	8005930 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	429a      	cmp	r2, r3
 8008008:	d302      	bcc.n	8008010 <I2C_IsErrorOccurred+0x54>
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d13a      	bne.n	8008086 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008022:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008032:	d121      	bne.n	8008078 <I2C_IsErrorOccurred+0xbc>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800803a:	d01d      	beq.n	8008078 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800803c:	7cfb      	ldrb	r3, [r7, #19]
 800803e:	2b20      	cmp	r3, #32
 8008040:	d01a      	beq.n	8008078 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008050:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008052:	f7fd fc6d 	bl	8005930 <HAL_GetTick>
 8008056:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008058:	e00e      	b.n	8008078 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800805a:	f7fd fc69 	bl	8005930 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b19      	cmp	r3, #25
 8008066:	d907      	bls.n	8008078 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	f043 0320 	orr.w	r3, r3, #32
 800806e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008076:	e006      	b.n	8008086 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b20      	cmp	r3, #32
 8008084:	d1e9      	bne.n	800805a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b20      	cmp	r3, #32
 8008092:	d003      	beq.n	800809c <I2C_IsErrorOccurred+0xe0>
 8008094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0aa      	beq.n	8007ff2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800809c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d103      	bne.n	80080ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2220      	movs	r2, #32
 80080aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	f043 0304 	orr.w	r3, r3, #4
 80080b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f043 0308 	orr.w	r3, r3, #8
 80080f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	f043 0302 	orr.w	r3, r3, #2
 8008116:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01c      	beq.n	800816a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff fe63 	bl	8007dfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6859      	ldr	r1, [r3, #4]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <I2C_IsErrorOccurred+0x1bc>)
 8008142:	400b      	ands	r3, r1
 8008144:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	431a      	orrs	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800816a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800816e:	4618      	mov	r0, r3
 8008170:	3728      	adds	r7, #40	; 0x28
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	fe00e800 	.word	0xfe00e800

0800817c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	607b      	str	r3, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	817b      	strh	r3, [r7, #10]
 800818a:	4613      	mov	r3, r2
 800818c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800818e:	897b      	ldrh	r3, [r7, #10]
 8008190:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008194:	7a7b      	ldrb	r3, [r7, #9]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800819c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	0d5b      	lsrs	r3, r3, #21
 80081b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <I2C_TransferConfig+0x60>)
 80081bc:	430b      	orrs	r3, r1
 80081be:	43db      	mvns	r3, r3
 80081c0:	ea02 0103 	and.w	r1, r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	03ff63ff 	.word	0x03ff63ff

080081e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d138      	bne.n	8008268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008200:	2302      	movs	r3, #2
 8008202:	e032      	b.n	800826a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2224      	movs	r2, #36	; 0x24
 8008210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6819      	ldr	r1, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	e000      	b.n	800826a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008268:	2302      	movs	r3, #2
  }
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b20      	cmp	r3, #32
 800828a:	d139      	bne.n	8008300 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008296:	2302      	movs	r3, #2
 8008298:	e033      	b.n	8008302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2224      	movs	r2, #36	; 0x24
 80082a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0201 	bic.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e000      	b.n	8008302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008300:	2302      	movs	r3, #2
  }
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e0bf      	b.n	80084a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fa fa54 	bl	80027e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008352:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6999      	ldr	r1, [r3, #24]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008368:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6899      	ldr	r1, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b4a      	ldr	r3, [pc, #296]	; (80084ac <HAL_LTDC_Init+0x19c>)
 8008384:	400b      	ands	r3, r1
 8008386:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6899      	ldr	r1, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68d9      	ldr	r1, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b3e      	ldr	r3, [pc, #248]	; (80084ac <HAL_LTDC_Init+0x19c>)
 80083b2:	400b      	ands	r3, r1
 80083b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	041b      	lsls	r3, r3, #16
 80083bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68d9      	ldr	r1, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6919      	ldr	r1, [r3, #16]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	4b33      	ldr	r3, [pc, #204]	; (80084ac <HAL_LTDC_Init+0x19c>)
 80083e0:	400b      	ands	r3, r1
 80083e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6919      	ldr	r1, [r3, #16]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6959      	ldr	r1, [r3, #20]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b27      	ldr	r3, [pc, #156]	; (80084ac <HAL_LTDC_Init+0x19c>)
 800840e:	400b      	ands	r3, r1
 8008410:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6959      	ldr	r1, [r3, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	430a      	orrs	r2, r1
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0206 	orr.w	r2, r2, #6
 800847e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	f000f800 	.word	0xf000f800

080084b0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d023      	beq.n	800851a <HAL_LTDC_IRQHandler+0x6a>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01e      	beq.n	800851a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0204 	bic.w	r2, r2, #4
 80084ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2204      	movs	r2, #4
 80084f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084fa:	f043 0201 	orr.w	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2204      	movs	r2, #4
 8008508:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f86f 	bl	80085f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d023      	beq.n	800856c <HAL_LTDC_IRQHandler+0xbc>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d01e      	beq.n	800856c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0202 	bic.w	r2, r2, #2
 800853c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2202      	movs	r2, #2
 8008544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800854c:	f043 0202 	orr.w	r2, r3, #2
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f846 	bl	80085f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01b      	beq.n	80085ae <HAL_LTDC_IRQHandler+0xfe>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d016      	beq.n	80085ae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2201      	movs	r2, #1
 8008596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f82f 	bl	800860c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <HAL_LTDC_IRQHandler+0x140>
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0208 	bic.w	r2, r2, #8
 80085d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2208      	movs	r2, #8
 80085d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f818 	bl	8008620 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80085f0:	bf00      	nop
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008634:	b5b0      	push	{r4, r5, r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <HAL_LTDC_ConfigLayer+0x1a>
 800864a:	2302      	movs	r3, #2
 800864c:	e02c      	b.n	80086a8 <HAL_LTDC_ConfigLayer+0x74>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2202      	movs	r2, #2
 800865a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2134      	movs	r1, #52	; 0x34
 8008664:	fb01 f303 	mul.w	r3, r1, r3
 8008668:	4413      	add	r3, r2
 800866a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	4614      	mov	r4, r2
 8008672:	461d      	mov	r5, r3
 8008674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800867a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800867c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800867e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f81f 	bl	80086cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2201      	movs	r2, #1
 8008694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bdb0      	pop	{r4, r5, r7, pc}

080086b0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80086be:	b2db      	uxtb	r3, r3
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b089      	sub	sp, #36	; 0x24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	0c1b      	lsrs	r3, r3, #16
 80086e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086e8:	4413      	add	r3, r2
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	01db      	lsls	r3, r3, #7
 80086f8:	4413      	add	r3, r2
 80086fa:	3384      	adds	r3, #132	; 0x84
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	4611      	mov	r1, r2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	01d2      	lsls	r2, r2, #7
 8008708:	440a      	add	r2, r1
 800870a:	3284      	adds	r2, #132	; 0x84
 800870c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008710:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008722:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008724:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4619      	mov	r1, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	01db      	lsls	r3, r3, #7
 8008730:	440b      	add	r3, r1
 8008732:	3384      	adds	r3, #132	; 0x84
 8008734:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800873a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800874a:	4413      	add	r3, r2
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	01db      	lsls	r3, r3, #7
 800875a:	4413      	add	r3, r2
 800875c:	3384      	adds	r3, #132	; 0x84
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	4611      	mov	r1, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	01d2      	lsls	r2, r2, #7
 800876a:	440a      	add	r2, r1
 800876c:	3284      	adds	r2, #132	; 0x84
 800876e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008772:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008782:	4413      	add	r3, r2
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4619      	mov	r1, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	01db      	lsls	r3, r3, #7
 8008790:	440b      	add	r3, r1
 8008792:	3384      	adds	r3, #132	; 0x84
 8008794:	4619      	mov	r1, r3
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	4313      	orrs	r3, r2
 800879a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	01db      	lsls	r3, r3, #7
 80087a6:	4413      	add	r3, r2
 80087a8:	3384      	adds	r3, #132	; 0x84
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	4611      	mov	r1, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	01d2      	lsls	r2, r2, #7
 80087b6:	440a      	add	r2, r1
 80087b8:	3284      	adds	r2, #132	; 0x84
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	01db      	lsls	r3, r3, #7
 80087ca:	4413      	add	r3, r2
 80087cc:	3384      	adds	r3, #132	; 0x84
 80087ce:	461a      	mov	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	061b      	lsls	r3, r3, #24
 80087f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	01db      	lsls	r3, r3, #7
 80087fc:	4413      	add	r3, r2
 80087fe:	3384      	adds	r3, #132	; 0x84
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	01db      	lsls	r3, r3, #7
 800880c:	4413      	add	r3, r2
 800880e:	3384      	adds	r3, #132	; 0x84
 8008810:	461a      	mov	r2, r3
 8008812:	2300      	movs	r3, #0
 8008814:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800881c:	461a      	mov	r2, r3
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	431a      	orrs	r2, r3
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	431a      	orrs	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4619      	mov	r1, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	01db      	lsls	r3, r3, #7
 8008830:	440b      	add	r3, r1
 8008832:	3384      	adds	r3, #132	; 0x84
 8008834:	4619      	mov	r1, r3
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	01db      	lsls	r3, r3, #7
 8008846:	4413      	add	r3, r2
 8008848:	3384      	adds	r3, #132	; 0x84
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	6812      	ldr	r2, [r2, #0]
 8008850:	4611      	mov	r1, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	01d2      	lsls	r2, r2, #7
 8008856:	440a      	add	r2, r1
 8008858:	3284      	adds	r2, #132	; 0x84
 800885a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800885e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	01db      	lsls	r3, r3, #7
 800886a:	4413      	add	r3, r2
 800886c:	3384      	adds	r3, #132	; 0x84
 800886e:	461a      	mov	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	01db      	lsls	r3, r3, #7
 8008880:	4413      	add	r3, r2
 8008882:	3384      	adds	r3, #132	; 0x84
 8008884:	69da      	ldr	r2, [r3, #28]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	01db      	lsls	r3, r3, #7
 8008890:	440b      	add	r3, r1
 8008892:	3384      	adds	r3, #132	; 0x84
 8008894:	4619      	mov	r1, r3
 8008896:	4b58      	ldr	r3, [pc, #352]	; (80089f8 <LTDC_SetConfig+0x32c>)
 8008898:	4013      	ands	r3, r2
 800889a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	68f9      	ldr	r1, [r7, #12]
 80088a6:	6809      	ldr	r1, [r1, #0]
 80088a8:	4608      	mov	r0, r1
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	01c9      	lsls	r1, r1, #7
 80088ae:	4401      	add	r1, r0
 80088b0:	3184      	adds	r1, #132	; 0x84
 80088b2:	4313      	orrs	r3, r2
 80088b4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	01db      	lsls	r3, r3, #7
 80088c0:	4413      	add	r3, r2
 80088c2:	3384      	adds	r3, #132	; 0x84
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	01db      	lsls	r3, r3, #7
 80088d0:	4413      	add	r3, r2
 80088d2:	3384      	adds	r3, #132	; 0x84
 80088d4:	461a      	mov	r2, r3
 80088d6:	2300      	movs	r3, #0
 80088d8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	01db      	lsls	r3, r3, #7
 80088e4:	4413      	add	r3, r2
 80088e6:	3384      	adds	r3, #132	; 0x84
 80088e8:	461a      	mov	r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80088f8:	2304      	movs	r3, #4
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	e01b      	b.n	8008936 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d102      	bne.n	800890c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008906:	2303      	movs	r3, #3
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	e014      	b.n	8008936 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	2b04      	cmp	r3, #4
 8008912:	d00b      	beq.n	800892c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008918:	2b02      	cmp	r3, #2
 800891a:	d007      	beq.n	800892c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008920:	2b03      	cmp	r3, #3
 8008922:	d003      	beq.n	800892c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008928:	2b07      	cmp	r3, #7
 800892a:	d102      	bne.n	8008932 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800892c:	2302      	movs	r3, #2
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	e001      	b.n	8008936 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008932:	2301      	movs	r3, #1
 8008934:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	01db      	lsls	r3, r3, #7
 8008940:	4413      	add	r3, r2
 8008942:	3384      	adds	r3, #132	; 0x84
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	4611      	mov	r1, r2
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	01d2      	lsls	r2, r2, #7
 8008950:	440a      	add	r2, r1
 8008952:	3284      	adds	r2, #132	; 0x84
 8008954:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008958:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	fb02 f303 	mul.w	r3, r2, r3
 8008964:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6859      	ldr	r1, [r3, #4]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	1acb      	subs	r3, r1, r3
 8008970:	69f9      	ldr	r1, [r7, #28]
 8008972:	fb01 f303 	mul.w	r3, r1, r3
 8008976:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008978:	68f9      	ldr	r1, [r7, #12]
 800897a:	6809      	ldr	r1, [r1, #0]
 800897c:	4608      	mov	r0, r1
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	01c9      	lsls	r1, r1, #7
 8008982:	4401      	add	r1, r0
 8008984:	3184      	adds	r1, #132	; 0x84
 8008986:	4313      	orrs	r3, r2
 8008988:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	01db      	lsls	r3, r3, #7
 8008994:	4413      	add	r3, r2
 8008996:	3384      	adds	r3, #132	; 0x84
 8008998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4619      	mov	r1, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	01db      	lsls	r3, r3, #7
 80089a4:	440b      	add	r3, r1
 80089a6:	3384      	adds	r3, #132	; 0x84
 80089a8:	4619      	mov	r1, r3
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <LTDC_SetConfig+0x330>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	01db      	lsls	r3, r3, #7
 80089ba:	4413      	add	r3, r2
 80089bc:	3384      	adds	r3, #132	; 0x84
 80089be:	461a      	mov	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	01db      	lsls	r3, r3, #7
 80089d0:	4413      	add	r3, r2
 80089d2:	3384      	adds	r3, #132	; 0x84
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	6812      	ldr	r2, [r2, #0]
 80089da:	4611      	mov	r1, r2
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	01d2      	lsls	r2, r2, #7
 80089e0:	440a      	add	r2, r1
 80089e2:	3284      	adds	r2, #132	; 0x84
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	6013      	str	r3, [r2, #0]
}
 80089ea:	bf00      	nop
 80089ec:	3724      	adds	r7, #36	; 0x24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	fffff8f8 	.word	0xfffff8f8
 80089fc:	fffff800 	.word	0xfffff800

08008a00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a04      	ldr	r2, [pc, #16]	; (8008a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0e:	6013      	str	r3, [r2, #0]
}
 8008a10:	bf00      	nop
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40007000 	.word	0x40007000

08008a20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008a2a:	4b23      	ldr	r3, [pc, #140]	; (8008ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	4a22      	ldr	r2, [pc, #136]	; (8008ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a34:	6413      	str	r3, [r2, #64]	; 0x40
 8008a36:	4b20      	ldr	r3, [pc, #128]	; (8008ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008a42:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a1d      	ldr	r2, [pc, #116]	; (8008abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a4e:	f7fc ff6f 	bl	8005930 <HAL_GetTick>
 8008a52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a54:	e009      	b.n	8008a6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a56:	f7fc ff6b 	bl	8005930 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a64:	d901      	bls.n	8008a6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e022      	b.n	8008ab0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a76:	d1ee      	bne.n	8008a56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008a78:	4b10      	ldr	r3, [pc, #64]	; (8008abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a0f      	ldr	r2, [pc, #60]	; (8008abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a84:	f7fc ff54 	bl	8005930 <HAL_GetTick>
 8008a88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a8a:	e009      	b.n	8008aa0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a8c:	f7fc ff50 	bl	8005930 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a9a:	d901      	bls.n	8008aa0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e007      	b.n	8008ab0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008aa0:	4b06      	ldr	r3, [pc, #24]	; (8008abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aac:	d1ee      	bne.n	8008a8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	40007000 	.word	0x40007000

08008ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e291      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8087 	beq.w	8008bf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ae4:	4b96      	ldr	r3, [pc, #600]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 030c 	and.w	r3, r3, #12
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d00c      	beq.n	8008b0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008af0:	4b93      	ldr	r3, [pc, #588]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 030c 	and.w	r3, r3, #12
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d112      	bne.n	8008b22 <HAL_RCC_OscConfig+0x62>
 8008afc:	4b90      	ldr	r3, [pc, #576]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b08:	d10b      	bne.n	8008b22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b0a:	4b8d      	ldr	r3, [pc, #564]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d06c      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x130>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d168      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e26b      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2a:	d106      	bne.n	8008b3a <HAL_RCC_OscConfig+0x7a>
 8008b2c:	4b84      	ldr	r3, [pc, #528]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a83      	ldr	r2, [pc, #524]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	e02e      	b.n	8008b98 <HAL_RCC_OscConfig+0xd8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10c      	bne.n	8008b5c <HAL_RCC_OscConfig+0x9c>
 8008b42:	4b7f      	ldr	r3, [pc, #508]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a7e      	ldr	r2, [pc, #504]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	4b7c      	ldr	r3, [pc, #496]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a7b      	ldr	r2, [pc, #492]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	e01d      	b.n	8008b98 <HAL_RCC_OscConfig+0xd8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b64:	d10c      	bne.n	8008b80 <HAL_RCC_OscConfig+0xc0>
 8008b66:	4b76      	ldr	r3, [pc, #472]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a75      	ldr	r2, [pc, #468]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	4b73      	ldr	r3, [pc, #460]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a72      	ldr	r2, [pc, #456]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	e00b      	b.n	8008b98 <HAL_RCC_OscConfig+0xd8>
 8008b80:	4b6f      	ldr	r3, [pc, #444]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a6e      	ldr	r2, [pc, #440]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	4b6c      	ldr	r3, [pc, #432]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a6b      	ldr	r2, [pc, #428]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d013      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba0:	f7fc fec6 	bl	8005930 <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ba6:	e008      	b.n	8008bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ba8:	f7fc fec2 	bl	8005930 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b64      	cmp	r3, #100	; 0x64
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e21f      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bba:	4b61      	ldr	r3, [pc, #388]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0f0      	beq.n	8008ba8 <HAL_RCC_OscConfig+0xe8>
 8008bc6:	e014      	b.n	8008bf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc8:	f7fc feb2 	bl	8005930 <HAL_GetTick>
 8008bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bd0:	f7fc feae 	bl	8005930 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b64      	cmp	r3, #100	; 0x64
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e20b      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008be2:	4b57      	ldr	r3, [pc, #348]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1f0      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x110>
 8008bee:	e000      	b.n	8008bf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d069      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bfe:	4b50      	ldr	r3, [pc, #320]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f003 030c 	and.w	r3, r3, #12
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c0a:	4b4d      	ldr	r3, [pc, #308]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 030c 	and.w	r3, r3, #12
 8008c12:	2b08      	cmp	r3, #8
 8008c14:	d11c      	bne.n	8008c50 <HAL_RCC_OscConfig+0x190>
 8008c16:	4b4a      	ldr	r3, [pc, #296]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d116      	bne.n	8008c50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c22:	4b47      	ldr	r3, [pc, #284]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_RCC_OscConfig+0x17a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d001      	beq.n	8008c3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e1df      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c3a:	4b41      	ldr	r3, [pc, #260]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	493d      	ldr	r1, [pc, #244]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c4e:	e040      	b.n	8008cd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d023      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c58:	4b39      	ldr	r3, [pc, #228]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a38      	ldr	r2, [pc, #224]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c64:	f7fc fe64 	bl	8005930 <HAL_GetTick>
 8008c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c6a:	e008      	b.n	8008c7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c6c:	f7fc fe60 	bl	8005930 <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e1bd      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c7e:	4b30      	ldr	r3, [pc, #192]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0f0      	beq.n	8008c6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c8a:	4b2d      	ldr	r3, [pc, #180]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4929      	ldr	r1, [pc, #164]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	600b      	str	r3, [r1, #0]
 8008c9e:	e018      	b.n	8008cd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a26      	ldr	r2, [pc, #152]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cac:	f7fc fe40 	bl	8005930 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cb4:	f7fc fe3c 	bl	8005930 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e199      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d038      	beq.n	8008d50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d019      	beq.n	8008d1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ce6:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cea:	4a15      	ldr	r2, [pc, #84]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008cec:	f043 0301 	orr.w	r3, r3, #1
 8008cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf2:	f7fc fe1d 	bl	8005930 <HAL_GetTick>
 8008cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cf8:	e008      	b.n	8008d0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cfa:	f7fc fe19 	bl	8005930 <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e176      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0f0      	beq.n	8008cfa <HAL_RCC_OscConfig+0x23a>
 8008d18:	e01a      	b.n	8008d50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d1a:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d1e:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <HAL_RCC_OscConfig+0x280>)
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d26:	f7fc fe03 	bl	8005930 <HAL_GetTick>
 8008d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d2c:	e00a      	b.n	8008d44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d2e:	f7fc fdff 	bl	8005930 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d903      	bls.n	8008d44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e15c      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
 8008d40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d44:	4b91      	ldr	r3, [pc, #580]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1ee      	bne.n	8008d2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 80a4 	beq.w	8008ea6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d5e:	4b8b      	ldr	r3, [pc, #556]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d6a:	4b88      	ldr	r3, [pc, #544]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	4a87      	ldr	r2, [pc, #540]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d74:	6413      	str	r3, [r2, #64]	; 0x40
 8008d76:	4b85      	ldr	r3, [pc, #532]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d7e:	60bb      	str	r3, [r7, #8]
 8008d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d82:	2301      	movs	r3, #1
 8008d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d86:	4b82      	ldr	r3, [pc, #520]	; (8008f90 <HAL_RCC_OscConfig+0x4d0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d118      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008d92:	4b7f      	ldr	r3, [pc, #508]	; (8008f90 <HAL_RCC_OscConfig+0x4d0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a7e      	ldr	r2, [pc, #504]	; (8008f90 <HAL_RCC_OscConfig+0x4d0>)
 8008d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d9e:	f7fc fdc7 	bl	8005930 <HAL_GetTick>
 8008da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008da4:	e008      	b.n	8008db8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008da6:	f7fc fdc3 	bl	8005930 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	2b64      	cmp	r3, #100	; 0x64
 8008db2:	d901      	bls.n	8008db8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e120      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008db8:	4b75      	ldr	r3, [pc, #468]	; (8008f90 <HAL_RCC_OscConfig+0x4d0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0f0      	beq.n	8008da6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d106      	bne.n	8008dda <HAL_RCC_OscConfig+0x31a>
 8008dcc:	4b6f      	ldr	r3, [pc, #444]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd0:	4a6e      	ldr	r2, [pc, #440]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd8:	e02d      	b.n	8008e36 <HAL_RCC_OscConfig+0x376>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10c      	bne.n	8008dfc <HAL_RCC_OscConfig+0x33c>
 8008de2:	4b6a      	ldr	r3, [pc, #424]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de6:	4a69      	ldr	r2, [pc, #420]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	6713      	str	r3, [r2, #112]	; 0x70
 8008dee:	4b67      	ldr	r3, [pc, #412]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	4a66      	ldr	r2, [pc, #408]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008df4:	f023 0304 	bic.w	r3, r3, #4
 8008df8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dfa:	e01c      	b.n	8008e36 <HAL_RCC_OscConfig+0x376>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	d10c      	bne.n	8008e1e <HAL_RCC_OscConfig+0x35e>
 8008e04:	4b61      	ldr	r3, [pc, #388]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e08:	4a60      	ldr	r2, [pc, #384]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e0a:	f043 0304 	orr.w	r3, r3, #4
 8008e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e10:	4b5e      	ldr	r3, [pc, #376]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e14:	4a5d      	ldr	r2, [pc, #372]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e1c:	e00b      	b.n	8008e36 <HAL_RCC_OscConfig+0x376>
 8008e1e:	4b5b      	ldr	r3, [pc, #364]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	4a5a      	ldr	r2, [pc, #360]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	6713      	str	r3, [r2, #112]	; 0x70
 8008e2a:	4b58      	ldr	r3, [pc, #352]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2e:	4a57      	ldr	r2, [pc, #348]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e30:	f023 0304 	bic.w	r3, r3, #4
 8008e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d015      	beq.n	8008e6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3e:	f7fc fd77 	bl	8005930 <HAL_GetTick>
 8008e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e44:	e00a      	b.n	8008e5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e46:	f7fc fd73 	bl	8005930 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e0ce      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e5c:	4b4b      	ldr	r3, [pc, #300]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0ee      	beq.n	8008e46 <HAL_RCC_OscConfig+0x386>
 8008e68:	e014      	b.n	8008e94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e6a:	f7fc fd61 	bl	8005930 <HAL_GetTick>
 8008e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e70:	e00a      	b.n	8008e88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e72:	f7fc fd5d 	bl	8005930 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d901      	bls.n	8008e88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e0b8      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e88:	4b40      	ldr	r3, [pc, #256]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1ee      	bne.n	8008e72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d105      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e9a:	4b3c      	ldr	r3, [pc, #240]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	4a3b      	ldr	r2, [pc, #236]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80a4 	beq.w	8008ff8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008eb0:	4b36      	ldr	r3, [pc, #216]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f003 030c 	and.w	r3, r3, #12
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d06b      	beq.n	8008f94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d149      	bne.n	8008f58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec4:	4b31      	ldr	r3, [pc, #196]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a30      	ldr	r2, [pc, #192]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed0:	f7fc fd2e 	bl	8005930 <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed8:	f7fc fd2a 	bl	8005930 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e087      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eea:	4b28      	ldr	r3, [pc, #160]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f0      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69da      	ldr	r2, [r3, #28]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	019b      	lsls	r3, r3, #6
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	085b      	lsrs	r3, r3, #1
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	041b      	lsls	r3, r3, #16
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	061b      	lsls	r3, r3, #24
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f24:	4b19      	ldr	r3, [pc, #100]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a18      	ldr	r2, [pc, #96]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7fc fcfe 	bl	8005930 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f38:	f7fc fcfa 	bl	8005930 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e057      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f4a:	4b10      	ldr	r3, [pc, #64]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x478>
 8008f56:	e04f      	b.n	8008ff8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a0b      	ldr	r2, [pc, #44]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7fc fce4 	bl	8005930 <HAL_GetTick>
 8008f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f6c:	f7fc fce0 	bl	8005930 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e03d      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f7e:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <HAL_RCC_OscConfig+0x4cc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f0      	bne.n	8008f6c <HAL_RCC_OscConfig+0x4ac>
 8008f8a:	e035      	b.n	8008ff8 <HAL_RCC_OscConfig+0x538>
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_RCC_OscConfig+0x544>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d028      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d121      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d11a      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d111      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	085b      	lsrs	r3, r3, #1
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d107      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d001      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e000      	b.n	8008ffa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40023800 	.word	0x40023800

08009008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e0d0      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009020:	4b6a      	ldr	r3, [pc, #424]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d910      	bls.n	8009050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800902e:	4b67      	ldr	r3, [pc, #412]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f023 020f 	bic.w	r2, r3, #15
 8009036:	4965      	ldr	r1, [pc, #404]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	4313      	orrs	r3, r2
 800903c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800903e:	4b63      	ldr	r3, [pc, #396]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 030f 	and.w	r3, r3, #15
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d001      	beq.n	8009050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e0b8      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d020      	beq.n	800909e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009068:	4b59      	ldr	r3, [pc, #356]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	4a58      	ldr	r2, [pc, #352]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 800906e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0308 	and.w	r3, r3, #8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009080:	4b53      	ldr	r3, [pc, #332]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4a52      	ldr	r2, [pc, #328]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 8009086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800908a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800908c:	4b50      	ldr	r3, [pc, #320]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	494d      	ldr	r1, [pc, #308]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 800909a:	4313      	orrs	r3, r2
 800909c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d040      	beq.n	800912c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090b2:	4b47      	ldr	r3, [pc, #284]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d115      	bne.n	80090ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e07f      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d107      	bne.n	80090da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ca:	4b41      	ldr	r3, [pc, #260]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e073      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090da:	4b3d      	ldr	r3, [pc, #244]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e06b      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090ea:	4b39      	ldr	r3, [pc, #228]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f023 0203 	bic.w	r2, r3, #3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	4936      	ldr	r1, [pc, #216]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090fc:	f7fc fc18 	bl	8005930 <HAL_GetTick>
 8009100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009102:	e00a      	b.n	800911a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009104:	f7fc fc14 	bl	8005930 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009112:	4293      	cmp	r3, r2
 8009114:	d901      	bls.n	800911a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e053      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800911a:	4b2d      	ldr	r3, [pc, #180]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 020c 	and.w	r2, r3, #12
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	429a      	cmp	r2, r3
 800912a:	d1eb      	bne.n	8009104 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800912c:	4b27      	ldr	r3, [pc, #156]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d210      	bcs.n	800915c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f023 020f 	bic.w	r2, r3, #15
 8009142:	4922      	ldr	r1, [pc, #136]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	4313      	orrs	r3, r2
 8009148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800914a:	4b20      	ldr	r3, [pc, #128]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d001      	beq.n	800915c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e032      	b.n	80091c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009168:	4b19      	ldr	r3, [pc, #100]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	4916      	ldr	r1, [pc, #88]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 8009176:	4313      	orrs	r3, r2
 8009178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009186:	4b12      	ldr	r3, [pc, #72]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	490e      	ldr	r1, [pc, #56]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 8009196:	4313      	orrs	r3, r2
 8009198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800919a:	f000 f821 	bl	80091e0 <HAL_RCC_GetSysClockFreq>
 800919e:	4602      	mov	r2, r0
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	091b      	lsrs	r3, r3, #4
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	490a      	ldr	r1, [pc, #40]	; (80091d4 <HAL_RCC_ClockConfig+0x1cc>)
 80091ac:	5ccb      	ldrb	r3, [r1, r3]
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <HAL_RCC_ClockConfig+0x1d0>)
 80091b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <HAL_RCC_ClockConfig+0x1d4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fb fe82 	bl	8004ec4 <HAL_InitTick>

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40023c00 	.word	0x40023c00
 80091d0:	40023800 	.word	0x40023800
 80091d4:	08051d84 	.word	0x08051d84
 80091d8:	2000003c 	.word	0x2000003c
 80091dc:	20000040 	.word	0x20000040

080091e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e4:	b090      	sub	sp, #64	; 0x40
 80091e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34
 80091ec:	2300      	movs	r3, #0
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f0:	2300      	movs	r3, #0
 80091f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091f8:	4b59      	ldr	r3, [pc, #356]	; (8009360 <HAL_RCC_GetSysClockFreq+0x180>)
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 030c 	and.w	r3, r3, #12
 8009200:	2b08      	cmp	r3, #8
 8009202:	d00d      	beq.n	8009220 <HAL_RCC_GetSysClockFreq+0x40>
 8009204:	2b08      	cmp	r3, #8
 8009206:	f200 80a1 	bhi.w	800934c <HAL_RCC_GetSysClockFreq+0x16c>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <HAL_RCC_GetSysClockFreq+0x34>
 800920e:	2b04      	cmp	r3, #4
 8009210:	d003      	beq.n	800921a <HAL_RCC_GetSysClockFreq+0x3a>
 8009212:	e09b      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009214:	4b53      	ldr	r3, [pc, #332]	; (8009364 <HAL_RCC_GetSysClockFreq+0x184>)
 8009216:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009218:	e09b      	b.n	8009352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800921a:	4b53      	ldr	r3, [pc, #332]	; (8009368 <HAL_RCC_GetSysClockFreq+0x188>)
 800921c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800921e:	e098      	b.n	8009352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009220:	4b4f      	ldr	r3, [pc, #316]	; (8009360 <HAL_RCC_GetSysClockFreq+0x180>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800922a:	4b4d      	ldr	r3, [pc, #308]	; (8009360 <HAL_RCC_GetSysClockFreq+0x180>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d028      	beq.n	8009288 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009236:	4b4a      	ldr	r3, [pc, #296]	; (8009360 <HAL_RCC_GetSysClockFreq+0x180>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	099b      	lsrs	r3, r3, #6
 800923c:	2200      	movs	r2, #0
 800923e:	623b      	str	r3, [r7, #32]
 8009240:	627a      	str	r2, [r7, #36]	; 0x24
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009248:	2100      	movs	r1, #0
 800924a:	4b47      	ldr	r3, [pc, #284]	; (8009368 <HAL_RCC_GetSysClockFreq+0x188>)
 800924c:	fb03 f201 	mul.w	r2, r3, r1
 8009250:	2300      	movs	r3, #0
 8009252:	fb00 f303 	mul.w	r3, r0, r3
 8009256:	4413      	add	r3, r2
 8009258:	4a43      	ldr	r2, [pc, #268]	; (8009368 <HAL_RCC_GetSysClockFreq+0x188>)
 800925a:	fba0 1202 	umull	r1, r2, r0, r2
 800925e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009260:	460a      	mov	r2, r1
 8009262:	62ba      	str	r2, [r7, #40]	; 0x28
 8009264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009266:	4413      	add	r3, r2
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	2200      	movs	r2, #0
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	61fa      	str	r2, [r7, #28]
 8009272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800927a:	f7f7 fcad 	bl	8000bd8 <__aeabi_uldivmod>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4613      	mov	r3, r2
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009286:	e053      	b.n	8009330 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009288:	4b35      	ldr	r3, [pc, #212]	; (8009360 <HAL_RCC_GetSysClockFreq+0x180>)
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	099b      	lsrs	r3, r3, #6
 800928e:	2200      	movs	r2, #0
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	617a      	str	r2, [r7, #20]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800929a:	f04f 0b00 	mov.w	fp, #0
 800929e:	4652      	mov	r2, sl
 80092a0:	465b      	mov	r3, fp
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f04f 0100 	mov.w	r1, #0
 80092aa:	0159      	lsls	r1, r3, #5
 80092ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092b0:	0150      	lsls	r0, r2, #5
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	ebb2 080a 	subs.w	r8, r2, sl
 80092ba:	eb63 090b 	sbc.w	r9, r3, fp
 80092be:	f04f 0200 	mov.w	r2, #0
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092d2:	ebb2 0408 	subs.w	r4, r2, r8
 80092d6:	eb63 0509 	sbc.w	r5, r3, r9
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	00eb      	lsls	r3, r5, #3
 80092e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092e8:	00e2      	lsls	r2, r4, #3
 80092ea:	4614      	mov	r4, r2
 80092ec:	461d      	mov	r5, r3
 80092ee:	eb14 030a 	adds.w	r3, r4, sl
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	eb45 030b 	adc.w	r3, r5, fp
 80092f8:	607b      	str	r3, [r7, #4]
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009306:	4629      	mov	r1, r5
 8009308:	028b      	lsls	r3, r1, #10
 800930a:	4621      	mov	r1, r4
 800930c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009310:	4621      	mov	r1, r4
 8009312:	028a      	lsls	r2, r1, #10
 8009314:	4610      	mov	r0, r2
 8009316:	4619      	mov	r1, r3
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	2200      	movs	r2, #0
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	60fa      	str	r2, [r7, #12]
 8009320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009324:	f7f7 fc58 	bl	8000bd8 <__aeabi_uldivmod>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4613      	mov	r3, r2
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <HAL_RCC_GetSysClockFreq+0x180>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	0c1b      	lsrs	r3, r3, #16
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	3301      	adds	r3, #1
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	fbb2 f3f3 	udiv	r3, r2, r3
 8009348:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800934a:	e002      	b.n	8009352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <HAL_RCC_GetSysClockFreq+0x184>)
 800934e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009354:	4618      	mov	r0, r3
 8009356:	3740      	adds	r7, #64	; 0x40
 8009358:	46bd      	mov	sp, r7
 800935a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800935e:	bf00      	nop
 8009360:	40023800 	.word	0x40023800
 8009364:	00f42400 	.word	0x00f42400
 8009368:	017d7840 	.word	0x017d7840

0800936c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009370:	4b03      	ldr	r3, [pc, #12]	; (8009380 <HAL_RCC_GetHCLKFreq+0x14>)
 8009372:	681b      	ldr	r3, [r3, #0]
}
 8009374:	4618      	mov	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	2000003c 	.word	0x2000003c

08009384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009388:	f7ff fff0 	bl	800936c <HAL_RCC_GetHCLKFreq>
 800938c:	4602      	mov	r2, r0
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	0a9b      	lsrs	r3, r3, #10
 8009394:	f003 0307 	and.w	r3, r3, #7
 8009398:	4903      	ldr	r1, [pc, #12]	; (80093a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800939a:	5ccb      	ldrb	r3, [r1, r3]
 800939c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40023800 	.word	0x40023800
 80093a8:	08051d94 	.word	0x08051d94

080093ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093b0:	f7ff ffdc 	bl	800936c <HAL_RCC_GetHCLKFreq>
 80093b4:	4602      	mov	r2, r0
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	0b5b      	lsrs	r3, r3, #13
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	4903      	ldr	r1, [pc, #12]	; (80093d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093c2:	5ccb      	ldrb	r3, [r1, r3]
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40023800 	.word	0x40023800
 80093d0:	08051d94 	.word	0x08051d94

080093d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	220f      	movs	r2, #15
 80093e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093e4:	4b12      	ldr	r3, [pc, #72]	; (8009430 <HAL_RCC_GetClockConfig+0x5c>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 0203 	and.w	r2, r3, #3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093f0:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <HAL_RCC_GetClockConfig+0x5c>)
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80093fc:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <HAL_RCC_GetClockConfig+0x5c>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009408:	4b09      	ldr	r3, [pc, #36]	; (8009430 <HAL_RCC_GetClockConfig+0x5c>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	08db      	lsrs	r3, r3, #3
 800940e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009416:	4b07      	ldr	r3, [pc, #28]	; (8009434 <HAL_RCC_GetClockConfig+0x60>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 020f 	and.w	r2, r3, #15
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	601a      	str	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	40023800 	.word	0x40023800
 8009434:	40023c00 	.word	0x40023c00

08009438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d012      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009460:	4b69      	ldr	r3, [pc, #420]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	4a68      	ldr	r2, [pc, #416]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009466:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800946a:	6093      	str	r3, [r2, #8]
 800946c:	4b66      	ldr	r3, [pc, #408]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009474:	4964      	ldr	r1, [pc, #400]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009476:	4313      	orrs	r3, r2
 8009478:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009482:	2301      	movs	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d017      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009492:	4b5d      	ldr	r3, [pc, #372]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a0:	4959      	ldr	r1, [pc, #356]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b0:	d101      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80094b2:	2301      	movs	r3, #1
 80094b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80094be:	2301      	movs	r3, #1
 80094c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d017      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094ce:	4b4e      	ldr	r3, [pc, #312]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094dc:	494a      	ldr	r1, [pc, #296]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ec:	d101      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80094ee:	2301      	movs	r3, #1
 80094f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80094fa:	2301      	movs	r3, #1
 80094fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800950a:	2301      	movs	r3, #1
 800950c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 808b 	beq.w	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800951c:	4b3a      	ldr	r3, [pc, #232]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	4a39      	ldr	r2, [pc, #228]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009526:	6413      	str	r3, [r2, #64]	; 0x40
 8009528:	4b37      	ldr	r3, [pc, #220]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009534:	4b35      	ldr	r3, [pc, #212]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a34      	ldr	r2, [pc, #208]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800953a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800953e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009540:	f7fc f9f6 	bl	8005930 <HAL_GetTick>
 8009544:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009546:	e008      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009548:	f7fc f9f2 	bl	8005930 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b64      	cmp	r3, #100	; 0x64
 8009554:	d901      	bls.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e357      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800955a:	4b2c      	ldr	r3, [pc, #176]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0f0      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009566:	4b28      	ldr	r3, [pc, #160]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d035      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	429a      	cmp	r2, r3
 8009582:	d02e      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009584:	4b20      	ldr	r3, [pc, #128]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800958c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800958e:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009592:	4a1d      	ldr	r2, [pc, #116]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009598:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800959a:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	4a1a      	ldr	r2, [pc, #104]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80095a6:	4a18      	ldr	r2, [pc, #96]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d114      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b8:	f7fc f9ba 	bl	8005930 <HAL_GetTick>
 80095bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095be:	e00a      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095c0:	f7fc f9b6 	bl	8005930 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d901      	bls.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e319      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ee      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ee:	d111      	bne.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80095fc:	4b04      	ldr	r3, [pc, #16]	; (8009610 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095fe:	400b      	ands	r3, r1
 8009600:	4901      	ldr	r1, [pc, #4]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009602:	4313      	orrs	r3, r2
 8009604:	608b      	str	r3, [r1, #8]
 8009606:	e00b      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009608:	40023800 	.word	0x40023800
 800960c:	40007000 	.word	0x40007000
 8009610:	0ffffcff 	.word	0x0ffffcff
 8009614:	4baa      	ldr	r3, [pc, #680]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	4aa9      	ldr	r2, [pc, #676]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800961a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800961e:	6093      	str	r3, [r2, #8]
 8009620:	4ba7      	ldr	r3, [pc, #668]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962c:	49a4      	ldr	r1, [pc, #656]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800962e:	4313      	orrs	r3, r2
 8009630:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0310 	and.w	r3, r3, #16
 800963a:	2b00      	cmp	r3, #0
 800963c:	d010      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800963e:	4ba0      	ldr	r3, [pc, #640]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009644:	4a9e      	ldr	r2, [pc, #632]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800964a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800964e:	4b9c      	ldr	r3, [pc, #624]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009650:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	4999      	ldr	r1, [pc, #612]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965a:	4313      	orrs	r3, r2
 800965c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800966c:	4b94      	ldr	r3, [pc, #592]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800967a:	4991      	ldr	r1, [pc, #580]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800968e:	4b8c      	ldr	r3, [pc, #560]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800969c:	4988      	ldr	r1, [pc, #544]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096b0:	4b83      	ldr	r3, [pc, #524]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096be:	4980      	ldr	r1, [pc, #512]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096d2:	4b7b      	ldr	r3, [pc, #492]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e0:	4977      	ldr	r1, [pc, #476]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096f4:	4b72      	ldr	r3, [pc, #456]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fa:	f023 0203 	bic.w	r2, r3, #3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009702:	496f      	ldr	r1, [pc, #444]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009704:	4313      	orrs	r3, r2
 8009706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009716:	4b6a      	ldr	r3, [pc, #424]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	f023 020c 	bic.w	r2, r3, #12
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009724:	4966      	ldr	r1, [pc, #408]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009726:	4313      	orrs	r3, r2
 8009728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009738:	4b61      	ldr	r3, [pc, #388]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800973a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009746:	495e      	ldr	r1, [pc, #376]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009748:	4313      	orrs	r3, r2
 800974a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800975a:	4b59      	ldr	r3, [pc, #356]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800975c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009760:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009768:	4955      	ldr	r1, [pc, #340]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800976a:	4313      	orrs	r3, r2
 800976c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800977c:	4b50      	ldr	r3, [pc, #320]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800977e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978a:	494d      	ldr	r1, [pc, #308]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800979e:	4b48      	ldr	r3, [pc, #288]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	4944      	ldr	r1, [pc, #272]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80097c0:	4b3f      	ldr	r3, [pc, #252]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ce:	493c      	ldr	r1, [pc, #240]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80097e2:	4b37      	ldr	r3, [pc, #220]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f0:	4933      	ldr	r1, [pc, #204]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009804:	4b2e      	ldr	r3, [pc, #184]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009812:	492b      	ldr	r1, [pc, #172]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d011      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009826:	4b26      	ldr	r3, [pc, #152]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800982c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009834:	4922      	ldr	r1, [pc, #136]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009836:	4313      	orrs	r3, r2
 8009838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009844:	d101      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009846:	2301      	movs	r3, #1
 8009848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009856:	2301      	movs	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009866:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009874:	4912      	ldr	r1, [pc, #72]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009876:	4313      	orrs	r3, r2
 8009878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009888:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800988a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009898:	4909      	ldr	r1, [pc, #36]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800989a:	4313      	orrs	r3, r2
 800989c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d006      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 80d9 	beq.w	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a01      	ldr	r2, [pc, #4]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098be:	e001      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80098c0:	40023800 	.word	0x40023800
 80098c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098c6:	f7fc f833 	bl	8005930 <HAL_GetTick>
 80098ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098cc:	e008      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80098ce:	f7fc f82f 	bl	8005930 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b64      	cmp	r3, #100	; 0x64
 80098da:	d901      	bls.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e194      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098e0:	4b6c      	ldr	r3, [pc, #432]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f0      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d021      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11d      	bne.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009900:	4b64      	ldr	r3, [pc, #400]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009906:	0c1b      	lsrs	r3, r3, #16
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800990e:	4b61      	ldr	r3, [pc, #388]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009914:	0e1b      	lsrs	r3, r3, #24
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	019a      	lsls	r2, r3, #6
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	431a      	orrs	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	061b      	lsls	r3, r3, #24
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	071b      	lsls	r3, r3, #28
 8009934:	4957      	ldr	r1, [pc, #348]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009936:	4313      	orrs	r3, r2
 8009938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009950:	d00a      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800995a:	2b00      	cmp	r3, #0
 800995c:	d02e      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009966:	d129      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009968:	4b4a      	ldr	r3, [pc, #296]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800996a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	f003 0303 	and.w	r3, r3, #3
 8009974:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009976:	4b47      	ldr	r3, [pc, #284]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800997c:	0f1b      	lsrs	r3, r3, #28
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	019a      	lsls	r2, r3, #6
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	041b      	lsls	r3, r3, #16
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	061b      	lsls	r3, r3, #24
 8009996:	431a      	orrs	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	071b      	lsls	r3, r3, #28
 800999c:	493d      	ldr	r1, [pc, #244]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099a4:	4b3b      	ldr	r3, [pc, #236]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099aa:	f023 021f 	bic.w	r2, r3, #31
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	3b01      	subs	r3, #1
 80099b4:	4937      	ldr	r1, [pc, #220]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01d      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80099c8:	4b32      	ldr	r3, [pc, #200]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ce:	0e1b      	lsrs	r3, r3, #24
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099d6:	4b2f      	ldr	r3, [pc, #188]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099dc:	0f1b      	lsrs	r3, r3, #28
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	019a      	lsls	r2, r3, #6
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	041b      	lsls	r3, r3, #16
 80099f0:	431a      	orrs	r2, r3
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	061b      	lsls	r3, r3, #24
 80099f6:	431a      	orrs	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	071b      	lsls	r3, r3, #28
 80099fc:	4925      	ldr	r1, [pc, #148]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d011      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	019a      	lsls	r2, r3, #6
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	041b      	lsls	r3, r3, #16
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	061b      	lsls	r3, r3, #24
 8009a24:	431a      	orrs	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	071b      	lsls	r3, r3, #28
 8009a2c:	4919      	ldr	r1, [pc, #100]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a34:	4b17      	ldr	r3, [pc, #92]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a16      	ldr	r2, [pc, #88]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a40:	f7fb ff76 	bl	8005930 <HAL_GetTick>
 8009a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a46:	e008      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a48:	f7fb ff72 	bl	8005930 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b64      	cmp	r3, #100	; 0x64
 8009a54:	d901      	bls.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e0d7      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0f0      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	f040 80cd 	bne.w	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a6e:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a7a:	f7fb ff59 	bl	8005930 <HAL_GetTick>
 8009a7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a80:	e00a      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a82:	f7fb ff55 	bl	8005930 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b64      	cmp	r3, #100	; 0x64
 8009a8e:	d903      	bls.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e0ba      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009a94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a98:	4b5e      	ldr	r3, [pc, #376]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa4:	d0ed      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d02e      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d12a      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ace:	4b51      	ldr	r3, [pc, #324]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad4:	0c1b      	lsrs	r3, r3, #16
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009adc:	4b4d      	ldr	r3, [pc, #308]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae2:	0f1b      	lsrs	r3, r3, #28
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	019a      	lsls	r2, r3, #6
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	061b      	lsls	r3, r3, #24
 8009afc:	431a      	orrs	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	071b      	lsls	r3, r3, #28
 8009b02:	4944      	ldr	r1, [pc, #272]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009b0a:	4b42      	ldr	r3, [pc, #264]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	021b      	lsls	r3, r3, #8
 8009b1c:	493d      	ldr	r1, [pc, #244]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d022      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b38:	d11d      	bne.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b3a:	4b36      	ldr	r3, [pc, #216]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b40:	0e1b      	lsrs	r3, r3, #24
 8009b42:	f003 030f 	and.w	r3, r3, #15
 8009b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b48:	4b32      	ldr	r3, [pc, #200]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4e:	0f1b      	lsrs	r3, r3, #28
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	019a      	lsls	r2, r3, #6
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	431a      	orrs	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	061b      	lsls	r3, r3, #24
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	071b      	lsls	r3, r3, #28
 8009b6e:	4929      	ldr	r1, [pc, #164]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0308 	and.w	r3, r3, #8
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d028      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b82:	4b24      	ldr	r3, [pc, #144]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b88:	0e1b      	lsrs	r3, r3, #24
 8009b8a:	f003 030f 	and.w	r3, r3, #15
 8009b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b90:	4b20      	ldr	r3, [pc, #128]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	019a      	lsls	r2, r3, #6
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	061b      	lsls	r3, r3, #24
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	071b      	lsls	r3, r3, #28
 8009bb6:	4917      	ldr	r1, [pc, #92]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009bbe:	4b15      	ldr	r3, [pc, #84]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bcc:	4911      	ldr	r1, [pc, #68]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009bd4:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a0e      	ldr	r2, [pc, #56]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009be0:	f7fb fea6 	bl	8005930 <HAL_GetTick>
 8009be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009be6:	e008      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009be8:	f7fb fea2 	bl	8005930 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	2b64      	cmp	r3, #100	; 0x64
 8009bf4:	d901      	bls.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e007      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009bfa:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c06:	d1ef      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	40023800 	.word	0x40023800

08009c18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e071      	b.n	8009d12 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	7f5b      	ldrb	r3, [r3, #29]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7f9 fa80 	bl	8003144 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d053      	beq.n	8009d00 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	22ca      	movs	r2, #202	; 0xca
 8009c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2253      	movs	r2, #83	; 0x53
 8009c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb77 	bl	800a35c <RTC_EnterInitMode>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d12a      	bne.n	8009cce <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6899      	ldr	r1, [r3, #8]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <HAL_RTC_Init+0x104>)
 8009c84:	400b      	ands	r3, r1
 8009c86:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6899      	ldr	r1, [r3, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	68d2      	ldr	r2, [r2, #12]
 8009cae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6919      	ldr	r1, [r3, #16]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	041a      	lsls	r2, r3, #16
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fb80 	bl	800a3ca <RTC_ExitInitMode>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d110      	bne.n	8009cf6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0208 	bic.w	r2, r2, #8
 8009ce2:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	22ff      	movs	r2, #255	; 0xff
 8009cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8009cfe:	e001      	b.n	8009d04 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	ff8fffbf 	.word	0xff8fffbf

08009d20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	7f1b      	ldrb	r3, [r3, #28]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_RTC_SetTime+0x1c>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e085      	b.n	8009e48 <HAL_RTC_SetTime+0x128>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2202      	movs	r2, #2
 8009d46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d126      	bne.n	8009d9c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fb54 	bl	800a414 <RTC_ByteToBcd2>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fb4d 	bl	800a414 <RTC_ByteToBcd2>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d7e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	789b      	ldrb	r3, [r3, #2]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fb45 	bl	800a414 <RTC_ByteToBcd2>
 8009d8a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d8c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	78db      	ldrb	r3, [r3, #3]
 8009d94:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	e018      	b.n	8009dce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009dbc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009dc2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	78db      	ldrb	r3, [r3, #3]
 8009dc8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	22ca      	movs	r2, #202	; 0xca
 8009dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2253      	movs	r2, #83	; 0x53
 8009ddc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 fabc 	bl	800a35c <RTC_EnterInitMode>
 8009de4:	4603      	mov	r3, r0
 8009de6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009de8:	7cfb      	ldrb	r3, [r7, #19]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d11e      	bne.n	8009e2c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	6979      	ldr	r1, [r7, #20]
 8009df4:	4b16      	ldr	r3, [pc, #88]	; (8009e50 <HAL_RTC_SetTime+0x130>)
 8009df6:	400b      	ands	r3, r1
 8009df8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6899      	ldr	r1, [r3, #8]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	68da      	ldr	r2, [r3, #12]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fad1 	bl	800a3ca <RTC_ExitInitMode>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009e2c:	7cfb      	ldrb	r3, [r7, #19]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d102      	bne.n	8009e38 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	22ff      	movs	r2, #255	; 0xff
 8009e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	771a      	strb	r2, [r3, #28]

  return status;
 8009e46:	7cfb      	ldrb	r3, [r7, #19]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}
 8009e50:	007f7f7f 	.word	0x007f7f7f

08009e54 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b22      	ldr	r3, [pc, #136]	; (8009f0c <HAL_RTC_GetTime+0xb8>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	0c1b      	lsrs	r3, r3, #16
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	0a1b      	lsrs	r3, r3, #8
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	0d9b      	lsrs	r3, r3, #22
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d11a      	bne.n	8009f02 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 fabd 	bl	800a450 <RTC_Bcd2ToByte>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	461a      	mov	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	785b      	ldrb	r3, [r3, #1]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fab4 	bl	800a450 <RTC_Bcd2ToByte>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	461a      	mov	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	789b      	ldrb	r3, [r3, #2]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 faab 	bl	800a450 <RTC_Bcd2ToByte>
 8009efa:	4603      	mov	r3, r0
 8009efc:	461a      	mov	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	007f7f7f 	.word	0x007f7f7f

08009f10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f10:	b590      	push	{r4, r7, lr}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	7f1b      	ldrb	r3, [r3, #28]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d101      	bne.n	8009f2c <HAL_RTC_SetDate+0x1c>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e06f      	b.n	800a00c <HAL_RTC_SetDate+0xfc>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2202      	movs	r2, #2
 8009f36:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10e      	bne.n	8009f5c <HAL_RTC_SetDate+0x4c>
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	f003 0310 	and.w	r3, r3, #16
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	f023 0310 	bic.w	r3, r3, #16
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	330a      	adds	r3, #10
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d11c      	bne.n	8009f9c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	78db      	ldrb	r3, [r3, #3]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fa54 	bl	800a414 <RTC_ByteToBcd2>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fa4d 	bl	800a414 <RTC_ByteToBcd2>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f7e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	789b      	ldrb	r3, [r3, #2]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fa45 	bl	800a414 <RTC_ByteToBcd2>
 8009f8a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f8c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	e00e      	b.n	8009fba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	78db      	ldrb	r3, [r3, #3]
 8009fa0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	785b      	ldrb	r3, [r3, #1]
 8009fa6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009fa8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009fae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	22ca      	movs	r2, #202	; 0xca
 8009fc0:	625a      	str	r2, [r3, #36]	; 0x24
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2253      	movs	r2, #83	; 0x53
 8009fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 f9c6 	bl	800a35c <RTC_EnterInitMode>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009fd4:	7cfb      	ldrb	r3, [r7, #19]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	6979      	ldr	r1, [r7, #20]
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <HAL_RTC_SetDate+0x104>)
 8009fe2:	400b      	ands	r3, r1
 8009fe4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 f9ef 	bl	800a3ca <RTC_ExitInitMode>
 8009fec:	4603      	mov	r3, r0
 8009fee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009ff0:	7cfb      	ldrb	r3, [r7, #19]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d102      	bne.n	8009ffc <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	771a      	strb	r2, [r3, #28]

  return status;
 800a00a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	371c      	adds	r7, #28
 800a010:	46bd      	mov	sp, r7
 800a012:	bd90      	pop	{r4, r7, pc}
 800a014:	00ffff3f 	.word	0x00ffff3f

0800a018 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <HAL_RTC_GetDate+0x9c>)
 800a030:	4013      	ands	r3, r2
 800a032:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	0c1b      	lsrs	r3, r3, #16
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	0a1b      	lsrs	r3, r3, #8
 800a042:	b2db      	uxtb	r3, r3
 800a044:	f003 031f 	and.w	r3, r3, #31
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a056:	b2da      	uxtb	r2, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	0b5b      	lsrs	r3, r3, #13
 800a060:	b2db      	uxtb	r3, r3
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	b2da      	uxtb	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d11a      	bne.n	800a0a8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	78db      	ldrb	r3, [r3, #3]
 800a076:	4618      	mov	r0, r3
 800a078:	f000 f9ea 	bl	800a450 <RTC_Bcd2ToByte>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 f9e1 	bl	800a450 <RTC_Bcd2ToByte>
 800a08e:	4603      	mov	r3, r0
 800a090:	461a      	mov	r2, r3
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	789b      	ldrb	r3, [r3, #2]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f9d8 	bl	800a450 <RTC_Bcd2ToByte>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	00ffff3f 	.word	0x00ffff3f

0800a0b8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b089      	sub	sp, #36	; 0x24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	7f1b      	ldrb	r3, [r3, #28]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_RTC_SetAlarm+0x24>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e113      	b.n	800a304 <HAL_RTC_SetAlarm+0x24c>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d137      	bne.n	800a15e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2200      	movs	r2, #0
 800a100:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f984 	bl	800a414 <RTC_ByteToBcd2>
 800a10c:	4603      	mov	r3, r0
 800a10e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	4618      	mov	r0, r3
 800a116:	f000 f97d 	bl	800a414 <RTC_ByteToBcd2>
 800a11a:	4603      	mov	r3, r0
 800a11c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a11e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	789b      	ldrb	r3, [r3, #2]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 f975 	bl	800a414 <RTC_ByteToBcd2>
 800a12a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a12c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	78db      	ldrb	r3, [r3, #3]
 800a134:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a136:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f967 	bl	800a414 <RTC_ByteToBcd2>
 800a146:	4603      	mov	r3, r0
 800a148:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a14a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a152:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a158:	4313      	orrs	r3, r2
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e023      	b.n	800a1a6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d102      	bne.n	800a172 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a17e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a184:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	78db      	ldrb	r3, [r3, #3]
 800a18a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a18c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a194:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a196:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a19c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	22ca      	movs	r2, #202	; 0xca
 800a1b8:	625a      	str	r2, [r3, #36]	; 0x24
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2253      	movs	r2, #83	; 0x53
 800a1c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ca:	d148      	bne.n	800a25e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1da:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1ea:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a1fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1fe:	f7fb fb97 	bl	8005930 <HAL_GetTick>
 800a202:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a204:	e013      	b.n	800a22e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a206:	f7fb fb93 	bl	8005930 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a214:	d90b      	bls.n	800a22e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	22ff      	movs	r2, #255	; 0xff
 800a21c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2203      	movs	r2, #3
 800a222:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e06a      	b.n	800a304 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d0e4      	beq.n	800a206 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a25a:	609a      	str	r2, [r3, #8]
 800a25c:	e047      	b.n	800a2ee <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a26c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a27c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	b2da      	uxtb	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a28e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a290:	f7fb fb4e 	bl	8005930 <HAL_GetTick>
 800a294:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a296:	e013      	b.n	800a2c0 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a298:	f7fb fb4a 	bl	8005930 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2a6:	d90b      	bls.n	800a2c0 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	22ff      	movs	r2, #255	; 0xff
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e021      	b.n	800a304 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0e4      	beq.n	800a298 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	22ff      	movs	r2, #255	; 0xff
 800a2f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3724      	adds	r7, #36	; 0x24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd90      	pop	{r4, r7, pc}

0800a30c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a326:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a328:	f7fb fb02 	bl	8005930 <HAL_GetTick>
 800a32c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a32e:	e009      	b.n	800a344 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a330:	f7fb fafe 	bl	8005930 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a33e:	d901      	bls.n	800a344 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e007      	b.n	800a354 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0ee      	beq.n	800a330 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	d122      	bne.n	800a3c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a388:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a38a:	f7fb fad1 	bl	8005930 <HAL_GetTick>
 800a38e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a390:	e00c      	b.n	800a3ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a392:	f7fb facd 	bl	8005930 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3a0:	d904      	bls.n	800a3ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <RTC_EnterInitMode+0x64>
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d1e8      	bne.n	800a392 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff ff89 	bl	800a30c <HAL_RTC_WaitForSynchro>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2204      	movs	r2, #4
 800a404:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a422:	e005      	b.n	800a430 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	3b0a      	subs	r3, #10
 800a42e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	2b09      	cmp	r3, #9
 800a434:	d8f6      	bhi.n	800a424 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	011b      	lsls	r3, r3, #4
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	4313      	orrs	r3, r2
 800a442:	b2db      	uxtb	r3, r3
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	091b      	lsrs	r3, r3, #4
 800a462:	b2db      	uxtb	r3, r3
 800a464:	461a      	mov	r2, r3
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	b2da      	uxtb	r2, r3
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	f003 030f 	and.w	r3, r3, #15
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	4413      	add	r3, r2
 800a47e:	b2db      	uxtb	r3, r3
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	7f1b      	ldrb	r3, [r3, #28]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e050      	b.n	800a54a <HAL_RTCEx_SetTimeStamp+0xbe>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0206 	bic.w	r2, r2, #6
 800a4c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	22ca      	movs	r2, #202	; 0xca
 800a4ee:	625a      	str	r2, [r3, #36]	; 0x24
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2253      	movs	r2, #83	; 0x53
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	b2da      	uxtb	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800a510:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800a522:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a532:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	22ff      	movs	r2, #255	; 0xff
 800a53a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2201      	movs	r2, #1
 800a540:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	371c      	adds	r7, #28
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	fffff7f7 	.word	0xfffff7f7

0800a55c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e025      	b.n	800a5bc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d106      	bne.n	800a58a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7f6 ff65 	bl	8001454 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2202      	movs	r2, #2
 800a58e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f002 f981 	bl	800c8a4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	f002 f9d5 	bl	800c95c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5d6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d101      	bne.n	800a5e2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e021      	b.n	800a626 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d002      	beq.n	800a5ee <HAL_SDRAM_SendCommand+0x2a>
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2b05      	cmp	r3, #5
 800a5ec:	d118      	bne.n	800a620 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	68b9      	ldr	r1, [r7, #8]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f002 fa16 	bl	800ca30 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d104      	bne.n	800a616 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2205      	movs	r2, #5
 800a610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a614:	e006      	b.n	800a624 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a61e:	e001      	b.n	800a624 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d101      	bne.n	800a648 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a644:	2302      	movs	r3, #2
 800a646:	e016      	b.n	800a676 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	d10f      	bne.n	800a674 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f002 fa08 	bl	800ca78 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	e000      	b.n	800a676 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e09d      	b.n	800a7cc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2b00      	cmp	r3, #0
 800a696:	d108      	bne.n	800a6aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6a0:	d009      	beq.n	800a6b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	61da      	str	r2, [r3, #28]
 800a6a8:	e005      	b.n	800a6b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7f8 fda3 	bl	800321c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6f6:	d902      	bls.n	800a6fe <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	e002      	b.n	800a704 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a6fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a702:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a70c:	d007      	beq.n	800a71e <HAL_SPI_Init+0xa0>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a716:	d002      	beq.n	800a71e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a72e:	431a      	orrs	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	431a      	orrs	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	431a      	orrs	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a74c:	431a      	orrs	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a760:	ea42 0103 	orr.w	r1, r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a768:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	0c1b      	lsrs	r3, r3, #16
 800a77a:	f003 0204 	and.w	r2, r3, #4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78c:	f003 0308 	and.w	r3, r3, #8
 800a790:	431a      	orrs	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a79a:	ea42 0103 	orr.w	r1, r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e049      	b.n	800a87a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7fa fe08 	bl	8005410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3304      	adds	r3, #4
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f000 fac0 	bl	800ad98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b01      	cmp	r3, #1
 800a896:	d001      	beq.n	800a89c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e054      	b.n	800a946 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0201 	orr.w	r2, r2, #1
 800a8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a26      	ldr	r2, [pc, #152]	; (800a954 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d022      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c6:	d01d      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a22      	ldr	r2, [pc, #136]	; (800a958 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d018      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a21      	ldr	r2, [pc, #132]	; (800a95c <HAL_TIM_Base_Start_IT+0xd8>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d013      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d00e      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <HAL_TIM_Base_Start_IT+0xe0>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d009      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a1c      	ldr	r2, [pc, #112]	; (800a968 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d004      	beq.n	800a904 <HAL_TIM_Base_Start_IT+0x80>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <HAL_TIM_Base_Start_IT+0xe8>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d115      	bne.n	800a930 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	4b19      	ldr	r3, [pc, #100]	; (800a970 <HAL_TIM_Base_Start_IT+0xec>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b06      	cmp	r3, #6
 800a914:	d015      	beq.n	800a942 <HAL_TIM_Base_Start_IT+0xbe>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a91c:	d011      	beq.n	800a942 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f042 0201 	orr.w	r2, r2, #1
 800a92c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92e:	e008      	b.n	800a942 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0201 	orr.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	e000      	b.n	800a944 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	40010000 	.word	0x40010000
 800a958:	40000400 	.word	0x40000400
 800a95c:	40000800 	.word	0x40000800
 800a960:	40000c00 	.word	0x40000c00
 800a964:	40010400 	.word	0x40010400
 800a968:	40014000 	.word	0x40014000
 800a96c:	40001800 	.word	0x40001800
 800a970:	00010007 	.word	0x00010007

0800a974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b02      	cmp	r3, #2
 800a988:	d122      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	f003 0302 	and.w	r3, r3, #2
 800a994:	2b02      	cmp	r3, #2
 800a996:	d11b      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f06f 0202 	mvn.w	r2, #2
 800a9a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	f003 0303 	and.w	r3, r3, #3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f9d0 	bl	800ad5c <HAL_TIM_IC_CaptureCallback>
 800a9bc:	e005      	b.n	800a9ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9c2 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f9d3 	bl	800ad70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	d122      	bne.n	800aa24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d11b      	bne.n	800aa24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0204 	mvn.w	r2, #4
 800a9f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f9a6 	bl	800ad5c <HAL_TIM_IC_CaptureCallback>
 800aa10:	e005      	b.n	800aa1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f998 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f9a9 	bl	800ad70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f003 0308 	and.w	r3, r3, #8
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	d122      	bne.n	800aa78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0308 	and.w	r3, r3, #8
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d11b      	bne.n	800aa78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f06f 0208 	mvn.w	r2, #8
 800aa48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2204      	movs	r2, #4
 800aa4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	f003 0303 	and.w	r3, r3, #3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f97c 	bl	800ad5c <HAL_TIM_IC_CaptureCallback>
 800aa64:	e005      	b.n	800aa72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f96e 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f97f 	bl	800ad70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	f003 0310 	and.w	r3, r3, #16
 800aa82:	2b10      	cmp	r3, #16
 800aa84:	d122      	bne.n	800aacc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f003 0310 	and.w	r3, r3, #16
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d11b      	bne.n	800aacc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f06f 0210 	mvn.w	r2, #16
 800aa9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f952 	bl	800ad5c <HAL_TIM_IC_CaptureCallback>
 800aab8:	e005      	b.n	800aac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f944 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f955 	bl	800ad70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d10e      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d107      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0201 	mvn.w	r2, #1
 800aaf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7f8 fa6a 	bl	8002fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab02:	2b80      	cmp	r3, #128	; 0x80
 800ab04:	d10e      	bne.n	800ab24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab10:	2b80      	cmp	r3, #128	; 0x80
 800ab12:	d107      	bne.n	800ab24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fb0c 	bl	800b13c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab32:	d10e      	bne.n	800ab52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3e:	2b80      	cmp	r3, #128	; 0x80
 800ab40:	d107      	bne.n	800ab52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 faff 	bl	800b150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5c:	2b40      	cmp	r3, #64	; 0x40
 800ab5e:	d10e      	bne.n	800ab7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6a:	2b40      	cmp	r3, #64	; 0x40
 800ab6c:	d107      	bne.n	800ab7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f903 	bl	800ad84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	f003 0320 	and.w	r3, r3, #32
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d10e      	bne.n	800abaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d107      	bne.n	800abaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f06f 0220 	mvn.w	r2, #32
 800aba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fabf 	bl	800b128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abaa:	bf00      	nop
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d101      	bne.n	800abd0 <HAL_TIM_ConfigClockSource+0x1c>
 800abcc:	2302      	movs	r3, #2
 800abce:	e0b4      	b.n	800ad3a <HAL_TIM_ConfigClockSource+0x186>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	4b56      	ldr	r3, [pc, #344]	; (800ad44 <HAL_TIM_ConfigClockSource+0x190>)
 800abec:	4013      	ands	r3, r2
 800abee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac08:	d03e      	beq.n	800ac88 <HAL_TIM_ConfigClockSource+0xd4>
 800ac0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac0e:	f200 8087 	bhi.w	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac16:	f000 8086 	beq.w	800ad26 <HAL_TIM_ConfigClockSource+0x172>
 800ac1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac1e:	d87f      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac20:	2b70      	cmp	r3, #112	; 0x70
 800ac22:	d01a      	beq.n	800ac5a <HAL_TIM_ConfigClockSource+0xa6>
 800ac24:	2b70      	cmp	r3, #112	; 0x70
 800ac26:	d87b      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac28:	2b60      	cmp	r3, #96	; 0x60
 800ac2a:	d050      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x11a>
 800ac2c:	2b60      	cmp	r3, #96	; 0x60
 800ac2e:	d877      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac30:	2b50      	cmp	r3, #80	; 0x50
 800ac32:	d03c      	beq.n	800acae <HAL_TIM_ConfigClockSource+0xfa>
 800ac34:	2b50      	cmp	r3, #80	; 0x50
 800ac36:	d873      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac38:	2b40      	cmp	r3, #64	; 0x40
 800ac3a:	d058      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x13a>
 800ac3c:	2b40      	cmp	r3, #64	; 0x40
 800ac3e:	d86f      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac40:	2b30      	cmp	r3, #48	; 0x30
 800ac42:	d064      	beq.n	800ad0e <HAL_TIM_ConfigClockSource+0x15a>
 800ac44:	2b30      	cmp	r3, #48	; 0x30
 800ac46:	d86b      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d060      	beq.n	800ad0e <HAL_TIM_ConfigClockSource+0x15a>
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d867      	bhi.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d05c      	beq.n	800ad0e <HAL_TIM_ConfigClockSource+0x15a>
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	d05a      	beq.n	800ad0e <HAL_TIM_ConfigClockSource+0x15a>
 800ac58:	e062      	b.n	800ad20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	6899      	ldr	r1, [r3, #8]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	f000 f9af 	bl	800afcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	609a      	str	r2, [r3, #8]
      break;
 800ac86:	e04f      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	6899      	ldr	r1, [r3, #8]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f000 f998 	bl	800afcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689a      	ldr	r2, [r3, #8]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acaa:	609a      	str	r2, [r3, #8]
      break;
 800acac:	e03c      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6859      	ldr	r1, [r3, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	461a      	mov	r2, r3
 800acbc:	f000 f90c 	bl	800aed8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2150      	movs	r1, #80	; 0x50
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f965 	bl	800af96 <TIM_ITRx_SetConfig>
      break;
 800accc:	e02c      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6859      	ldr	r1, [r3, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	461a      	mov	r2, r3
 800acdc:	f000 f92b 	bl	800af36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2160      	movs	r1, #96	; 0x60
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 f955 	bl	800af96 <TIM_ITRx_SetConfig>
      break;
 800acec:	e01c      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	6859      	ldr	r1, [r3, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f000 f8ec 	bl	800aed8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2140      	movs	r1, #64	; 0x40
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 f945 	bl	800af96 <TIM_ITRx_SetConfig>
      break;
 800ad0c:	e00c      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f000 f93c 	bl	800af96 <TIM_ITRx_SetConfig>
      break;
 800ad1e:	e003      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
      break;
 800ad24:	e000      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	fffeff88 	.word	0xfffeff88

0800ad48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a40      	ldr	r2, [pc, #256]	; (800aeac <TIM_Base_SetConfig+0x114>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d013      	beq.n	800add8 <TIM_Base_SetConfig+0x40>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb6:	d00f      	beq.n	800add8 <TIM_Base_SetConfig+0x40>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a3d      	ldr	r2, [pc, #244]	; (800aeb0 <TIM_Base_SetConfig+0x118>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d00b      	beq.n	800add8 <TIM_Base_SetConfig+0x40>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a3c      	ldr	r2, [pc, #240]	; (800aeb4 <TIM_Base_SetConfig+0x11c>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d007      	beq.n	800add8 <TIM_Base_SetConfig+0x40>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a3b      	ldr	r2, [pc, #236]	; (800aeb8 <TIM_Base_SetConfig+0x120>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d003      	beq.n	800add8 <TIM_Base_SetConfig+0x40>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a3a      	ldr	r2, [pc, #232]	; (800aebc <TIM_Base_SetConfig+0x124>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d108      	bne.n	800adea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a2f      	ldr	r2, [pc, #188]	; (800aeac <TIM_Base_SetConfig+0x114>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d02b      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adf8:	d027      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a2c      	ldr	r2, [pc, #176]	; (800aeb0 <TIM_Base_SetConfig+0x118>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d023      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a2b      	ldr	r2, [pc, #172]	; (800aeb4 <TIM_Base_SetConfig+0x11c>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d01f      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a2a      	ldr	r2, [pc, #168]	; (800aeb8 <TIM_Base_SetConfig+0x120>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d01b      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a29      	ldr	r2, [pc, #164]	; (800aebc <TIM_Base_SetConfig+0x124>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d017      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a28      	ldr	r2, [pc, #160]	; (800aec0 <TIM_Base_SetConfig+0x128>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d013      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4a27      	ldr	r2, [pc, #156]	; (800aec4 <TIM_Base_SetConfig+0x12c>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d00f      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a26      	ldr	r2, [pc, #152]	; (800aec8 <TIM_Base_SetConfig+0x130>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d00b      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a25      	ldr	r2, [pc, #148]	; (800aecc <TIM_Base_SetConfig+0x134>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d007      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a24      	ldr	r2, [pc, #144]	; (800aed0 <TIM_Base_SetConfig+0x138>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d003      	beq.n	800ae4a <TIM_Base_SetConfig+0xb2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a23      	ldr	r2, [pc, #140]	; (800aed4 <TIM_Base_SetConfig+0x13c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d108      	bne.n	800ae5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a0a      	ldr	r2, [pc, #40]	; (800aeac <TIM_Base_SetConfig+0x114>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_Base_SetConfig+0xf8>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a0c      	ldr	r2, [pc, #48]	; (800aebc <TIM_Base_SetConfig+0x124>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d103      	bne.n	800ae98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	691a      	ldr	r2, [r3, #16]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	615a      	str	r2, [r3, #20]
}
 800ae9e:	bf00      	nop
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	40010000 	.word	0x40010000
 800aeb0:	40000400 	.word	0x40000400
 800aeb4:	40000800 	.word	0x40000800
 800aeb8:	40000c00 	.word	0x40000c00
 800aebc:	40010400 	.word	0x40010400
 800aec0:	40014000 	.word	0x40014000
 800aec4:	40014400 	.word	0x40014400
 800aec8:	40014800 	.word	0x40014800
 800aecc:	40001800 	.word	0x40001800
 800aed0:	40001c00 	.word	0x40001c00
 800aed4:	40002000 	.word	0x40002000

0800aed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	f023 0201 	bic.w	r2, r3, #1
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f023 030a 	bic.w	r3, r3, #10
 800af14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	621a      	str	r2, [r3, #32]
}
 800af2a:	bf00      	nop
 800af2c:	371c      	adds	r7, #28
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af36:	b480      	push	{r7}
 800af38:	b087      	sub	sp, #28
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	f023 0210 	bic.w	r2, r3, #16
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	031b      	lsls	r3, r3, #12
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	4313      	orrs	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	621a      	str	r2, [r3, #32]
}
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af96:	b480      	push	{r7}
 800af98:	b085      	sub	sp, #20
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f043 0307 	orr.w	r3, r3, #7
 800afb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	609a      	str	r2, [r3, #8]
}
 800afc0:	bf00      	nop
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	021a      	lsls	r2, r3, #8
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	431a      	orrs	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	609a      	str	r2, [r3, #8]
}
 800b000:	bf00      	nop
 800b002:	371c      	adds	r7, #28
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b020:	2302      	movs	r3, #2
 800b022:	e06d      	b.n	800b100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a30      	ldr	r2, [pc, #192]	; (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a2f      	ldr	r2, [pc, #188]	; (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d108      	bne.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b05e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a20      	ldr	r2, [pc, #128]	; (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d022      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b096:	d01d      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d018      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a1c      	ldr	r2, [pc, #112]	; (800b118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d013      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a1a      	ldr	r2, [pc, #104]	; (800b11c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d00e      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a15      	ldr	r2, [pc, #84]	; (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d009      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a16      	ldr	r2, [pc, #88]	; (800b120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d004      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a15      	ldr	r2, [pc, #84]	; (800b124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d10c      	bne.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40010000 	.word	0x40010000
 800b110:	40010400 	.word	0x40010400
 800b114:	40000400 	.word	0x40000400
 800b118:	40000800 	.word	0x40000800
 800b11c:	40000c00 	.word	0x40000c00
 800b120:	40014000 	.word	0x40014000
 800b124:	40001800 	.word	0x40001800

0800b128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e040      	b.n	800b1f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7fa fa68 	bl	800565c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2224      	movs	r2, #36	; 0x24
 800b190:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f022 0201 	bic.w	r2, r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fcaa 	bl	800bafc <UART_SetConfig>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d101      	bne.n	800b1b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e022      	b.n	800b1f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 ff02 	bl	800bfc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f042 0201 	orr.w	r2, r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 ff89 	bl	800c108 <UART_CheckIdleState>
 800b1f6:	4603      	mov	r3, r0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b08a      	sub	sp, #40	; 0x28
 800b204:	af02      	add	r7, sp, #8
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	603b      	str	r3, [r7, #0]
 800b20c:	4613      	mov	r3, r2
 800b20e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b214:	2b20      	cmp	r3, #32
 800b216:	d171      	bne.n	800b2fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <HAL_UART_Transmit+0x24>
 800b21e:	88fb      	ldrh	r3, [r7, #6]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e06a      	b.n	800b2fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2221      	movs	r2, #33	; 0x21
 800b234:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b236:	f7fa fb7b 	bl	8005930 <HAL_GetTick>
 800b23a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	88fa      	ldrh	r2, [r7, #6]
 800b248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b254:	d108      	bne.n	800b268 <HAL_UART_Transmit+0x68>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d104      	bne.n	800b268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	61bb      	str	r3, [r7, #24]
 800b266:	e003      	b.n	800b270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b270:	e02c      	b.n	800b2cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2200      	movs	r2, #0
 800b27a:	2180      	movs	r1, #128	; 0x80
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 ff7a 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e038      	b.n	800b2fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	61bb      	str	r3, [r7, #24]
 800b2a8:	e007      	b.n	800b2ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1cc      	bne.n	800b272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2140      	movs	r1, #64	; 0x40
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 ff47 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e005      	b.n	800b2fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	e000      	b.n	800b2fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b2fc:	2302      	movs	r3, #2
  }
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3720      	adds	r7, #32
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b08a      	sub	sp, #40	; 0x28
 800b30a:	af02      	add	r7, sp, #8
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	4613      	mov	r3, r2
 800b314:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31c:	2b20      	cmp	r3, #32
 800b31e:	f040 80b1 	bne.w	800b484 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <HAL_UART_Receive+0x28>
 800b328:	88fb      	ldrh	r3, [r7, #6]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e0a9      	b.n	800b486 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2222      	movs	r2, #34	; 0x22
 800b33e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b348:	f7fa faf2 	bl	8005930 <HAL_GetTick>
 800b34c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	88fa      	ldrh	r2, [r7, #6]
 800b352:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	88fa      	ldrh	r2, [r7, #6]
 800b35a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b366:	d10e      	bne.n	800b386 <HAL_UART_Receive+0x80>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <HAL_UART_Receive+0x76>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b37a:	e02d      	b.n	800b3d8 <HAL_UART_Receive+0xd2>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	22ff      	movs	r2, #255	; 0xff
 800b380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b384:	e028      	b.n	800b3d8 <HAL_UART_Receive+0xd2>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10d      	bne.n	800b3aa <HAL_UART_Receive+0xa4>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d104      	bne.n	800b3a0 <HAL_UART_Receive+0x9a>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	22ff      	movs	r2, #255	; 0xff
 800b39a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b39e:	e01b      	b.n	800b3d8 <HAL_UART_Receive+0xd2>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	227f      	movs	r2, #127	; 0x7f
 800b3a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3a8:	e016      	b.n	800b3d8 <HAL_UART_Receive+0xd2>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3b2:	d10d      	bne.n	800b3d0 <HAL_UART_Receive+0xca>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d104      	bne.n	800b3c6 <HAL_UART_Receive+0xc0>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	227f      	movs	r2, #127	; 0x7f
 800b3c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3c4:	e008      	b.n	800b3d8 <HAL_UART_Receive+0xd2>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	223f      	movs	r2, #63	; 0x3f
 800b3ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3ce:	e003      	b.n	800b3d8 <HAL_UART_Receive+0xd2>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e8:	d108      	bne.n	800b3fc <HAL_UART_Receive+0xf6>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d104      	bne.n	800b3fc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	e003      	b.n	800b404 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b404:	e032      	b.n	800b46c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2200      	movs	r2, #0
 800b40e:	2120      	movs	r1, #32
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 feb0 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e032      	b.n	800b486 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10c      	bne.n	800b440 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	8a7b      	ldrh	r3, [r7, #18]
 800b430:	4013      	ands	r3, r2
 800b432:	b29a      	uxth	r2, r3
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	3302      	adds	r3, #2
 800b43c:	61bb      	str	r3, [r7, #24]
 800b43e:	e00c      	b.n	800b45a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	b2da      	uxtb	r2, r3
 800b448:	8a7b      	ldrh	r3, [r7, #18]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	4013      	ands	r3, r2
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	3301      	adds	r3, #1
 800b458:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b460:	b29b      	uxth	r3, r3
 800b462:	3b01      	subs	r3, #1
 800b464:	b29a      	uxth	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b472:	b29b      	uxth	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1c6      	bne.n	800b406 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	e000      	b.n	800b486 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800b484:	2302      	movs	r3, #2
  }
}
 800b486:	4618      	mov	r0, r3
 800b488:	3720      	adds	r7, #32
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b08a      	sub	sp, #40	; 0x28
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	4613      	mov	r3, r2
 800b49a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	d132      	bne.n	800b50c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <HAL_UART_Receive_IT+0x24>
 800b4ac:	88fb      	ldrh	r3, [r7, #6]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e02b      	b.n	800b50e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d018      	beq.n	800b4fc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	e853 3f00 	ldrex	r3, [r3]
 800b4d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	623b      	str	r3, [r7, #32]
 800b4ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	69f9      	ldr	r1, [r7, #28]
 800b4ee:	6a3a      	ldr	r2, [r7, #32]
 800b4f0:	e841 2300 	strex	r3, r2, [r1]
 800b4f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e6      	bne.n	800b4ca <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b4fc:	88fb      	ldrh	r3, [r7, #6]
 800b4fe:	461a      	mov	r2, r3
 800b500:	68b9      	ldr	r1, [r7, #8]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 fefe 	bl	800c304 <UART_Start_Receive_IT>
 800b508:	4603      	mov	r3, r0
 800b50a:	e000      	b.n	800b50e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b50c:	2302      	movs	r3, #2
  }
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3728      	adds	r7, #40	; 0x28
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b0ba      	sub	sp, #232	; 0xe8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b53e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b542:	f640 030f 	movw	r3, #2063	; 0x80f
 800b546:	4013      	ands	r3, r2
 800b548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b54c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b550:	2b00      	cmp	r3, #0
 800b552:	d115      	bne.n	800b580 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b558:	f003 0320 	and.w	r3, r3, #32
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00f      	beq.n	800b580 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b564:	f003 0320 	and.w	r3, r3, #32
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d009      	beq.n	800b580 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 8297 	beq.w	800baa4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	4798      	blx	r3
      }
      return;
 800b57e:	e291      	b.n	800baa4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 8117 	beq.w	800b7b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b59a:	4b85      	ldr	r3, [pc, #532]	; (800b7b0 <HAL_UART_IRQHandler+0x298>)
 800b59c:	4013      	ands	r3, r2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 810a 	beq.w	800b7b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d011      	beq.n	800b5d4 <HAL_UART_IRQHandler+0xbc>
 800b5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00b      	beq.n	800b5d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ca:	f043 0201 	orr.w	r2, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5d8:	f003 0302 	and.w	r3, r3, #2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d011      	beq.n	800b604 <HAL_UART_IRQHandler+0xec>
 800b5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5fa:	f043 0204 	orr.w	r2, r3, #4
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d011      	beq.n	800b634 <HAL_UART_IRQHandler+0x11c>
 800b610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2204      	movs	r2, #4
 800b622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b62a:	f043 0202 	orr.w	r2, r3, #2
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b638:	f003 0308 	and.w	r3, r3, #8
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d017      	beq.n	800b670 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b644:	f003 0320 	and.w	r3, r3, #32
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d105      	bne.n	800b658 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b650:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00b      	beq.n	800b670 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2208      	movs	r2, #8
 800b65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b666:	f043 0208 	orr.w	r2, r3, #8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d012      	beq.n	800b6a2 <HAL_UART_IRQHandler+0x18a>
 800b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00c      	beq.n	800b6a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b698:	f043 0220 	orr.w	r2, r3, #32
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 81fd 	beq.w	800baa8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b2:	f003 0320 	and.w	r3, r3, #32
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00d      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6be:	f003 0320 	and.w	r3, r3, #32
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d007      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d003      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ea:	2b40      	cmp	r3, #64	; 0x40
 800b6ec:	d005      	beq.n	800b6fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d04f      	beq.n	800b79a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fec8 	bl	800c490 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70a:	2b40      	cmp	r3, #64	; 0x40
 800b70c:	d141      	bne.n	800b792 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b71c:	e853 3f00 	ldrex	r3, [r3]
 800b720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b72c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3308      	adds	r3, #8
 800b736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b73a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b73e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b74a:	e841 2300 	strex	r3, r2, [r1]
 800b74e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1d9      	bne.n	800b70e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d013      	beq.n	800b78a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b766:	4a13      	ldr	r2, [pc, #76]	; (800b7b4 <HAL_UART_IRQHandler+0x29c>)
 800b768:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fb f846 	bl	8006800 <HAL_DMA_Abort_IT>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d017      	beq.n	800b7aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b784:	4610      	mov	r0, r2
 800b786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b788:	e00f      	b.n	800b7aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f9a0 	bl	800bad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b790:	e00b      	b.n	800b7aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f99c 	bl	800bad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b798:	e007      	b.n	800b7aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f998 	bl	800bad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b7a8:	e17e      	b.n	800baa8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7aa:	bf00      	nop
    return;
 800b7ac:	e17c      	b.n	800baa8 <HAL_UART_IRQHandler+0x590>
 800b7ae:	bf00      	nop
 800b7b0:	04000120 	.word	0x04000120
 800b7b4:	0800c559 	.word	0x0800c559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	f040 814c 	bne.w	800ba5a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c6:	f003 0310 	and.w	r3, r3, #16
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 8145 	beq.w	800ba5a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d4:	f003 0310 	and.w	r3, r3, #16
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 813e 	beq.w	800ba5a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2210      	movs	r2, #16
 800b7e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f0:	2b40      	cmp	r3, #64	; 0x40
 800b7f2:	f040 80b6 	bne.w	800b962 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b802:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 8150 	beq.w	800baac <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b816:	429a      	cmp	r2, r3
 800b818:	f080 8148 	bcs.w	800baac <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b830:	f000 8086 	beq.w	800b940 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b840:	e853 3f00 	ldrex	r3, [r3]
 800b844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b84c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	461a      	mov	r2, r3
 800b85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b85e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b862:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b86a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1da      	bne.n	800b834 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b888:	e853 3f00 	ldrex	r3, [r3]
 800b88c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b88e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e1      	bne.n	800b87e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	3308      	adds	r3, #8
 800b8da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e3      	bne.n	800b8ba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b908:	e853 3f00 	ldrex	r3, [r3]
 800b90c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b910:	f023 0310 	bic.w	r3, r3, #16
 800b914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	461a      	mov	r2, r3
 800b91e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b922:	65bb      	str	r3, [r7, #88]	; 0x58
 800b924:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b92a:	e841 2300 	strex	r3, r2, [r1]
 800b92e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1e4      	bne.n	800b900 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fa fef0 	bl	8006720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2202      	movs	r2, #2
 800b944:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b952:	b29b      	uxth	r3, r3
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	b29b      	uxth	r3, r3
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f8c2 	bl	800bae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b960:	e0a4      	b.n	800baac <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b96e:	b29b      	uxth	r3, r3
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 8096 	beq.w	800bab0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 8091 	beq.w	800bab0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9b0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e4      	bne.n	800b98e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	623b      	str	r3, [r7, #32]
   return(result);
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9e8:	633a      	str	r2, [r7, #48]	; 0x30
 800b9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9f0:	e841 2300 	strex	r3, r2, [r1]
 800b9f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1e3      	bne.n	800b9c4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2220      	movs	r2, #32
 800ba00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f023 0310 	bic.w	r3, r3, #16
 800ba24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba32:	61fb      	str	r3, [r7, #28]
 800ba34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	69b9      	ldr	r1, [r7, #24]
 800ba38:	69fa      	ldr	r2, [r7, #28]
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	617b      	str	r3, [r7, #20]
   return(result);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e4      	bne.n	800ba10 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2202      	movs	r2, #2
 800ba4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f846 	bl	800bae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba58:	e02a      	b.n	800bab0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ba5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00e      	beq.n	800ba84 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ba66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d008      	beq.n	800ba84 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01c      	beq.n	800bab4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	4798      	blx	r3
    }
    return;
 800ba82:	e017      	b.n	800bab4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d012      	beq.n	800bab6 <HAL_UART_IRQHandler+0x59e>
 800ba90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00c      	beq.n	800bab6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fd71 	bl	800c584 <UART_EndTransmit_IT>
    return;
 800baa2:	e008      	b.n	800bab6 <HAL_UART_IRQHandler+0x59e>
      return;
 800baa4:	bf00      	nop
 800baa6:	e006      	b.n	800bab6 <HAL_UART_IRQHandler+0x59e>
    return;
 800baa8:	bf00      	nop
 800baaa:	e004      	b.n	800bab6 <HAL_UART_IRQHandler+0x59e>
      return;
 800baac:	bf00      	nop
 800baae:	e002      	b.n	800bab6 <HAL_UART_IRQHandler+0x59e>
      return;
 800bab0:	bf00      	nop
 800bab2:	e000      	b.n	800bab6 <HAL_UART_IRQHandler+0x59e>
    return;
 800bab4:	bf00      	nop
  }

}
 800bab6:	37e8      	adds	r7, #232	; 0xe8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4ba6      	ldr	r3, [pc, #664]	; (800bdc0 <UART_SetConfig+0x2c4>)
 800bb28:	4013      	ands	r3, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	6812      	ldr	r2, [r2, #0]
 800bb2e:	6979      	ldr	r1, [r7, #20]
 800bb30:	430b      	orrs	r3, r1
 800bb32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68da      	ldr	r2, [r3, #12]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	430a      	orrs	r2, r1
 800bb48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a1b      	ldr	r3, [r3, #32]
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a94      	ldr	r2, [pc, #592]	; (800bdc4 <UART_SetConfig+0x2c8>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d120      	bne.n	800bbba <UART_SetConfig+0xbe>
 800bb78:	4b93      	ldr	r3, [pc, #588]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d816      	bhi.n	800bbb4 <UART_SetConfig+0xb8>
 800bb86:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <UART_SetConfig+0x90>)
 800bb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bba9 	.word	0x0800bba9
 800bb94:	0800bba3 	.word	0x0800bba3
 800bb98:	0800bbaf 	.word	0x0800bbaf
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	77fb      	strb	r3, [r7, #31]
 800bba0:	e150      	b.n	800be44 <UART_SetConfig+0x348>
 800bba2:	2302      	movs	r3, #2
 800bba4:	77fb      	strb	r3, [r7, #31]
 800bba6:	e14d      	b.n	800be44 <UART_SetConfig+0x348>
 800bba8:	2304      	movs	r3, #4
 800bbaa:	77fb      	strb	r3, [r7, #31]
 800bbac:	e14a      	b.n	800be44 <UART_SetConfig+0x348>
 800bbae:	2308      	movs	r3, #8
 800bbb0:	77fb      	strb	r3, [r7, #31]
 800bbb2:	e147      	b.n	800be44 <UART_SetConfig+0x348>
 800bbb4:	2310      	movs	r3, #16
 800bbb6:	77fb      	strb	r3, [r7, #31]
 800bbb8:	e144      	b.n	800be44 <UART_SetConfig+0x348>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a83      	ldr	r2, [pc, #524]	; (800bdcc <UART_SetConfig+0x2d0>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d132      	bne.n	800bc2a <UART_SetConfig+0x12e>
 800bbc4:	4b80      	ldr	r3, [pc, #512]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbca:	f003 030c 	and.w	r3, r3, #12
 800bbce:	2b0c      	cmp	r3, #12
 800bbd0:	d828      	bhi.n	800bc24 <UART_SetConfig+0x128>
 800bbd2:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <UART_SetConfig+0xdc>)
 800bbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd8:	0800bc0d 	.word	0x0800bc0d
 800bbdc:	0800bc25 	.word	0x0800bc25
 800bbe0:	0800bc25 	.word	0x0800bc25
 800bbe4:	0800bc25 	.word	0x0800bc25
 800bbe8:	0800bc19 	.word	0x0800bc19
 800bbec:	0800bc25 	.word	0x0800bc25
 800bbf0:	0800bc25 	.word	0x0800bc25
 800bbf4:	0800bc25 	.word	0x0800bc25
 800bbf8:	0800bc13 	.word	0x0800bc13
 800bbfc:	0800bc25 	.word	0x0800bc25
 800bc00:	0800bc25 	.word	0x0800bc25
 800bc04:	0800bc25 	.word	0x0800bc25
 800bc08:	0800bc1f 	.word	0x0800bc1f
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	77fb      	strb	r3, [r7, #31]
 800bc10:	e118      	b.n	800be44 <UART_SetConfig+0x348>
 800bc12:	2302      	movs	r3, #2
 800bc14:	77fb      	strb	r3, [r7, #31]
 800bc16:	e115      	b.n	800be44 <UART_SetConfig+0x348>
 800bc18:	2304      	movs	r3, #4
 800bc1a:	77fb      	strb	r3, [r7, #31]
 800bc1c:	e112      	b.n	800be44 <UART_SetConfig+0x348>
 800bc1e:	2308      	movs	r3, #8
 800bc20:	77fb      	strb	r3, [r7, #31]
 800bc22:	e10f      	b.n	800be44 <UART_SetConfig+0x348>
 800bc24:	2310      	movs	r3, #16
 800bc26:	77fb      	strb	r3, [r7, #31]
 800bc28:	e10c      	b.n	800be44 <UART_SetConfig+0x348>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a68      	ldr	r2, [pc, #416]	; (800bdd0 <UART_SetConfig+0x2d4>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d120      	bne.n	800bc76 <UART_SetConfig+0x17a>
 800bc34:	4b64      	ldr	r3, [pc, #400]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bc36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc3e:	2b30      	cmp	r3, #48	; 0x30
 800bc40:	d013      	beq.n	800bc6a <UART_SetConfig+0x16e>
 800bc42:	2b30      	cmp	r3, #48	; 0x30
 800bc44:	d814      	bhi.n	800bc70 <UART_SetConfig+0x174>
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	d009      	beq.n	800bc5e <UART_SetConfig+0x162>
 800bc4a:	2b20      	cmp	r3, #32
 800bc4c:	d810      	bhi.n	800bc70 <UART_SetConfig+0x174>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d002      	beq.n	800bc58 <UART_SetConfig+0x15c>
 800bc52:	2b10      	cmp	r3, #16
 800bc54:	d006      	beq.n	800bc64 <UART_SetConfig+0x168>
 800bc56:	e00b      	b.n	800bc70 <UART_SetConfig+0x174>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	77fb      	strb	r3, [r7, #31]
 800bc5c:	e0f2      	b.n	800be44 <UART_SetConfig+0x348>
 800bc5e:	2302      	movs	r3, #2
 800bc60:	77fb      	strb	r3, [r7, #31]
 800bc62:	e0ef      	b.n	800be44 <UART_SetConfig+0x348>
 800bc64:	2304      	movs	r3, #4
 800bc66:	77fb      	strb	r3, [r7, #31]
 800bc68:	e0ec      	b.n	800be44 <UART_SetConfig+0x348>
 800bc6a:	2308      	movs	r3, #8
 800bc6c:	77fb      	strb	r3, [r7, #31]
 800bc6e:	e0e9      	b.n	800be44 <UART_SetConfig+0x348>
 800bc70:	2310      	movs	r3, #16
 800bc72:	77fb      	strb	r3, [r7, #31]
 800bc74:	e0e6      	b.n	800be44 <UART_SetConfig+0x348>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a56      	ldr	r2, [pc, #344]	; (800bdd4 <UART_SetConfig+0x2d8>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d120      	bne.n	800bcc2 <UART_SetConfig+0x1c6>
 800bc80:	4b51      	ldr	r3, [pc, #324]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc8a:	2bc0      	cmp	r3, #192	; 0xc0
 800bc8c:	d013      	beq.n	800bcb6 <UART_SetConfig+0x1ba>
 800bc8e:	2bc0      	cmp	r3, #192	; 0xc0
 800bc90:	d814      	bhi.n	800bcbc <UART_SetConfig+0x1c0>
 800bc92:	2b80      	cmp	r3, #128	; 0x80
 800bc94:	d009      	beq.n	800bcaa <UART_SetConfig+0x1ae>
 800bc96:	2b80      	cmp	r3, #128	; 0x80
 800bc98:	d810      	bhi.n	800bcbc <UART_SetConfig+0x1c0>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <UART_SetConfig+0x1a8>
 800bc9e:	2b40      	cmp	r3, #64	; 0x40
 800bca0:	d006      	beq.n	800bcb0 <UART_SetConfig+0x1b4>
 800bca2:	e00b      	b.n	800bcbc <UART_SetConfig+0x1c0>
 800bca4:	2300      	movs	r3, #0
 800bca6:	77fb      	strb	r3, [r7, #31]
 800bca8:	e0cc      	b.n	800be44 <UART_SetConfig+0x348>
 800bcaa:	2302      	movs	r3, #2
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e0c9      	b.n	800be44 <UART_SetConfig+0x348>
 800bcb0:	2304      	movs	r3, #4
 800bcb2:	77fb      	strb	r3, [r7, #31]
 800bcb4:	e0c6      	b.n	800be44 <UART_SetConfig+0x348>
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	77fb      	strb	r3, [r7, #31]
 800bcba:	e0c3      	b.n	800be44 <UART_SetConfig+0x348>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	e0c0      	b.n	800be44 <UART_SetConfig+0x348>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a44      	ldr	r2, [pc, #272]	; (800bdd8 <UART_SetConfig+0x2dc>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d125      	bne.n	800bd18 <UART_SetConfig+0x21c>
 800bccc:	4b3e      	ldr	r3, [pc, #248]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcda:	d017      	beq.n	800bd0c <UART_SetConfig+0x210>
 800bcdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bce0:	d817      	bhi.n	800bd12 <UART_SetConfig+0x216>
 800bce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce6:	d00b      	beq.n	800bd00 <UART_SetConfig+0x204>
 800bce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcec:	d811      	bhi.n	800bd12 <UART_SetConfig+0x216>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <UART_SetConfig+0x1fe>
 800bcf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcf6:	d006      	beq.n	800bd06 <UART_SetConfig+0x20a>
 800bcf8:	e00b      	b.n	800bd12 <UART_SetConfig+0x216>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	77fb      	strb	r3, [r7, #31]
 800bcfe:	e0a1      	b.n	800be44 <UART_SetConfig+0x348>
 800bd00:	2302      	movs	r3, #2
 800bd02:	77fb      	strb	r3, [r7, #31]
 800bd04:	e09e      	b.n	800be44 <UART_SetConfig+0x348>
 800bd06:	2304      	movs	r3, #4
 800bd08:	77fb      	strb	r3, [r7, #31]
 800bd0a:	e09b      	b.n	800be44 <UART_SetConfig+0x348>
 800bd0c:	2308      	movs	r3, #8
 800bd0e:	77fb      	strb	r3, [r7, #31]
 800bd10:	e098      	b.n	800be44 <UART_SetConfig+0x348>
 800bd12:	2310      	movs	r3, #16
 800bd14:	77fb      	strb	r3, [r7, #31]
 800bd16:	e095      	b.n	800be44 <UART_SetConfig+0x348>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a2f      	ldr	r2, [pc, #188]	; (800bddc <UART_SetConfig+0x2e0>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d125      	bne.n	800bd6e <UART_SetConfig+0x272>
 800bd22:	4b29      	ldr	r3, [pc, #164]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd30:	d017      	beq.n	800bd62 <UART_SetConfig+0x266>
 800bd32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd36:	d817      	bhi.n	800bd68 <UART_SetConfig+0x26c>
 800bd38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd3c:	d00b      	beq.n	800bd56 <UART_SetConfig+0x25a>
 800bd3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd42:	d811      	bhi.n	800bd68 <UART_SetConfig+0x26c>
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <UART_SetConfig+0x254>
 800bd48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd4c:	d006      	beq.n	800bd5c <UART_SetConfig+0x260>
 800bd4e:	e00b      	b.n	800bd68 <UART_SetConfig+0x26c>
 800bd50:	2301      	movs	r3, #1
 800bd52:	77fb      	strb	r3, [r7, #31]
 800bd54:	e076      	b.n	800be44 <UART_SetConfig+0x348>
 800bd56:	2302      	movs	r3, #2
 800bd58:	77fb      	strb	r3, [r7, #31]
 800bd5a:	e073      	b.n	800be44 <UART_SetConfig+0x348>
 800bd5c:	2304      	movs	r3, #4
 800bd5e:	77fb      	strb	r3, [r7, #31]
 800bd60:	e070      	b.n	800be44 <UART_SetConfig+0x348>
 800bd62:	2308      	movs	r3, #8
 800bd64:	77fb      	strb	r3, [r7, #31]
 800bd66:	e06d      	b.n	800be44 <UART_SetConfig+0x348>
 800bd68:	2310      	movs	r3, #16
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	e06a      	b.n	800be44 <UART_SetConfig+0x348>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a1b      	ldr	r2, [pc, #108]	; (800bde0 <UART_SetConfig+0x2e4>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d138      	bne.n	800bdea <UART_SetConfig+0x2ee>
 800bd78:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <UART_SetConfig+0x2cc>)
 800bd7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bd82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd86:	d017      	beq.n	800bdb8 <UART_SetConfig+0x2bc>
 800bd88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd8c:	d82a      	bhi.n	800bde4 <UART_SetConfig+0x2e8>
 800bd8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd92:	d00b      	beq.n	800bdac <UART_SetConfig+0x2b0>
 800bd94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd98:	d824      	bhi.n	800bde4 <UART_SetConfig+0x2e8>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <UART_SetConfig+0x2aa>
 800bd9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda2:	d006      	beq.n	800bdb2 <UART_SetConfig+0x2b6>
 800bda4:	e01e      	b.n	800bde4 <UART_SetConfig+0x2e8>
 800bda6:	2300      	movs	r3, #0
 800bda8:	77fb      	strb	r3, [r7, #31]
 800bdaa:	e04b      	b.n	800be44 <UART_SetConfig+0x348>
 800bdac:	2302      	movs	r3, #2
 800bdae:	77fb      	strb	r3, [r7, #31]
 800bdb0:	e048      	b.n	800be44 <UART_SetConfig+0x348>
 800bdb2:	2304      	movs	r3, #4
 800bdb4:	77fb      	strb	r3, [r7, #31]
 800bdb6:	e045      	b.n	800be44 <UART_SetConfig+0x348>
 800bdb8:	2308      	movs	r3, #8
 800bdba:	77fb      	strb	r3, [r7, #31]
 800bdbc:	e042      	b.n	800be44 <UART_SetConfig+0x348>
 800bdbe:	bf00      	nop
 800bdc0:	efff69f3 	.word	0xefff69f3
 800bdc4:	40011000 	.word	0x40011000
 800bdc8:	40023800 	.word	0x40023800
 800bdcc:	40004400 	.word	0x40004400
 800bdd0:	40004800 	.word	0x40004800
 800bdd4:	40004c00 	.word	0x40004c00
 800bdd8:	40005000 	.word	0x40005000
 800bddc:	40011400 	.word	0x40011400
 800bde0:	40007800 	.word	0x40007800
 800bde4:	2310      	movs	r3, #16
 800bde6:	77fb      	strb	r3, [r7, #31]
 800bde8:	e02c      	b.n	800be44 <UART_SetConfig+0x348>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a72      	ldr	r2, [pc, #456]	; (800bfb8 <UART_SetConfig+0x4bc>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d125      	bne.n	800be40 <UART_SetConfig+0x344>
 800bdf4:	4b71      	ldr	r3, [pc, #452]	; (800bfbc <UART_SetConfig+0x4c0>)
 800bdf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bdfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be02:	d017      	beq.n	800be34 <UART_SetConfig+0x338>
 800be04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be08:	d817      	bhi.n	800be3a <UART_SetConfig+0x33e>
 800be0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be0e:	d00b      	beq.n	800be28 <UART_SetConfig+0x32c>
 800be10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be14:	d811      	bhi.n	800be3a <UART_SetConfig+0x33e>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <UART_SetConfig+0x326>
 800be1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be1e:	d006      	beq.n	800be2e <UART_SetConfig+0x332>
 800be20:	e00b      	b.n	800be3a <UART_SetConfig+0x33e>
 800be22:	2300      	movs	r3, #0
 800be24:	77fb      	strb	r3, [r7, #31]
 800be26:	e00d      	b.n	800be44 <UART_SetConfig+0x348>
 800be28:	2302      	movs	r3, #2
 800be2a:	77fb      	strb	r3, [r7, #31]
 800be2c:	e00a      	b.n	800be44 <UART_SetConfig+0x348>
 800be2e:	2304      	movs	r3, #4
 800be30:	77fb      	strb	r3, [r7, #31]
 800be32:	e007      	b.n	800be44 <UART_SetConfig+0x348>
 800be34:	2308      	movs	r3, #8
 800be36:	77fb      	strb	r3, [r7, #31]
 800be38:	e004      	b.n	800be44 <UART_SetConfig+0x348>
 800be3a:	2310      	movs	r3, #16
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e001      	b.n	800be44 <UART_SetConfig+0x348>
 800be40:	2310      	movs	r3, #16
 800be42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be4c:	d15b      	bne.n	800bf06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800be4e:	7ffb      	ldrb	r3, [r7, #31]
 800be50:	2b08      	cmp	r3, #8
 800be52:	d828      	bhi.n	800bea6 <UART_SetConfig+0x3aa>
 800be54:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <UART_SetConfig+0x360>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800be89 	.word	0x0800be89
 800be64:	0800be91 	.word	0x0800be91
 800be68:	0800bea7 	.word	0x0800bea7
 800be6c:	0800be97 	.word	0x0800be97
 800be70:	0800bea7 	.word	0x0800bea7
 800be74:	0800bea7 	.word	0x0800bea7
 800be78:	0800bea7 	.word	0x0800bea7
 800be7c:	0800be9f 	.word	0x0800be9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be80:	f7fd fa80 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800be84:	61b8      	str	r0, [r7, #24]
        break;
 800be86:	e013      	b.n	800beb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be88:	f7fd fa90 	bl	80093ac <HAL_RCC_GetPCLK2Freq>
 800be8c:	61b8      	str	r0, [r7, #24]
        break;
 800be8e:	e00f      	b.n	800beb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be90:	4b4b      	ldr	r3, [pc, #300]	; (800bfc0 <UART_SetConfig+0x4c4>)
 800be92:	61bb      	str	r3, [r7, #24]
        break;
 800be94:	e00c      	b.n	800beb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be96:	f7fd f9a3 	bl	80091e0 <HAL_RCC_GetSysClockFreq>
 800be9a:	61b8      	str	r0, [r7, #24]
        break;
 800be9c:	e008      	b.n	800beb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bea2:	61bb      	str	r3, [r7, #24]
        break;
 800bea4:	e004      	b.n	800beb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	77bb      	strb	r3, [r7, #30]
        break;
 800beae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d074      	beq.n	800bfa0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	005a      	lsls	r2, r3, #1
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	085b      	lsrs	r3, r3, #1
 800bec0:	441a      	add	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2b0f      	cmp	r3, #15
 800bed0:	d916      	bls.n	800bf00 <UART_SetConfig+0x404>
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed8:	d212      	bcs.n	800bf00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	f023 030f 	bic.w	r3, r3, #15
 800bee2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	085b      	lsrs	r3, r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	f003 0307 	and.w	r3, r3, #7
 800beee:	b29a      	uxth	r2, r3
 800bef0:	89fb      	ldrh	r3, [r7, #14]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	89fa      	ldrh	r2, [r7, #14]
 800befc:	60da      	str	r2, [r3, #12]
 800befe:	e04f      	b.n	800bfa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	77bb      	strb	r3, [r7, #30]
 800bf04:	e04c      	b.n	800bfa0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf06:	7ffb      	ldrb	r3, [r7, #31]
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	d828      	bhi.n	800bf5e <UART_SetConfig+0x462>
 800bf0c:	a201      	add	r2, pc, #4	; (adr r2, 800bf14 <UART_SetConfig+0x418>)
 800bf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf12:	bf00      	nop
 800bf14:	0800bf39 	.word	0x0800bf39
 800bf18:	0800bf41 	.word	0x0800bf41
 800bf1c:	0800bf49 	.word	0x0800bf49
 800bf20:	0800bf5f 	.word	0x0800bf5f
 800bf24:	0800bf4f 	.word	0x0800bf4f
 800bf28:	0800bf5f 	.word	0x0800bf5f
 800bf2c:	0800bf5f 	.word	0x0800bf5f
 800bf30:	0800bf5f 	.word	0x0800bf5f
 800bf34:	0800bf57 	.word	0x0800bf57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf38:	f7fd fa24 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800bf3c:	61b8      	str	r0, [r7, #24]
        break;
 800bf3e:	e013      	b.n	800bf68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf40:	f7fd fa34 	bl	80093ac <HAL_RCC_GetPCLK2Freq>
 800bf44:	61b8      	str	r0, [r7, #24]
        break;
 800bf46:	e00f      	b.n	800bf68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf48:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <UART_SetConfig+0x4c4>)
 800bf4a:	61bb      	str	r3, [r7, #24]
        break;
 800bf4c:	e00c      	b.n	800bf68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf4e:	f7fd f947 	bl	80091e0 <HAL_RCC_GetSysClockFreq>
 800bf52:	61b8      	str	r0, [r7, #24]
        break;
 800bf54:	e008      	b.n	800bf68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf5a:	61bb      	str	r3, [r7, #24]
        break;
 800bf5c:	e004      	b.n	800bf68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	77bb      	strb	r3, [r7, #30]
        break;
 800bf66:	bf00      	nop
    }

    if (pclk != 0U)
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d018      	beq.n	800bfa0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	085a      	lsrs	r2, r3, #1
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	441a      	add	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b0f      	cmp	r3, #15
 800bf86:	d909      	bls.n	800bf9c <UART_SetConfig+0x4a0>
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf8e:	d205      	bcs.n	800bf9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	60da      	str	r2, [r3, #12]
 800bf9a:	e001      	b.n	800bfa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bfac:	7fbb      	ldrb	r3, [r7, #30]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	40007c00 	.word	0x40007c00
 800bfbc:	40023800 	.word	0x40023800
 800bfc0:	00f42400 	.word	0x00f42400

0800bfc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00a      	beq.n	800bfee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	f003 0302 	and.w	r3, r3, #2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	f003 0304 	and.w	r3, r3, #4
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	f003 0308 	and.w	r3, r3, #8
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00a      	beq.n	800c054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	430a      	orrs	r2, r1
 800c052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	f003 0310 	and.w	r3, r3, #16
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00a      	beq.n	800c076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07a:	f003 0320 	and.w	r3, r3, #32
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00a      	beq.n	800c098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	430a      	orrs	r2, r1
 800c096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d01a      	beq.n	800c0da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0c2:	d10a      	bne.n	800c0da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00a      	beq.n	800c0fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	430a      	orrs	r2, r1
 800c0fa:	605a      	str	r2, [r3, #4]
  }
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c118:	f7f9 fc0a 	bl	8005930 <HAL_GetTick>
 800c11c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 0308 	and.w	r3, r3, #8
 800c128:	2b08      	cmp	r3, #8
 800c12a:	d10e      	bne.n	800c14a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c12c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f81b 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c146:	2303      	movs	r3, #3
 800c148:	e011      	b.n	800c16e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2220      	movs	r2, #32
 800c154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b09c      	sub	sp, #112	; 0x70
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	603b      	str	r3, [r7, #0]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c186:	e0a7      	b.n	800c2d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18e:	f000 80a3 	beq.w	800c2d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c192:	f7f9 fbcd 	bl	8005930 <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d302      	bcc.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d13f      	bne.n	800c228 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b0:	e853 3f00 	ldrex	r3, [r3]
 800c1b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1bc:	667b      	str	r3, [r7, #100]	; 0x64
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1e6      	bne.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3308      	adds	r3, #8
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	f023 0301 	bic.w	r3, r3, #1
 800c1f0:	663b      	str	r3, [r7, #96]	; 0x60
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3308      	adds	r3, #8
 800c1f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800c1fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c202:	e841 2300 	strex	r3, r2, [r1]
 800c206:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1e5      	bne.n	800c1da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2220      	movs	r2, #32
 800c212:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2220      	movs	r2, #32
 800c218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e068      	b.n	800c2fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 0304 	and.w	r3, r3, #4
 800c232:	2b00      	cmp	r3, #0
 800c234:	d050      	beq.n	800c2d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	69db      	ldr	r3, [r3, #28]
 800c23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c244:	d148      	bne.n	800c2d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c24e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	e853 3f00 	ldrex	r3, [r3]
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c264:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c26e:	637b      	str	r3, [r7, #52]	; 0x34
 800c270:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e6      	bne.n	800c250 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3308      	adds	r3, #8
 800c288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	613b      	str	r3, [r7, #16]
   return(result);
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f023 0301 	bic.w	r3, r3, #1
 800c298:	66bb      	str	r3, [r7, #104]	; 0x68
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2a2:	623a      	str	r2, [r7, #32]
 800c2a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a6:	69f9      	ldr	r1, [r7, #28]
 800c2a8:	6a3a      	ldr	r2, [r7, #32]
 800c2aa:	e841 2300 	strex	r3, r2, [r1]
 800c2ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1e5      	bne.n	800c282 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2220      	movs	r2, #32
 800c2c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	e010      	b.n	800c2fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	69da      	ldr	r2, [r3, #28]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	bf0c      	ite	eq
 800c2e8:	2301      	moveq	r3, #1
 800c2ea:	2300      	movne	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	f43f af48 	beq.w	800c188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3770      	adds	r7, #112	; 0x70
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c304:	b480      	push	{r7}
 800c306:	b097      	sub	sp, #92	; 0x5c
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	4613      	mov	r3, r2
 800c310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	88fa      	ldrh	r2, [r7, #6]
 800c324:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c336:	d10e      	bne.n	800c356 <UART_Start_Receive_IT+0x52>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <UART_Start_Receive_IT+0x48>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c34a:	e02d      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	22ff      	movs	r2, #255	; 0xff
 800c350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c354:	e028      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10d      	bne.n	800c37a <UART_Start_Receive_IT+0x76>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d104      	bne.n	800c370 <UART_Start_Receive_IT+0x6c>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	22ff      	movs	r2, #255	; 0xff
 800c36a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c36e:	e01b      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	227f      	movs	r2, #127	; 0x7f
 800c374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c378:	e016      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c382:	d10d      	bne.n	800c3a0 <UART_Start_Receive_IT+0x9c>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d104      	bne.n	800c396 <UART_Start_Receive_IT+0x92>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	227f      	movs	r2, #127	; 0x7f
 800c390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c394:	e008      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	223f      	movs	r2, #63	; 0x3f
 800c39a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c39e:	e003      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2222      	movs	r2, #34	; 0x22
 800c3b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3308      	adds	r3, #8
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	e853 3f00 	ldrex	r3, [r3]
 800c3c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f043 0301 	orr.w	r3, r3, #1
 800c3ce:	657b      	str	r3, [r7, #84]	; 0x54
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3308      	adds	r3, #8
 800c3d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3d8:	64ba      	str	r2, [r7, #72]	; 0x48
 800c3da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3e0:	e841 2300 	strex	r3, r2, [r1]
 800c3e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1e5      	bne.n	800c3b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3f4:	d107      	bne.n	800c406 <UART_Start_Receive_IT+0x102>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d103      	bne.n	800c406 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	4a21      	ldr	r2, [pc, #132]	; (800c488 <UART_Start_Receive_IT+0x184>)
 800c402:	669a      	str	r2, [r3, #104]	; 0x68
 800c404:	e002      	b.n	800c40c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	4a20      	ldr	r2, [pc, #128]	; (800c48c <UART_Start_Receive_IT+0x188>)
 800c40a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d019      	beq.n	800c448 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	e853 3f00 	ldrex	r3, [r3]
 800c420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c432:	637b      	str	r3, [r7, #52]	; 0x34
 800c434:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c43a:	e841 2300 	strex	r3, r2, [r1]
 800c43e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1e6      	bne.n	800c414 <UART_Start_Receive_IT+0x110>
 800c446:	e018      	b.n	800c47a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	e853 3f00 	ldrex	r3, [r3]
 800c454:	613b      	str	r3, [r7, #16]
   return(result);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f043 0320 	orr.w	r3, r3, #32
 800c45c:	653b      	str	r3, [r7, #80]	; 0x50
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c466:	623b      	str	r3, [r7, #32]
 800c468:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46a:	69f9      	ldr	r1, [r7, #28]
 800c46c:	6a3a      	ldr	r2, [r7, #32]
 800c46e:	e841 2300 	strex	r3, r2, [r1]
 800c472:	61bb      	str	r3, [r7, #24]
   return(result);
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e6      	bne.n	800c448 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	375c      	adds	r7, #92	; 0x5c
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	0800c73f 	.word	0x0800c73f
 800c48c:	0800c5d9 	.word	0x0800c5d9

0800c490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c490:	b480      	push	{r7}
 800c492:	b095      	sub	sp, #84	; 0x54
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	e853 3f00 	ldrex	r3, [r3]
 800c4a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b6:	643b      	str	r3, [r7, #64]	; 0x40
 800c4b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4be:	e841 2300 	strex	r3, r2, [r1]
 800c4c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1e6      	bne.n	800c498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	e853 3f00 	ldrex	r3, [r3]
 800c4d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	f023 0301 	bic.w	r3, r3, #1
 800c4e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4f2:	e841 2300 	strex	r3, r2, [r1]
 800c4f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1e5      	bne.n	800c4ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c502:	2b01      	cmp	r3, #1
 800c504:	d118      	bne.n	800c538 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	e853 3f00 	ldrex	r3, [r3]
 800c512:	60bb      	str	r3, [r7, #8]
   return(result);
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f023 0310 	bic.w	r3, r3, #16
 800c51a:	647b      	str	r3, [r7, #68]	; 0x44
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	461a      	mov	r2, r3
 800c522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c528:	6979      	ldr	r1, [r7, #20]
 800c52a:	69ba      	ldr	r2, [r7, #24]
 800c52c:	e841 2300 	strex	r3, r2, [r1]
 800c530:	613b      	str	r3, [r7, #16]
   return(result);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e6      	bne.n	800c506 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c54c:	bf00      	nop
 800c54e:	3754      	adds	r7, #84	; 0x54
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7ff faaa 	bl	800bad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c57c:	bf00      	nop
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b088      	sub	sp, #32
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	e853 3f00 	ldrex	r3, [r3]
 800c598:	60bb      	str	r3, [r7, #8]
   return(result);
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5a0:	61fb      	str	r3, [r7, #28]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	61bb      	str	r3, [r7, #24]
 800c5ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ae:	6979      	ldr	r1, [r7, #20]
 800c5b0:	69ba      	ldr	r2, [r7, #24]
 800c5b2:	e841 2300 	strex	r3, r2, [r1]
 800c5b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1e6      	bne.n	800c58c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff fa76 	bl	800babc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5d0:	bf00      	nop
 800c5d2:	3720      	adds	r7, #32
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b096      	sub	sp, #88	; 0x58
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5f0:	2b22      	cmp	r3, #34	; 0x22
 800c5f2:	f040 8098 	bne.w	800c726 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c600:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c604:	b2d9      	uxtb	r1, r3
 800c606:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c610:	400a      	ands	r2, r1
 800c612:	b2d2      	uxtb	r2, r2
 800c614:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	1c5a      	adds	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c626:	b29b      	uxth	r3, r3
 800c628:	3b01      	subs	r3, #1
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c638:	b29b      	uxth	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d17b      	bne.n	800c736 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c652:	653b      	str	r3, [r7, #80]	; 0x50
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c65c:	647b      	str	r3, [r7, #68]	; 0x44
 800c65e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e6      	bne.n	800c63e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3308      	adds	r3, #8
 800c676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	623b      	str	r3, [r7, #32]
   return(result);
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	f023 0301 	bic.w	r3, r3, #1
 800c686:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3308      	adds	r3, #8
 800c68e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c690:	633a      	str	r2, [r7, #48]	; 0x30
 800c692:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c698:	e841 2300 	strex	r3, r2, [r1]
 800c69c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e5      	bne.n	800c670 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d12e      	bne.n	800c71e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f023 0310 	bic.w	r3, r3, #16
 800c6da:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6e4:	61fb      	str	r3, [r7, #28]
 800c6e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	69b9      	ldr	r1, [r7, #24]
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	617b      	str	r3, [r7, #20]
   return(result);
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e6      	bne.n	800c6c6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	f003 0310 	and.w	r3, r3, #16
 800c702:	2b10      	cmp	r3, #16
 800c704:	d103      	bne.n	800c70e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2210      	movs	r2, #16
 800c70c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c714:	4619      	mov	r1, r3
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7ff f9e4 	bl	800bae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c71c:	e00b      	b.n	800c736 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7f6 fc26 	bl	8002f70 <HAL_UART_RxCpltCallback>
}
 800c724:	e007      	b.n	800c736 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	699a      	ldr	r2, [r3, #24]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f042 0208 	orr.w	r2, r2, #8
 800c734:	619a      	str	r2, [r3, #24]
}
 800c736:	bf00      	nop
 800c738:	3758      	adds	r7, #88	; 0x58
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b096      	sub	sp, #88	; 0x58
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c74c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c756:	2b22      	cmp	r3, #34	; 0x22
 800c758:	f040 8098 	bne.w	800c88c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c762:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c76c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c770:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c774:	4013      	ands	r3, r2
 800c776:	b29a      	uxth	r2, r3
 800c778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c77a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c780:	1c9a      	adds	r2, r3, #2
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d17b      	bne.n	800c89c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e6      	bne.n	800c7a4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3308      	adds	r3, #8
 800c7dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f023 0301 	bic.w	r3, r3, #1
 800c7ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e5      	bne.n	800c7d6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2220      	movs	r2, #32
 800c80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c822:	2b01      	cmp	r3, #1
 800c824:	d12e      	bne.n	800c884 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	e853 3f00 	ldrex	r3, [r3]
 800c838:	60bb      	str	r3, [r7, #8]
   return(result);
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f023 0310 	bic.w	r3, r3, #16
 800c840:	647b      	str	r3, [r7, #68]	; 0x44
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c84a:	61bb      	str	r3, [r7, #24]
 800c84c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6979      	ldr	r1, [r7, #20]
 800c850:	69ba      	ldr	r2, [r7, #24]
 800c852:	e841 2300 	strex	r3, r2, [r1]
 800c856:	613b      	str	r3, [r7, #16]
   return(result);
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e6      	bne.n	800c82c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	69db      	ldr	r3, [r3, #28]
 800c864:	f003 0310 	and.w	r3, r3, #16
 800c868:	2b10      	cmp	r3, #16
 800c86a:	d103      	bne.n	800c874 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2210      	movs	r2, #16
 800c872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff f931 	bl	800bae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c882:	e00b      	b.n	800c89c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7f6 fb73 	bl	8002f70 <HAL_UART_RxCpltCallback>
}
 800c88a:	e007      	b.n	800c89c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	699a      	ldr	r2, [r3, #24]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0208 	orr.w	r2, r2, #8
 800c89a:	619a      	str	r2, [r3, #24]
}
 800c89c:	bf00      	nop
 800c89e:	3758      	adds	r7, #88	; 0x58
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d121      	bne.n	800c8fa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	4b27      	ldr	r3, [pc, #156]	; (800c958 <FMC_SDRAM_Init+0xb4>)
 800c8bc:	4013      	ands	r3, r2
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	6851      	ldr	r1, [r2, #4]
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	6892      	ldr	r2, [r2, #8]
 800c8c6:	4311      	orrs	r1, r2
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	68d2      	ldr	r2, [r2, #12]
 800c8cc:	4311      	orrs	r1, r2
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	6912      	ldr	r2, [r2, #16]
 800c8d2:	4311      	orrs	r1, r2
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	6952      	ldr	r2, [r2, #20]
 800c8d8:	4311      	orrs	r1, r2
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	6992      	ldr	r2, [r2, #24]
 800c8de:	4311      	orrs	r1, r2
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	69d2      	ldr	r2, [r2, #28]
 800c8e4:	4311      	orrs	r1, r2
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	6a12      	ldr	r2, [r2, #32]
 800c8ea:	4311      	orrs	r1, r2
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c8f0:	430a      	orrs	r2, r1
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	e026      	b.n	800c948 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	69d9      	ldr	r1, [r3, #28]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	4319      	orrs	r1, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c910:	430b      	orrs	r3, r1
 800c912:	431a      	orrs	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	4b0e      	ldr	r3, [pc, #56]	; (800c958 <FMC_SDRAM_Init+0xb4>)
 800c91e:	4013      	ands	r3, r2
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	6851      	ldr	r1, [r2, #4]
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	6892      	ldr	r2, [r2, #8]
 800c928:	4311      	orrs	r1, r2
 800c92a:	683a      	ldr	r2, [r7, #0]
 800c92c:	68d2      	ldr	r2, [r2, #12]
 800c92e:	4311      	orrs	r1, r2
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	6912      	ldr	r2, [r2, #16]
 800c934:	4311      	orrs	r1, r2
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	6952      	ldr	r2, [r2, #20]
 800c93a:	4311      	orrs	r1, r2
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	6992      	ldr	r2, [r2, #24]
 800c940:	430a      	orrs	r2, r1
 800c942:	431a      	orrs	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	ffff8000 	.word	0xffff8000

0800c95c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d128      	bne.n	800c9c0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	1e59      	subs	r1, r3, #1
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	3b01      	subs	r3, #1
 800c982:	011b      	lsls	r3, r3, #4
 800c984:	4319      	orrs	r1, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	4319      	orrs	r1, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	3b01      	subs	r3, #1
 800c996:	031b      	lsls	r3, r3, #12
 800c998:	4319      	orrs	r1, r3
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	041b      	lsls	r3, r3, #16
 800c9a2:	4319      	orrs	r1, r3
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	051b      	lsls	r3, r3, #20
 800c9ac:	4319      	orrs	r1, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	061b      	lsls	r3, r3, #24
 800c9b6:	430b      	orrs	r3, r1
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	609a      	str	r2, [r3, #8]
 800c9be:	e02d      	b.n	800ca1c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	689a      	ldr	r2, [r3, #8]
 800c9c4:	4b19      	ldr	r3, [pc, #100]	; (800ca2c <FMC_SDRAM_Timing_Init+0xd0>)
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	68d2      	ldr	r2, [r2, #12]
 800c9cc:	3a01      	subs	r2, #1
 800c9ce:	0311      	lsls	r1, r2, #12
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	6952      	ldr	r2, [r2, #20]
 800c9d4:	3a01      	subs	r2, #1
 800c9d6:	0512      	lsls	r2, r2, #20
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	1e59      	subs	r1, r3, #1
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	011b      	lsls	r3, r3, #4
 800c9f6:	4319      	orrs	r1, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	4319      	orrs	r1, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	041b      	lsls	r3, r3, #16
 800ca0a:	4319      	orrs	r1, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	061b      	lsls	r3, r3, #24
 800ca14:	430b      	orrs	r3, r1
 800ca16:	431a      	orrs	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	ff0f0fff 	.word	0xff0f0fff

0800ca30 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	691a      	ldr	r2, [r3, #16]
 800ca40:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <FMC_SDRAM_SendCommand+0x44>)
 800ca42:	4013      	ands	r3, r2
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	6811      	ldr	r1, [r2, #0]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	6852      	ldr	r2, [r2, #4]
 800ca4c:	4311      	orrs	r1, r2
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	6892      	ldr	r2, [r2, #8]
 800ca52:	3a01      	subs	r2, #1
 800ca54:	0152      	lsls	r2, r2, #5
 800ca56:	4311      	orrs	r1, r2
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	68d2      	ldr	r2, [r2, #12]
 800ca5c:	0252      	lsls	r2, r2, #9
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	431a      	orrs	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	ffc00000 	.word	0xffc00000

0800ca78 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	695a      	ldr	r2, [r3, #20]
 800ca86:	4b07      	ldr	r3, [pc, #28]	; (800caa4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	0052      	lsls	r2, r2, #1
 800ca8e:	431a      	orrs	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	ffffc001 	.word	0xffffc001

0800caa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caba:	2b84      	cmp	r3, #132	; 0x84
 800cabc:	d005      	beq.n	800caca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cabe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4413      	add	r3, r2
 800cac6:	3303      	adds	r3, #3
 800cac8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800caca:	68fb      	ldr	r3, [r7, #12]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cadc:	f001 fa26 	bl	800df2c <vTaskStartScheduler>
  
  return osOK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae8:	b089      	sub	sp, #36	; 0x24
 800caea:	af04      	add	r7, sp, #16
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d020      	beq.n	800cb3a <osThreadCreate+0x54>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01c      	beq.n	800cb3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685c      	ldr	r4, [r3, #4]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681d      	ldr	r5, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	691e      	ldr	r6, [r3, #16]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff ffc8 	bl	800caa8 <makeFreeRtosPriority>
 800cb18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb22:	9202      	str	r2, [sp, #8]
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	9100      	str	r1, [sp, #0]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 ff90 	bl	800da54 <xTaskCreateStatic>
 800cb34:	4603      	mov	r3, r0
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	e01c      	b.n	800cb74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685c      	ldr	r4, [r3, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb46:	b29e      	uxth	r6, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7ff ffaa 	bl	800caa8 <makeFreeRtosPriority>
 800cb54:	4602      	mov	r2, r0
 800cb56:	f107 030c 	add.w	r3, r7, #12
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	9200      	str	r2, [sp, #0]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	4632      	mov	r2, r6
 800cb62:	4629      	mov	r1, r5
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 ffd8 	bl	800db1a <xTaskCreate>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d001      	beq.n	800cb74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cb70:	2300      	movs	r3, #0
 800cb72:	e000      	b.n	800cb76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cb74:	68fb      	ldr	r3, [r7, #12]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <osDelay+0x16>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	e000      	b.n	800cb96 <osDelay+0x18>
 800cb94:	2301      	movs	r3, #1
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 f992 	bl	800dec0 <vTaskDelay>
  
  return osOK;
 800cb9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d007      	beq.n	800cbc6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	f000 fa66 	bl	800d08e <xQueueCreateMutexStatic>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	e003      	b.n	800cbce <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	f000 fa49 	bl	800d05e <xQueueCreateMutex>
 800cbcc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cbd6:	b590      	push	{r4, r7, lr}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af02      	add	r7, sp, #8
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d011      	beq.n	800cc0c <osMessageCreate+0x36>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00d      	beq.n	800cc0c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6859      	ldr	r1, [r3, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689a      	ldr	r2, [r3, #8]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	2400      	movs	r4, #0
 800cc02:	9400      	str	r4, [sp, #0]
 800cc04:	f000 f92e 	bl	800ce64 <xQueueGenericCreateStatic>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	e008      	b.n	800cc1e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	4619      	mov	r1, r3
 800cc18:	f000 f9a6 	bl	800cf68 <xQueueGenericCreate>
 800cc1c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd90      	pop	{r4, r7, pc}

0800cc26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc26:	b480      	push	{r7}
 800cc28:	b083      	sub	sp, #12
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f103 0208 	add.w	r2, r3, #8
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f103 0208 	add.w	r2, r3, #8
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f103 0208 	add.w	r2, r3, #8
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc5a:	bf00      	nop
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689a      	ldr	r2, [r3, #8]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	1c5a      	adds	r2, r3, #1
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	601a      	str	r2, [r3, #0]
}
 800ccbc:	bf00      	nop
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d103      	bne.n	800cce8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	e00c      	b.n	800cd02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3308      	adds	r3, #8
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	e002      	b.n	800ccf6 <vListInsert+0x2e>
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d2f6      	bcs.n	800ccf0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
}
 800cd2e:	bf00      	nop
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b085      	sub	sp, #20
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	6892      	ldr	r2, [r2, #8]
 800cd50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	6852      	ldr	r2, [r2, #4]
 800cd5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d103      	bne.n	800cd6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	689a      	ldr	r2, [r3, #8]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	1e5a      	subs	r2, r3, #1
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
	...

0800cd90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10c      	bne.n	800cdbe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	b672      	cpsid	i
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	b662      	cpsie	i
 800cdb8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cdba:	bf00      	nop
 800cdbc:	e7fe      	b.n	800cdbc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cdbe:	f002 f835 	bl	800ee2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdca:	68f9      	ldr	r1, [r7, #12]
 800cdcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdce:	fb01 f303 	mul.w	r3, r1, r3
 800cdd2:	441a      	add	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	68f9      	ldr	r1, [r7, #12]
 800cdf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdf4:	fb01 f303 	mul.w	r3, r1, r3
 800cdf8:	441a      	add	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	22ff      	movs	r2, #255	; 0xff
 800ce02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	22ff      	movs	r2, #255	; 0xff
 800ce0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d114      	bne.n	800ce3e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01a      	beq.n	800ce52 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3310      	adds	r3, #16
 800ce20:	4618      	mov	r0, r3
 800ce22:	f001 faf1 	bl	800e408 <xTaskRemoveFromEventList>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d012      	beq.n	800ce52 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce2c:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <xQueueGenericReset+0xd0>)
 800ce2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	e009      	b.n	800ce52 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3310      	adds	r3, #16
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff feef 	bl	800cc26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3324      	adds	r3, #36	; 0x24
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7ff feea 	bl	800cc26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce52:	f002 f81f 	bl	800ee94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce56:	2301      	movs	r3, #1
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b08e      	sub	sp, #56	; 0x38
 800ce68:	af02      	add	r7, sp, #8
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
 800ce70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10c      	bne.n	800ce92 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7c:	b672      	cpsid	i
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	b662      	cpsie	i
 800ce8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce8e:	bf00      	nop
 800ce90:	e7fe      	b.n	800ce90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10c      	bne.n	800ceb2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	b672      	cpsid	i
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	b662      	cpsie	i
 800ceac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <xQueueGenericCreateStatic+0x5a>
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <xQueueGenericCreateStatic+0x5e>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e000      	b.n	800cec4 <xQueueGenericCreateStatic+0x60>
 800cec2:	2300      	movs	r3, #0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10c      	bne.n	800cee2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	b672      	cpsid	i
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	b662      	cpsie	i
 800cedc:	623b      	str	r3, [r7, #32]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d102      	bne.n	800ceee <xQueueGenericCreateStatic+0x8a>
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <xQueueGenericCreateStatic+0x8e>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <xQueueGenericCreateStatic+0x90>
 800cef2:	2300      	movs	r3, #0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10c      	bne.n	800cf12 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	b672      	cpsid	i
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	b662      	cpsie	i
 800cf0c:	61fb      	str	r3, [r7, #28]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf12:	2348      	movs	r3, #72	; 0x48
 800cf14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2b48      	cmp	r3, #72	; 0x48
 800cf1a:	d00c      	beq.n	800cf36 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf20:	b672      	cpsid	i
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	b662      	cpsie	i
 800cf30:	61bb      	str	r3, [r7, #24]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00d      	beq.n	800cf5e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4613      	mov	r3, r2
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 f847 	bl	800cfec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3730      	adds	r7, #48	; 0x30
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	4613      	mov	r3, r2
 800cf74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10c      	bne.n	800cf96 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	b672      	cpsid	i
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	b662      	cpsie	i
 800cf90:	613b      	str	r3, [r7, #16]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	61fb      	str	r3, [r7, #28]
 800cfa0:	e004      	b.n	800cfac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	fb02 f303 	mul.w	r3, r2, r3
 800cfaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	3348      	adds	r3, #72	; 0x48
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f002 f867 	bl	800f084 <pvPortMalloc>
 800cfb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d011      	beq.n	800cfe2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	3348      	adds	r3, #72	; 0x48
 800cfc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfd0:	79fa      	ldrb	r2, [r7, #7]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	68b9      	ldr	r1, [r7, #8]
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f000 f805 	bl	800cfec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfe2:	69bb      	ldr	r3, [r7, #24]
	}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3720      	adds	r7, #32
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d103      	bne.n	800d008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	e002      	b.n	800d00e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d01a:	2101      	movs	r1, #1
 800d01c:	69b8      	ldr	r0, [r7, #24]
 800d01e:	f7ff feb7 	bl	800cd90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d022:	bf00      	nop
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00e      	beq.n	800d056 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d04a:	2300      	movs	r3, #0
 800d04c:	2200      	movs	r2, #0
 800d04e:	2100      	movs	r1, #0
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f837 	bl	800d0c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d056:	bf00      	nop
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b086      	sub	sp, #24
 800d062:	af00      	add	r7, sp, #0
 800d064:	4603      	mov	r3, r0
 800d066:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d068:	2301      	movs	r3, #1
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	2300      	movs	r3, #0
 800d06e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	461a      	mov	r2, r3
 800d074:	6939      	ldr	r1, [r7, #16]
 800d076:	6978      	ldr	r0, [r7, #20]
 800d078:	f7ff ff76 	bl	800cf68 <xQueueGenericCreate>
 800d07c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7ff ffd3 	bl	800d02a <prvInitialiseMutex>

		return xNewQueue;
 800d084:	68fb      	ldr	r3, [r7, #12]
	}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b088      	sub	sp, #32
 800d092:	af02      	add	r7, sp, #8
 800d094:	4603      	mov	r3, r0
 800d096:	6039      	str	r1, [r7, #0]
 800d098:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d09a:	2301      	movs	r3, #1
 800d09c:	617b      	str	r3, [r7, #20]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	6939      	ldr	r1, [r7, #16]
 800d0ac:	6978      	ldr	r0, [r7, #20]
 800d0ae:	f7ff fed9 	bl	800ce64 <xQueueGenericCreateStatic>
 800d0b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7ff ffb8 	bl	800d02a <prvInitialiseMutex>

		return xNewQueue;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
	}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08e      	sub	sp, #56	; 0x38
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10c      	bne.n	800d0fa <xQueueGenericSend+0x36>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	b672      	cpsid	i
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	b662      	cpsie	i
 800d0f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d103      	bne.n	800d108 <xQueueGenericSend+0x44>
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d104:	2b00      	cmp	r3, #0
 800d106:	d101      	bne.n	800d10c <xQueueGenericSend+0x48>
 800d108:	2301      	movs	r3, #1
 800d10a:	e000      	b.n	800d10e <xQueueGenericSend+0x4a>
 800d10c:	2300      	movs	r3, #0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10c      	bne.n	800d12c <xQueueGenericSend+0x68>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	b672      	cpsid	i
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	b662      	cpsie	i
 800d126:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d103      	bne.n	800d13a <xQueueGenericSend+0x76>
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d136:	2b01      	cmp	r3, #1
 800d138:	d101      	bne.n	800d13e <xQueueGenericSend+0x7a>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <xQueueGenericSend+0x7c>
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10c      	bne.n	800d15e <xQueueGenericSend+0x9a>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	b672      	cpsid	i
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	b662      	cpsie	i
 800d158:	623b      	str	r3, [r7, #32]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d15e:	f001 fb1b 	bl	800e798 <xTaskGetSchedulerState>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d102      	bne.n	800d16e <xQueueGenericSend+0xaa>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <xQueueGenericSend+0xae>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <xQueueGenericSend+0xb0>
 800d172:	2300      	movs	r3, #0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10c      	bne.n	800d192 <xQueueGenericSend+0xce>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	b672      	cpsid	i
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	b662      	cpsie	i
 800d18c:	61fb      	str	r3, [r7, #28]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d192:	f001 fe4b 	bl	800ee2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d302      	bcc.n	800d1a8 <xQueueGenericSend+0xe4>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d129      	bne.n	800d1fc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	68b9      	ldr	r1, [r7, #8]
 800d1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1ae:	f000 fb41 	bl	800d834 <prvCopyDataToQueue>
 800d1b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d010      	beq.n	800d1de <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1be:	3324      	adds	r3, #36	; 0x24
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 f921 	bl	800e408 <xTaskRemoveFromEventList>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d013      	beq.n	800d1f4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1cc:	4b3f      	ldr	r3, [pc, #252]	; (800d2cc <xQueueGenericSend+0x208>)
 800d1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	e00a      	b.n	800d1f4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1e4:	4b39      	ldr	r3, [pc, #228]	; (800d2cc <xQueueGenericSend+0x208>)
 800d1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1f4:	f001 fe4e 	bl	800ee94 <vPortExitCritical>
				return pdPASS;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e063      	b.n	800d2c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d103      	bne.n	800d20a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d202:	f001 fe47 	bl	800ee94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d206:	2300      	movs	r3, #0
 800d208:	e05c      	b.n	800d2c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d106      	bne.n	800d21e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d210:	f107 0314 	add.w	r3, r7, #20
 800d214:	4618      	mov	r0, r3
 800d216:	f001 f95b 	bl	800e4d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d21a:	2301      	movs	r3, #1
 800d21c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d21e:	f001 fe39 	bl	800ee94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d222:	f000 fef1 	bl	800e008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d226:	f001 fe01 	bl	800ee2c <vPortEnterCritical>
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d230:	b25b      	sxtb	r3, r3
 800d232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d236:	d103      	bne.n	800d240 <xQueueGenericSend+0x17c>
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d246:	b25b      	sxtb	r3, r3
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d103      	bne.n	800d256 <xQueueGenericSend+0x192>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d256:	f001 fe1d 	bl	800ee94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d25a:	1d3a      	adds	r2, r7, #4
 800d25c:	f107 0314 	add.w	r3, r7, #20
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f001 f94a 	bl	800e4fc <xTaskCheckForTimeOut>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d124      	bne.n	800d2b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d26e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d270:	f000 fbd8 	bl	800da24 <prvIsQueueFull>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d018      	beq.n	800d2ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27c:	3310      	adds	r3, #16
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	4611      	mov	r1, r2
 800d282:	4618      	mov	r0, r3
 800d284:	f001 f89a 	bl	800e3bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d28a:	f000 fb63 	bl	800d954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d28e:	f000 fec9 	bl	800e024 <xTaskResumeAll>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	f47f af7c 	bne.w	800d192 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d29a:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <xQueueGenericSend+0x208>)
 800d29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	e772      	b.n	800d192 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ae:	f000 fb51 	bl	800d954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2b2:	f000 feb7 	bl	800e024 <xTaskResumeAll>
 800d2b6:	e76c      	b.n	800d192 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ba:	f000 fb4b 	bl	800d954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2be:	f000 feb1 	bl	800e024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3738      	adds	r7, #56	; 0x38
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	e000ed04 	.word	0xe000ed04

0800d2d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08e      	sub	sp, #56	; 0x38
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10c      	bne.n	800d302 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	b672      	cpsid	i
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	b662      	cpsie	i
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d103      	bne.n	800d310 <xQueueGenericSendFromISR+0x40>
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <xQueueGenericSendFromISR+0x44>
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <xQueueGenericSendFromISR+0x46>
 800d314:	2300      	movs	r3, #0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10c      	bne.n	800d334 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	b672      	cpsid	i
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	b662      	cpsie	i
 800d32e:	623b      	str	r3, [r7, #32]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2b02      	cmp	r3, #2
 800d338:	d103      	bne.n	800d342 <xQueueGenericSendFromISR+0x72>
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d101      	bne.n	800d346 <xQueueGenericSendFromISR+0x76>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <xQueueGenericSendFromISR+0x78>
 800d346:	2300      	movs	r3, #0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10c      	bne.n	800d366 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	b672      	cpsid	i
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	b662      	cpsie	i
 800d360:	61fb      	str	r3, [r7, #28]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d366:	f001 fe49 	bl	800effc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d36a:	f3ef 8211 	mrs	r2, BASEPRI
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	b672      	cpsid	i
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	b662      	cpsie	i
 800d382:	61ba      	str	r2, [r7, #24]
 800d384:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d386:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d392:	429a      	cmp	r2, r3
 800d394:	d302      	bcc.n	800d39c <xQueueGenericSendFromISR+0xcc>
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d12c      	bne.n	800d3f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ac:	f000 fa42 	bl	800d834 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b8:	d112      	bne.n	800d3e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d016      	beq.n	800d3f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	3324      	adds	r3, #36	; 0x24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 f81e 	bl	800e408 <xTaskRemoveFromEventList>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00e      	beq.n	800d3f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00b      	beq.n	800d3f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	e007      	b.n	800d3f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	b25a      	sxtb	r2, r3
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d3f4:	e001      	b.n	800d3fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d404:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3738      	adds	r7, #56	; 0x38
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08c      	sub	sp, #48	; 0x30
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10c      	bne.n	800d444 <xQueueReceive+0x34>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	b672      	cpsid	i
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	b662      	cpsie	i
 800d43e:	623b      	str	r3, [r7, #32]
}
 800d440:	bf00      	nop
 800d442:	e7fe      	b.n	800d442 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d103      	bne.n	800d452 <xQueueReceive+0x42>
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <xQueueReceive+0x46>
 800d452:	2301      	movs	r3, #1
 800d454:	e000      	b.n	800d458 <xQueueReceive+0x48>
 800d456:	2300      	movs	r3, #0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10c      	bne.n	800d476 <xQueueReceive+0x66>
	__asm volatile
 800d45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d460:	b672      	cpsid	i
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	b662      	cpsie	i
 800d470:	61fb      	str	r3, [r7, #28]
}
 800d472:	bf00      	nop
 800d474:	e7fe      	b.n	800d474 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d476:	f001 f98f 	bl	800e798 <xTaskGetSchedulerState>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d102      	bne.n	800d486 <xQueueReceive+0x76>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <xQueueReceive+0x7a>
 800d486:	2301      	movs	r3, #1
 800d488:	e000      	b.n	800d48c <xQueueReceive+0x7c>
 800d48a:	2300      	movs	r3, #0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10c      	bne.n	800d4aa <xQueueReceive+0x9a>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	b672      	cpsid	i
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	b662      	cpsie	i
 800d4a4:	61bb      	str	r3, [r7, #24]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4aa:	f001 fcbf 	bl	800ee2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d01f      	beq.n	800d4fa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4ba:	68b9      	ldr	r1, [r7, #8]
 800d4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4be:	f000 fa23 	bl	800d908 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	1e5a      	subs	r2, r3, #1
 800d4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00f      	beq.n	800d4f2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d4:	3310      	adds	r3, #16
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 ff96 	bl	800e408 <xTaskRemoveFromEventList>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d007      	beq.n	800d4f2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4e2:	4b3d      	ldr	r3, [pc, #244]	; (800d5d8 <xQueueReceive+0x1c8>)
 800d4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4f2:	f001 fccf 	bl	800ee94 <vPortExitCritical>
				return pdPASS;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e069      	b.n	800d5ce <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d103      	bne.n	800d508 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d500:	f001 fcc8 	bl	800ee94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d504:	2300      	movs	r3, #0
 800d506:	e062      	b.n	800d5ce <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d50e:	f107 0310 	add.w	r3, r7, #16
 800d512:	4618      	mov	r0, r3
 800d514:	f000 ffdc 	bl	800e4d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d518:	2301      	movs	r3, #1
 800d51a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d51c:	f001 fcba 	bl	800ee94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d520:	f000 fd72 	bl	800e008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d524:	f001 fc82 	bl	800ee2c <vPortEnterCritical>
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d52e:	b25b      	sxtb	r3, r3
 800d530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d534:	d103      	bne.n	800d53e <xQueueReceive+0x12e>
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d544:	b25b      	sxtb	r3, r3
 800d546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54a:	d103      	bne.n	800d554 <xQueueReceive+0x144>
 800d54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d554:	f001 fc9e 	bl	800ee94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d558:	1d3a      	adds	r2, r7, #4
 800d55a:	f107 0310 	add.w	r3, r7, #16
 800d55e:	4611      	mov	r1, r2
 800d560:	4618      	mov	r0, r3
 800d562:	f000 ffcb 	bl	800e4fc <xTaskCheckForTimeOut>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d123      	bne.n	800d5b4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d56c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d56e:	f000 fa43 	bl	800d9f8 <prvIsQueueEmpty>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d017      	beq.n	800d5a8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	3324      	adds	r3, #36	; 0x24
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	4611      	mov	r1, r2
 800d580:	4618      	mov	r0, r3
 800d582:	f000 ff1b 	bl	800e3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d588:	f000 f9e4 	bl	800d954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d58c:	f000 fd4a 	bl	800e024 <xTaskResumeAll>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d189      	bne.n	800d4aa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d596:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <xQueueReceive+0x1c8>)
 800d598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d59c:	601a      	str	r2, [r3, #0]
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	e780      	b.n	800d4aa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5aa:	f000 f9d3 	bl	800d954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5ae:	f000 fd39 	bl	800e024 <xTaskResumeAll>
 800d5b2:	e77a      	b.n	800d4aa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5b6:	f000 f9cd 	bl	800d954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5ba:	f000 fd33 	bl	800e024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5c0:	f000 fa1a 	bl	800d9f8 <prvIsQueueEmpty>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f43f af6f 	beq.w	800d4aa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3730      	adds	r7, #48	; 0x30
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	e000ed04 	.word	0xe000ed04

0800d5dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b08e      	sub	sp, #56	; 0x38
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10c      	bne.n	800d612 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fc:	b672      	cpsid	i
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	b662      	cpsie	i
 800d60c:	623b      	str	r3, [r7, #32]
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00c      	beq.n	800d634 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61e:	b672      	cpsid	i
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	b662      	cpsie	i
 800d62e:	61fb      	str	r3, [r7, #28]
}
 800d630:	bf00      	nop
 800d632:	e7fe      	b.n	800d632 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d634:	f001 f8b0 	bl	800e798 <xTaskGetSchedulerState>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d102      	bne.n	800d644 <xQueueSemaphoreTake+0x68>
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <xQueueSemaphoreTake+0x6c>
 800d644:	2301      	movs	r3, #1
 800d646:	e000      	b.n	800d64a <xQueueSemaphoreTake+0x6e>
 800d648:	2300      	movs	r3, #0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10c      	bne.n	800d668 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	b672      	cpsid	i
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	b662      	cpsie	i
 800d662:	61bb      	str	r3, [r7, #24]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d668:	f001 fbe0 	bl	800ee2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d670:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	2b00      	cmp	r3, #0
 800d676:	d024      	beq.n	800d6c2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	1e5a      	subs	r2, r3, #1
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d104      	bne.n	800d692 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d688:	f001 fa4c 	bl	800eb24 <pvTaskIncrementMutexHeldCount>
 800d68c:	4602      	mov	r2, r0
 800d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d690:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00f      	beq.n	800d6ba <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	3310      	adds	r3, #16
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 feb2 	bl	800e408 <xTaskRemoveFromEventList>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d007      	beq.n	800d6ba <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6aa:	4b55      	ldr	r3, [pc, #340]	; (800d800 <xQueueSemaphoreTake+0x224>)
 800d6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6ba:	f001 fbeb 	bl	800ee94 <vPortExitCritical>
				return pdPASS;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e099      	b.n	800d7f6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d113      	bne.n	800d6f0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00c      	beq.n	800d6e8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	617b      	str	r3, [r7, #20]
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d6e8:	f001 fbd4 	bl	800ee94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e082      	b.n	800d7f6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d106      	bne.n	800d704 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6f6:	f107 030c 	add.w	r3, r7, #12
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 fee8 	bl	800e4d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d700:	2301      	movs	r3, #1
 800d702:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d704:	f001 fbc6 	bl	800ee94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d708:	f000 fc7e 	bl	800e008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d70c:	f001 fb8e 	bl	800ee2c <vPortEnterCritical>
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d716:	b25b      	sxtb	r3, r3
 800d718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71c:	d103      	bne.n	800d726 <xQueueSemaphoreTake+0x14a>
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d72c:	b25b      	sxtb	r3, r3
 800d72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d732:	d103      	bne.n	800d73c <xQueueSemaphoreTake+0x160>
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	2200      	movs	r2, #0
 800d738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d73c:	f001 fbaa 	bl	800ee94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d740:	463a      	mov	r2, r7
 800d742:	f107 030c 	add.w	r3, r7, #12
 800d746:	4611      	mov	r1, r2
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 fed7 	bl	800e4fc <xTaskCheckForTimeOut>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d132      	bne.n	800d7ba <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d756:	f000 f94f 	bl	800d9f8 <prvIsQueueEmpty>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d026      	beq.n	800d7ae <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d109      	bne.n	800d77c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d768:	f001 fb60 	bl	800ee2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	4618      	mov	r0, r3
 800d772:	f001 f82f 	bl	800e7d4 <xTaskPriorityInherit>
 800d776:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d778:	f001 fb8c 	bl	800ee94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	3324      	adds	r3, #36	; 0x24
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	4611      	mov	r1, r2
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fe19 	bl	800e3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d78a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d78c:	f000 f8e2 	bl	800d954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d790:	f000 fc48 	bl	800e024 <xTaskResumeAll>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	f47f af66 	bne.w	800d668 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d79c:	4b18      	ldr	r3, [pc, #96]	; (800d800 <xQueueSemaphoreTake+0x224>)
 800d79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	e75c      	b.n	800d668 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d7ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7b0:	f000 f8d0 	bl	800d954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7b4:	f000 fc36 	bl	800e024 <xTaskResumeAll>
 800d7b8:	e756      	b.n	800d668 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d7ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7bc:	f000 f8ca 	bl	800d954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7c0:	f000 fc30 	bl	800e024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7c6:	f000 f917 	bl	800d9f8 <prvIsQueueEmpty>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f43f af4b 	beq.w	800d668 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00d      	beq.n	800d7f4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d7d8:	f001 fb28 	bl	800ee2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d7dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7de:	f000 f811 	bl	800d804 <prvGetDisinheritPriorityAfterTimeout>
 800d7e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f001 f8fc 	bl	800e9e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d7f0:	f001 fb50 	bl	800ee94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3738      	adds	r7, #56	; 0x38
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	e000ed04 	.word	0xe000ed04

0800d804 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d810:	2b00      	cmp	r3, #0
 800d812:	d006      	beq.n	800d822 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f1c3 0307 	rsb	r3, r3, #7
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	e001      	b.n	800d826 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d822:	2300      	movs	r3, #0
 800d824:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d826:	68fb      	ldr	r3, [r7, #12]
	}
 800d828:	4618      	mov	r0, r3
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d840:	2300      	movs	r3, #0
 800d842:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d848:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10d      	bne.n	800d86e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d14d      	bne.n	800d8f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	4618      	mov	r0, r3
 800d860:	f001 f838 	bl	800e8d4 <xTaskPriorityDisinherit>
 800d864:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	609a      	str	r2, [r3, #8]
 800d86c:	e043      	b.n	800d8f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d119      	bne.n	800d8a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6858      	ldr	r0, [r3, #4]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87c:	461a      	mov	r2, r3
 800d87e:	68b9      	ldr	r1, [r7, #8]
 800d880:	f001 fe10 	bl	800f4a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88c:	441a      	add	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d32b      	bcc.n	800d8f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	605a      	str	r2, [r3, #4]
 800d8a6:	e026      	b.n	800d8f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	68d8      	ldr	r0, [r3, #12]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	68b9      	ldr	r1, [r7, #8]
 800d8b4:	f001 fdf6 	bl	800f4a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68da      	ldr	r2, [r3, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	425b      	negs	r3, r3
 800d8c2:	441a      	add	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	68da      	ldr	r2, [r3, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d207      	bcs.n	800d8e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	689a      	ldr	r2, [r3, #8]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8dc:	425b      	negs	r3, r3
 800d8de:	441a      	add	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d105      	bne.n	800d8f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	1c5a      	adds	r2, r3, #1
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8fe:	697b      	ldr	r3, [r7, #20]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d916:	2b00      	cmp	r3, #0
 800d918:	d018      	beq.n	800d94c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d922:	441a      	add	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	68da      	ldr	r2, [r3, #12]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	429a      	cmp	r2, r3
 800d932:	d303      	bcc.n	800d93c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	68d9      	ldr	r1, [r3, #12]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d944:	461a      	mov	r2, r3
 800d946:	6838      	ldr	r0, [r7, #0]
 800d948:	f001 fdac 	bl	800f4a4 <memcpy>
	}
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d95c:	f001 fa66 	bl	800ee2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d966:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d968:	e011      	b.n	800d98e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d012      	beq.n	800d998 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	3324      	adds	r3, #36	; 0x24
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fd46 	bl	800e408 <xTaskRemoveFromEventList>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d982:	f000 fe21 	bl	800e5c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	3b01      	subs	r3, #1
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d992:	2b00      	cmp	r3, #0
 800d994:	dce9      	bgt.n	800d96a <prvUnlockQueue+0x16>
 800d996:	e000      	b.n	800d99a <prvUnlockQueue+0x46>
					break;
 800d998:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	22ff      	movs	r2, #255	; 0xff
 800d99e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d9a2:	f001 fa77 	bl	800ee94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d9a6:	f001 fa41 	bl	800ee2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9b2:	e011      	b.n	800d9d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d012      	beq.n	800d9e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3310      	adds	r3, #16
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 fd21 	bl	800e408 <xTaskRemoveFromEventList>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d9cc:	f000 fdfc 	bl	800e5c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dce9      	bgt.n	800d9b4 <prvUnlockQueue+0x60>
 800d9e0:	e000      	b.n	800d9e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d9e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	22ff      	movs	r2, #255	; 0xff
 800d9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d9ec:	f001 fa52 	bl	800ee94 <vPortExitCritical>
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da00:	f001 fa14 	bl	800ee2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d102      	bne.n	800da12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da0c:	2301      	movs	r3, #1
 800da0e:	60fb      	str	r3, [r7, #12]
 800da10:	e001      	b.n	800da16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da12:	2300      	movs	r3, #0
 800da14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da16:	f001 fa3d 	bl	800ee94 <vPortExitCritical>

	return xReturn;
 800da1a:	68fb      	ldr	r3, [r7, #12]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da2c:	f001 f9fe 	bl	800ee2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da38:	429a      	cmp	r2, r3
 800da3a:	d102      	bne.n	800da42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da3c:	2301      	movs	r3, #1
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e001      	b.n	800da46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da42:	2300      	movs	r3, #0
 800da44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da46:	f001 fa25 	bl	800ee94 <vPortExitCritical>

	return xReturn;
 800da4a:	68fb      	ldr	r3, [r7, #12]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08e      	sub	sp, #56	; 0x38
 800da58:	af04      	add	r7, sp, #16
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
 800da60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10c      	bne.n	800da82 <xTaskCreateStatic+0x2e>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6c:	b672      	cpsid	i
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	b662      	cpsie	i
 800da7c:	623b      	str	r3, [r7, #32]
}
 800da7e:	bf00      	nop
 800da80:	e7fe      	b.n	800da80 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800da82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10c      	bne.n	800daa2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	b672      	cpsid	i
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	b662      	cpsie	i
 800da9c:	61fb      	str	r3, [r7, #28]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800daa2:	23b4      	movs	r3, #180	; 0xb4
 800daa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	2bb4      	cmp	r3, #180	; 0xb4
 800daaa:	d00c      	beq.n	800dac6 <xTaskCreateStatic+0x72>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab0:	b672      	cpsid	i
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	b662      	cpsie	i
 800dac0:	61bb      	str	r3, [r7, #24]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dac6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d01e      	beq.n	800db0c <xTaskCreateStatic+0xb8>
 800dace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01b      	beq.n	800db0c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dadc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	2202      	movs	r2, #2
 800dae2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dae6:	2300      	movs	r3, #0
 800dae8:	9303      	str	r3, [sp, #12]
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	9302      	str	r3, [sp, #8]
 800daee:	f107 0314 	add.w	r3, r7, #20
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	68b9      	ldr	r1, [r7, #8]
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f000 f850 	bl	800dba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db06:	f000 f8ed 	bl	800dce4 <prvAddNewTaskToReadyList>
 800db0a:	e001      	b.n	800db10 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800db0c:	2300      	movs	r3, #0
 800db0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db10:	697b      	ldr	r3, [r7, #20]
	}
 800db12:	4618      	mov	r0, r3
 800db14:	3728      	adds	r7, #40	; 0x28
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b08c      	sub	sp, #48	; 0x30
 800db1e:	af04      	add	r7, sp, #16
 800db20:	60f8      	str	r0, [r7, #12]
 800db22:	60b9      	str	r1, [r7, #8]
 800db24:	603b      	str	r3, [r7, #0]
 800db26:	4613      	mov	r3, r2
 800db28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4618      	mov	r0, r3
 800db30:	f001 faa8 	bl	800f084 <pvPortMalloc>
 800db34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00e      	beq.n	800db5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db3c:	20b4      	movs	r0, #180	; 0xb4
 800db3e:	f001 faa1 	bl	800f084 <pvPortMalloc>
 800db42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	631a      	str	r2, [r3, #48]	; 0x30
 800db50:	e005      	b.n	800db5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db52:	6978      	ldr	r0, [r7, #20]
 800db54:	f001 fb60 	bl	800f218 <vPortFree>
 800db58:	e001      	b.n	800db5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d017      	beq.n	800db94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	2300      	movs	r3, #0
 800db70:	9303      	str	r3, [sp, #12]
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	9302      	str	r3, [sp, #8]
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 f80e 	bl	800dba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db88:	69f8      	ldr	r0, [r7, #28]
 800db8a:	f000 f8ab 	bl	800dce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db8e:	2301      	movs	r3, #1
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	e002      	b.n	800db9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db94:	f04f 33ff 	mov.w	r3, #4294967295
 800db98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db9a:	69bb      	ldr	r3, [r7, #24]
	}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3720      	adds	r7, #32
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dbbc:	440b      	add	r3, r1
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	f023 0307 	bic.w	r3, r3, #7
 800dbca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	f003 0307 	and.w	r3, r3, #7
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00c      	beq.n	800dbf0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbda:	b672      	cpsid	i
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	b662      	cpsie	i
 800dbea:	617b      	str	r3, [r7, #20]
}
 800dbec:	bf00      	nop
 800dbee:	e7fe      	b.n	800dbee <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d01f      	beq.n	800dc36 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	e012      	b.n	800dc22 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	4413      	add	r3, r2
 800dc02:	7819      	ldrb	r1, [r3, #0]
 800dc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	4413      	add	r3, r2
 800dc0a:	3334      	adds	r3, #52	; 0x34
 800dc0c:	460a      	mov	r2, r1
 800dc0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4413      	add	r3, r2
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d006      	beq.n	800dc2a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	61fb      	str	r3, [r7, #28]
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	2b0f      	cmp	r3, #15
 800dc26:	d9e9      	bls.n	800dbfc <prvInitialiseNewTask+0x58>
 800dc28:	e000      	b.n	800dc2c <prvInitialiseNewTask+0x88>
			{
				break;
 800dc2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc34:	e003      	b.n	800dc3e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	2b06      	cmp	r3, #6
 800dc42:	d901      	bls.n	800dc48 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc44:	2306      	movs	r3, #6
 800dc46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc56:	2200      	movs	r2, #0
 800dc58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff f801 	bl	800cc66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	3318      	adds	r3, #24
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fffc 	bl	800cc66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	f1c3 0207 	rsb	r2, r3, #7
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	334c      	adds	r3, #76	; 0x4c
 800dc98:	2260      	movs	r2, #96	; 0x60
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f001 fc0f 	bl	800f4c0 <memset>
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	4a0c      	ldr	r2, [pc, #48]	; (800dcd8 <prvInitialiseNewTask+0x134>)
 800dca6:	651a      	str	r2, [r3, #80]	; 0x50
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	4a0c      	ldr	r2, [pc, #48]	; (800dcdc <prvInitialiseNewTask+0x138>)
 800dcac:	655a      	str	r2, [r3, #84]	; 0x54
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	4a0b      	ldr	r2, [pc, #44]	; (800dce0 <prvInitialiseNewTask+0x13c>)
 800dcb2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	69b8      	ldr	r0, [r7, #24]
 800dcba:	f000 ffad 	bl	800ec18 <pxPortInitialiseStack>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcd0:	bf00      	nop
 800dcd2:	3720      	adds	r7, #32
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	08051dc4 	.word	0x08051dc4
 800dcdc:	08051de4 	.word	0x08051de4
 800dce0:	08051da4 	.word	0x08051da4

0800dce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcec:	f001 f89e 	bl	800ee2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcf0:	4b2a      	ldr	r3, [pc, #168]	; (800dd9c <prvAddNewTaskToReadyList+0xb8>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	4a29      	ldr	r2, [pc, #164]	; (800dd9c <prvAddNewTaskToReadyList+0xb8>)
 800dcf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcfa:	4b29      	ldr	r3, [pc, #164]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d109      	bne.n	800dd16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd02:	4a27      	ldr	r2, [pc, #156]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd08:	4b24      	ldr	r3, [pc, #144]	; (800dd9c <prvAddNewTaskToReadyList+0xb8>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d110      	bne.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd10:	f000 fc7e 	bl	800e610 <prvInitialiseTaskLists>
 800dd14:	e00d      	b.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd16:	4b23      	ldr	r3, [pc, #140]	; (800dda4 <prvAddNewTaskToReadyList+0xc0>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d109      	bne.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd1e:	4b20      	ldr	r3, [pc, #128]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d802      	bhi.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd2c:	4a1c      	ldr	r2, [pc, #112]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd32:	4b1d      	ldr	r3, [pc, #116]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	4a1b      	ldr	r2, [pc, #108]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dd3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	2201      	movs	r2, #1
 800dd42:	409a      	lsls	r2, r3
 800dd44:	4b19      	ldr	r3, [pc, #100]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	4a18      	ldr	r2, [pc, #96]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4a15      	ldr	r2, [pc, #84]	; (800ddb0 <prvAddNewTaskToReadyList+0xcc>)
 800dd5c:	441a      	add	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3304      	adds	r3, #4
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7fe ff8b 	bl	800cc80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd6a:	f001 f893 	bl	800ee94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd6e:	4b0d      	ldr	r3, [pc, #52]	; (800dda4 <prvAddNewTaskToReadyList+0xc0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00e      	beq.n	800dd94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d207      	bcs.n	800dd94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd84:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <prvAddNewTaskToReadyList+0xd0>)
 800dd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20000dfc 	.word	0x20000dfc
 800dda0:	20000cfc 	.word	0x20000cfc
 800dda4:	20000e08 	.word	0x20000e08
 800dda8:	20000e18 	.word	0x20000e18
 800ddac:	20000e04 	.word	0x20000e04
 800ddb0:	20000d00 	.word	0x20000d00
 800ddb4:	e000ed04 	.word	0xe000ed04

0800ddb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10c      	bne.n	800dde6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	b672      	cpsid	i
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	b662      	cpsie	i
 800dde0:	617b      	str	r3, [r7, #20]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10c      	bne.n	800de06 <vTaskDelayUntil+0x4e>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	b672      	cpsid	i
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	b662      	cpsie	i
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800de06:	4b2b      	ldr	r3, [pc, #172]	; (800deb4 <vTaskDelayUntil+0xfc>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00c      	beq.n	800de28 <vTaskDelayUntil+0x70>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	b672      	cpsid	i
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	b662      	cpsie	i
 800de22:	60fb      	str	r3, [r7, #12]
}
 800de24:	bf00      	nop
 800de26:	e7fe      	b.n	800de26 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800de28:	f000 f8ee 	bl	800e008 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800de2c:	4b22      	ldr	r3, [pc, #136]	; (800deb8 <vTaskDelayUntil+0x100>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	4413      	add	r3, r2
 800de3a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6a3a      	ldr	r2, [r7, #32]
 800de42:	429a      	cmp	r2, r3
 800de44:	d20b      	bcs.n	800de5e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	69fa      	ldr	r2, [r7, #28]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d211      	bcs.n	800de74 <vTaskDelayUntil+0xbc>
 800de50:	69fa      	ldr	r2, [r7, #28]
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	429a      	cmp	r2, r3
 800de56:	d90d      	bls.n	800de74 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800de58:	2301      	movs	r3, #1
 800de5a:	627b      	str	r3, [r7, #36]	; 0x24
 800de5c:	e00a      	b.n	800de74 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	69fa      	ldr	r2, [r7, #28]
 800de64:	429a      	cmp	r2, r3
 800de66:	d303      	bcc.n	800de70 <vTaskDelayUntil+0xb8>
 800de68:	69fa      	ldr	r2, [r7, #28]
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d901      	bls.n	800de74 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d006      	beq.n	800de8e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800de80:	69fa      	ldr	r2, [r7, #28]
 800de82:	6a3b      	ldr	r3, [r7, #32]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	2100      	movs	r1, #0
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 fe5f 	bl	800eb4c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800de8e:	f000 f8c9 	bl	800e024 <xTaskResumeAll>
 800de92:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d107      	bne.n	800deaa <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800de9a:	4b08      	ldr	r3, [pc, #32]	; (800debc <vTaskDelayUntil+0x104>)
 800de9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800deaa:	bf00      	nop
 800deac:	3728      	adds	r7, #40	; 0x28
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	20000e24 	.word	0x20000e24
 800deb8:	20000e00 	.word	0x20000e00
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dec8:	2300      	movs	r3, #0
 800deca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d019      	beq.n	800df06 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ded2:	4b14      	ldr	r3, [pc, #80]	; (800df24 <vTaskDelay+0x64>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00c      	beq.n	800def4 <vTaskDelay+0x34>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	b672      	cpsid	i
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	b662      	cpsie	i
 800deee:	60bb      	str	r3, [r7, #8]
}
 800def0:	bf00      	nop
 800def2:	e7fe      	b.n	800def2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800def4:	f000 f888 	bl	800e008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800def8:	2100      	movs	r1, #0
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 fe26 	bl	800eb4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df00:	f000 f890 	bl	800e024 <xTaskResumeAll>
 800df04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d107      	bne.n	800df1c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800df0c:	4b06      	ldr	r3, [pc, #24]	; (800df28 <vTaskDelay+0x68>)
 800df0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df1c:	bf00      	nop
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	20000e24 	.word	0x20000e24
 800df28:	e000ed04 	.word	0xe000ed04

0800df2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08a      	sub	sp, #40	; 0x28
 800df30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df3a:	463a      	mov	r2, r7
 800df3c:	1d39      	adds	r1, r7, #4
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	4618      	mov	r0, r3
 800df44:	f7f3 fa90 	bl	8001468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df48:	6839      	ldr	r1, [r7, #0]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	9202      	str	r2, [sp, #8]
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	2300      	movs	r3, #0
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	2300      	movs	r3, #0
 800df58:	460a      	mov	r2, r1
 800df5a:	4923      	ldr	r1, [pc, #140]	; (800dfe8 <vTaskStartScheduler+0xbc>)
 800df5c:	4823      	ldr	r0, [pc, #140]	; (800dfec <vTaskStartScheduler+0xc0>)
 800df5e:	f7ff fd79 	bl	800da54 <xTaskCreateStatic>
 800df62:	4603      	mov	r3, r0
 800df64:	4a22      	ldr	r2, [pc, #136]	; (800dff0 <vTaskStartScheduler+0xc4>)
 800df66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df68:	4b21      	ldr	r3, [pc, #132]	; (800dff0 <vTaskStartScheduler+0xc4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df70:	2301      	movs	r3, #1
 800df72:	617b      	str	r3, [r7, #20]
 800df74:	e001      	b.n	800df7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df76:	2300      	movs	r3, #0
 800df78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d11d      	bne.n	800dfbc <vTaskStartScheduler+0x90>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	b672      	cpsid	i
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	b662      	cpsie	i
 800df94:	613b      	str	r3, [r7, #16]
}
 800df96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df98:	4b16      	ldr	r3, [pc, #88]	; (800dff4 <vTaskStartScheduler+0xc8>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	334c      	adds	r3, #76	; 0x4c
 800df9e:	4a16      	ldr	r2, [pc, #88]	; (800dff8 <vTaskStartScheduler+0xcc>)
 800dfa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfa2:	4b16      	ldr	r3, [pc, #88]	; (800dffc <vTaskStartScheduler+0xd0>)
 800dfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfaa:	4b15      	ldr	r3, [pc, #84]	; (800e000 <vTaskStartScheduler+0xd4>)
 800dfac:	2201      	movs	r2, #1
 800dfae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfb0:	4b14      	ldr	r3, [pc, #80]	; (800e004 <vTaskStartScheduler+0xd8>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfb6:	f000 febb 	bl	800ed30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfba:	e010      	b.n	800dfde <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc2:	d10c      	bne.n	800dfde <vTaskStartScheduler+0xb2>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc8:	b672      	cpsid	i
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	b662      	cpsie	i
 800dfd8:	60fb      	str	r3, [r7, #12]
}
 800dfda:	bf00      	nop
 800dfdc:	e7fe      	b.n	800dfdc <vTaskStartScheduler+0xb0>
}
 800dfde:	bf00      	nop
 800dfe0:	3718      	adds	r7, #24
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	080101c4 	.word	0x080101c4
 800dfec:	0800e5e1 	.word	0x0800e5e1
 800dff0:	20000e20 	.word	0x20000e20
 800dff4:	20000cfc 	.word	0x20000cfc
 800dff8:	2000004c 	.word	0x2000004c
 800dffc:	20000e1c 	.word	0x20000e1c
 800e000:	20000e08 	.word	0x20000e08
 800e004:	20000e00 	.word	0x20000e00

0800e008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e008:	b480      	push	{r7}
 800e00a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e00c:	4b04      	ldr	r3, [pc, #16]	; (800e020 <vTaskSuspendAll+0x18>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3301      	adds	r3, #1
 800e012:	4a03      	ldr	r2, [pc, #12]	; (800e020 <vTaskSuspendAll+0x18>)
 800e014:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e016:	bf00      	nop
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	20000e24 	.word	0x20000e24

0800e024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e02e:	2300      	movs	r3, #0
 800e030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e032:	4b42      	ldr	r3, [pc, #264]	; (800e13c <xTaskResumeAll+0x118>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10c      	bne.n	800e054 <xTaskResumeAll+0x30>
	__asm volatile
 800e03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03e:	b672      	cpsid	i
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	b662      	cpsie	i
 800e04e:	603b      	str	r3, [r7, #0]
}
 800e050:	bf00      	nop
 800e052:	e7fe      	b.n	800e052 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e054:	f000 feea 	bl	800ee2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e058:	4b38      	ldr	r3, [pc, #224]	; (800e13c <xTaskResumeAll+0x118>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	4a37      	ldr	r2, [pc, #220]	; (800e13c <xTaskResumeAll+0x118>)
 800e060:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e062:	4b36      	ldr	r3, [pc, #216]	; (800e13c <xTaskResumeAll+0x118>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d161      	bne.n	800e12e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e06a:	4b35      	ldr	r3, [pc, #212]	; (800e140 <xTaskResumeAll+0x11c>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d05d      	beq.n	800e12e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e072:	e02e      	b.n	800e0d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e074:	4b33      	ldr	r3, [pc, #204]	; (800e144 <xTaskResumeAll+0x120>)
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3318      	adds	r3, #24
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe fe5a 	bl	800cd3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3304      	adds	r3, #4
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fe55 	bl	800cd3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	2201      	movs	r2, #1
 800e096:	409a      	lsls	r2, r3
 800e098:	4b2b      	ldr	r3, [pc, #172]	; (800e148 <xTaskResumeAll+0x124>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	4a2a      	ldr	r2, [pc, #168]	; (800e148 <xTaskResumeAll+0x124>)
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4a27      	ldr	r2, [pc, #156]	; (800e14c <xTaskResumeAll+0x128>)
 800e0b0:	441a      	add	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f7fe fde1 	bl	800cc80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c2:	4b23      	ldr	r3, [pc, #140]	; (800e150 <xTaskResumeAll+0x12c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d302      	bcc.n	800e0d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e0cc:	4b21      	ldr	r3, [pc, #132]	; (800e154 <xTaskResumeAll+0x130>)
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0d2:	4b1c      	ldr	r3, [pc, #112]	; (800e144 <xTaskResumeAll+0x120>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1cc      	bne.n	800e074 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0e0:	f000 fb3a 	bl	800e758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e0e4:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <xTaskResumeAll+0x134>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d010      	beq.n	800e112 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0f0:	f000 f846 	bl	800e180 <xTaskIncrementTick>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d002      	beq.n	800e100 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e0fa:	4b16      	ldr	r3, [pc, #88]	; (800e154 <xTaskResumeAll+0x130>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3b01      	subs	r3, #1
 800e104:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f1      	bne.n	800e0f0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e10c:	4b12      	ldr	r3, [pc, #72]	; (800e158 <xTaskResumeAll+0x134>)
 800e10e:	2200      	movs	r2, #0
 800e110:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e112:	4b10      	ldr	r3, [pc, #64]	; (800e154 <xTaskResumeAll+0x130>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d009      	beq.n	800e12e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e11a:	2301      	movs	r3, #1
 800e11c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e11e:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <xTaskResumeAll+0x138>)
 800e120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e124:	601a      	str	r2, [r3, #0]
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e12e:	f000 feb1 	bl	800ee94 <vPortExitCritical>

	return xAlreadyYielded;
 800e132:	68bb      	ldr	r3, [r7, #8]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	20000e24 	.word	0x20000e24
 800e140:	20000dfc 	.word	0x20000dfc
 800e144:	20000dbc 	.word	0x20000dbc
 800e148:	20000e04 	.word	0x20000e04
 800e14c:	20000d00 	.word	0x20000d00
 800e150:	20000cfc 	.word	0x20000cfc
 800e154:	20000e10 	.word	0x20000e10
 800e158:	20000e0c 	.word	0x20000e0c
 800e15c:	e000ed04 	.word	0xe000ed04

0800e160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e166:	4b05      	ldr	r3, [pc, #20]	; (800e17c <xTaskGetTickCount+0x1c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e16c:	687b      	ldr	r3, [r7, #4]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop
 800e17c:	20000e00 	.word	0x20000e00

0800e180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e186:	2300      	movs	r3, #0
 800e188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e18a:	4b4f      	ldr	r3, [pc, #316]	; (800e2c8 <xTaskIncrementTick+0x148>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f040 808a 	bne.w	800e2a8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e194:	4b4d      	ldr	r3, [pc, #308]	; (800e2cc <xTaskIncrementTick+0x14c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e19c:	4a4b      	ldr	r2, [pc, #300]	; (800e2cc <xTaskIncrementTick+0x14c>)
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d122      	bne.n	800e1ee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1a8:	4b49      	ldr	r3, [pc, #292]	; (800e2d0 <xTaskIncrementTick+0x150>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00c      	beq.n	800e1cc <xTaskIncrementTick+0x4c>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	b672      	cpsid	i
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	b662      	cpsie	i
 800e1c6:	603b      	str	r3, [r7, #0]
}
 800e1c8:	bf00      	nop
 800e1ca:	e7fe      	b.n	800e1ca <xTaskIncrementTick+0x4a>
 800e1cc:	4b40      	ldr	r3, [pc, #256]	; (800e2d0 <xTaskIncrementTick+0x150>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	4b40      	ldr	r3, [pc, #256]	; (800e2d4 <xTaskIncrementTick+0x154>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a3e      	ldr	r2, [pc, #248]	; (800e2d0 <xTaskIncrementTick+0x150>)
 800e1d8:	6013      	str	r3, [r2, #0]
 800e1da:	4a3e      	ldr	r2, [pc, #248]	; (800e2d4 <xTaskIncrementTick+0x154>)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6013      	str	r3, [r2, #0]
 800e1e0:	4b3d      	ldr	r3, [pc, #244]	; (800e2d8 <xTaskIncrementTick+0x158>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	4a3c      	ldr	r2, [pc, #240]	; (800e2d8 <xTaskIncrementTick+0x158>)
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	f000 fab5 	bl	800e758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1ee:	4b3b      	ldr	r3, [pc, #236]	; (800e2dc <xTaskIncrementTick+0x15c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	693a      	ldr	r2, [r7, #16]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d348      	bcc.n	800e28a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1f8:	4b35      	ldr	r3, [pc, #212]	; (800e2d0 <xTaskIncrementTick+0x150>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d104      	bne.n	800e20c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e202:	4b36      	ldr	r3, [pc, #216]	; (800e2dc <xTaskIncrementTick+0x15c>)
 800e204:	f04f 32ff 	mov.w	r2, #4294967295
 800e208:	601a      	str	r2, [r3, #0]
					break;
 800e20a:	e03e      	b.n	800e28a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e20c:	4b30      	ldr	r3, [pc, #192]	; (800e2d0 <xTaskIncrementTick+0x150>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e21c:	693a      	ldr	r2, [r7, #16]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	429a      	cmp	r2, r3
 800e222:	d203      	bcs.n	800e22c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e224:	4a2d      	ldr	r2, [pc, #180]	; (800e2dc <xTaskIncrementTick+0x15c>)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e22a:	e02e      	b.n	800e28a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	3304      	adds	r3, #4
 800e230:	4618      	mov	r0, r3
 800e232:	f7fe fd82 	bl	800cd3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	3318      	adds	r3, #24
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe fd79 	bl	800cd3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24c:	2201      	movs	r2, #1
 800e24e:	409a      	lsls	r2, r3
 800e250:	4b23      	ldr	r3, [pc, #140]	; (800e2e0 <xTaskIncrementTick+0x160>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4313      	orrs	r3, r2
 800e256:	4a22      	ldr	r2, [pc, #136]	; (800e2e0 <xTaskIncrementTick+0x160>)
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25e:	4613      	mov	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4a1f      	ldr	r2, [pc, #124]	; (800e2e4 <xTaskIncrementTick+0x164>)
 800e268:	441a      	add	r2, r3
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3304      	adds	r3, #4
 800e26e:	4619      	mov	r1, r3
 800e270:	4610      	mov	r0, r2
 800e272:	f7fe fd05 	bl	800cc80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27a:	4b1b      	ldr	r3, [pc, #108]	; (800e2e8 <xTaskIncrementTick+0x168>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	429a      	cmp	r2, r3
 800e282:	d3b9      	bcc.n	800e1f8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e284:	2301      	movs	r3, #1
 800e286:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e288:	e7b6      	b.n	800e1f8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e28a:	4b17      	ldr	r3, [pc, #92]	; (800e2e8 <xTaskIncrementTick+0x168>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e290:	4914      	ldr	r1, [pc, #80]	; (800e2e4 <xTaskIncrementTick+0x164>)
 800e292:	4613      	mov	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	440b      	add	r3, r1
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d907      	bls.n	800e2b2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	617b      	str	r3, [r7, #20]
 800e2a6:	e004      	b.n	800e2b2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e2a8:	4b10      	ldr	r3, [pc, #64]	; (800e2ec <xTaskIncrementTick+0x16c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	4a0f      	ldr	r2, [pc, #60]	; (800e2ec <xTaskIncrementTick+0x16c>)
 800e2b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e2b2:	4b0f      	ldr	r3, [pc, #60]	; (800e2f0 <xTaskIncrementTick+0x170>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e2be:	697b      	ldr	r3, [r7, #20]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3718      	adds	r7, #24
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	20000e24 	.word	0x20000e24
 800e2cc:	20000e00 	.word	0x20000e00
 800e2d0:	20000db4 	.word	0x20000db4
 800e2d4:	20000db8 	.word	0x20000db8
 800e2d8:	20000e14 	.word	0x20000e14
 800e2dc:	20000e1c 	.word	0x20000e1c
 800e2e0:	20000e04 	.word	0x20000e04
 800e2e4:	20000d00 	.word	0x20000d00
 800e2e8:	20000cfc 	.word	0x20000cfc
 800e2ec:	20000e0c 	.word	0x20000e0c
 800e2f0:	20000e10 	.word	0x20000e10

0800e2f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b087      	sub	sp, #28
 800e2f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2fa:	4b2a      	ldr	r3, [pc, #168]	; (800e3a4 <vTaskSwitchContext+0xb0>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d003      	beq.n	800e30a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e302:	4b29      	ldr	r3, [pc, #164]	; (800e3a8 <vTaskSwitchContext+0xb4>)
 800e304:	2201      	movs	r2, #1
 800e306:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e308:	e046      	b.n	800e398 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e30a:	4b27      	ldr	r3, [pc, #156]	; (800e3a8 <vTaskSwitchContext+0xb4>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e310:	4b26      	ldr	r3, [pc, #152]	; (800e3ac <vTaskSwitchContext+0xb8>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	fab3 f383 	clz	r3, r3
 800e31c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e31e:	7afb      	ldrb	r3, [r7, #11]
 800e320:	f1c3 031f 	rsb	r3, r3, #31
 800e324:	617b      	str	r3, [r7, #20]
 800e326:	4922      	ldr	r1, [pc, #136]	; (800e3b0 <vTaskSwitchContext+0xbc>)
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	4613      	mov	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	440b      	add	r3, r1
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10c      	bne.n	800e354 <vTaskSwitchContext+0x60>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	b672      	cpsid	i
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	b662      	cpsie	i
 800e34e:	607b      	str	r3, [r7, #4]
}
 800e350:	bf00      	nop
 800e352:	e7fe      	b.n	800e352 <vTaskSwitchContext+0x5e>
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	4613      	mov	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4a14      	ldr	r2, [pc, #80]	; (800e3b0 <vTaskSwitchContext+0xbc>)
 800e360:	4413      	add	r3, r2
 800e362:	613b      	str	r3, [r7, #16]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	685a      	ldr	r2, [r3, #4]
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	605a      	str	r2, [r3, #4]
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	3308      	adds	r3, #8
 800e376:	429a      	cmp	r2, r3
 800e378:	d104      	bne.n	800e384 <vTaskSwitchContext+0x90>
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	685a      	ldr	r2, [r3, #4]
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	605a      	str	r2, [r3, #4]
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	4a0a      	ldr	r2, [pc, #40]	; (800e3b4 <vTaskSwitchContext+0xc0>)
 800e38c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e38e:	4b09      	ldr	r3, [pc, #36]	; (800e3b4 <vTaskSwitchContext+0xc0>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	334c      	adds	r3, #76	; 0x4c
 800e394:	4a08      	ldr	r2, [pc, #32]	; (800e3b8 <vTaskSwitchContext+0xc4>)
 800e396:	6013      	str	r3, [r2, #0]
}
 800e398:	bf00      	nop
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	20000e24 	.word	0x20000e24
 800e3a8:	20000e10 	.word	0x20000e10
 800e3ac:	20000e04 	.word	0x20000e04
 800e3b0:	20000d00 	.word	0x20000d00
 800e3b4:	20000cfc 	.word	0x20000cfc
 800e3b8:	2000004c 	.word	0x2000004c

0800e3bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10c      	bne.n	800e3e6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d0:	b672      	cpsid	i
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	b662      	cpsie	i
 800e3e0:	60fb      	str	r3, [r7, #12]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3e6:	4b07      	ldr	r3, [pc, #28]	; (800e404 <vTaskPlaceOnEventList+0x48>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3318      	adds	r3, #24
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7fe fc6a 	bl	800ccc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	6838      	ldr	r0, [r7, #0]
 800e3f8:	f000 fba8 	bl	800eb4c <prvAddCurrentTaskToDelayedList>
}
 800e3fc:	bf00      	nop
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	20000cfc 	.word	0x20000cfc

0800e408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10c      	bne.n	800e438 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	b672      	cpsid	i
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	b662      	cpsie	i
 800e432:	60fb      	str	r3, [r7, #12]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	3318      	adds	r3, #24
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe fc7c 	bl	800cd3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e442:	4b1d      	ldr	r3, [pc, #116]	; (800e4b8 <xTaskRemoveFromEventList+0xb0>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d11c      	bne.n	800e484 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	3304      	adds	r3, #4
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fe fc73 	bl	800cd3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e458:	2201      	movs	r2, #1
 800e45a:	409a      	lsls	r2, r3
 800e45c:	4b17      	ldr	r3, [pc, #92]	; (800e4bc <xTaskRemoveFromEventList+0xb4>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4313      	orrs	r3, r2
 800e462:	4a16      	ldr	r2, [pc, #88]	; (800e4bc <xTaskRemoveFromEventList+0xb4>)
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	4a13      	ldr	r2, [pc, #76]	; (800e4c0 <xTaskRemoveFromEventList+0xb8>)
 800e474:	441a      	add	r2, r3
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	3304      	adds	r3, #4
 800e47a:	4619      	mov	r1, r3
 800e47c:	4610      	mov	r0, r2
 800e47e:	f7fe fbff 	bl	800cc80 <vListInsertEnd>
 800e482:	e005      	b.n	800e490 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	3318      	adds	r3, #24
 800e488:	4619      	mov	r1, r3
 800e48a:	480e      	ldr	r0, [pc, #56]	; (800e4c4 <xTaskRemoveFromEventList+0xbc>)
 800e48c:	f7fe fbf8 	bl	800cc80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e494:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <xTaskRemoveFromEventList+0xc0>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d905      	bls.n	800e4aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e4a2:	4b0a      	ldr	r3, [pc, #40]	; (800e4cc <xTaskRemoveFromEventList+0xc4>)
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	601a      	str	r2, [r3, #0]
 800e4a8:	e001      	b.n	800e4ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e4ae:	697b      	ldr	r3, [r7, #20]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20000e24 	.word	0x20000e24
 800e4bc:	20000e04 	.word	0x20000e04
 800e4c0:	20000d00 	.word	0x20000d00
 800e4c4:	20000dbc 	.word	0x20000dbc
 800e4c8:	20000cfc 	.word	0x20000cfc
 800e4cc:	20000e10 	.word	0x20000e10

0800e4d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4d8:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <vTaskInternalSetTimeOutState+0x24>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4e0:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <vTaskInternalSetTimeOutState+0x28>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	605a      	str	r2, [r3, #4]
}
 800e4e8:	bf00      	nop
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	20000e14 	.word	0x20000e14
 800e4f8:	20000e00 	.word	0x20000e00

0800e4fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10c      	bne.n	800e526 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	b672      	cpsid	i
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	b662      	cpsie	i
 800e520:	613b      	str	r3, [r7, #16]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10c      	bne.n	800e546 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	b672      	cpsid	i
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	b662      	cpsie	i
 800e540:	60fb      	str	r3, [r7, #12]
}
 800e542:	bf00      	nop
 800e544:	e7fe      	b.n	800e544 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e546:	f000 fc71 	bl	800ee2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e54a:	4b1d      	ldr	r3, [pc, #116]	; (800e5c0 <xTaskCheckForTimeOut+0xc4>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e562:	d102      	bne.n	800e56a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e564:	2300      	movs	r3, #0
 800e566:	61fb      	str	r3, [r7, #28]
 800e568:	e023      	b.n	800e5b2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	4b15      	ldr	r3, [pc, #84]	; (800e5c4 <xTaskCheckForTimeOut+0xc8>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d007      	beq.n	800e586 <xTaskCheckForTimeOut+0x8a>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d302      	bcc.n	800e586 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e580:	2301      	movs	r3, #1
 800e582:	61fb      	str	r3, [r7, #28]
 800e584:	e015      	b.n	800e5b2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d20b      	bcs.n	800e5a8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	1ad2      	subs	r2, r2, r3
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff ff97 	bl	800e4d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	61fb      	str	r3, [r7, #28]
 800e5a6:	e004      	b.n	800e5b2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e5b2:	f000 fc6f 	bl	800ee94 <vPortExitCritical>

	return xReturn;
 800e5b6:	69fb      	ldr	r3, [r7, #28]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3720      	adds	r7, #32
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	20000e00 	.word	0x20000e00
 800e5c4:	20000e14 	.word	0x20000e14

0800e5c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5cc:	4b03      	ldr	r3, [pc, #12]	; (800e5dc <vTaskMissedYield+0x14>)
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	601a      	str	r2, [r3, #0]
}
 800e5d2:	bf00      	nop
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	20000e10 	.word	0x20000e10

0800e5e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5e8:	f000 f852 	bl	800e690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5ec:	4b06      	ldr	r3, [pc, #24]	; (800e608 <prvIdleTask+0x28>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d9f9      	bls.n	800e5e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e5f4:	4b05      	ldr	r3, [pc, #20]	; (800e60c <prvIdleTask+0x2c>)
 800e5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e604:	e7f0      	b.n	800e5e8 <prvIdleTask+0x8>
 800e606:	bf00      	nop
 800e608:	20000d00 	.word	0x20000d00
 800e60c:	e000ed04 	.word	0xe000ed04

0800e610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e616:	2300      	movs	r3, #0
 800e618:	607b      	str	r3, [r7, #4]
 800e61a:	e00c      	b.n	800e636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	4613      	mov	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	4a12      	ldr	r2, [pc, #72]	; (800e670 <prvInitialiseTaskLists+0x60>)
 800e628:	4413      	add	r3, r2
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fafb 	bl	800cc26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3301      	adds	r3, #1
 800e634:	607b      	str	r3, [r7, #4]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b06      	cmp	r3, #6
 800e63a:	d9ef      	bls.n	800e61c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e63c:	480d      	ldr	r0, [pc, #52]	; (800e674 <prvInitialiseTaskLists+0x64>)
 800e63e:	f7fe faf2 	bl	800cc26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e642:	480d      	ldr	r0, [pc, #52]	; (800e678 <prvInitialiseTaskLists+0x68>)
 800e644:	f7fe faef 	bl	800cc26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e648:	480c      	ldr	r0, [pc, #48]	; (800e67c <prvInitialiseTaskLists+0x6c>)
 800e64a:	f7fe faec 	bl	800cc26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e64e:	480c      	ldr	r0, [pc, #48]	; (800e680 <prvInitialiseTaskLists+0x70>)
 800e650:	f7fe fae9 	bl	800cc26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e654:	480b      	ldr	r0, [pc, #44]	; (800e684 <prvInitialiseTaskLists+0x74>)
 800e656:	f7fe fae6 	bl	800cc26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e65a:	4b0b      	ldr	r3, [pc, #44]	; (800e688 <prvInitialiseTaskLists+0x78>)
 800e65c:	4a05      	ldr	r2, [pc, #20]	; (800e674 <prvInitialiseTaskLists+0x64>)
 800e65e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <prvInitialiseTaskLists+0x7c>)
 800e662:	4a05      	ldr	r2, [pc, #20]	; (800e678 <prvInitialiseTaskLists+0x68>)
 800e664:	601a      	str	r2, [r3, #0]
}
 800e666:	bf00      	nop
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20000d00 	.word	0x20000d00
 800e674:	20000d8c 	.word	0x20000d8c
 800e678:	20000da0 	.word	0x20000da0
 800e67c:	20000dbc 	.word	0x20000dbc
 800e680:	20000dd0 	.word	0x20000dd0
 800e684:	20000de8 	.word	0x20000de8
 800e688:	20000db4 	.word	0x20000db4
 800e68c:	20000db8 	.word	0x20000db8

0800e690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e696:	e019      	b.n	800e6cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e698:	f000 fbc8 	bl	800ee2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e69c:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <prvCheckTasksWaitingTermination+0x50>)
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe fb46 	bl	800cd3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e6ae:	4b0d      	ldr	r3, [pc, #52]	; (800e6e4 <prvCheckTasksWaitingTermination+0x54>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	4a0b      	ldr	r2, [pc, #44]	; (800e6e4 <prvCheckTasksWaitingTermination+0x54>)
 800e6b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e6b8:	4b0b      	ldr	r3, [pc, #44]	; (800e6e8 <prvCheckTasksWaitingTermination+0x58>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	4a0a      	ldr	r2, [pc, #40]	; (800e6e8 <prvCheckTasksWaitingTermination+0x58>)
 800e6c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e6c2:	f000 fbe7 	bl	800ee94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f810 	bl	800e6ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6cc:	4b06      	ldr	r3, [pc, #24]	; (800e6e8 <prvCheckTasksWaitingTermination+0x58>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e1      	bne.n	800e698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	20000dd0 	.word	0x20000dd0
 800e6e4:	20000dfc 	.word	0x20000dfc
 800e6e8:	20000de4 	.word	0x20000de4

0800e6ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	334c      	adds	r3, #76	; 0x4c
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f000 ff8b 	bl	800f614 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e704:	2b00      	cmp	r3, #0
 800e706:	d108      	bne.n	800e71a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70c:	4618      	mov	r0, r3
 800e70e:	f000 fd83 	bl	800f218 <vPortFree>
				vPortFree( pxTCB );
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 fd80 	bl	800f218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e718:	e01a      	b.n	800e750 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e720:	2b01      	cmp	r3, #1
 800e722:	d103      	bne.n	800e72c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fd77 	bl	800f218 <vPortFree>
	}
 800e72a:	e011      	b.n	800e750 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e732:	2b02      	cmp	r3, #2
 800e734:	d00c      	beq.n	800e750 <prvDeleteTCB+0x64>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73a:	b672      	cpsid	i
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	b662      	cpsie	i
 800e74a:	60fb      	str	r3, [r7, #12]
}
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <prvDeleteTCB+0x62>
	}
 800e750:	bf00      	nop
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e75e:	4b0c      	ldr	r3, [pc, #48]	; (800e790 <prvResetNextTaskUnblockTime+0x38>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d104      	bne.n	800e772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e768:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <prvResetNextTaskUnblockTime+0x3c>)
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295
 800e76e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e770:	e008      	b.n	800e784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e772:	4b07      	ldr	r3, [pc, #28]	; (800e790 <prvResetNextTaskUnblockTime+0x38>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	4a04      	ldr	r2, [pc, #16]	; (800e794 <prvResetNextTaskUnblockTime+0x3c>)
 800e782:	6013      	str	r3, [r2, #0]
}
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	20000db4 	.word	0x20000db4
 800e794:	20000e1c 	.word	0x20000e1c

0800e798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e79e:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <xTaskGetSchedulerState+0x34>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d102      	bne.n	800e7ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	607b      	str	r3, [r7, #4]
 800e7aa:	e008      	b.n	800e7be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ac:	4b08      	ldr	r3, [pc, #32]	; (800e7d0 <xTaskGetSchedulerState+0x38>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	607b      	str	r3, [r7, #4]
 800e7b8:	e001      	b.n	800e7be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e7be:	687b      	ldr	r3, [r7, #4]
	}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	20000e08 	.word	0x20000e08
 800e7d0:	20000e24 	.word	0x20000e24

0800e7d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d069      	beq.n	800e8be <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ee:	4b36      	ldr	r3, [pc, #216]	; (800e8c8 <xTaskPriorityInherit+0xf4>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d259      	bcs.n	800e8ac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	699b      	ldr	r3, [r3, #24]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db06      	blt.n	800e80e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e800:	4b31      	ldr	r3, [pc, #196]	; (800e8c8 <xTaskPriorityInherit+0xf4>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e806:	f1c3 0207 	rsb	r2, r3, #7
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	6959      	ldr	r1, [r3, #20]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e816:	4613      	mov	r3, r2
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	4413      	add	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4a2b      	ldr	r2, [pc, #172]	; (800e8cc <xTaskPriorityInherit+0xf8>)
 800e820:	4413      	add	r3, r2
 800e822:	4299      	cmp	r1, r3
 800e824:	d13a      	bne.n	800e89c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	3304      	adds	r3, #4
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe fa85 	bl	800cd3a <uxListRemove>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d115      	bne.n	800e862 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e83a:	4924      	ldr	r1, [pc, #144]	; (800e8cc <xTaskPriorityInherit+0xf8>)
 800e83c:	4613      	mov	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d10a      	bne.n	800e862 <xTaskPriorityInherit+0x8e>
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	2201      	movs	r2, #1
 800e852:	fa02 f303 	lsl.w	r3, r2, r3
 800e856:	43da      	mvns	r2, r3
 800e858:	4b1d      	ldr	r3, [pc, #116]	; (800e8d0 <xTaskPriorityInherit+0xfc>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4013      	ands	r3, r2
 800e85e:	4a1c      	ldr	r2, [pc, #112]	; (800e8d0 <xTaskPriorityInherit+0xfc>)
 800e860:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e862:	4b19      	ldr	r3, [pc, #100]	; (800e8c8 <xTaskPriorityInherit+0xf4>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	2201      	movs	r2, #1
 800e872:	409a      	lsls	r2, r3
 800e874:	4b16      	ldr	r3, [pc, #88]	; (800e8d0 <xTaskPriorityInherit+0xfc>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4313      	orrs	r3, r2
 800e87a:	4a15      	ldr	r2, [pc, #84]	; (800e8d0 <xTaskPriorityInherit+0xfc>)
 800e87c:	6013      	str	r3, [r2, #0]
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4a10      	ldr	r2, [pc, #64]	; (800e8cc <xTaskPriorityInherit+0xf8>)
 800e88c:	441a      	add	r2, r3
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	3304      	adds	r3, #4
 800e892:	4619      	mov	r1, r3
 800e894:	4610      	mov	r0, r2
 800e896:	f7fe f9f3 	bl	800cc80 <vListInsertEnd>
 800e89a:	e004      	b.n	800e8a6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <xTaskPriorityInherit+0xf4>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	60fb      	str	r3, [r7, #12]
 800e8aa:	e008      	b.n	800e8be <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <xTaskPriorityInherit+0xf4>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d201      	bcs.n	800e8be <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e8be:	68fb      	ldr	r3, [r7, #12]
	}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20000cfc 	.word	0x20000cfc
 800e8cc:	20000d00 	.word	0x20000d00
 800e8d0:	20000e04 	.word	0x20000e04

0800e8d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d072      	beq.n	800e9d0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e8ea:	4b3c      	ldr	r3, [pc, #240]	; (800e9dc <xTaskPriorityDisinherit+0x108>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d00c      	beq.n	800e90e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	b672      	cpsid	i
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	b662      	cpsie	i
 800e908:	60fb      	str	r3, [r7, #12]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10c      	bne.n	800e930 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91a:	b672      	cpsid	i
 800e91c:	f383 8811 	msr	BASEPRI, r3
 800e920:	f3bf 8f6f 	isb	sy
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	b662      	cpsie	i
 800e92a:	60bb      	str	r3, [r7, #8]
}
 800e92c:	bf00      	nop
 800e92e:	e7fe      	b.n	800e92e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e934:	1e5a      	subs	r2, r3, #1
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e942:	429a      	cmp	r2, r3
 800e944:	d044      	beq.n	800e9d0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d140      	bne.n	800e9d0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	3304      	adds	r3, #4
 800e952:	4618      	mov	r0, r3
 800e954:	f7fe f9f1 	bl	800cd3a <uxListRemove>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d115      	bne.n	800e98a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e962:	491f      	ldr	r1, [pc, #124]	; (800e9e0 <xTaskPriorityDisinherit+0x10c>)
 800e964:	4613      	mov	r3, r2
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	4413      	add	r3, r2
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	440b      	add	r3, r1
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <xTaskPriorityDisinherit+0xb6>
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e978:	2201      	movs	r2, #1
 800e97a:	fa02 f303 	lsl.w	r3, r2, r3
 800e97e:	43da      	mvns	r2, r3
 800e980:	4b18      	ldr	r3, [pc, #96]	; (800e9e4 <xTaskPriorityDisinherit+0x110>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4013      	ands	r3, r2
 800e986:	4a17      	ldr	r2, [pc, #92]	; (800e9e4 <xTaskPriorityDisinherit+0x110>)
 800e988:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e996:	f1c3 0207 	rsb	r2, r3, #7
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	409a      	lsls	r2, r3
 800e9a6:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <xTaskPriorityDisinherit+0x110>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	4a0d      	ldr	r2, [pc, #52]	; (800e9e4 <xTaskPriorityDisinherit+0x110>)
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	4413      	add	r3, r2
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4a08      	ldr	r2, [pc, #32]	; (800e9e0 <xTaskPriorityDisinherit+0x10c>)
 800e9be:	441a      	add	r2, r3
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	3304      	adds	r3, #4
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f7fe f95a 	bl	800cc80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9d0:	697b      	ldr	r3, [r7, #20]
	}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000cfc 	.word	0x20000cfc
 800e9e0:	20000d00 	.word	0x20000d00
 800e9e4:	20000e04 	.word	0x20000e04

0800e9e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f000 8087 	beq.w	800eb10 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10c      	bne.n	800ea24 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	b672      	cpsid	i
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	b662      	cpsie	i
 800ea1e:	60fb      	str	r3, [r7, #12]
}
 800ea20:	bf00      	nop
 800ea22:	e7fe      	b.n	800ea22 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d902      	bls.n	800ea34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	61fb      	str	r3, [r7, #28]
 800ea32:	e002      	b.n	800ea3a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea38:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3e:	69fa      	ldr	r2, [r7, #28]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d065      	beq.n	800eb10 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d160      	bne.n	800eb10 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ea4e:	4b32      	ldr	r3, [pc, #200]	; (800eb18 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	69ba      	ldr	r2, [r7, #24]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d10c      	bne.n	800ea72 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5c:	b672      	cpsid	i
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	b662      	cpsie	i
 800ea6c:	60bb      	str	r3, [r7, #8]
}
 800ea6e:	bf00      	nop
 800ea70:	e7fe      	b.n	800ea70 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	69fa      	ldr	r2, [r7, #28]
 800ea7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	699b      	ldr	r3, [r3, #24]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	db04      	blt.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	f1c3 0207 	rsb	r2, r3, #7
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	6959      	ldr	r1, [r3, #20]
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	4613      	mov	r3, r2
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4413      	add	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4a1f      	ldr	r2, [pc, #124]	; (800eb1c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eaa0:	4413      	add	r3, r2
 800eaa2:	4299      	cmp	r1, r3
 800eaa4:	d134      	bne.n	800eb10 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe f945 	bl	800cd3a <uxListRemove>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d115      	bne.n	800eae2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaba:	4918      	ldr	r1, [pc, #96]	; (800eb1c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eabc:	4613      	mov	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	4413      	add	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	440b      	add	r3, r1
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10a      	bne.n	800eae2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead0:	2201      	movs	r2, #1
 800ead2:	fa02 f303 	lsl.w	r3, r2, r3
 800ead6:	43da      	mvns	r2, r3
 800ead8:	4b11      	ldr	r3, [pc, #68]	; (800eb20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4013      	ands	r3, r2
 800eade:	4a10      	ldr	r2, [pc, #64]	; (800eb20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eae0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae6:	2201      	movs	r2, #1
 800eae8:	409a      	lsls	r2, r3
 800eaea:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	4a0b      	ldr	r2, [pc, #44]	; (800eb20 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf8:	4613      	mov	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4413      	add	r3, r2
 800eafe:	009b      	lsls	r3, r3, #2
 800eb00:	4a06      	ldr	r2, [pc, #24]	; (800eb1c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eb02:	441a      	add	r2, r3
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	3304      	adds	r3, #4
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4610      	mov	r0, r2
 800eb0c:	f7fe f8b8 	bl	800cc80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb10:	bf00      	nop
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20000cfc 	.word	0x20000cfc
 800eb1c:	20000d00 	.word	0x20000d00
 800eb20:	20000e04 	.word	0x20000e04

0800eb24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb24:	b480      	push	{r7}
 800eb26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb28:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d004      	beq.n	800eb3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb30:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb36:	3201      	adds	r2, #1
 800eb38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eb3a:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
	}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	20000cfc 	.word	0x20000cfc

0800eb4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eb56:	4b29      	ldr	r3, [pc, #164]	; (800ebfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb5c:	4b28      	ldr	r3, [pc, #160]	; (800ec00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	3304      	adds	r3, #4
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe f8e9 	bl	800cd3a <uxListRemove>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10b      	bne.n	800eb86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eb6e:	4b24      	ldr	r3, [pc, #144]	; (800ec00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb74:	2201      	movs	r2, #1
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	43da      	mvns	r2, r3
 800eb7c:	4b21      	ldr	r3, [pc, #132]	; (800ec04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4013      	ands	r3, r2
 800eb82:	4a20      	ldr	r2, [pc, #128]	; (800ec04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8c:	d10a      	bne.n	800eba4 <prvAddCurrentTaskToDelayedList+0x58>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d007      	beq.n	800eba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb94:	4b1a      	ldr	r3, [pc, #104]	; (800ec00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	481a      	ldr	r0, [pc, #104]	; (800ec08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eb9e:	f7fe f86f 	bl	800cc80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eba2:	e026      	b.n	800ebf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4413      	add	r3, r2
 800ebaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ebac:	4b14      	ldr	r3, [pc, #80]	; (800ec00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d209      	bcs.n	800ebd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebbc:	4b13      	ldr	r3, [pc, #76]	; (800ec0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	4b0f      	ldr	r3, [pc, #60]	; (800ec00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f7fe f87d 	bl	800ccc8 <vListInsert>
}
 800ebce:	e010      	b.n	800ebf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebd0:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	4619      	mov	r1, r3
 800ebdc:	4610      	mov	r0, r2
 800ebde:	f7fe f873 	bl	800ccc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ebe2:	4b0c      	ldr	r3, [pc, #48]	; (800ec14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d202      	bcs.n	800ebf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ebec:	4a09      	ldr	r2, [pc, #36]	; (800ec14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	6013      	str	r3, [r2, #0]
}
 800ebf2:	bf00      	nop
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20000e00 	.word	0x20000e00
 800ec00:	20000cfc 	.word	0x20000cfc
 800ec04:	20000e04 	.word	0x20000e04
 800ec08:	20000de8 	.word	0x20000de8
 800ec0c:	20000db8 	.word	0x20000db8
 800ec10:	20000db4 	.word	0x20000db4
 800ec14:	20000e1c 	.word	0x20000e1c

0800ec18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	3b04      	subs	r3, #4
 800ec28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	3b04      	subs	r3, #4
 800ec36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f023 0201 	bic.w	r2, r3, #1
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3b04      	subs	r3, #4
 800ec46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec48:	4a0c      	ldr	r2, [pc, #48]	; (800ec7c <pxPortInitialiseStack+0x64>)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3b14      	subs	r3, #20
 800ec52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3b04      	subs	r3, #4
 800ec5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f06f 0202 	mvn.w	r2, #2
 800ec66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	3b20      	subs	r3, #32
 800ec6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3714      	adds	r7, #20
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr
 800ec7c:	0800ec81 	.word	0x0800ec81

0800ec80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec8a:	4b14      	ldr	r3, [pc, #80]	; (800ecdc <prvTaskExitError+0x5c>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec92:	d00c      	beq.n	800ecae <prvTaskExitError+0x2e>
	__asm volatile
 800ec94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec98:	b672      	cpsid	i
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	b662      	cpsie	i
 800eca8:	60fb      	str	r3, [r7, #12]
}
 800ecaa:	bf00      	nop
 800ecac:	e7fe      	b.n	800ecac <prvTaskExitError+0x2c>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	b672      	cpsid	i
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	b662      	cpsie	i
 800ecc2:	60bb      	str	r3, [r7, #8]
}
 800ecc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ecc6:	bf00      	nop
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d0fc      	beq.n	800ecc8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ecce:	bf00      	nop
 800ecd0:	bf00      	nop
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	20000048 	.word	0x20000048

0800ece0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <pxCurrentTCBConst2>)
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	6808      	ldr	r0, [r1, #0]
 800ece6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	f380 8809 	msr	PSP, r0
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f04f 0000 	mov.w	r0, #0
 800ecf6:	f380 8811 	msr	BASEPRI, r0
 800ecfa:	4770      	bx	lr
 800ecfc:	f3af 8000 	nop.w

0800ed00 <pxCurrentTCBConst2>:
 800ed00:	20000cfc 	.word	0x20000cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop

0800ed08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed08:	4808      	ldr	r0, [pc, #32]	; (800ed2c <prvPortStartFirstTask+0x24>)
 800ed0a:	6800      	ldr	r0, [r0, #0]
 800ed0c:	6800      	ldr	r0, [r0, #0]
 800ed0e:	f380 8808 	msr	MSP, r0
 800ed12:	f04f 0000 	mov.w	r0, #0
 800ed16:	f380 8814 	msr	CONTROL, r0
 800ed1a:	b662      	cpsie	i
 800ed1c:	b661      	cpsie	f
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	df00      	svc	0
 800ed28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed2a:	bf00      	nop
 800ed2c:	e000ed08 	.word	0xe000ed08

0800ed30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed36:	4b37      	ldr	r3, [pc, #220]	; (800ee14 <xPortStartScheduler+0xe4>)
 800ed38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	22ff      	movs	r2, #255	; 0xff
 800ed46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed50:	78fb      	ldrb	r3, [r7, #3]
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	4b2f      	ldr	r3, [pc, #188]	; (800ee18 <xPortStartScheduler+0xe8>)
 800ed5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed5e:	4b2f      	ldr	r3, [pc, #188]	; (800ee1c <xPortStartScheduler+0xec>)
 800ed60:	2207      	movs	r2, #7
 800ed62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed64:	e009      	b.n	800ed7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ed66:	4b2d      	ldr	r3, [pc, #180]	; (800ee1c <xPortStartScheduler+0xec>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	4a2b      	ldr	r2, [pc, #172]	; (800ee1c <xPortStartScheduler+0xec>)
 800ed6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed7a:	78fb      	ldrb	r3, [r7, #3]
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed82:	2b80      	cmp	r3, #128	; 0x80
 800ed84:	d0ef      	beq.n	800ed66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed86:	4b25      	ldr	r3, [pc, #148]	; (800ee1c <xPortStartScheduler+0xec>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f1c3 0307 	rsb	r3, r3, #7
 800ed8e:	2b04      	cmp	r3, #4
 800ed90:	d00c      	beq.n	800edac <xPortStartScheduler+0x7c>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed96:	b672      	cpsid	i
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	b662      	cpsie	i
 800eda6:	60bb      	str	r3, [r7, #8]
}
 800eda8:	bf00      	nop
 800edaa:	e7fe      	b.n	800edaa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edac:	4b1b      	ldr	r3, [pc, #108]	; (800ee1c <xPortStartScheduler+0xec>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	021b      	lsls	r3, r3, #8
 800edb2:	4a1a      	ldr	r2, [pc, #104]	; (800ee1c <xPortStartScheduler+0xec>)
 800edb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800edb6:	4b19      	ldr	r3, [pc, #100]	; (800ee1c <xPortStartScheduler+0xec>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edbe:	4a17      	ldr	r2, [pc, #92]	; (800ee1c <xPortStartScheduler+0xec>)
 800edc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	b2da      	uxtb	r2, r3
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800edca:	4b15      	ldr	r3, [pc, #84]	; (800ee20 <xPortStartScheduler+0xf0>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a14      	ldr	r2, [pc, #80]	; (800ee20 <xPortStartScheduler+0xf0>)
 800edd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800edd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800edd6:	4b12      	ldr	r3, [pc, #72]	; (800ee20 <xPortStartScheduler+0xf0>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a11      	ldr	r2, [pc, #68]	; (800ee20 <xPortStartScheduler+0xf0>)
 800eddc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ede0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ede2:	f000 f8dd 	bl	800efa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ede6:	4b0f      	ldr	r3, [pc, #60]	; (800ee24 <xPortStartScheduler+0xf4>)
 800ede8:	2200      	movs	r2, #0
 800edea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edec:	f000 f8fc 	bl	800efe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edf0:	4b0d      	ldr	r3, [pc, #52]	; (800ee28 <xPortStartScheduler+0xf8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <xPortStartScheduler+0xf8>)
 800edf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800edfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800edfc:	f7ff ff84 	bl	800ed08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee00:	f7ff fa78 	bl	800e2f4 <vTaskSwitchContext>
	prvTaskExitError();
 800ee04:	f7ff ff3c 	bl	800ec80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	e000e400 	.word	0xe000e400
 800ee18:	20000e28 	.word	0x20000e28
 800ee1c:	20000e2c 	.word	0x20000e2c
 800ee20:	e000ed20 	.word	0xe000ed20
 800ee24:	20000048 	.word	0x20000048
 800ee28:	e000ef34 	.word	0xe000ef34

0800ee2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
	__asm volatile
 800ee32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee36:	b672      	cpsid	i
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	b662      	cpsie	i
 800ee46:	607b      	str	r3, [r7, #4]
}
 800ee48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee4a:	4b10      	ldr	r3, [pc, #64]	; (800ee8c <vPortEnterCritical+0x60>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	4a0e      	ldr	r2, [pc, #56]	; (800ee8c <vPortEnterCritical+0x60>)
 800ee52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee54:	4b0d      	ldr	r3, [pc, #52]	; (800ee8c <vPortEnterCritical+0x60>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d111      	bne.n	800ee80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee5c:	4b0c      	ldr	r3, [pc, #48]	; (800ee90 <vPortEnterCritical+0x64>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00c      	beq.n	800ee80 <vPortEnterCritical+0x54>
	__asm volatile
 800ee66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6a:	b672      	cpsid	i
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	b662      	cpsie	i
 800ee7a:	603b      	str	r3, [r7, #0]
}
 800ee7c:	bf00      	nop
 800ee7e:	e7fe      	b.n	800ee7e <vPortEnterCritical+0x52>
	}
}
 800ee80:	bf00      	nop
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	20000048 	.word	0x20000048
 800ee90:	e000ed04 	.word	0xe000ed04

0800ee94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee9a:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <vPortExitCritical+0x54>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10c      	bne.n	800eebc <vPortExitCritical+0x28>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea6:	b672      	cpsid	i
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	b662      	cpsie	i
 800eeb6:	607b      	str	r3, [r7, #4]
}
 800eeb8:	bf00      	nop
 800eeba:	e7fe      	b.n	800eeba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800eebc:	4b0a      	ldr	r3, [pc, #40]	; (800eee8 <vPortExitCritical+0x54>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	4a09      	ldr	r2, [pc, #36]	; (800eee8 <vPortExitCritical+0x54>)
 800eec4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eec6:	4b08      	ldr	r3, [pc, #32]	; (800eee8 <vPortExitCritical+0x54>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d105      	bne.n	800eeda <vPortExitCritical+0x46>
 800eece:	2300      	movs	r3, #0
 800eed0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	f383 8811 	msr	BASEPRI, r3
}
 800eed8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eeda:	bf00      	nop
 800eedc:	370c      	adds	r7, #12
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	20000048 	.word	0x20000048
 800eeec:	00000000 	.word	0x00000000

0800eef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eef0:	f3ef 8009 	mrs	r0, PSP
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	4b15      	ldr	r3, [pc, #84]	; (800ef50 <pxCurrentTCBConst>)
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	f01e 0f10 	tst.w	lr, #16
 800ef00:	bf08      	it	eq
 800ef02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0a:	6010      	str	r0, [r2, #0]
 800ef0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef14:	b672      	cpsid	i
 800ef16:	f380 8811 	msr	BASEPRI, r0
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	b662      	cpsie	i
 800ef24:	f7ff f9e6 	bl	800e2f4 <vTaskSwitchContext>
 800ef28:	f04f 0000 	mov.w	r0, #0
 800ef2c:	f380 8811 	msr	BASEPRI, r0
 800ef30:	bc09      	pop	{r0, r3}
 800ef32:	6819      	ldr	r1, [r3, #0]
 800ef34:	6808      	ldr	r0, [r1, #0]
 800ef36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3a:	f01e 0f10 	tst.w	lr, #16
 800ef3e:	bf08      	it	eq
 800ef40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef44:	f380 8809 	msr	PSP, r0
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop

0800ef50 <pxCurrentTCBConst>:
 800ef50:	20000cfc 	.word	0x20000cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef54:	bf00      	nop
 800ef56:	bf00      	nop

0800ef58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	b672      	cpsid	i
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	b662      	cpsie	i
 800ef72:	607b      	str	r3, [r7, #4]
}
 800ef74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef76:	f7ff f903 	bl	800e180 <xTaskIncrementTick>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef80:	4b06      	ldr	r3, [pc, #24]	; (800ef9c <SysTick_Handler+0x44>)
 800ef82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef86:	601a      	str	r2, [r3, #0]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	f383 8811 	msr	BASEPRI, r3
}
 800ef92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	e000ed04 	.word	0xe000ed04

0800efa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efa0:	b480      	push	{r7}
 800efa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800efa4:	4b0b      	ldr	r3, [pc, #44]	; (800efd4 <vPortSetupTimerInterrupt+0x34>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800efaa:	4b0b      	ldr	r3, [pc, #44]	; (800efd8 <vPortSetupTimerInterrupt+0x38>)
 800efac:	2200      	movs	r2, #0
 800efae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800efb0:	4b0a      	ldr	r3, [pc, #40]	; (800efdc <vPortSetupTimerInterrupt+0x3c>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a0a      	ldr	r2, [pc, #40]	; (800efe0 <vPortSetupTimerInterrupt+0x40>)
 800efb6:	fba2 2303 	umull	r2, r3, r2, r3
 800efba:	099b      	lsrs	r3, r3, #6
 800efbc:	4a09      	ldr	r2, [pc, #36]	; (800efe4 <vPortSetupTimerInterrupt+0x44>)
 800efbe:	3b01      	subs	r3, #1
 800efc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800efc2:	4b04      	ldr	r3, [pc, #16]	; (800efd4 <vPortSetupTimerInterrupt+0x34>)
 800efc4:	2207      	movs	r2, #7
 800efc6:	601a      	str	r2, [r3, #0]
}
 800efc8:	bf00      	nop
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	e000e010 	.word	0xe000e010
 800efd8:	e000e018 	.word	0xe000e018
 800efdc:	2000003c 	.word	0x2000003c
 800efe0:	10624dd3 	.word	0x10624dd3
 800efe4:	e000e014 	.word	0xe000e014

0800efe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efe8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eff8 <vPortEnableVFP+0x10>
 800efec:	6801      	ldr	r1, [r0, #0]
 800efee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eff2:	6001      	str	r1, [r0, #0]
 800eff4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eff6:	bf00      	nop
 800eff8:	e000ed88 	.word	0xe000ed88

0800effc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f002:	f3ef 8305 	mrs	r3, IPSR
 800f006:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b0f      	cmp	r3, #15
 800f00c:	d916      	bls.n	800f03c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f00e:	4a19      	ldr	r2, [pc, #100]	; (800f074 <vPortValidateInterruptPriority+0x78>)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4413      	add	r3, r2
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f018:	4b17      	ldr	r3, [pc, #92]	; (800f078 <vPortValidateInterruptPriority+0x7c>)
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	7afa      	ldrb	r2, [r7, #11]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d20c      	bcs.n	800f03c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f026:	b672      	cpsid	i
 800f028:	f383 8811 	msr	BASEPRI, r3
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	b662      	cpsie	i
 800f036:	607b      	str	r3, [r7, #4]
}
 800f038:	bf00      	nop
 800f03a:	e7fe      	b.n	800f03a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f03c:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <vPortValidateInterruptPriority+0x80>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <vPortValidateInterruptPriority+0x84>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d90c      	bls.n	800f066 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	b672      	cpsid	i
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	b662      	cpsie	i
 800f060:	603b      	str	r3, [r7, #0]
}
 800f062:	bf00      	nop
 800f064:	e7fe      	b.n	800f064 <vPortValidateInterruptPriority+0x68>
	}
 800f066:	bf00      	nop
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	e000e3f0 	.word	0xe000e3f0
 800f078:	20000e28 	.word	0x20000e28
 800f07c:	e000ed0c 	.word	0xe000ed0c
 800f080:	20000e2c 	.word	0x20000e2c

0800f084 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	; 0x28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f08c:	2300      	movs	r3, #0
 800f08e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f090:	f7fe ffba 	bl	800e008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f094:	4b5b      	ldr	r3, [pc, #364]	; (800f204 <pvPortMalloc+0x180>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f09c:	f000 f91a 	bl	800f2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0a0:	4b59      	ldr	r3, [pc, #356]	; (800f208 <pvPortMalloc+0x184>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4013      	ands	r3, r2
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f040 8092 	bne.w	800f1d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d01f      	beq.n	800f0f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f0b4:	2208      	movs	r2, #8
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f003 0307 	and.w	r3, r3, #7
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d016      	beq.n	800f0f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f023 0307 	bic.w	r3, r3, #7
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00c      	beq.n	800f0f4 <pvPortMalloc+0x70>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	b672      	cpsid	i
 800f0e0:	f383 8811 	msr	BASEPRI, r3
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	b662      	cpsie	i
 800f0ee:	617b      	str	r3, [r7, #20]
}
 800f0f0:	bf00      	nop
 800f0f2:	e7fe      	b.n	800f0f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d06b      	beq.n	800f1d2 <pvPortMalloc+0x14e>
 800f0fa:	4b44      	ldr	r3, [pc, #272]	; (800f20c <pvPortMalloc+0x188>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d866      	bhi.n	800f1d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f104:	4b42      	ldr	r3, [pc, #264]	; (800f210 <pvPortMalloc+0x18c>)
 800f106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f108:	4b41      	ldr	r3, [pc, #260]	; (800f210 <pvPortMalloc+0x18c>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f10e:	e004      	b.n	800f11a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d903      	bls.n	800f12c <pvPortMalloc+0xa8>
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1f1      	bne.n	800f110 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f12c:	4b35      	ldr	r3, [pc, #212]	; (800f204 <pvPortMalloc+0x180>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f132:	429a      	cmp	r2, r3
 800f134:	d04d      	beq.n	800f1d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2208      	movs	r2, #8
 800f13c:	4413      	add	r3, r2
 800f13e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	6a3b      	ldr	r3, [r7, #32]
 800f146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	1ad2      	subs	r2, r2, r3
 800f150:	2308      	movs	r3, #8
 800f152:	005b      	lsls	r3, r3, #1
 800f154:	429a      	cmp	r2, r3
 800f156:	d921      	bls.n	800f19c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	f003 0307 	and.w	r3, r3, #7
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00c      	beq.n	800f184 <pvPortMalloc+0x100>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	b672      	cpsid	i
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	b662      	cpsie	i
 800f17e:	613b      	str	r3, [r7, #16]
}
 800f180:	bf00      	nop
 800f182:	e7fe      	b.n	800f182 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	685a      	ldr	r2, [r3, #4]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	1ad2      	subs	r2, r2, r3
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f196:	69b8      	ldr	r0, [r7, #24]
 800f198:	f000 f8fe 	bl	800f398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f19c:	4b1b      	ldr	r3, [pc, #108]	; (800f20c <pvPortMalloc+0x188>)
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	4a19      	ldr	r2, [pc, #100]	; (800f20c <pvPortMalloc+0x188>)
 800f1a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1aa:	4b18      	ldr	r3, [pc, #96]	; (800f20c <pvPortMalloc+0x188>)
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	4b19      	ldr	r3, [pc, #100]	; (800f214 <pvPortMalloc+0x190>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d203      	bcs.n	800f1be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1b6:	4b15      	ldr	r3, [pc, #84]	; (800f20c <pvPortMalloc+0x188>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4a16      	ldr	r2, [pc, #88]	; (800f214 <pvPortMalloc+0x190>)
 800f1bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c0:	685a      	ldr	r2, [r3, #4]
 800f1c2:	4b11      	ldr	r3, [pc, #68]	; (800f208 <pvPortMalloc+0x184>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	431a      	orrs	r2, r3
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1d2:	f7fe ff27 	bl	800e024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	f003 0307 	and.w	r3, r3, #7
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00c      	beq.n	800f1fa <pvPortMalloc+0x176>
	__asm volatile
 800f1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e4:	b672      	cpsid	i
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	b662      	cpsie	i
 800f1f4:	60fb      	str	r3, [r7, #12]
}
 800f1f6:	bf00      	nop
 800f1f8:	e7fe      	b.n	800f1f8 <pvPortMalloc+0x174>
	return pvReturn;
 800f1fa:	69fb      	ldr	r3, [r7, #28]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3728      	adds	r7, #40	; 0x28
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	20004a38 	.word	0x20004a38
 800f208:	20004a44 	.word	0x20004a44
 800f20c:	20004a3c 	.word	0x20004a3c
 800f210:	20004a30 	.word	0x20004a30
 800f214:	20004a40 	.word	0x20004a40

0800f218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d04c      	beq.n	800f2c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f22a:	2308      	movs	r3, #8
 800f22c:	425b      	negs	r3, r3
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	4413      	add	r3, r2
 800f232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	685a      	ldr	r2, [r3, #4]
 800f23c:	4b23      	ldr	r3, [pc, #140]	; (800f2cc <vPortFree+0xb4>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4013      	ands	r3, r2
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10c      	bne.n	800f260 <vPortFree+0x48>
	__asm volatile
 800f246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24a:	b672      	cpsid	i
 800f24c:	f383 8811 	msr	BASEPRI, r3
 800f250:	f3bf 8f6f 	isb	sy
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	b662      	cpsie	i
 800f25a:	60fb      	str	r3, [r7, #12]
}
 800f25c:	bf00      	nop
 800f25e:	e7fe      	b.n	800f25e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00c      	beq.n	800f282 <vPortFree+0x6a>
	__asm volatile
 800f268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26c:	b672      	cpsid	i
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	b662      	cpsie	i
 800f27c:	60bb      	str	r3, [r7, #8]
}
 800f27e:	bf00      	nop
 800f280:	e7fe      	b.n	800f280 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	4b11      	ldr	r3, [pc, #68]	; (800f2cc <vPortFree+0xb4>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4013      	ands	r3, r2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d019      	beq.n	800f2c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d115      	bne.n	800f2c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	685a      	ldr	r2, [r3, #4]
 800f29c:	4b0b      	ldr	r3, [pc, #44]	; (800f2cc <vPortFree+0xb4>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	43db      	mvns	r3, r3
 800f2a2:	401a      	ands	r2, r3
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2a8:	f7fe feae 	bl	800e008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <vPortFree+0xb8>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	4a06      	ldr	r2, [pc, #24]	; (800f2d0 <vPortFree+0xb8>)
 800f2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f000 f86c 	bl	800f398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f2c0:	f7fe feb0 	bl	800e024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2c4:	bf00      	nop
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20004a44 	.word	0x20004a44
 800f2d0:	20004a3c 	.word	0x20004a3c

0800f2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2e0:	4b27      	ldr	r3, [pc, #156]	; (800f380 <prvHeapInit+0xac>)
 800f2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f003 0307 	and.w	r3, r3, #7
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00c      	beq.n	800f308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3307      	adds	r3, #7
 800f2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f023 0307 	bic.w	r3, r3, #7
 800f2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2fc:	68ba      	ldr	r2, [r7, #8]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	4a1f      	ldr	r2, [pc, #124]	; (800f380 <prvHeapInit+0xac>)
 800f304:	4413      	add	r3, r2
 800f306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f30c:	4a1d      	ldr	r2, [pc, #116]	; (800f384 <prvHeapInit+0xb0>)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f312:	4b1c      	ldr	r3, [pc, #112]	; (800f384 <prvHeapInit+0xb0>)
 800f314:	2200      	movs	r2, #0
 800f316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	4413      	add	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f320:	2208      	movs	r2, #8
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	1a9b      	subs	r3, r3, r2
 800f326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f023 0307 	bic.w	r3, r3, #7
 800f32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4a15      	ldr	r2, [pc, #84]	; (800f388 <prvHeapInit+0xb4>)
 800f334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f336:	4b14      	ldr	r3, [pc, #80]	; (800f388 <prvHeapInit+0xb4>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2200      	movs	r2, #0
 800f33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f33e:	4b12      	ldr	r3, [pc, #72]	; (800f388 <prvHeapInit+0xb4>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	1ad2      	subs	r2, r2, r3
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f354:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <prvHeapInit+0xb4>)
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	4a0a      	ldr	r2, [pc, #40]	; (800f38c <prvHeapInit+0xb8>)
 800f362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	4a09      	ldr	r2, [pc, #36]	; (800f390 <prvHeapInit+0xbc>)
 800f36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f36c:	4b09      	ldr	r3, [pc, #36]	; (800f394 <prvHeapInit+0xc0>)
 800f36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f372:	601a      	str	r2, [r3, #0]
}
 800f374:	bf00      	nop
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	20000e30 	.word	0x20000e30
 800f384:	20004a30 	.word	0x20004a30
 800f388:	20004a38 	.word	0x20004a38
 800f38c:	20004a40 	.word	0x20004a40
 800f390:	20004a3c 	.word	0x20004a3c
 800f394:	20004a44 	.word	0x20004a44

0800f398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3a0:	4b28      	ldr	r3, [pc, #160]	; (800f444 <prvInsertBlockIntoFreeList+0xac>)
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e002      	b.n	800f3ac <prvInsertBlockIntoFreeList+0x14>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	60fb      	str	r3, [r7, #12]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d8f7      	bhi.n	800f3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d108      	bne.n	800f3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	685a      	ldr	r2, [r3, #4]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	441a      	add	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	441a      	add	r2, r3
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d118      	bne.n	800f420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	4b15      	ldr	r3, [pc, #84]	; (800f448 <prvInsertBlockIntoFreeList+0xb0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d00d      	beq.n	800f416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	685a      	ldr	r2, [r3, #4]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	441a      	add	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	601a      	str	r2, [r3, #0]
 800f414:	e008      	b.n	800f428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f416:	4b0c      	ldr	r3, [pc, #48]	; (800f448 <prvInsertBlockIntoFreeList+0xb0>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	e003      	b.n	800f428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d002      	beq.n	800f436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f436:	bf00      	nop
 800f438:	3714      	adds	r7, #20
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	20004a30 	.word	0x20004a30
 800f448:	20004a38 	.word	0x20004a38

0800f44c <__errno>:
 800f44c:	4b01      	ldr	r3, [pc, #4]	; (800f454 <__errno+0x8>)
 800f44e:	6818      	ldr	r0, [r3, #0]
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	2000004c 	.word	0x2000004c

0800f458 <__libc_init_array>:
 800f458:	b570      	push	{r4, r5, r6, lr}
 800f45a:	4d0d      	ldr	r5, [pc, #52]	; (800f490 <__libc_init_array+0x38>)
 800f45c:	4c0d      	ldr	r4, [pc, #52]	; (800f494 <__libc_init_array+0x3c>)
 800f45e:	1b64      	subs	r4, r4, r5
 800f460:	10a4      	asrs	r4, r4, #2
 800f462:	2600      	movs	r6, #0
 800f464:	42a6      	cmp	r6, r4
 800f466:	d109      	bne.n	800f47c <__libc_init_array+0x24>
 800f468:	4d0b      	ldr	r5, [pc, #44]	; (800f498 <__libc_init_array+0x40>)
 800f46a:	4c0c      	ldr	r4, [pc, #48]	; (800f49c <__libc_init_array+0x44>)
 800f46c:	f000 fdd6 	bl	801001c <_init>
 800f470:	1b64      	subs	r4, r4, r5
 800f472:	10a4      	asrs	r4, r4, #2
 800f474:	2600      	movs	r6, #0
 800f476:	42a6      	cmp	r6, r4
 800f478:	d105      	bne.n	800f486 <__libc_init_array+0x2e>
 800f47a:	bd70      	pop	{r4, r5, r6, pc}
 800f47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f480:	4798      	blx	r3
 800f482:	3601      	adds	r6, #1
 800f484:	e7ee      	b.n	800f464 <__libc_init_array+0xc>
 800f486:	f855 3b04 	ldr.w	r3, [r5], #4
 800f48a:	4798      	blx	r3
 800f48c:	3601      	adds	r6, #1
 800f48e:	e7f2      	b.n	800f476 <__libc_init_array+0x1e>
 800f490:	08051e40 	.word	0x08051e40
 800f494:	08051e40 	.word	0x08051e40
 800f498:	08051e40 	.word	0x08051e40
 800f49c:	08051e44 	.word	0x08051e44

0800f4a0 <__retarget_lock_acquire_recursive>:
 800f4a0:	4770      	bx	lr

0800f4a2 <__retarget_lock_release_recursive>:
 800f4a2:	4770      	bx	lr

0800f4a4 <memcpy>:
 800f4a4:	440a      	add	r2, r1
 800f4a6:	4291      	cmp	r1, r2
 800f4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4ac:	d100      	bne.n	800f4b0 <memcpy+0xc>
 800f4ae:	4770      	bx	lr
 800f4b0:	b510      	push	{r4, lr}
 800f4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ba:	4291      	cmp	r1, r2
 800f4bc:	d1f9      	bne.n	800f4b2 <memcpy+0xe>
 800f4be:	bd10      	pop	{r4, pc}

0800f4c0 <memset>:
 800f4c0:	4402      	add	r2, r0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d100      	bne.n	800f4ca <memset+0xa>
 800f4c8:	4770      	bx	lr
 800f4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ce:	e7f9      	b.n	800f4c4 <memset+0x4>

0800f4d0 <sbrk_aligned>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	4e0e      	ldr	r6, [pc, #56]	; (800f50c <sbrk_aligned+0x3c>)
 800f4d4:	460c      	mov	r4, r1
 800f4d6:	6831      	ldr	r1, [r6, #0]
 800f4d8:	4605      	mov	r5, r0
 800f4da:	b911      	cbnz	r1, 800f4e2 <sbrk_aligned+0x12>
 800f4dc:	f000 f8f6 	bl	800f6cc <_sbrk_r>
 800f4e0:	6030      	str	r0, [r6, #0]
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f000 f8f1 	bl	800f6cc <_sbrk_r>
 800f4ea:	1c43      	adds	r3, r0, #1
 800f4ec:	d00a      	beq.n	800f504 <sbrk_aligned+0x34>
 800f4ee:	1cc4      	adds	r4, r0, #3
 800f4f0:	f024 0403 	bic.w	r4, r4, #3
 800f4f4:	42a0      	cmp	r0, r4
 800f4f6:	d007      	beq.n	800f508 <sbrk_aligned+0x38>
 800f4f8:	1a21      	subs	r1, r4, r0
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f000 f8e6 	bl	800f6cc <_sbrk_r>
 800f500:	3001      	adds	r0, #1
 800f502:	d101      	bne.n	800f508 <sbrk_aligned+0x38>
 800f504:	f04f 34ff 	mov.w	r4, #4294967295
 800f508:	4620      	mov	r0, r4
 800f50a:	bd70      	pop	{r4, r5, r6, pc}
 800f50c:	20004a50 	.word	0x20004a50

0800f510 <_malloc_r>:
 800f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f514:	1ccd      	adds	r5, r1, #3
 800f516:	f025 0503 	bic.w	r5, r5, #3
 800f51a:	3508      	adds	r5, #8
 800f51c:	2d0c      	cmp	r5, #12
 800f51e:	bf38      	it	cc
 800f520:	250c      	movcc	r5, #12
 800f522:	2d00      	cmp	r5, #0
 800f524:	4607      	mov	r7, r0
 800f526:	db01      	blt.n	800f52c <_malloc_r+0x1c>
 800f528:	42a9      	cmp	r1, r5
 800f52a:	d905      	bls.n	800f538 <_malloc_r+0x28>
 800f52c:	230c      	movs	r3, #12
 800f52e:	603b      	str	r3, [r7, #0]
 800f530:	2600      	movs	r6, #0
 800f532:	4630      	mov	r0, r6
 800f534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f538:	4e2e      	ldr	r6, [pc, #184]	; (800f5f4 <_malloc_r+0xe4>)
 800f53a:	f000 f8f7 	bl	800f72c <__malloc_lock>
 800f53e:	6833      	ldr	r3, [r6, #0]
 800f540:	461c      	mov	r4, r3
 800f542:	bb34      	cbnz	r4, 800f592 <_malloc_r+0x82>
 800f544:	4629      	mov	r1, r5
 800f546:	4638      	mov	r0, r7
 800f548:	f7ff ffc2 	bl	800f4d0 <sbrk_aligned>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	4604      	mov	r4, r0
 800f550:	d14d      	bne.n	800f5ee <_malloc_r+0xde>
 800f552:	6834      	ldr	r4, [r6, #0]
 800f554:	4626      	mov	r6, r4
 800f556:	2e00      	cmp	r6, #0
 800f558:	d140      	bne.n	800f5dc <_malloc_r+0xcc>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	4631      	mov	r1, r6
 800f55e:	4638      	mov	r0, r7
 800f560:	eb04 0803 	add.w	r8, r4, r3
 800f564:	f000 f8b2 	bl	800f6cc <_sbrk_r>
 800f568:	4580      	cmp	r8, r0
 800f56a:	d13a      	bne.n	800f5e2 <_malloc_r+0xd2>
 800f56c:	6821      	ldr	r1, [r4, #0]
 800f56e:	3503      	adds	r5, #3
 800f570:	1a6d      	subs	r5, r5, r1
 800f572:	f025 0503 	bic.w	r5, r5, #3
 800f576:	3508      	adds	r5, #8
 800f578:	2d0c      	cmp	r5, #12
 800f57a:	bf38      	it	cc
 800f57c:	250c      	movcc	r5, #12
 800f57e:	4629      	mov	r1, r5
 800f580:	4638      	mov	r0, r7
 800f582:	f7ff ffa5 	bl	800f4d0 <sbrk_aligned>
 800f586:	3001      	adds	r0, #1
 800f588:	d02b      	beq.n	800f5e2 <_malloc_r+0xd2>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	442b      	add	r3, r5
 800f58e:	6023      	str	r3, [r4, #0]
 800f590:	e00e      	b.n	800f5b0 <_malloc_r+0xa0>
 800f592:	6822      	ldr	r2, [r4, #0]
 800f594:	1b52      	subs	r2, r2, r5
 800f596:	d41e      	bmi.n	800f5d6 <_malloc_r+0xc6>
 800f598:	2a0b      	cmp	r2, #11
 800f59a:	d916      	bls.n	800f5ca <_malloc_r+0xba>
 800f59c:	1961      	adds	r1, r4, r5
 800f59e:	42a3      	cmp	r3, r4
 800f5a0:	6025      	str	r5, [r4, #0]
 800f5a2:	bf18      	it	ne
 800f5a4:	6059      	strne	r1, [r3, #4]
 800f5a6:	6863      	ldr	r3, [r4, #4]
 800f5a8:	bf08      	it	eq
 800f5aa:	6031      	streq	r1, [r6, #0]
 800f5ac:	5162      	str	r2, [r4, r5]
 800f5ae:	604b      	str	r3, [r1, #4]
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f104 060b 	add.w	r6, r4, #11
 800f5b6:	f000 f8bf 	bl	800f738 <__malloc_unlock>
 800f5ba:	f026 0607 	bic.w	r6, r6, #7
 800f5be:	1d23      	adds	r3, r4, #4
 800f5c0:	1af2      	subs	r2, r6, r3
 800f5c2:	d0b6      	beq.n	800f532 <_malloc_r+0x22>
 800f5c4:	1b9b      	subs	r3, r3, r6
 800f5c6:	50a3      	str	r3, [r4, r2]
 800f5c8:	e7b3      	b.n	800f532 <_malloc_r+0x22>
 800f5ca:	6862      	ldr	r2, [r4, #4]
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	bf0c      	ite	eq
 800f5d0:	6032      	streq	r2, [r6, #0]
 800f5d2:	605a      	strne	r2, [r3, #4]
 800f5d4:	e7ec      	b.n	800f5b0 <_malloc_r+0xa0>
 800f5d6:	4623      	mov	r3, r4
 800f5d8:	6864      	ldr	r4, [r4, #4]
 800f5da:	e7b2      	b.n	800f542 <_malloc_r+0x32>
 800f5dc:	4634      	mov	r4, r6
 800f5de:	6876      	ldr	r6, [r6, #4]
 800f5e0:	e7b9      	b.n	800f556 <_malloc_r+0x46>
 800f5e2:	230c      	movs	r3, #12
 800f5e4:	603b      	str	r3, [r7, #0]
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	f000 f8a6 	bl	800f738 <__malloc_unlock>
 800f5ec:	e7a1      	b.n	800f532 <_malloc_r+0x22>
 800f5ee:	6025      	str	r5, [r4, #0]
 800f5f0:	e7de      	b.n	800f5b0 <_malloc_r+0xa0>
 800f5f2:	bf00      	nop
 800f5f4:	20004a4c 	.word	0x20004a4c

0800f5f8 <cleanup_glue>:
 800f5f8:	b538      	push	{r3, r4, r5, lr}
 800f5fa:	460c      	mov	r4, r1
 800f5fc:	6809      	ldr	r1, [r1, #0]
 800f5fe:	4605      	mov	r5, r0
 800f600:	b109      	cbz	r1, 800f606 <cleanup_glue+0xe>
 800f602:	f7ff fff9 	bl	800f5f8 <cleanup_glue>
 800f606:	4621      	mov	r1, r4
 800f608:	4628      	mov	r0, r5
 800f60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f60e:	f000 b899 	b.w	800f744 <_free_r>
	...

0800f614 <_reclaim_reent>:
 800f614:	4b2c      	ldr	r3, [pc, #176]	; (800f6c8 <_reclaim_reent+0xb4>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4283      	cmp	r3, r0
 800f61a:	b570      	push	{r4, r5, r6, lr}
 800f61c:	4604      	mov	r4, r0
 800f61e:	d051      	beq.n	800f6c4 <_reclaim_reent+0xb0>
 800f620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f622:	b143      	cbz	r3, 800f636 <_reclaim_reent+0x22>
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d14a      	bne.n	800f6c0 <_reclaim_reent+0xac>
 800f62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f62c:	6819      	ldr	r1, [r3, #0]
 800f62e:	b111      	cbz	r1, 800f636 <_reclaim_reent+0x22>
 800f630:	4620      	mov	r0, r4
 800f632:	f000 f887 	bl	800f744 <_free_r>
 800f636:	6961      	ldr	r1, [r4, #20]
 800f638:	b111      	cbz	r1, 800f640 <_reclaim_reent+0x2c>
 800f63a:	4620      	mov	r0, r4
 800f63c:	f000 f882 	bl	800f744 <_free_r>
 800f640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f642:	b111      	cbz	r1, 800f64a <_reclaim_reent+0x36>
 800f644:	4620      	mov	r0, r4
 800f646:	f000 f87d 	bl	800f744 <_free_r>
 800f64a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f64c:	b111      	cbz	r1, 800f654 <_reclaim_reent+0x40>
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 f878 	bl	800f744 <_free_r>
 800f654:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f656:	b111      	cbz	r1, 800f65e <_reclaim_reent+0x4a>
 800f658:	4620      	mov	r0, r4
 800f65a:	f000 f873 	bl	800f744 <_free_r>
 800f65e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f660:	b111      	cbz	r1, 800f668 <_reclaim_reent+0x54>
 800f662:	4620      	mov	r0, r4
 800f664:	f000 f86e 	bl	800f744 <_free_r>
 800f668:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f66a:	b111      	cbz	r1, 800f672 <_reclaim_reent+0x5e>
 800f66c:	4620      	mov	r0, r4
 800f66e:	f000 f869 	bl	800f744 <_free_r>
 800f672:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f674:	b111      	cbz	r1, 800f67c <_reclaim_reent+0x68>
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f864 	bl	800f744 <_free_r>
 800f67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f67e:	b111      	cbz	r1, 800f686 <_reclaim_reent+0x72>
 800f680:	4620      	mov	r0, r4
 800f682:	f000 f85f 	bl	800f744 <_free_r>
 800f686:	69a3      	ldr	r3, [r4, #24]
 800f688:	b1e3      	cbz	r3, 800f6c4 <_reclaim_reent+0xb0>
 800f68a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f68c:	4620      	mov	r0, r4
 800f68e:	4798      	blx	r3
 800f690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f692:	b1b9      	cbz	r1, 800f6c4 <_reclaim_reent+0xb0>
 800f694:	4620      	mov	r0, r4
 800f696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f69a:	f7ff bfad 	b.w	800f5f8 <cleanup_glue>
 800f69e:	5949      	ldr	r1, [r1, r5]
 800f6a0:	b941      	cbnz	r1, 800f6b4 <_reclaim_reent+0xa0>
 800f6a2:	3504      	adds	r5, #4
 800f6a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a6:	2d80      	cmp	r5, #128	; 0x80
 800f6a8:	68d9      	ldr	r1, [r3, #12]
 800f6aa:	d1f8      	bne.n	800f69e <_reclaim_reent+0x8a>
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f000 f849 	bl	800f744 <_free_r>
 800f6b2:	e7ba      	b.n	800f62a <_reclaim_reent+0x16>
 800f6b4:	680e      	ldr	r6, [r1, #0]
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 f844 	bl	800f744 <_free_r>
 800f6bc:	4631      	mov	r1, r6
 800f6be:	e7ef      	b.n	800f6a0 <_reclaim_reent+0x8c>
 800f6c0:	2500      	movs	r5, #0
 800f6c2:	e7ef      	b.n	800f6a4 <_reclaim_reent+0x90>
 800f6c4:	bd70      	pop	{r4, r5, r6, pc}
 800f6c6:	bf00      	nop
 800f6c8:	2000004c 	.word	0x2000004c

0800f6cc <_sbrk_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d06      	ldr	r5, [pc, #24]	; (800f6e8 <_sbrk_r+0x1c>)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	4608      	mov	r0, r1
 800f6d6:	602b      	str	r3, [r5, #0]
 800f6d8:	f7f5 fcc0 	bl	800505c <_sbrk>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	d102      	bne.n	800f6e6 <_sbrk_r+0x1a>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b103      	cbz	r3, 800f6e6 <_sbrk_r+0x1a>
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	bd38      	pop	{r3, r4, r5, pc}
 800f6e8:	20004a54 	.word	0x20004a54

0800f6ec <siprintf>:
 800f6ec:	b40e      	push	{r1, r2, r3}
 800f6ee:	b500      	push	{lr}
 800f6f0:	b09c      	sub	sp, #112	; 0x70
 800f6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f6f4:	9002      	str	r0, [sp, #8]
 800f6f6:	9006      	str	r0, [sp, #24]
 800f6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6fc:	4809      	ldr	r0, [pc, #36]	; (800f724 <siprintf+0x38>)
 800f6fe:	9107      	str	r1, [sp, #28]
 800f700:	9104      	str	r1, [sp, #16]
 800f702:	4909      	ldr	r1, [pc, #36]	; (800f728 <siprintf+0x3c>)
 800f704:	f853 2b04 	ldr.w	r2, [r3], #4
 800f708:	9105      	str	r1, [sp, #20]
 800f70a:	6800      	ldr	r0, [r0, #0]
 800f70c:	9301      	str	r3, [sp, #4]
 800f70e:	a902      	add	r1, sp, #8
 800f710:	f000 f8c0 	bl	800f894 <_svfiprintf_r>
 800f714:	9b02      	ldr	r3, [sp, #8]
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
 800f71a:	b01c      	add	sp, #112	; 0x70
 800f71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f720:	b003      	add	sp, #12
 800f722:	4770      	bx	lr
 800f724:	2000004c 	.word	0x2000004c
 800f728:	ffff0208 	.word	0xffff0208

0800f72c <__malloc_lock>:
 800f72c:	4801      	ldr	r0, [pc, #4]	; (800f734 <__malloc_lock+0x8>)
 800f72e:	f7ff beb7 	b.w	800f4a0 <__retarget_lock_acquire_recursive>
 800f732:	bf00      	nop
 800f734:	20004a48 	.word	0x20004a48

0800f738 <__malloc_unlock>:
 800f738:	4801      	ldr	r0, [pc, #4]	; (800f740 <__malloc_unlock+0x8>)
 800f73a:	f7ff beb2 	b.w	800f4a2 <__retarget_lock_release_recursive>
 800f73e:	bf00      	nop
 800f740:	20004a48 	.word	0x20004a48

0800f744 <_free_r>:
 800f744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f746:	2900      	cmp	r1, #0
 800f748:	d044      	beq.n	800f7d4 <_free_r+0x90>
 800f74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f74e:	9001      	str	r0, [sp, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	f1a1 0404 	sub.w	r4, r1, #4
 800f756:	bfb8      	it	lt
 800f758:	18e4      	addlt	r4, r4, r3
 800f75a:	f7ff ffe7 	bl	800f72c <__malloc_lock>
 800f75e:	4a1e      	ldr	r2, [pc, #120]	; (800f7d8 <_free_r+0x94>)
 800f760:	9801      	ldr	r0, [sp, #4]
 800f762:	6813      	ldr	r3, [r2, #0]
 800f764:	b933      	cbnz	r3, 800f774 <_free_r+0x30>
 800f766:	6063      	str	r3, [r4, #4]
 800f768:	6014      	str	r4, [r2, #0]
 800f76a:	b003      	add	sp, #12
 800f76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f770:	f7ff bfe2 	b.w	800f738 <__malloc_unlock>
 800f774:	42a3      	cmp	r3, r4
 800f776:	d908      	bls.n	800f78a <_free_r+0x46>
 800f778:	6825      	ldr	r5, [r4, #0]
 800f77a:	1961      	adds	r1, r4, r5
 800f77c:	428b      	cmp	r3, r1
 800f77e:	bf01      	itttt	eq
 800f780:	6819      	ldreq	r1, [r3, #0]
 800f782:	685b      	ldreq	r3, [r3, #4]
 800f784:	1949      	addeq	r1, r1, r5
 800f786:	6021      	streq	r1, [r4, #0]
 800f788:	e7ed      	b.n	800f766 <_free_r+0x22>
 800f78a:	461a      	mov	r2, r3
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	b10b      	cbz	r3, 800f794 <_free_r+0x50>
 800f790:	42a3      	cmp	r3, r4
 800f792:	d9fa      	bls.n	800f78a <_free_r+0x46>
 800f794:	6811      	ldr	r1, [r2, #0]
 800f796:	1855      	adds	r5, r2, r1
 800f798:	42a5      	cmp	r5, r4
 800f79a:	d10b      	bne.n	800f7b4 <_free_r+0x70>
 800f79c:	6824      	ldr	r4, [r4, #0]
 800f79e:	4421      	add	r1, r4
 800f7a0:	1854      	adds	r4, r2, r1
 800f7a2:	42a3      	cmp	r3, r4
 800f7a4:	6011      	str	r1, [r2, #0]
 800f7a6:	d1e0      	bne.n	800f76a <_free_r+0x26>
 800f7a8:	681c      	ldr	r4, [r3, #0]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	6053      	str	r3, [r2, #4]
 800f7ae:	4421      	add	r1, r4
 800f7b0:	6011      	str	r1, [r2, #0]
 800f7b2:	e7da      	b.n	800f76a <_free_r+0x26>
 800f7b4:	d902      	bls.n	800f7bc <_free_r+0x78>
 800f7b6:	230c      	movs	r3, #12
 800f7b8:	6003      	str	r3, [r0, #0]
 800f7ba:	e7d6      	b.n	800f76a <_free_r+0x26>
 800f7bc:	6825      	ldr	r5, [r4, #0]
 800f7be:	1961      	adds	r1, r4, r5
 800f7c0:	428b      	cmp	r3, r1
 800f7c2:	bf04      	itt	eq
 800f7c4:	6819      	ldreq	r1, [r3, #0]
 800f7c6:	685b      	ldreq	r3, [r3, #4]
 800f7c8:	6063      	str	r3, [r4, #4]
 800f7ca:	bf04      	itt	eq
 800f7cc:	1949      	addeq	r1, r1, r5
 800f7ce:	6021      	streq	r1, [r4, #0]
 800f7d0:	6054      	str	r4, [r2, #4]
 800f7d2:	e7ca      	b.n	800f76a <_free_r+0x26>
 800f7d4:	b003      	add	sp, #12
 800f7d6:	bd30      	pop	{r4, r5, pc}
 800f7d8:	20004a4c 	.word	0x20004a4c

0800f7dc <__ssputs_r>:
 800f7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e0:	688e      	ldr	r6, [r1, #8]
 800f7e2:	429e      	cmp	r6, r3
 800f7e4:	4682      	mov	sl, r0
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	4690      	mov	r8, r2
 800f7ea:	461f      	mov	r7, r3
 800f7ec:	d838      	bhi.n	800f860 <__ssputs_r+0x84>
 800f7ee:	898a      	ldrh	r2, [r1, #12]
 800f7f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7f4:	d032      	beq.n	800f85c <__ssputs_r+0x80>
 800f7f6:	6825      	ldr	r5, [r4, #0]
 800f7f8:	6909      	ldr	r1, [r1, #16]
 800f7fa:	eba5 0901 	sub.w	r9, r5, r1
 800f7fe:	6965      	ldr	r5, [r4, #20]
 800f800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f808:	3301      	adds	r3, #1
 800f80a:	444b      	add	r3, r9
 800f80c:	106d      	asrs	r5, r5, #1
 800f80e:	429d      	cmp	r5, r3
 800f810:	bf38      	it	cc
 800f812:	461d      	movcc	r5, r3
 800f814:	0553      	lsls	r3, r2, #21
 800f816:	d531      	bpl.n	800f87c <__ssputs_r+0xa0>
 800f818:	4629      	mov	r1, r5
 800f81a:	f7ff fe79 	bl	800f510 <_malloc_r>
 800f81e:	4606      	mov	r6, r0
 800f820:	b950      	cbnz	r0, 800f838 <__ssputs_r+0x5c>
 800f822:	230c      	movs	r3, #12
 800f824:	f8ca 3000 	str.w	r3, [sl]
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f82e:	81a3      	strh	r3, [r4, #12]
 800f830:	f04f 30ff 	mov.w	r0, #4294967295
 800f834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f838:	6921      	ldr	r1, [r4, #16]
 800f83a:	464a      	mov	r2, r9
 800f83c:	f7ff fe32 	bl	800f4a4 <memcpy>
 800f840:	89a3      	ldrh	r3, [r4, #12]
 800f842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f84a:	81a3      	strh	r3, [r4, #12]
 800f84c:	6126      	str	r6, [r4, #16]
 800f84e:	6165      	str	r5, [r4, #20]
 800f850:	444e      	add	r6, r9
 800f852:	eba5 0509 	sub.w	r5, r5, r9
 800f856:	6026      	str	r6, [r4, #0]
 800f858:	60a5      	str	r5, [r4, #8]
 800f85a:	463e      	mov	r6, r7
 800f85c:	42be      	cmp	r6, r7
 800f85e:	d900      	bls.n	800f862 <__ssputs_r+0x86>
 800f860:	463e      	mov	r6, r7
 800f862:	6820      	ldr	r0, [r4, #0]
 800f864:	4632      	mov	r2, r6
 800f866:	4641      	mov	r1, r8
 800f868:	f000 faa8 	bl	800fdbc <memmove>
 800f86c:	68a3      	ldr	r3, [r4, #8]
 800f86e:	1b9b      	subs	r3, r3, r6
 800f870:	60a3      	str	r3, [r4, #8]
 800f872:	6823      	ldr	r3, [r4, #0]
 800f874:	4433      	add	r3, r6
 800f876:	6023      	str	r3, [r4, #0]
 800f878:	2000      	movs	r0, #0
 800f87a:	e7db      	b.n	800f834 <__ssputs_r+0x58>
 800f87c:	462a      	mov	r2, r5
 800f87e:	f000 fab7 	bl	800fdf0 <_realloc_r>
 800f882:	4606      	mov	r6, r0
 800f884:	2800      	cmp	r0, #0
 800f886:	d1e1      	bne.n	800f84c <__ssputs_r+0x70>
 800f888:	6921      	ldr	r1, [r4, #16]
 800f88a:	4650      	mov	r0, sl
 800f88c:	f7ff ff5a 	bl	800f744 <_free_r>
 800f890:	e7c7      	b.n	800f822 <__ssputs_r+0x46>
	...

0800f894 <_svfiprintf_r>:
 800f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f898:	4698      	mov	r8, r3
 800f89a:	898b      	ldrh	r3, [r1, #12]
 800f89c:	061b      	lsls	r3, r3, #24
 800f89e:	b09d      	sub	sp, #116	; 0x74
 800f8a0:	4607      	mov	r7, r0
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	4614      	mov	r4, r2
 800f8a6:	d50e      	bpl.n	800f8c6 <_svfiprintf_r+0x32>
 800f8a8:	690b      	ldr	r3, [r1, #16]
 800f8aa:	b963      	cbnz	r3, 800f8c6 <_svfiprintf_r+0x32>
 800f8ac:	2140      	movs	r1, #64	; 0x40
 800f8ae:	f7ff fe2f 	bl	800f510 <_malloc_r>
 800f8b2:	6028      	str	r0, [r5, #0]
 800f8b4:	6128      	str	r0, [r5, #16]
 800f8b6:	b920      	cbnz	r0, 800f8c2 <_svfiprintf_r+0x2e>
 800f8b8:	230c      	movs	r3, #12
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c0:	e0d1      	b.n	800fa66 <_svfiprintf_r+0x1d2>
 800f8c2:	2340      	movs	r3, #64	; 0x40
 800f8c4:	616b      	str	r3, [r5, #20]
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ca:	2320      	movs	r3, #32
 800f8cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8d4:	2330      	movs	r3, #48	; 0x30
 800f8d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa80 <_svfiprintf_r+0x1ec>
 800f8da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8de:	f04f 0901 	mov.w	r9, #1
 800f8e2:	4623      	mov	r3, r4
 800f8e4:	469a      	mov	sl, r3
 800f8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8ea:	b10a      	cbz	r2, 800f8f0 <_svfiprintf_r+0x5c>
 800f8ec:	2a25      	cmp	r2, #37	; 0x25
 800f8ee:	d1f9      	bne.n	800f8e4 <_svfiprintf_r+0x50>
 800f8f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f8f4:	d00b      	beq.n	800f90e <_svfiprintf_r+0x7a>
 800f8f6:	465b      	mov	r3, fp
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	f7ff ff6d 	bl	800f7dc <__ssputs_r>
 800f902:	3001      	adds	r0, #1
 800f904:	f000 80aa 	beq.w	800fa5c <_svfiprintf_r+0x1c8>
 800f908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f90a:	445a      	add	r2, fp
 800f90c:	9209      	str	r2, [sp, #36]	; 0x24
 800f90e:	f89a 3000 	ldrb.w	r3, [sl]
 800f912:	2b00      	cmp	r3, #0
 800f914:	f000 80a2 	beq.w	800fa5c <_svfiprintf_r+0x1c8>
 800f918:	2300      	movs	r3, #0
 800f91a:	f04f 32ff 	mov.w	r2, #4294967295
 800f91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f922:	f10a 0a01 	add.w	sl, sl, #1
 800f926:	9304      	str	r3, [sp, #16]
 800f928:	9307      	str	r3, [sp, #28]
 800f92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f92e:	931a      	str	r3, [sp, #104]	; 0x68
 800f930:	4654      	mov	r4, sl
 800f932:	2205      	movs	r2, #5
 800f934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f938:	4851      	ldr	r0, [pc, #324]	; (800fa80 <_svfiprintf_r+0x1ec>)
 800f93a:	f7f0 fc69 	bl	8000210 <memchr>
 800f93e:	9a04      	ldr	r2, [sp, #16]
 800f940:	b9d8      	cbnz	r0, 800f97a <_svfiprintf_r+0xe6>
 800f942:	06d0      	lsls	r0, r2, #27
 800f944:	bf44      	itt	mi
 800f946:	2320      	movmi	r3, #32
 800f948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f94c:	0711      	lsls	r1, r2, #28
 800f94e:	bf44      	itt	mi
 800f950:	232b      	movmi	r3, #43	; 0x2b
 800f952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f956:	f89a 3000 	ldrb.w	r3, [sl]
 800f95a:	2b2a      	cmp	r3, #42	; 0x2a
 800f95c:	d015      	beq.n	800f98a <_svfiprintf_r+0xf6>
 800f95e:	9a07      	ldr	r2, [sp, #28]
 800f960:	4654      	mov	r4, sl
 800f962:	2000      	movs	r0, #0
 800f964:	f04f 0c0a 	mov.w	ip, #10
 800f968:	4621      	mov	r1, r4
 800f96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f96e:	3b30      	subs	r3, #48	; 0x30
 800f970:	2b09      	cmp	r3, #9
 800f972:	d94e      	bls.n	800fa12 <_svfiprintf_r+0x17e>
 800f974:	b1b0      	cbz	r0, 800f9a4 <_svfiprintf_r+0x110>
 800f976:	9207      	str	r2, [sp, #28]
 800f978:	e014      	b.n	800f9a4 <_svfiprintf_r+0x110>
 800f97a:	eba0 0308 	sub.w	r3, r0, r8
 800f97e:	fa09 f303 	lsl.w	r3, r9, r3
 800f982:	4313      	orrs	r3, r2
 800f984:	9304      	str	r3, [sp, #16]
 800f986:	46a2      	mov	sl, r4
 800f988:	e7d2      	b.n	800f930 <_svfiprintf_r+0x9c>
 800f98a:	9b03      	ldr	r3, [sp, #12]
 800f98c:	1d19      	adds	r1, r3, #4
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	9103      	str	r1, [sp, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	bfbb      	ittet	lt
 800f996:	425b      	neglt	r3, r3
 800f998:	f042 0202 	orrlt.w	r2, r2, #2
 800f99c:	9307      	strge	r3, [sp, #28]
 800f99e:	9307      	strlt	r3, [sp, #28]
 800f9a0:	bfb8      	it	lt
 800f9a2:	9204      	strlt	r2, [sp, #16]
 800f9a4:	7823      	ldrb	r3, [r4, #0]
 800f9a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f9a8:	d10c      	bne.n	800f9c4 <_svfiprintf_r+0x130>
 800f9aa:	7863      	ldrb	r3, [r4, #1]
 800f9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ae:	d135      	bne.n	800fa1c <_svfiprintf_r+0x188>
 800f9b0:	9b03      	ldr	r3, [sp, #12]
 800f9b2:	1d1a      	adds	r2, r3, #4
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	9203      	str	r2, [sp, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	bfb8      	it	lt
 800f9bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9c0:	3402      	adds	r4, #2
 800f9c2:	9305      	str	r3, [sp, #20]
 800f9c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa90 <_svfiprintf_r+0x1fc>
 800f9c8:	7821      	ldrb	r1, [r4, #0]
 800f9ca:	2203      	movs	r2, #3
 800f9cc:	4650      	mov	r0, sl
 800f9ce:	f7f0 fc1f 	bl	8000210 <memchr>
 800f9d2:	b140      	cbz	r0, 800f9e6 <_svfiprintf_r+0x152>
 800f9d4:	2340      	movs	r3, #64	; 0x40
 800f9d6:	eba0 000a 	sub.w	r0, r0, sl
 800f9da:	fa03 f000 	lsl.w	r0, r3, r0
 800f9de:	9b04      	ldr	r3, [sp, #16]
 800f9e0:	4303      	orrs	r3, r0
 800f9e2:	3401      	adds	r4, #1
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ea:	4826      	ldr	r0, [pc, #152]	; (800fa84 <_svfiprintf_r+0x1f0>)
 800f9ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9f0:	2206      	movs	r2, #6
 800f9f2:	f7f0 fc0d 	bl	8000210 <memchr>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d038      	beq.n	800fa6c <_svfiprintf_r+0x1d8>
 800f9fa:	4b23      	ldr	r3, [pc, #140]	; (800fa88 <_svfiprintf_r+0x1f4>)
 800f9fc:	bb1b      	cbnz	r3, 800fa46 <_svfiprintf_r+0x1b2>
 800f9fe:	9b03      	ldr	r3, [sp, #12]
 800fa00:	3307      	adds	r3, #7
 800fa02:	f023 0307 	bic.w	r3, r3, #7
 800fa06:	3308      	adds	r3, #8
 800fa08:	9303      	str	r3, [sp, #12]
 800fa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa0c:	4433      	add	r3, r6
 800fa0e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa10:	e767      	b.n	800f8e2 <_svfiprintf_r+0x4e>
 800fa12:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa16:	460c      	mov	r4, r1
 800fa18:	2001      	movs	r0, #1
 800fa1a:	e7a5      	b.n	800f968 <_svfiprintf_r+0xd4>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	3401      	adds	r4, #1
 800fa20:	9305      	str	r3, [sp, #20]
 800fa22:	4619      	mov	r1, r3
 800fa24:	f04f 0c0a 	mov.w	ip, #10
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa2e:	3a30      	subs	r2, #48	; 0x30
 800fa30:	2a09      	cmp	r2, #9
 800fa32:	d903      	bls.n	800fa3c <_svfiprintf_r+0x1a8>
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0c5      	beq.n	800f9c4 <_svfiprintf_r+0x130>
 800fa38:	9105      	str	r1, [sp, #20]
 800fa3a:	e7c3      	b.n	800f9c4 <_svfiprintf_r+0x130>
 800fa3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa40:	4604      	mov	r4, r0
 800fa42:	2301      	movs	r3, #1
 800fa44:	e7f0      	b.n	800fa28 <_svfiprintf_r+0x194>
 800fa46:	ab03      	add	r3, sp, #12
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	462a      	mov	r2, r5
 800fa4c:	4b0f      	ldr	r3, [pc, #60]	; (800fa8c <_svfiprintf_r+0x1f8>)
 800fa4e:	a904      	add	r1, sp, #16
 800fa50:	4638      	mov	r0, r7
 800fa52:	f3af 8000 	nop.w
 800fa56:	1c42      	adds	r2, r0, #1
 800fa58:	4606      	mov	r6, r0
 800fa5a:	d1d6      	bne.n	800fa0a <_svfiprintf_r+0x176>
 800fa5c:	89ab      	ldrh	r3, [r5, #12]
 800fa5e:	065b      	lsls	r3, r3, #25
 800fa60:	f53f af2c 	bmi.w	800f8bc <_svfiprintf_r+0x28>
 800fa64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa66:	b01d      	add	sp, #116	; 0x74
 800fa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6c:	ab03      	add	r3, sp, #12
 800fa6e:	9300      	str	r3, [sp, #0]
 800fa70:	462a      	mov	r2, r5
 800fa72:	4b06      	ldr	r3, [pc, #24]	; (800fa8c <_svfiprintf_r+0x1f8>)
 800fa74:	a904      	add	r1, sp, #16
 800fa76:	4638      	mov	r0, r7
 800fa78:	f000 f87a 	bl	800fb70 <_printf_i>
 800fa7c:	e7eb      	b.n	800fa56 <_svfiprintf_r+0x1c2>
 800fa7e:	bf00      	nop
 800fa80:	08051e04 	.word	0x08051e04
 800fa84:	08051e0e 	.word	0x08051e0e
 800fa88:	00000000 	.word	0x00000000
 800fa8c:	0800f7dd 	.word	0x0800f7dd
 800fa90:	08051e0a 	.word	0x08051e0a

0800fa94 <_printf_common>:
 800fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa98:	4616      	mov	r6, r2
 800fa9a:	4699      	mov	r9, r3
 800fa9c:	688a      	ldr	r2, [r1, #8]
 800fa9e:	690b      	ldr	r3, [r1, #16]
 800faa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800faa4:	4293      	cmp	r3, r2
 800faa6:	bfb8      	it	lt
 800faa8:	4613      	movlt	r3, r2
 800faaa:	6033      	str	r3, [r6, #0]
 800faac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fab0:	4607      	mov	r7, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	b10a      	cbz	r2, 800faba <_printf_common+0x26>
 800fab6:	3301      	adds	r3, #1
 800fab8:	6033      	str	r3, [r6, #0]
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	0699      	lsls	r1, r3, #26
 800fabe:	bf42      	ittt	mi
 800fac0:	6833      	ldrmi	r3, [r6, #0]
 800fac2:	3302      	addmi	r3, #2
 800fac4:	6033      	strmi	r3, [r6, #0]
 800fac6:	6825      	ldr	r5, [r4, #0]
 800fac8:	f015 0506 	ands.w	r5, r5, #6
 800facc:	d106      	bne.n	800fadc <_printf_common+0x48>
 800face:	f104 0a19 	add.w	sl, r4, #25
 800fad2:	68e3      	ldr	r3, [r4, #12]
 800fad4:	6832      	ldr	r2, [r6, #0]
 800fad6:	1a9b      	subs	r3, r3, r2
 800fad8:	42ab      	cmp	r3, r5
 800fada:	dc26      	bgt.n	800fb2a <_printf_common+0x96>
 800fadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fae0:	1e13      	subs	r3, r2, #0
 800fae2:	6822      	ldr	r2, [r4, #0]
 800fae4:	bf18      	it	ne
 800fae6:	2301      	movne	r3, #1
 800fae8:	0692      	lsls	r2, r2, #26
 800faea:	d42b      	bmi.n	800fb44 <_printf_common+0xb0>
 800faec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800faf0:	4649      	mov	r1, r9
 800faf2:	4638      	mov	r0, r7
 800faf4:	47c0      	blx	r8
 800faf6:	3001      	adds	r0, #1
 800faf8:	d01e      	beq.n	800fb38 <_printf_common+0xa4>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	68e5      	ldr	r5, [r4, #12]
 800fafe:	6832      	ldr	r2, [r6, #0]
 800fb00:	f003 0306 	and.w	r3, r3, #6
 800fb04:	2b04      	cmp	r3, #4
 800fb06:	bf08      	it	eq
 800fb08:	1aad      	subeq	r5, r5, r2
 800fb0a:	68a3      	ldr	r3, [r4, #8]
 800fb0c:	6922      	ldr	r2, [r4, #16]
 800fb0e:	bf0c      	ite	eq
 800fb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb14:	2500      	movne	r5, #0
 800fb16:	4293      	cmp	r3, r2
 800fb18:	bfc4      	itt	gt
 800fb1a:	1a9b      	subgt	r3, r3, r2
 800fb1c:	18ed      	addgt	r5, r5, r3
 800fb1e:	2600      	movs	r6, #0
 800fb20:	341a      	adds	r4, #26
 800fb22:	42b5      	cmp	r5, r6
 800fb24:	d11a      	bne.n	800fb5c <_printf_common+0xc8>
 800fb26:	2000      	movs	r0, #0
 800fb28:	e008      	b.n	800fb3c <_printf_common+0xa8>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	4652      	mov	r2, sl
 800fb2e:	4649      	mov	r1, r9
 800fb30:	4638      	mov	r0, r7
 800fb32:	47c0      	blx	r8
 800fb34:	3001      	adds	r0, #1
 800fb36:	d103      	bne.n	800fb40 <_printf_common+0xac>
 800fb38:	f04f 30ff 	mov.w	r0, #4294967295
 800fb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb40:	3501      	adds	r5, #1
 800fb42:	e7c6      	b.n	800fad2 <_printf_common+0x3e>
 800fb44:	18e1      	adds	r1, r4, r3
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	2030      	movs	r0, #48	; 0x30
 800fb4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb4e:	4422      	add	r2, r4
 800fb50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb58:	3302      	adds	r3, #2
 800fb5a:	e7c7      	b.n	800faec <_printf_common+0x58>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	4622      	mov	r2, r4
 800fb60:	4649      	mov	r1, r9
 800fb62:	4638      	mov	r0, r7
 800fb64:	47c0      	blx	r8
 800fb66:	3001      	adds	r0, #1
 800fb68:	d0e6      	beq.n	800fb38 <_printf_common+0xa4>
 800fb6a:	3601      	adds	r6, #1
 800fb6c:	e7d9      	b.n	800fb22 <_printf_common+0x8e>
	...

0800fb70 <_printf_i>:
 800fb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb74:	7e0f      	ldrb	r7, [r1, #24]
 800fb76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb78:	2f78      	cmp	r7, #120	; 0x78
 800fb7a:	4691      	mov	r9, r2
 800fb7c:	4680      	mov	r8, r0
 800fb7e:	460c      	mov	r4, r1
 800fb80:	469a      	mov	sl, r3
 800fb82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb86:	d807      	bhi.n	800fb98 <_printf_i+0x28>
 800fb88:	2f62      	cmp	r7, #98	; 0x62
 800fb8a:	d80a      	bhi.n	800fba2 <_printf_i+0x32>
 800fb8c:	2f00      	cmp	r7, #0
 800fb8e:	f000 80d8 	beq.w	800fd42 <_printf_i+0x1d2>
 800fb92:	2f58      	cmp	r7, #88	; 0x58
 800fb94:	f000 80a3 	beq.w	800fcde <_printf_i+0x16e>
 800fb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fba0:	e03a      	b.n	800fc18 <_printf_i+0xa8>
 800fba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fba6:	2b15      	cmp	r3, #21
 800fba8:	d8f6      	bhi.n	800fb98 <_printf_i+0x28>
 800fbaa:	a101      	add	r1, pc, #4	; (adr r1, 800fbb0 <_printf_i+0x40>)
 800fbac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbb0:	0800fc09 	.word	0x0800fc09
 800fbb4:	0800fc1d 	.word	0x0800fc1d
 800fbb8:	0800fb99 	.word	0x0800fb99
 800fbbc:	0800fb99 	.word	0x0800fb99
 800fbc0:	0800fb99 	.word	0x0800fb99
 800fbc4:	0800fb99 	.word	0x0800fb99
 800fbc8:	0800fc1d 	.word	0x0800fc1d
 800fbcc:	0800fb99 	.word	0x0800fb99
 800fbd0:	0800fb99 	.word	0x0800fb99
 800fbd4:	0800fb99 	.word	0x0800fb99
 800fbd8:	0800fb99 	.word	0x0800fb99
 800fbdc:	0800fd29 	.word	0x0800fd29
 800fbe0:	0800fc4d 	.word	0x0800fc4d
 800fbe4:	0800fd0b 	.word	0x0800fd0b
 800fbe8:	0800fb99 	.word	0x0800fb99
 800fbec:	0800fb99 	.word	0x0800fb99
 800fbf0:	0800fd4b 	.word	0x0800fd4b
 800fbf4:	0800fb99 	.word	0x0800fb99
 800fbf8:	0800fc4d 	.word	0x0800fc4d
 800fbfc:	0800fb99 	.word	0x0800fb99
 800fc00:	0800fb99 	.word	0x0800fb99
 800fc04:	0800fd13 	.word	0x0800fd13
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	1d1a      	adds	r2, r3, #4
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	602a      	str	r2, [r5, #0]
 800fc10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e0a3      	b.n	800fd64 <_printf_i+0x1f4>
 800fc1c:	6820      	ldr	r0, [r4, #0]
 800fc1e:	6829      	ldr	r1, [r5, #0]
 800fc20:	0606      	lsls	r6, r0, #24
 800fc22:	f101 0304 	add.w	r3, r1, #4
 800fc26:	d50a      	bpl.n	800fc3e <_printf_i+0xce>
 800fc28:	680e      	ldr	r6, [r1, #0]
 800fc2a:	602b      	str	r3, [r5, #0]
 800fc2c:	2e00      	cmp	r6, #0
 800fc2e:	da03      	bge.n	800fc38 <_printf_i+0xc8>
 800fc30:	232d      	movs	r3, #45	; 0x2d
 800fc32:	4276      	negs	r6, r6
 800fc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc38:	485e      	ldr	r0, [pc, #376]	; (800fdb4 <_printf_i+0x244>)
 800fc3a:	230a      	movs	r3, #10
 800fc3c:	e019      	b.n	800fc72 <_printf_i+0x102>
 800fc3e:	680e      	ldr	r6, [r1, #0]
 800fc40:	602b      	str	r3, [r5, #0]
 800fc42:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fc46:	bf18      	it	ne
 800fc48:	b236      	sxthne	r6, r6
 800fc4a:	e7ef      	b.n	800fc2c <_printf_i+0xbc>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	6820      	ldr	r0, [r4, #0]
 800fc50:	1d19      	adds	r1, r3, #4
 800fc52:	6029      	str	r1, [r5, #0]
 800fc54:	0601      	lsls	r1, r0, #24
 800fc56:	d501      	bpl.n	800fc5c <_printf_i+0xec>
 800fc58:	681e      	ldr	r6, [r3, #0]
 800fc5a:	e002      	b.n	800fc62 <_printf_i+0xf2>
 800fc5c:	0646      	lsls	r6, r0, #25
 800fc5e:	d5fb      	bpl.n	800fc58 <_printf_i+0xe8>
 800fc60:	881e      	ldrh	r6, [r3, #0]
 800fc62:	4854      	ldr	r0, [pc, #336]	; (800fdb4 <_printf_i+0x244>)
 800fc64:	2f6f      	cmp	r7, #111	; 0x6f
 800fc66:	bf0c      	ite	eq
 800fc68:	2308      	moveq	r3, #8
 800fc6a:	230a      	movne	r3, #10
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc72:	6865      	ldr	r5, [r4, #4]
 800fc74:	60a5      	str	r5, [r4, #8]
 800fc76:	2d00      	cmp	r5, #0
 800fc78:	bfa2      	ittt	ge
 800fc7a:	6821      	ldrge	r1, [r4, #0]
 800fc7c:	f021 0104 	bicge.w	r1, r1, #4
 800fc80:	6021      	strge	r1, [r4, #0]
 800fc82:	b90e      	cbnz	r6, 800fc88 <_printf_i+0x118>
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	d04d      	beq.n	800fd24 <_printf_i+0x1b4>
 800fc88:	4615      	mov	r5, r2
 800fc8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc8e:	fb03 6711 	mls	r7, r3, r1, r6
 800fc92:	5dc7      	ldrb	r7, [r0, r7]
 800fc94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc98:	4637      	mov	r7, r6
 800fc9a:	42bb      	cmp	r3, r7
 800fc9c:	460e      	mov	r6, r1
 800fc9e:	d9f4      	bls.n	800fc8a <_printf_i+0x11a>
 800fca0:	2b08      	cmp	r3, #8
 800fca2:	d10b      	bne.n	800fcbc <_printf_i+0x14c>
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	07de      	lsls	r6, r3, #31
 800fca8:	d508      	bpl.n	800fcbc <_printf_i+0x14c>
 800fcaa:	6923      	ldr	r3, [r4, #16]
 800fcac:	6861      	ldr	r1, [r4, #4]
 800fcae:	4299      	cmp	r1, r3
 800fcb0:	bfde      	ittt	le
 800fcb2:	2330      	movle	r3, #48	; 0x30
 800fcb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fcb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fcbc:	1b52      	subs	r2, r2, r5
 800fcbe:	6122      	str	r2, [r4, #16]
 800fcc0:	f8cd a000 	str.w	sl, [sp]
 800fcc4:	464b      	mov	r3, r9
 800fcc6:	aa03      	add	r2, sp, #12
 800fcc8:	4621      	mov	r1, r4
 800fcca:	4640      	mov	r0, r8
 800fccc:	f7ff fee2 	bl	800fa94 <_printf_common>
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d14c      	bne.n	800fd6e <_printf_i+0x1fe>
 800fcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd8:	b004      	add	sp, #16
 800fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcde:	4835      	ldr	r0, [pc, #212]	; (800fdb4 <_printf_i+0x244>)
 800fce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fce4:	6829      	ldr	r1, [r5, #0]
 800fce6:	6823      	ldr	r3, [r4, #0]
 800fce8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fcec:	6029      	str	r1, [r5, #0]
 800fcee:	061d      	lsls	r5, r3, #24
 800fcf0:	d514      	bpl.n	800fd1c <_printf_i+0x1ac>
 800fcf2:	07df      	lsls	r7, r3, #31
 800fcf4:	bf44      	itt	mi
 800fcf6:	f043 0320 	orrmi.w	r3, r3, #32
 800fcfa:	6023      	strmi	r3, [r4, #0]
 800fcfc:	b91e      	cbnz	r6, 800fd06 <_printf_i+0x196>
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	f023 0320 	bic.w	r3, r3, #32
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	2310      	movs	r3, #16
 800fd08:	e7b0      	b.n	800fc6c <_printf_i+0xfc>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	f043 0320 	orr.w	r3, r3, #32
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	2378      	movs	r3, #120	; 0x78
 800fd14:	4828      	ldr	r0, [pc, #160]	; (800fdb8 <_printf_i+0x248>)
 800fd16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd1a:	e7e3      	b.n	800fce4 <_printf_i+0x174>
 800fd1c:	0659      	lsls	r1, r3, #25
 800fd1e:	bf48      	it	mi
 800fd20:	b2b6      	uxthmi	r6, r6
 800fd22:	e7e6      	b.n	800fcf2 <_printf_i+0x182>
 800fd24:	4615      	mov	r5, r2
 800fd26:	e7bb      	b.n	800fca0 <_printf_i+0x130>
 800fd28:	682b      	ldr	r3, [r5, #0]
 800fd2a:	6826      	ldr	r6, [r4, #0]
 800fd2c:	6961      	ldr	r1, [r4, #20]
 800fd2e:	1d18      	adds	r0, r3, #4
 800fd30:	6028      	str	r0, [r5, #0]
 800fd32:	0635      	lsls	r5, r6, #24
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	d501      	bpl.n	800fd3c <_printf_i+0x1cc>
 800fd38:	6019      	str	r1, [r3, #0]
 800fd3a:	e002      	b.n	800fd42 <_printf_i+0x1d2>
 800fd3c:	0670      	lsls	r0, r6, #25
 800fd3e:	d5fb      	bpl.n	800fd38 <_printf_i+0x1c8>
 800fd40:	8019      	strh	r1, [r3, #0]
 800fd42:	2300      	movs	r3, #0
 800fd44:	6123      	str	r3, [r4, #16]
 800fd46:	4615      	mov	r5, r2
 800fd48:	e7ba      	b.n	800fcc0 <_printf_i+0x150>
 800fd4a:	682b      	ldr	r3, [r5, #0]
 800fd4c:	1d1a      	adds	r2, r3, #4
 800fd4e:	602a      	str	r2, [r5, #0]
 800fd50:	681d      	ldr	r5, [r3, #0]
 800fd52:	6862      	ldr	r2, [r4, #4]
 800fd54:	2100      	movs	r1, #0
 800fd56:	4628      	mov	r0, r5
 800fd58:	f7f0 fa5a 	bl	8000210 <memchr>
 800fd5c:	b108      	cbz	r0, 800fd62 <_printf_i+0x1f2>
 800fd5e:	1b40      	subs	r0, r0, r5
 800fd60:	6060      	str	r0, [r4, #4]
 800fd62:	6863      	ldr	r3, [r4, #4]
 800fd64:	6123      	str	r3, [r4, #16]
 800fd66:	2300      	movs	r3, #0
 800fd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd6c:	e7a8      	b.n	800fcc0 <_printf_i+0x150>
 800fd6e:	6923      	ldr	r3, [r4, #16]
 800fd70:	462a      	mov	r2, r5
 800fd72:	4649      	mov	r1, r9
 800fd74:	4640      	mov	r0, r8
 800fd76:	47d0      	blx	sl
 800fd78:	3001      	adds	r0, #1
 800fd7a:	d0ab      	beq.n	800fcd4 <_printf_i+0x164>
 800fd7c:	6823      	ldr	r3, [r4, #0]
 800fd7e:	079b      	lsls	r3, r3, #30
 800fd80:	d413      	bmi.n	800fdaa <_printf_i+0x23a>
 800fd82:	68e0      	ldr	r0, [r4, #12]
 800fd84:	9b03      	ldr	r3, [sp, #12]
 800fd86:	4298      	cmp	r0, r3
 800fd88:	bfb8      	it	lt
 800fd8a:	4618      	movlt	r0, r3
 800fd8c:	e7a4      	b.n	800fcd8 <_printf_i+0x168>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	4632      	mov	r2, r6
 800fd92:	4649      	mov	r1, r9
 800fd94:	4640      	mov	r0, r8
 800fd96:	47d0      	blx	sl
 800fd98:	3001      	adds	r0, #1
 800fd9a:	d09b      	beq.n	800fcd4 <_printf_i+0x164>
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	68e3      	ldr	r3, [r4, #12]
 800fda0:	9903      	ldr	r1, [sp, #12]
 800fda2:	1a5b      	subs	r3, r3, r1
 800fda4:	42ab      	cmp	r3, r5
 800fda6:	dcf2      	bgt.n	800fd8e <_printf_i+0x21e>
 800fda8:	e7eb      	b.n	800fd82 <_printf_i+0x212>
 800fdaa:	2500      	movs	r5, #0
 800fdac:	f104 0619 	add.w	r6, r4, #25
 800fdb0:	e7f5      	b.n	800fd9e <_printf_i+0x22e>
 800fdb2:	bf00      	nop
 800fdb4:	08051e15 	.word	0x08051e15
 800fdb8:	08051e26 	.word	0x08051e26

0800fdbc <memmove>:
 800fdbc:	4288      	cmp	r0, r1
 800fdbe:	b510      	push	{r4, lr}
 800fdc0:	eb01 0402 	add.w	r4, r1, r2
 800fdc4:	d902      	bls.n	800fdcc <memmove+0x10>
 800fdc6:	4284      	cmp	r4, r0
 800fdc8:	4623      	mov	r3, r4
 800fdca:	d807      	bhi.n	800fddc <memmove+0x20>
 800fdcc:	1e43      	subs	r3, r0, #1
 800fdce:	42a1      	cmp	r1, r4
 800fdd0:	d008      	beq.n	800fde4 <memmove+0x28>
 800fdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdda:	e7f8      	b.n	800fdce <memmove+0x12>
 800fddc:	4402      	add	r2, r0
 800fdde:	4601      	mov	r1, r0
 800fde0:	428a      	cmp	r2, r1
 800fde2:	d100      	bne.n	800fde6 <memmove+0x2a>
 800fde4:	bd10      	pop	{r4, pc}
 800fde6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdee:	e7f7      	b.n	800fde0 <memmove+0x24>

0800fdf0 <_realloc_r>:
 800fdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf4:	4680      	mov	r8, r0
 800fdf6:	4614      	mov	r4, r2
 800fdf8:	460e      	mov	r6, r1
 800fdfa:	b921      	cbnz	r1, 800fe06 <_realloc_r+0x16>
 800fdfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe00:	4611      	mov	r1, r2
 800fe02:	f7ff bb85 	b.w	800f510 <_malloc_r>
 800fe06:	b92a      	cbnz	r2, 800fe14 <_realloc_r+0x24>
 800fe08:	f7ff fc9c 	bl	800f744 <_free_r>
 800fe0c:	4625      	mov	r5, r4
 800fe0e:	4628      	mov	r0, r5
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	f000 f81b 	bl	800fe4e <_malloc_usable_size_r>
 800fe18:	4284      	cmp	r4, r0
 800fe1a:	4607      	mov	r7, r0
 800fe1c:	d802      	bhi.n	800fe24 <_realloc_r+0x34>
 800fe1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe22:	d812      	bhi.n	800fe4a <_realloc_r+0x5a>
 800fe24:	4621      	mov	r1, r4
 800fe26:	4640      	mov	r0, r8
 800fe28:	f7ff fb72 	bl	800f510 <_malloc_r>
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0ed      	beq.n	800fe0e <_realloc_r+0x1e>
 800fe32:	42bc      	cmp	r4, r7
 800fe34:	4622      	mov	r2, r4
 800fe36:	4631      	mov	r1, r6
 800fe38:	bf28      	it	cs
 800fe3a:	463a      	movcs	r2, r7
 800fe3c:	f7ff fb32 	bl	800f4a4 <memcpy>
 800fe40:	4631      	mov	r1, r6
 800fe42:	4640      	mov	r0, r8
 800fe44:	f7ff fc7e 	bl	800f744 <_free_r>
 800fe48:	e7e1      	b.n	800fe0e <_realloc_r+0x1e>
 800fe4a:	4635      	mov	r5, r6
 800fe4c:	e7df      	b.n	800fe0e <_realloc_r+0x1e>

0800fe4e <_malloc_usable_size_r>:
 800fe4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe52:	1f18      	subs	r0, r3, #4
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	bfbc      	itt	lt
 800fe58:	580b      	ldrlt	r3, [r1, r0]
 800fe5a:	18c0      	addlt	r0, r0, r3
 800fe5c:	4770      	bx	lr

0800fe5e <sqrt>:
 800fe5e:	b538      	push	{r3, r4, r5, lr}
 800fe60:	ed2d 8b02 	vpush	{d8}
 800fe64:	ec55 4b10 	vmov	r4, r5, d0
 800fe68:	f000 f826 	bl	800feb8 <__ieee754_sqrt>
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	462b      	mov	r3, r5
 800fe70:	4620      	mov	r0, r4
 800fe72:	4629      	mov	r1, r5
 800fe74:	eeb0 8a40 	vmov.f32	s16, s0
 800fe78:	eef0 8a60 	vmov.f32	s17, s1
 800fe7c:	f7f0 fe6e 	bl	8000b5c <__aeabi_dcmpun>
 800fe80:	b990      	cbnz	r0, 800fea8 <sqrt+0x4a>
 800fe82:	2200      	movs	r2, #0
 800fe84:	2300      	movs	r3, #0
 800fe86:	4620      	mov	r0, r4
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f7f0 fe3f 	bl	8000b0c <__aeabi_dcmplt>
 800fe8e:	b158      	cbz	r0, 800fea8 <sqrt+0x4a>
 800fe90:	f7ff fadc 	bl	800f44c <__errno>
 800fe94:	2321      	movs	r3, #33	; 0x21
 800fe96:	6003      	str	r3, [r0, #0]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	4610      	mov	r0, r2
 800fe9e:	4619      	mov	r1, r3
 800fea0:	f7f0 fcec 	bl	800087c <__aeabi_ddiv>
 800fea4:	ec41 0b18 	vmov	d8, r0, r1
 800fea8:	eeb0 0a48 	vmov.f32	s0, s16
 800feac:	eef0 0a68 	vmov.f32	s1, s17
 800feb0:	ecbd 8b02 	vpop	{d8}
 800feb4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800feb8 <__ieee754_sqrt>:
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	ec55 4b10 	vmov	r4, r5, d0
 800fec0:	4e55      	ldr	r6, [pc, #340]	; (8010018 <__ieee754_sqrt+0x160>)
 800fec2:	43ae      	bics	r6, r5
 800fec4:	ee10 0a10 	vmov	r0, s0
 800fec8:	ee10 3a10 	vmov	r3, s0
 800fecc:	462a      	mov	r2, r5
 800fece:	4629      	mov	r1, r5
 800fed0:	d110      	bne.n	800fef4 <__ieee754_sqrt+0x3c>
 800fed2:	ee10 2a10 	vmov	r2, s0
 800fed6:	462b      	mov	r3, r5
 800fed8:	f7f0 fba6 	bl	8000628 <__aeabi_dmul>
 800fedc:	4602      	mov	r2, r0
 800fede:	460b      	mov	r3, r1
 800fee0:	4620      	mov	r0, r4
 800fee2:	4629      	mov	r1, r5
 800fee4:	f7f0 f9ea 	bl	80002bc <__adddf3>
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
 800feec:	ec45 4b10 	vmov	d0, r4, r5
 800fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef4:	2d00      	cmp	r5, #0
 800fef6:	dc10      	bgt.n	800ff1a <__ieee754_sqrt+0x62>
 800fef8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fefc:	4330      	orrs	r0, r6
 800fefe:	d0f5      	beq.n	800feec <__ieee754_sqrt+0x34>
 800ff00:	b15d      	cbz	r5, 800ff1a <__ieee754_sqrt+0x62>
 800ff02:	ee10 2a10 	vmov	r2, s0
 800ff06:	462b      	mov	r3, r5
 800ff08:	ee10 0a10 	vmov	r0, s0
 800ff0c:	f7f0 f9d4 	bl	80002b8 <__aeabi_dsub>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	f7f0 fcb2 	bl	800087c <__aeabi_ddiv>
 800ff18:	e7e6      	b.n	800fee8 <__ieee754_sqrt+0x30>
 800ff1a:	1512      	asrs	r2, r2, #20
 800ff1c:	d074      	beq.n	8010008 <__ieee754_sqrt+0x150>
 800ff1e:	07d4      	lsls	r4, r2, #31
 800ff20:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ff24:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ff28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ff2c:	bf5e      	ittt	pl
 800ff2e:	0fda      	lsrpl	r2, r3, #31
 800ff30:	005b      	lslpl	r3, r3, #1
 800ff32:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ff36:	2400      	movs	r4, #0
 800ff38:	0fda      	lsrs	r2, r3, #31
 800ff3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ff3e:	107f      	asrs	r7, r7, #1
 800ff40:	005b      	lsls	r3, r3, #1
 800ff42:	2516      	movs	r5, #22
 800ff44:	4620      	mov	r0, r4
 800ff46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ff4a:	1886      	adds	r6, r0, r2
 800ff4c:	428e      	cmp	r6, r1
 800ff4e:	bfde      	ittt	le
 800ff50:	1b89      	suble	r1, r1, r6
 800ff52:	18b0      	addle	r0, r6, r2
 800ff54:	18a4      	addle	r4, r4, r2
 800ff56:	0049      	lsls	r1, r1, #1
 800ff58:	3d01      	subs	r5, #1
 800ff5a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ff5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ff62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff66:	d1f0      	bne.n	800ff4a <__ieee754_sqrt+0x92>
 800ff68:	462a      	mov	r2, r5
 800ff6a:	f04f 0e20 	mov.w	lr, #32
 800ff6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ff72:	4281      	cmp	r1, r0
 800ff74:	eb06 0c05 	add.w	ip, r6, r5
 800ff78:	dc02      	bgt.n	800ff80 <__ieee754_sqrt+0xc8>
 800ff7a:	d113      	bne.n	800ffa4 <__ieee754_sqrt+0xec>
 800ff7c:	459c      	cmp	ip, r3
 800ff7e:	d811      	bhi.n	800ffa4 <__ieee754_sqrt+0xec>
 800ff80:	f1bc 0f00 	cmp.w	ip, #0
 800ff84:	eb0c 0506 	add.w	r5, ip, r6
 800ff88:	da43      	bge.n	8010012 <__ieee754_sqrt+0x15a>
 800ff8a:	2d00      	cmp	r5, #0
 800ff8c:	db41      	blt.n	8010012 <__ieee754_sqrt+0x15a>
 800ff8e:	f100 0801 	add.w	r8, r0, #1
 800ff92:	1a09      	subs	r1, r1, r0
 800ff94:	459c      	cmp	ip, r3
 800ff96:	bf88      	it	hi
 800ff98:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ff9c:	eba3 030c 	sub.w	r3, r3, ip
 800ffa0:	4432      	add	r2, r6
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ffa8:	f1be 0e01 	subs.w	lr, lr, #1
 800ffac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ffb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ffb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ffb8:	d1db      	bne.n	800ff72 <__ieee754_sqrt+0xba>
 800ffba:	430b      	orrs	r3, r1
 800ffbc:	d006      	beq.n	800ffcc <__ieee754_sqrt+0x114>
 800ffbe:	1c50      	adds	r0, r2, #1
 800ffc0:	bf13      	iteet	ne
 800ffc2:	3201      	addne	r2, #1
 800ffc4:	3401      	addeq	r4, #1
 800ffc6:	4672      	moveq	r2, lr
 800ffc8:	f022 0201 	bicne.w	r2, r2, #1
 800ffcc:	1063      	asrs	r3, r4, #1
 800ffce:	0852      	lsrs	r2, r2, #1
 800ffd0:	07e1      	lsls	r1, r4, #31
 800ffd2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ffd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ffda:	bf48      	it	mi
 800ffdc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ffe0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ffe4:	4614      	mov	r4, r2
 800ffe6:	e781      	b.n	800feec <__ieee754_sqrt+0x34>
 800ffe8:	0ad9      	lsrs	r1, r3, #11
 800ffea:	3815      	subs	r0, #21
 800ffec:	055b      	lsls	r3, r3, #21
 800ffee:	2900      	cmp	r1, #0
 800fff0:	d0fa      	beq.n	800ffe8 <__ieee754_sqrt+0x130>
 800fff2:	02cd      	lsls	r5, r1, #11
 800fff4:	d50a      	bpl.n	801000c <__ieee754_sqrt+0x154>
 800fff6:	f1c2 0420 	rsb	r4, r2, #32
 800fffa:	fa23 f404 	lsr.w	r4, r3, r4
 800fffe:	1e55      	subs	r5, r2, #1
 8010000:	4093      	lsls	r3, r2
 8010002:	4321      	orrs	r1, r4
 8010004:	1b42      	subs	r2, r0, r5
 8010006:	e78a      	b.n	800ff1e <__ieee754_sqrt+0x66>
 8010008:	4610      	mov	r0, r2
 801000a:	e7f0      	b.n	800ffee <__ieee754_sqrt+0x136>
 801000c:	0049      	lsls	r1, r1, #1
 801000e:	3201      	adds	r2, #1
 8010010:	e7ef      	b.n	800fff2 <__ieee754_sqrt+0x13a>
 8010012:	4680      	mov	r8, r0
 8010014:	e7bd      	b.n	800ff92 <__ieee754_sqrt+0xda>
 8010016:	bf00      	nop
 8010018:	7ff00000 	.word	0x7ff00000

0801001c <_init>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	bf00      	nop
 8010020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010022:	bc08      	pop	{r3}
 8010024:	469e      	mov	lr, r3
 8010026:	4770      	bx	lr

08010028 <_fini>:
 8010028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002a:	bf00      	nop
 801002c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801002e:	bc08      	pop	{r3}
 8010030:	469e      	mov	lr, r3
 8010032:	4770      	bx	lr
